[
  null,
  null,
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-06-05 07:58:33",
    "text": "<@U7SL518D6> is right. Have the modal in the document already. OR if you are using a custom module you can write your script in the html/hubl pane."
  },
  null,
  null,
  {
    "poster": {
      "poster_name": "asa.curry",
      "poster_handle": "asa.curry"
    },
    "time_stamp": "2018-06-05 09:11:43",
    "text": "is there a convenient parameter accessible by a custom module that can be used to give it a unique Id from other versions of itself for css purposes? Like a loop index but for multiple occurrences of a custom module on a page.",
    "reply_count": 5,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-06-05 09:16:54"
      },
      {
        "time_stamp": "2018-06-05 09:17:03"
      },
      {
        "time_stamp": "2018-06-05 09:28:41"
      },
      {
        "time_stamp": "2018-06-05 09:29:10"
      },
      {
        "time_stamp": "2018-06-05 09:29:13"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "asa.curry",
      "poster_handle": "asa.curry"
    },
    "time_stamp": "2018-06-05 09:11:55",
    "text": "Or would grouping the whole thing into a repeater be the best option"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-05 09:16:54",
    "text": "There is a variable that I unfortunately don’t remember right this second, I wanna say it’s `{{module.name}}`"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-05 09:17:03",
    "text": "that is a unique ID"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2018-06-05 09:28:41",
    "text": "that will be unique if the module is generated with a drag and drop template"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-05 09:29:10",
    "text": "ahh, so that doesn’t apply to coded templates? good to know"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2018-06-05 09:29:13",
    "text": "if you’re writing a coded template, then you have to make that the module’s first parameter is unique"
  },
  {
    "poster": {
      "poster_name": "Seth Randall",
      "poster_handle": "sethrwcs"
    },
    "time_stamp": "2018-06-05 09:37:00",
    "text": "Question: How can I break out of a for loop early using HubL?"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-06-05 09:38:11",
    "edited": {
      "time_stamp": "2018-06-05 09:38:24"
    },
    "text": "you can't, but you can add a conditional inside the loop, to manage it:\n`{% if loop.index &lt;= 10 %}`\n`{# Do your stuff here #}`\n`{% endif %}`",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-06-05 09:42:09"
      },
      {
        "time_stamp": "2018-06-05 09:42:33"
      },
      {
        "time_stamp": "2018-06-05 10:12:14"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-05 09:42:09",
    "text": "You could also create a `{% set break = 0 %}` outside of the condition and add `&amp;&amp; break != 1` to your `{% if %}` statement then for each time whatever the breaking condition is met within the conditional block... `{% set break = 1 %}`"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-05 09:42:33",
    "text": "it will then skip the rendering without having to pre-define a limit on the loop"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-05 09:46:17",
    "edited": {
      "time_stamp": "2018-06-05 09:46:53"
    },
    "text": "Enjoy <@UATSY605A> ```{% set break = 0 %}\n{% for thing in things %}\n\t{% if thing.variable == ‘match’ &amp;&amp; break != 1 %}\n\t\t{# Render stuff #}\n\t\t{% set break = 1 %}\n\t{% endif %}\n\t{% if loop.last &amp;&amp; break == 0 %}\n\t\t{# some default stuff if there’s no matches #}\n\t{% endif %}\n{% endfor %}```",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2018-06-05 09:51:35"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-05 09:51:35",
    "text": "You can speed this up even more by reducing the array size of `things`"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-06-05 10:12:14",
    "text": "sure that will depend on what you need to do"
  },
  null,
  {
    "poster": {
      "poster_name": "Nick Hinzmann",
      "poster_handle": "nick"
    },
    "time_stamp": "2018-06-05 15:14:06",
    "text": "Say I have 8 posts published on a blog, how can I skip the first 3 posts from displaying and only display posts 4, 5, 6, 7 and 8. I know I can use {% if loop.index &gt;= 4 %} to display the 4th post, but what about displaying the 5th, 6th, 7th, and 8th?"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-06-05 15:21:59",
    "text": "What you wrote should work... if loop.index is greater than or equal to four? Unless you're only pulling in four posts to begin with, that loop should keep on going."
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-05 15:24:27",
    "text": "you can also start your loop directly at a specific index <@UAHMP10RH> such as ```{% set index = 4 %}{{contents[index]}}{% set index = index|add(1) %}```"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-05 15:25:45",
    "text": "or (and this is my favorite little hack) you could batch and use the remainder... ex: ```{% set contents = contents|batch(3)|last %}```"
  },
  {
    "poster": {
      "poster_name": "Nick Hinzmann",
      "poster_handle": "nick"
    },
    "time_stamp": "2018-06-05 15:25:49",
    "text": "Maybe I should have clarified this as well - I need to paginate the posts as such: 4th, 5th, 6th, and 7th on Page 1, 8th on Page 2"
  },
  {
    "poster": {
      "poster_name": "Nick Hinzmann",
      "poster_handle": "nick"
    },
    "time_stamp": "2018-06-05 15:26:17",
    "text": "So I set my Number of Posts Per Listing Page to 4"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-05 15:26:17",
    "text": "then you want to slice"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-05 15:26:42",
    "text": "and use the page as the index of the array within the array of arrays"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-06-05 15:26:59",
    "edited": {
      "time_stamp": "2018-06-05 15:29:15"
    },
    "text": "If you want to do that, you should batch to divide them into pages first, like so:\n```{% for page in contents|batch(4) %}\n{% if loop.index &gt; 1 %}\n&lt;div class=\"page\"&gt;\n{% for content in page %}\nPrint post stuff here\n{% endfor %}\n&lt;/div&gt;\n{% endif %}\n{% endfor %}```"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-06-05 15:28:10",
    "text": "Something like that"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-06-05 15:28:49",
    "text": "Er, actually I guess you do the check against the index on the outer loop, not the inner one"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-05 15:29:38",
    "text": "you could also use direct indices as I mentioned {{contents[0:3]}} for page 1 {{contents[3:7]}} for page 2 etc"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-05 15:30:37",
    "text": "short answer = there are LOTS of ways to do what you want, it's just a matter of figuring out how you're comfortable splitting the data up and keeping the {{content}} object intact"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-05 15:32:05",
    "text": "my preferred method for rendering posts is now blog_post_by_id() and performing all logic required for generating the \"final\" list of blog post IDs elsewhere"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-05 15:32:54",
    "text": "I find that I can do a lot more array manipulation on an iterator versus a dict"
  },
  {
    "poster": {
      "poster_name": "Nick Hinzmann",
      "poster_handle": "nick"
    },
    "time_stamp": "2018-06-05 15:35:03",
    "text": "Perfect. Thanks for the help!"
  }
]