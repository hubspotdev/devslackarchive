[
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-09-14 08:41:10",
    "text": "<@U6GNQ7JBU> we resolved this in PMs (in case you were curious)"
  },
  {
    "poster": {
      "poster_name": "Remington Begg",
      "poster_handle": "remingtonbegg"
    },
    "time_stamp": "2018-09-14 10:04:44",
    "text": "Is there any plan to create a column type in HubDB that would allow multiple image selection?",
    "reply_count": 12,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2018-09-14 10:08:50"
      },
      {
        "time_stamp": "2018-09-14 10:10:30"
      },
      {
        "time_stamp": "2018-09-14 10:11:36"
      },
      {
        "time_stamp": "2018-09-14 10:12:04"
      },
      {
        "time_stamp": "2018-09-14 10:12:46"
      },
      {
        "time_stamp": "2018-09-14 10:13:36"
      },
      {
        "time_stamp": "2018-09-14 10:14:21"
      },
      {
        "time_stamp": "2018-09-14 10:16:38"
      },
      {
        "time_stamp": "2018-09-14 10:34:42"
      },
      {
        "time_stamp": "2018-09-14 10:44:29"
      },
      {
        "time_stamp": "2018-09-14 10:46:12"
      },
      {
        "time_stamp": "2018-09-14 10:55:50"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-14 10:08:50",
    "text": "it’s been suggested before. I’m definitely all for this."
  },
  {
    "poster": {
      "poster_name": "Remington Begg",
      "poster_handle": "remingtonbegg"
    },
    "time_stamp": "2018-09-14 10:10:30",
    "text": "So many potential applications, even if it just stored them in an object array... Essentially i'm trying to replicate the slider/gallery functionality with dynamic pages..."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-14 10:11:36",
    "text": "You might be able to do it by using multiple HubDBs - like 1 for just the images and you’d tag each image with the ID of the row for that’s in the other table."
  },
  {
    "poster": {
      "poster_name": "Remington Begg",
      "poster_handle": "remingtonbegg"
    },
    "time_stamp": "2018-09-14 10:12:04",
    "text": "Ulgh. True but getting a client to do that scares the shit out of me :joy:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-14 10:12:46",
    "text": "haha yea and the maintennance of it is kinda hell because it’d be like a mix of multiple galleries with images intermingled and the order there wouldn’t matter."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-14 10:13:36",
    "text": "This is kind of a really complicated seeming feature but how about this. Repeatable columns in HubDB"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-14 10:14:21",
    "text": "Then we could build our own gallery sort of thing or anything we wanted that requires being able to enter multiple items."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-14 10:16:38",
    "text": "<@U6GNQ7JBU> how would you approach this sort of thing? say a dynamic HubDB page, which needs to be able to have a repeatable field essentially or group of fields, like images for a gallery?"
  },
  {
    "poster": {
      "poster_name": "Jon Eichler",
      "poster_handle": "jeichler"
    },
    "time_stamp": "2018-09-14 10:34:42",
    "text": "Yeah I have a project where I am about to use the two table solution Luckily its for our own site and Ill be the one updating it"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-14 10:44:29",
    "text": "Best way right now is the Foreign ID route until we have a more native solution"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-14 10:46:12",
    "text": "There is a plan to support a gallery type in the future"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-14 10:55:50",
    "text": "<@U7SL518D6> the foreign table route allows you to group fields as columns"
  },
  null,
  {
    "text": "I created text fields instead to get around this for now but it would be nice to have,",
    "time_stamp": "2018-09-14 12:16:34"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-14 12:18:58",
    "text": "lol @ duke nukem"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-14 12:19:28",
    "text": "oh wait, is that DOOM guy or Wolfenstein guy?"
  },
  {
    "poster": {
      "poster_name": "Russell Benzing",
      "poster_handle": "rbenzing"
    },
    "time_stamp": "2018-09-14 12:20:21",
    "text": "Doom"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-14 12:20:50",
    "text": "Completely agree with the fact selecting more specific times is necessary"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-14 12:21:03",
    "text": "Same"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-14 12:32:24",
    "text": "Should be fixed in a few minutes"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-14 12:37:02",
    "text": "Should be 1 minute interval now <@U504BHZ6K>"
  },
  {
    "poster": {
      "poster_name": "Russell Benzing",
      "poster_handle": "rbenzing"
    },
    "time_stamp": "2018-09-14 12:37:53",
    "text": "dang <@U6GNQ7JBU> im buying more HubSpot stock now..."
  },
  {
    "poster": {
      "poster_name": "Russell Benzing",
      "poster_handle": "rbenzing"
    },
    "time_stamp": "2018-09-14 12:39:08",
    "text": "thanks for the quick turn around"
  },
  {
    "time_stamp": "2018-09-14 12:40:38",
    "text": ""
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-09-14 12:52:03",
    "text": "So... Possibly dumb HubDB question here. I have a client site we inherited that features a \"portfolio\" section of project photos. These are all defined in a bunch of gallery modules in a flex column.... defined at the page level. There's easily 200+ photos. My thought is rather than sticking a marketer or intern with a ton of data entry, I write a JS script to run in the chrome console that scrapes the page and takes the data from the HS generated HTML, populates an array, then posts that array to a HubDB table via api. Is there anything preventing me from doing this? If I'm only using the HAPI key on the client side in my browser session, there shouldn't be any security vulnerability or anything there, right? I've just never thought of doing it this way, wanted to make sure I'm not missing anything obvious.",
    "reply_count": 10,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2018-09-14 12:57:19"
      },
      {
        "time_stamp": "2018-09-14 14:00:26"
      },
      {
        "time_stamp": "2018-09-14 14:00:53"
      },
      {
        "time_stamp": "2018-09-14 14:11:13"
      },
      {
        "time_stamp": "2018-09-14 14:13:04"
      },
      {
        "time_stamp": "2018-09-14 14:13:14"
      },
      {
        "time_stamp": "2018-09-14 14:15:23"
      },
      {
        "time_stamp": "2018-09-14 15:12:41"
      },
      {
        "time_stamp": "2018-09-14 19:27:01"
      },
      {
        "time_stamp": "2018-09-17 08:49:05"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2018-09-14 12:57:19",
    "text": "sounds like a good solution to me"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-14 14:00:26",
    "text": "The API would have to post via a proxy The other way would be to create a csv in javascript. Not sure if that would be harder or not."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-14 14:00:53",
    "text": "FYI the csv would output into the console."
  },
  {
    "text": "",
    "time_stamp": "2018-09-14 14:07:43",
    "reply_count": 9,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-09-14 14:08:13"
      },
      {
        "time_stamp": "2018-09-14 14:21:46"
      },
      {
        "time_stamp": "2018-09-14 14:21:56"
      },
      {
        "time_stamp": "2018-09-14 14:52:56"
      },
      {
        "time_stamp": "2018-09-14 14:53:37"
      },
      {
        "time_stamp": "2018-09-14 14:53:46"
      },
      {
        "time_stamp": "2018-09-14 14:54:05"
      },
      {
        "time_stamp": "2018-09-14 14:54:41"
      },
      {
        "time_stamp": "2018-09-14 14:54:58"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Russell Benzing",
      "poster_handle": "rbenzing"
    },
    "time_stamp": "2018-09-14 14:08:13",
    "edited": {
      "time_stamp": "2018-09-14 14:08:47"
    },
    "text": "For some reason grouper being a string isnt formatting the date correctly"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-09-14 14:11:13",
    "text": "Why couldn't I post the API client-side via HTTP request?"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2018-09-14 14:13:04",
    "text": "<https://developers.HubSpot.com/docs/faq/do-HubSpot-apis-support-ajax-request>"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2018-09-14 14:13:14",
    "text": "only GET requests are allowed for hubdb looks like"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-09-14 14:15:23",
    "text": "ah. dammit. was just about to test lol. oh well, CSV isn't that bad"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-14 14:21:46",
    "text": "`group.grouperObject`"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-14 14:21:56",
    "text": "What is it returning?"
  },
  null,
  null,
  {
    "poster": {
      "poster_name": "Russell Benzing",
      "poster_handle": "rbenzing"
    },
    "time_stamp": "2018-09-14 14:52:56",
    "text": "nothing"
  },
  {
    "poster": {
      "poster_name": "Russell Benzing",
      "poster_handle": "rbenzing"
    },
    "time_stamp": "2018-09-14 14:53:37",
    "text": "(Long: 1539129600000)"
  },
  {
    "poster": {
      "poster_name": "Russell Benzing",
      "poster_handle": "rbenzing"
    },
    "time_stamp": "2018-09-14 14:53:46",
    "text": "that would work"
  },
  {
    "poster": {
      "poster_name": "Russell Benzing",
      "poster_handle": "rbenzing"
    },
    "time_stamp": "2018-09-14 14:54:05",
    "text": "so grouper outputs string but Object does the var type"
  },
  {
    "text": "",
    "time_stamp": "2018-09-14 14:54:41"
  },
  {
    "poster": {
      "poster_name": "Russell Benzing",
      "poster_handle": "rbenzing"
    },
    "time_stamp": "2018-09-14 14:54:58",
    "text": "{{ row.grouper|pprint }} {{ row.grouperObject|pprint }}"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-09-14 15:12:41",
    "text": "As an update, CSV method worked great, now I have one huge ass gallery to loop through lol. Thanks for the help guys!"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-09-14 16:00:31",
    "text": "Anyone have a snippet or know where documentation may be for the JS HubDB method? Of course now that I have a use-case, I can't find the syntax anywhere :persevere:",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-09-14 17:05:02"
      },
      {
        "time_stamp": "2018-09-17 07:03:35"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-14 17:05:02",
    "text": "It’s pinned to the <#CBA9UA4EN|javascript> channel"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2018-09-14 19:27:01",
    "text": "nice!"
  }
]