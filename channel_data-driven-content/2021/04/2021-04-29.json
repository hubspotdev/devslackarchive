[
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2021-04-29 08:58:55",
    "text": "Hey, HubSpot. Will drag and drop ordering of HubDB rows ever be a thing? It's one of the most requested items from our clients and marketing team who use the tool. The order column solution works, but is a clunky UX IMO, especially with large tables, when adding new rows. Use cases are plenty, from simple things like a team managed in HubDB, where you want the people listed in a specific order. To more advanced tables like products, where you want popular products listed first. Tell me like it is HubSpot, :grin: will drag and drop rows for ordering ever be a thing?",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2021-04-29 09:56:41"
      },
      {
        "time_stamp": "2021-05-14 05:38:25"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2021-04-29 09:56:41",
    "text": "True. Drag and drop may get less useful with really large tables, but I think it's still better than an order column. As for the bulk editor, that would be great as well. I see a lot of use cases there. Sortable tables via the GUI would be slick too...click a column heading and the rows would sort (asc/desc) for selected column."
  },
  {
    "poster": {
      "poster_name": "Jonathan Stanis",
      "poster_handle": "jstanis"
    },
    "time_stamp": "2021-04-29 14:22:55",
    "text": "I have a HubDB table that powers a form on a landing page. It is having an issue that it still shows the forms default response text even though it is replaced via the HubDB table with new text. The developer info even shows the new text to use. <https://www.springsapartments.com/apartments/fl/cape-coral/springs-at-cape-coral/social-lp?hsCacheBuster=2423>"
  },
  {
    "poster": {
      "poster_name": "Jonathan Stanis",
      "poster_handle": "jstanis"
    },
    "time_stamp": "2021-04-29 14:23:17",
    "text": "I have another lp that uses the same module, most of the template is the same, and it works fine. <https://www.springsapartments.com/apartments/tx/rosenberg/springs-at-summer-park/social-lp>"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2021-04-29 14:26:01",
    "text": "The issue is it isn't using your defined ty responses?"
  },
  {
    "poster": {
      "poster_name": "Jonathan Stanis",
      "poster_handle": "jstanis"
    },
    "time_stamp": "2021-04-29 14:26:36",
    "text": "Yes. It just shows the message from the form, not the HubDB table."
  },
  {
    "poster": {
      "poster_name": "Will Brueske",
      "poster_handle": "will.brueske"
    },
    "time_stamp": "2021-04-29 14:37:07",
    "text": "Is there any in-depth documentation of <https://developers.HubSpot.com/docs/cms/hubl/filters#selectattr||selectattr(attribute_name, exp_test, val)> as it pertains to filtering HubDB rows?  The <https://developers.HubSpot.com/docs/cms/features/hubdb|HubDB page> isn't all that helpful, except to infer that the `exp_test` options aren't the same as what's in the <https://legacydocs.HubSpot.com/docs/methods/hubdb/v2/get_table_rows|HubDB API> documentation.  Specifically I'm looking for how to filter multiselect columns (at the moment, but probably other column types soon).",
    "reply_count": 6,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2021-04-29 16:22:53"
      },
      {
        "time_stamp": "2021-04-29 17:13:30"
      },
      {
        "time_stamp": "2021-04-29 17:18:26"
      },
      {
        "time_stamp": "2021-04-29 17:18:31"
      },
      {
        "time_stamp": "2021-04-29 17:20:13"
      },
      {
        "time_stamp": "2021-04-29 17:24:07"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2021-04-29 16:22:53",
    "text": "So selectattr is just used for filtering an array of objects - you can pprint the row to see the structure (but really it’s just the column name)\n\nselectattr, if you’re familiar with javascript is essentially .filter and the expressions are callbacks which perform simple tests.\n\nSupported expressions - <https://developers.HubSpot.com/docs/cms/hubl/operators-and-expression-tests#expression-tests>"
  },
  {
    "poster": {
      "poster_name": "Will Brueske",
      "poster_handle": "will.brueske"
    },
    "time_stamp": "2021-04-29 17:13:30",
    "text": "Unfortunately most of those expressions flat out don't work with selectattr, and the ones you'd expect to work (such as 'containing') don't produce an error, but don't provide results either.  I don't think selectattr works with multiselect columns.\n\nOrdinarily I'd do a filter query with hubdb_table_rows(), but I can't do that here because of the 10 calls per page limitation."
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2021-04-29 17:18:26",
    "edited": {
      "time_stamp": "2021-04-29 17:23:13"
    },
    "text": "I imagine selectattr doesnt do anything special, so you could just iterate through the array and use .append"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2021-04-29 17:18:31",
    "text": "e.g."
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2021-04-29 17:20:13",
    "edited": {
      "time_stamp": "2021-04-29 17:22:19"
    },
    "text": "```{% set rows = hubdb_table_rows(\"table\") %}\n{% set filtered = [] %}\n\n{% for row in rows %}\n  {% if item.column is containing 5 %}\n   {% do filtered.append(row) %}\n  {% endif %}\n{% endfor %}\n\n{{ filtered | pprint }}```"
  },
  {
    "poster": {
      "poster_name": "Will Brueske",
      "poster_handle": "will.brueske"
    },
    "time_stamp": "2021-04-29 17:24:07",
    "text": "Yeah, that's a good workaround.  Thanks!"
  }
]