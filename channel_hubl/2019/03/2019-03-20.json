[
  {
    "poster": {
      "poster_name": "Akin Ekici",
      "poster_handle": "akin.ekici"
    },
    "time_stamp": "2019-03-20 07:06:41",
    "edited": {
      "time_stamp": "2019-03-20 07:07:14"
    },
    "text": "Hi, can I get the receivers email adress in an email template, I want to write \"This email was sent to xxxx@xxxx. If you wish to manage your subscription....\"",
    "reply_count": 9,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2019-03-20 07:11:13"
      },
      {
        "time_stamp": "2019-03-20 07:15:51"
      },
      {
        "time_stamp": "2024-01-18 16:23:02"
      },
      {
        "time_stamp": "2024-01-19 05:48:21"
      },
      {
        "time_stamp": "2024-01-19 06:59:22"
      },
      {
        "time_stamp": "2024-01-19 07:03:39"
      },
      {
        "time_stamp": "2024-01-19 07:05:07"
      },
      {
        "time_stamp": "2024-01-19 07:08:40"
      },
      {
        "time_stamp": "2024-01-19 07:12:45"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-03-20 07:11:13",
    "text": "You can just use the contact tokens since they will be filled in with who you send the email to.  In this case you’ll want `{{contact.email}}`"
  },
  {
    "poster": {
      "poster_name": "Akin Ekici",
      "poster_handle": "akin.ekici"
    },
    "time_stamp": "2019-03-20 07:15:51",
    "text": "Thank you"
  },
  {
    "text": "",
    "time_stamp": "2019-03-20 11:40:38"
  },
  {
    "poster": {
      "poster_name": "Ryan Noon",
      "poster_handle": "ryan.noon"
    },
    "time_stamp": "2019-03-20 11:40:43",
    "text": "Hi everyone..."
  },
  {
    "poster": {
      "poster_name": "Ryan Noon",
      "poster_handle": "ryan.noon"
    },
    "time_stamp": "2019-03-20 11:41:50",
    "text": "I've been given this design and I'm struggling to replicate the view more with repeater fields\nIs there a way I can say - display 8 items, after 8 items reveal the rest on click?"
  },
  {
    "poster": {
      "poster_name": "Ryan Noon",
      "poster_handle": "ryan.noon"
    },
    "time_stamp": "2019-03-20 11:42:04",
    "text": "Or at least split up the repeater with conditionals?"
  },
  {
    "poster": {
      "poster_name": "Ryan Noon",
      "poster_handle": "ryan.noon"
    },
    "time_stamp": "2019-03-20 11:42:30",
    "text": "```\n&lt;ul class=\"o-list-inline d-flex flex-wrap justify-content-center\"&gt;\n\t\t\t\t\t\t\t{% for item in module.advanced_course %}\n\t\t\t\t\t\t\t  &lt;li class=\"o-list-inline-item text-center m-3 p-4 c-course-item\"&gt;\n\t\t\t\t\t\t\t    &lt;h4 class=\"mb-4 pb-3\" style=\"border-bottom: 1px solid {{ module.theming.course_title_color.color }}; color: {{ module.theming.course_title_color.color }};\"&gt;{{ item.title }}&lt;/h4&gt;\n\t\t\t\t\t\t\t\t\t&lt;div class=\"pb-3\"&gt;{{ item.text }}&lt;/div&gt;\n\t\t\t\t\t\t\t\t\t&lt;a href=\"{{ item.link_url }}\" style=\"color: {{ module.theming.course_title_color.color }}; font-weight: bold;\"&gt;{{ item.link_text }} &lt;i class=\"fas fa-chevron-right c-fa-icon-bg c-fa-icon-bg-sm\" style=\"margin-left: 5px;\"&gt;&lt;/i&gt;&lt;/a&gt;\n\t\t\t\t\t\t\t  &lt;/li&gt;\n\t\t\t\t\t\t\t{% endfor %}\n\t\t\t\t\t\t&lt;/ul&gt;\n```"
  },
  {
    "poster": {
      "poster_name": "Ryan Noon",
      "poster_handle": "ryan.noon"
    },
    "time_stamp": "2019-03-20 11:42:36",
    "text": "Current hubl"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-03-20 11:52:50",
    "text": "We added a `menu()` function to HubL to support custom markup for building advanced menus: <https://designers.HubSpot.com/en/docs/hubl/hubl-supported-functions#menu>",
    "reply_count": 6,
    "reply_users_count": 5,
    "replies": [
      {
        "time_stamp": "2019-03-20 12:00:58"
      },
      {
        "time_stamp": "2019-03-20 14:11:23"
      },
      {
        "time_stamp": "2019-03-20 14:38:38"
      },
      {
        "time_stamp": "2019-03-20 14:39:02"
      },
      {
        "time_stamp": "2019-03-20 20:38:17"
      },
      {
        "time_stamp": "2019-03-22 17:17:42"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-20 12:00:58",
    "text": "writing up a blog post on how to use it to make simple menus and mega menus :wink: happy to guest post it to HS blog. Otherwise I’ll post it elsewhere :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-20 12:06:12",
    "text": "So let's circle back on what <@U7SL518D6> mentioned in another channel, being able to use hubl in the blog template. Jon, are you saying we cant do that anymore?"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-20 12:06:27",
    "text": "like in the post listing and post loop."
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-20 12:06:38",
    "text": "or even custom coded blog templates",
    "reply_count": 19,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2019-03-20 12:08:07"
      },
      {
        "time_stamp": "2019-03-20 12:09:53"
      },
      {
        "time_stamp": "2019-03-20 12:11:41"
      },
      {
        "time_stamp": "2019-03-20 12:20:16"
      },
      {
        "time_stamp": "2019-03-20 12:22:13"
      },
      {
        "time_stamp": "2019-03-20 12:23:21"
      },
      {
        "time_stamp": "2019-03-20 12:24:27"
      },
      {
        "time_stamp": "2019-03-20 12:25:42"
      },
      {
        "time_stamp": "2019-03-20 12:26:28"
      },
      {
        "time_stamp": "2019-03-20 12:26:52"
      },
      {
        "time_stamp": "2019-03-20 12:27:05"
      },
      {
        "time_stamp": "2019-03-20 12:27:16"
      },
      {
        "time_stamp": "2019-03-21 13:15:40"
      },
      {
        "time_stamp": "2019-03-21 13:17:32"
      },
      {
        "time_stamp": "2019-03-21 13:18:59"
      },
      {
        "time_stamp": "2019-03-21 13:21:33"
      },
      {
        "time_stamp": "2019-03-21 13:39:15"
      },
      {
        "time_stamp": "2019-03-21 15:41:52"
      },
      {
        "time_stamp": "2019-03-21 15:50:37"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jason Rosa",
      "poster_handle": "jasonrosa"
    },
    "time_stamp": "2019-03-20 12:08:07",
    "text": "I think it is more that you can't use nested HubL tags/modules within the default blog content module without cloning the blog content module and creating your own custom module for it from what I understood."
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-20 12:09:53",
    "text": "ah ok"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-20 12:11:41",
    "text": "it is that but you still couldn’t do it with cloning the blog content module, not really"
  },
  {
    "poster": {
      "poster_name": "Jason Rosa",
      "poster_handle": "jasonrosa"
    },
    "time_stamp": "2019-03-20 12:20:16",
    "edited": {
      "time_stamp": "2019-03-20 12:20:22"
    },
    "text": "Ahh got it. Understood more from your example in the ideas forum here (<https://community.HubSpot.com/t5/HubSpot-Ideas/Add-back-support-for-the-use-of-HubL-tags-inside-of-the-blog/idi-p/259774#M31488>)"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-20 12:22:13",
    "text": "yea, see that could be propblematic for really making a custom blog templateand adding things to it (like toggles or in Jon's case a social sharing widget)."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-20 12:23:21",
    "text": "yea, it messes up a lot of things that we’ve been doing for a long time with blog templates, and not in a  - “there’s a better way do this instead” kinda way"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-20 12:24:27",
    "text": "Yea, i know i've been working on a custom module for creating additional authors on posts but if we can't include CM's in there anymore, thats going to break that one right away and limit what we plan to do"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-20 12:25:42",
    "text": "yea, currently the only solution is to use a coded template instead."
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-20 12:26:28",
    "text": "well i guess thats one way to do it (as we would need to do this for what we are working on anyways) but that makes it harder then for when end users want to do stuff in there like you mentioned."
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-20 12:26:52",
    "text": "Was there any update on using flexible columns in the blog post content area?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-20 12:27:05",
    "text": "AJ let me send you something on that"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-20 12:27:16",
    "text": ":+1:"
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2019-03-20 13:58:52",
    "text": "Hey. I'm looking for a way to display blog posts that include multiple tags. For example if there was a blog post that had both Tag 1 *and* Tag 2 - it would display. If the blog post had only Tag 1, it would not display. Any ideas?"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2019-03-20 13:59:53",
    "text": "```\n{% for topic in content.topic_list %}\n\t&lt;div class=\"tag\"&gt;\n\t\t&lt;a href=\"{{ group.absolute_url }}/topic/{{ topic.slug }}\"&gt;{{ topic.name }}&lt;/a&gt;\n\t&lt;/div&gt;\n{% endfor %}\n```"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2019-03-20 14:00:17",
    "text": "<@UB690RZA7> something like that? ^"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2019-03-20 14:02:40",
    "text": "oh I read that completly wrong."
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2019-03-20 14:02:53",
    "text": "I would need to list only the blogs that contain both Tag 1 and Tag 2."
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2019-03-20 14:07:09",
    "text": "```{% set tag = module.tag|capitalize  %}\n{% set subTag = module.sub_tag|capitalize %}\n\n{% set blog_one_posts = blog_recent_topic_posts('default', tag, 99) %}\n{% set blog_two_posts = blog_recent_topic_posts('default', subTag, 99) %}\n\n{% set all_posts = (blog_one_posts + blog_two_posts) %}\n\n{% for post in all_posts %}\n{% set tags = post.tag_list %}\n{% if tags is containingall [tag, subTag] %}\n&lt;a href=\"{{ post.absolute_url }}\"&gt;{{ post.name }}&lt;/a&gt;\n{% endif %}\n{% endfor %}```"
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2019-03-20 14:07:48",
    "text": ":point_up:this is where i'm currently at, but its not working as expected."
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2019-03-20 14:08:16",
    "edited": {
      "time_stamp": "2019-03-20 14:08:56"
    },
    "text": "Hmm, yeah thats what I was going to suggest"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2019-03-20 14:10:09",
    "text": "dont think you need the `{% if tags is containingall [tag, subTag] %}`. Just looping through `all_posts ` should work"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-03-20 14:11:23",
    "text": "THANK YOU!!!!!!"
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2019-03-20 14:11:28",
    "text": "that pulls in blogs that contain either or, not both. so very close! i need the list to pull blogs that have both.",
    "reply_count": 5,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-03-20 14:14:00"
      },
      {
        "time_stamp": "2019-03-20 14:21:45"
      },
      {
        "time_stamp": "2019-03-20 14:25:58"
      },
      {
        "time_stamp": "2019-03-20 14:26:08"
      },
      {
        "time_stamp": "2019-03-20 14:28:23"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-03-20 14:14:00",
    "text": "`containingall` should give you the ones that contain both <https://designers.HubSpot.com/docs/hubl/operators-and-expression-tests#containingall>"
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2019-03-20 14:21:45",
    "text": "Is the issues that *tags* is an object and the containingall expression test only works on sequences?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-03-20 14:25:58",
    "text": "`tags|attr(\"name\")`"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-03-20 14:26:08",
    "text": "Or ID if it being done by Tag ID"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-03-20 14:28:23",
    "text": "`tags` is a list of `tag` objects that have several attributes"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-03-20 14:38:38",
    "text": "<@U6GNQ7JBU> You have no idea how happy you've made me."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-20 14:39:02",
    "text": "ditto Mark’s comment"
  },
  {
    "poster": {
      "poster_name": "Joe Olsen",
      "poster_handle": "joe.olsen"
    },
    "time_stamp": "2019-03-20 18:00:25",
    "edited": {
      "time_stamp": "2019-03-20 18:00:31"
    },
    "text": "Hi everyone! First post!!"
  },
  {
    "poster": {
      "poster_name": "Joe Olsen",
      "poster_handle": "joe.olsen"
    },
    "time_stamp": "2019-03-20 18:02:34",
    "text": "Is there a good ref for simple stuff? Ie. I am trying to map an img src to a module input and I am getting some unexpected behavior."
  },
  {
    "poster": {
      "poster_name": "Joe Olsen",
      "poster_handle": "joe.olsen"
    },
    "time_stamp": "2019-03-20 18:02:50",
    "text": "The HubSpot docs are not super helpful :disappointed:"
  },
  {
    "poster": {
      "poster_name": "Joe Olsen",
      "poster_handle": "joe.olsen"
    },
    "time_stamp": "2019-03-20 18:03:14",
    "text": "Or maybe I am terrible at navigating them :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Joel Warren",
      "poster_handle": "joel"
    },
    "time_stamp": "2019-03-20 18:31:46",
    "text": "This is the best place <@UH6SMES78> <https://designers.HubSpot.com/docs/hubl/intro-to-hubl> but feel free to be more specific about your issue and I or someone else might be able to help",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-03-22 17:21:43"
      },
      {
        "time_stamp": "2019-03-23 13:09:37"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Joe Olsen",
      "poster_handle": "joe.olsen"
    },
    "time_stamp": "2019-03-20 18:32:13",
    "edited": {
      "time_stamp": "2019-03-20 18:32:21"
    },
    "text": "Thanks <@UDARG2NKZ>"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-03-20 20:38:17",
    "text": "<https://giphy.com/gifs/clasharama-art-zmRa0J4k30faE>"
  }
]