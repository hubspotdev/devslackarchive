[
  null,
  null,
  null,
  null,
  null,
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-10-09 08:52:21",
    "text": "I have another issue with the fromjson filter.\nThis is my custom module code:\n```\n&lt;b&gt;Output data from custom field:&lt;/b&gt;\n&lt;br&gt;\n{{ contact.parag_test_json_field }}\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;b&gt;Output results of fromjson filter: &lt;/b&gt;&lt;br&gt;\n{% if contact.parag_test_json_field %}\n{% set myjson = contact.parag_test_json_field|fromjson %}\n---start--- {{ myjson }} ---end---\n{% endif %}\n\n```"
  },
  {
    "text": "",
    "time_stamp": "2018-10-09 08:52:54"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-10-09 08:53:05",
    "text": "thats the output i see in the email"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-10-09 08:53:37",
    "text": "not sure why, but the fromjson filter just returns an empty string"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-10-09 08:59:55",
    "text": "Can you post a test string?"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-10-09 09:01:07",
    "text": "```\n{\n\t\"menu\": {\n\t\t\"header\": \"SVG Viewer\",\n\t\t\"items\": [{\n\t\t\t\t\"id\": \"Open\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"id\": \"OpenNew\",\n\t\t\t\t\"label\": \"Open New\"\n\t\t\t},\n\t\t\tnull,\n\t\t\t{\n\t\t\t\t\"id\": \"ZoomIn\",\n\t\t\t\t\"label\": \"Zoom In\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"id\": \"ZoomOut\",\n\t\t\t\t\"label\": \"Zoom Out\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"id\": \"OriginalView\",\n\t\t\t\t\"label\": \"Original View\"\n\t\t\t}\n\t\t]\n\t}\n}\n```",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-10-09 09:04:53"
      },
      {
        "time_stamp": "2018-10-09 09:05:19"
      },
      {
        "time_stamp": "2018-10-09 09:06:20"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-10-09 09:04:53",
    "text": "just curious what are you building?  based on this code it looks like something pretty cool"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-10-09 09:05:19",
    "text": "haha, just sample json"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-10-09 09:06:20",
    "edited": {
      "time_stamp": "2018-10-09 09:06:56"
    },
    "text": "ahh, just looked like you were making some kinda react/vue app or something with an svg editor or something based on the json data"
  },
  {
    "text": "",
    "time_stamp": "2018-10-09 09:11:29"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-10-09 09:11:37",
    "text": "Works fine for me"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-10-09 09:15:42",
    "text": "yeah, it works fine if the json is IN the custom module"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-10-09 09:15:59",
    "text": "but if i read from a contact field, it doesn’t work"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-10-09 09:16:12",
    "text": "let me try escaping the json though"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-10-09 09:19:14",
    "text": "I used that exact same json in the contact field and re-ran the preview for my contact, and it doesn’t work",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-10-09 09:23:20"
      },
      {
        "time_stamp": "2018-10-09 09:24:36"
      },
      {
        "time_stamp": "2018-10-09 12:53:55"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-10-09 09:23:20",
    "text": "Is the contact property a string?"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-10-09 09:24:36",
    "text": "multi line text field"
  },
  null,
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-10-09 09:54:30",
    "text": "This question is probably more appropriate in HubL than HubDB."
  },
  {
    "poster": {
      "poster_name": "Rob Schall",
      "poster_handle": "rschall"
    },
    "time_stamp": "2018-10-09 12:44:47",
    "text": "Question on how to handle query strings when searching hubdb (this is a mixed hubl and hubdb question). If you have more than one word to search for, there appears to be an issue... here's my code...\n```hubdb_table_rows(module.product_images_db, \"&amp;product_name__icontains=\"~request.query_dict.q)```\nWhen I search for a single word, it works great. When I search for 2 words separated by a space, it doesn't work. If I replace the query string and hard code the 2 words in, it works. That makes me think its reading in the \"+\" seperator. So my next thought was to use the replace in the documentation like this ```hubdb_table_rows(module.product_images_db, \"&amp;product_name__icontains=\"~request.query_dict.q|replace('+',' ') )```"
  },
  {
    "poster": {
      "poster_name": "Rob Schall",
      "poster_handle": "rschall"
    },
    "time_stamp": "2018-10-09 12:45:13",
    "text": "But this still isn't fixing the issue. Has anyone run into this issue and know how to get it to search for multiple words in a query string?"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-10-09 12:53:55",
    "text": "any luck <@U6GNQ7JBU>?"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-10-09 13:41:04",
    "text": "<@U6GNQ7JBU> :point_up:"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-10-09 13:41:33",
    "text": "We are working on a better search option for HubDB data"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-10-09 13:42:03",
    "text": "Best case would be split, query first word. If &lt; limit, query second word, and so forth"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-10-09 13:42:20",
    "text": "Or use content search"
  },
  {
    "poster": {
      "poster_name": "Rob Schall",
      "poster_handle": "rschall"
    },
    "time_stamp": "2018-10-09 13:51:20",
    "text": "so you'd need to loop through each word, search on each one, then output the results for each? That would get pretty messy because you'd need to merge the result setups all back together and then sort."
  },
  {
    "poster": {
      "poster_name": "Rob Schall",
      "poster_handle": "rschall"
    },
    "time_stamp": "2018-10-09 13:52:22",
    "text": "if you didn't want to search for each term on its own, and rather say \"does this column contain these 2 words in exactly this order\".... so not \"any of these words\", but instead \"all of these words\""
  },
  {
    "poster": {
      "poster_name": "Rob Schall",
      "poster_handle": "rschall"
    },
    "time_stamp": "2018-10-09 13:53:22",
    "text": "usually when you search google, etc, you'd just wrap it in  quotes. Could you do something like that for now? Is that something that could be a quick fix added to the functionality while you work out something more comprehensive?"
  },
  {
    "poster": {
      "poster_name": "Rob Schall",
      "poster_handle": "rschall"
    },
    "time_stamp": "2018-10-09 13:56:32",
    "text": "The other thing that's odd, is why would you need to split and search each word if you can hard code those terms into the query? Its only when you use the query string that this issue arises. So if that's the case, I'm guessing if I split up the query string and then merge them back together in a single string (concat them), that would be the same, no?"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-10-09 13:58:29",
    "text": "Try using the `urlencode` filter instead of `replace`"
  },
  {
    "poster": {
      "poster_name": "Rob Schall",
      "poster_handle": "rschall"
    },
    "time_stamp": "2018-10-09 14:01:05",
    "text": "Nice <@U3A4KEWK1>!!!! That did it. I have a small thing to clean up... but 100% gives me back the \"AND\" i'm looking for."
  },
  null
]