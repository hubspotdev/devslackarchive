[
  null,
  null,
  {
    "poster": {
      "poster_name": "Jon Leibham",
      "poster_handle": "jon282"
    },
    "time_stamp": "2017-10-11 08:48:17",
    "edited": {
      "time_stamp": "2017-10-11 08:52:27"
    },
    "text": "Hey everyone, I'm trying to organize a DB query by date entered in one of my table columns. I looked through the documentation but didn't find a clear solution on how to do this. I it looked like I could attached a &lt;filterQuery&gt; option of  `orderBy='column_variable' ` into my `{% set table = hubdb_table_rows(673755, queryparam)%}` but couldn't find a way to get this to work. Has anyone set up something similar?"
  },
  {
    "poster": {
      "poster_name": "Jon Leibham",
      "poster_handle": "jon282"
    },
    "time_stamp": "2017-10-11 08:49:13",
    "text": "my final hubl header for the db query was `{% set table = hubdb_table_rows(673755, queryparam, orderBy=event_date)%}`"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-10-11 09:52:02",
    "text": "The `hubdb_table_rows` function only takes 2 arguments I'm pretty sure"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-10-11 09:52:26",
    "text": "It should be something like `hubdb_table_rows(673755, 'orderBy=event_date')`",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2017-10-11 11:09:55"
      }
    ]
  },
  {
    "subtype": "thread_broadcast",
    "time_stamp": "2017-10-11 10:19:52",
    "text": "This was an issue yesterday for static files in the file manager."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-10-11 10:22:04",
    "text": "hubdb_table_rows(673755, ‘&amp;orderBy=event_date’)",
    "reply_count": 5,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2017-10-11 11:10:41"
      },
      {
        "time_stamp": "2017-10-11 11:37:01"
      },
      {
        "time_stamp": "2017-10-11 11:37:34"
      },
      {
        "time_stamp": "2017-10-11 12:39:58"
      },
      {
        "time_stamp": "2017-10-11 15:05:28"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon Leibham",
      "poster_handle": "jon282"
    },
    "time_stamp": "2017-10-11 11:09:55",
    "text": "Thank you! Could have sworn I tried this too but maybe I had a syntax error."
  },
  {
    "poster": {
      "poster_name": "Jon Leibham",
      "poster_handle": "jon282"
    },
    "time_stamp": "2017-10-11 11:10:41",
    "text": "Thank you! Can you tell me the significance for having the &amp; in there? It looks like it works both with and without."
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-10-11 11:37:01",
    "text": "You can use ampersands to chain queries together, but it's not necessary on the first one"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-10-11 11:37:34",
    "text": "So you can do a query like `orderBy=event_date&amp;foo=bar`, or whatever"
  },
  {
    "poster": {
      "poster_name": "Jon Leibham",
      "poster_handle": "jon282"
    },
    "time_stamp": "2017-10-11 12:39:58",
    "text": "Ah got it, thanks Ian."
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2017-10-11 15:05:28",
    "text": "Also, you don’t need to start with an `&amp;`"
  }
]