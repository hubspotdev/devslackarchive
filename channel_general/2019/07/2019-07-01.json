[
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2019-07-01 08:40:16",
    "text": "Not much we can do about those if they’re not hosted by HubSpot"
  },
  {
    "poster": {
      "poster_name": "Maia Singletary",
      "poster_handle": "msingletary"
    },
    "time_stamp": "2019-07-01 12:04:26",
    "text": "Ah ok, so this lets me search tags, what I really want to do is filter the results so only results within a specific tag are returned. Possible?"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2019-07-01 12:13:55",
    "text": "I could really use some advise on this bit of conditional logic I’m struggling to write for a global custom module.\n\nBasically, I’m try to create a LOOP so that I can add multiple translated advanced menus that key off of the content.slug.\n\nThe loop works great! No problem there.  The issue I’m having is that I can’t figure out how to write the logic in a way that will show my “Standard non-translated menu” when a visitor is on a non-translated page.   (ie.  <http://HubSpot.com|HubSpot.com>  vs. <http://HubSpot.com/fr/|HubSpot.com/fr/>  )\n\nHere is the logic I have so far.\n\n``` {% for item in module.menu.translated_menus %}\n        {% if (content.slug is string_startingwith item.lang_url || content.slug == \"item.lang_url\") %}\n           {% menu id=\"{{ item.menu_translated }}\" %}\n        {% endif %}\n     {% endfor %}```\n\nI’m not sure how I can included this when a user is on (ie. <http://HubSpot.com|HubSpot.com>)\n\n```{% menu id=\"{{ module.menu.main_standard }}\" %}```\n\nAny ideas would be massively appreciated. I think I’ve pulled all my hair out. :slightly_smiling_face:",
    "reply_count": 20,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-07-01 12:23:26"
      },
      {
        "time_stamp": "2019-07-01 13:06:56"
      },
      {
        "time_stamp": "2019-07-01 14:04:37"
      },
      {
        "time_stamp": "2019-07-01 14:41:10"
      },
      {
        "time_stamp": "2019-07-01 14:43:20"
      },
      {
        "time_stamp": "2019-07-01 15:05:15"
      },
      {
        "time_stamp": "2019-07-01 15:25:11"
      },
      {
        "time_stamp": "2019-07-01 15:26:47"
      },
      {
        "time_stamp": "2019-07-01 15:36:23"
      },
      {
        "time_stamp": "2019-07-01 15:41:28"
      },
      {
        "time_stamp": "2019-07-01 15:46:16"
      },
      {
        "time_stamp": "2019-07-01 15:54:04"
      },
      {
        "time_stamp": "2019-07-01 15:55:02"
      },
      {
        "time_stamp": "2019-07-01 15:55:49"
      },
      {
        "time_stamp": "2019-07-01 15:56:21"
      },
      {
        "time_stamp": "2019-07-01 15:56:27"
      },
      {
        "time_stamp": "2019-07-01 16:44:15"
      },
      {
        "time_stamp": "2019-07-01 17:04:13"
      },
      {
        "time_stamp": "2019-07-01 17:27:27"
      },
      {
        "time_stamp": "2019-07-01 17:29:20"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jason Ng",
      "poster_handle": "jason.ng"
    },
    "time_stamp": "2019-07-01 12:21:49",
    "text": "Is HubSpot down today?",
    "reply_count": 10,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2019-07-01 12:22:53"
      },
      {
        "time_stamp": "2019-07-01 13:19:04"
      },
      {
        "time_stamp": "2019-07-01 13:19:14"
      },
      {
        "time_stamp": "2019-07-01 13:31:26"
      },
      {
        "time_stamp": "2019-07-01 14:06:20"
      },
      {
        "time_stamp": "2019-07-02 07:46:03"
      },
      {
        "time_stamp": "2019-07-02 07:46:42"
      },
      {
        "time_stamp": "2019-07-02 07:47:54"
      },
      {
        "time_stamp": "2019-07-02 07:48:48"
      },
      {
        "time_stamp": "2019-07-02 07:49:02"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-07-01 12:22:53",
    "text": "It’s fine for me, what are you seeing?"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-07-01 12:23:26",
    "text": "Hey <@UA5DFM7CK> This may be really dumb but could you use an `else` statement here?"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2019-07-01 13:06:56",
    "text": "Hey <@UFBNA9K9A>!  Since the loop can contain multiple navs, if I just use an {% else %} then I could potentially have multiple of my standard navs visible."
  },
  {
    "poster": {
      "poster_name": "Jason Ng",
      "poster_handle": "jason.ng"
    },
    "time_stamp": "2019-07-01 13:19:04",
    "text": "error when updating a page"
  },
  {
    "poster": {
      "poster_name": "Jason Ng",
      "poster_handle": "jason.ng"
    },
    "time_stamp": "2019-07-01 13:19:14",
    "text": "several times but if it's fine then it must be an isolated case"
  },
  {
    "poster": {
      "poster_name": "George Carless",
      "poster_handle": "george432"
    },
    "time_stamp": "2019-07-01 13:31:26",
    "text": "I've been seeing errors when updating a page, too (although it seems to save ok)"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-07-01 14:04:37",
    "text": "Ah ok. Then what is the business logic (forgetting code for a second) that determines which of the standard navs should display?"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-07-01 14:06:20",
    "text": "<@UEFM5P9PV> I haven’t seen any other reports of that but if you are still seeing that, you should definitely let our support team know.  Just because it’s isolated, doesn’t mean it’s not a problem"
  },
  {
    "text": "<@UFBNA9K9A> Here is the business logic I’m trying to write but having trouble when using a loop.\n```\nIf the URL starts with \"fr/\"\n    show french menu\n\nor if the url starts with \"es/\"\n    show the spanish menu\n\nelse\n   show the standard menu```\n\nDoes that make sense?",
    "time_stamp": "2019-07-01 14:41:10"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-07-01 14:43:20",
    "text": "The part I’m missing is when you have multiple navs, how do you know which one to display?"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2019-07-01 15:05:15",
    "text": "<@UFBNA9K9A> here is a quick screen recording to explain better.  The way I’m currently determining is based on the URL string.\n\nie.  <http://HubSpothero.com/FR/|HubSpothero.com/FR/>  will show the french nav.\n\n<https://www.loom.com/share/d5c1ac68b5414899ad0c8b44a5a0016a>"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-07-01 15:25:11",
    "text": "ok that video was super helpful.  I _think_ I have something for you.  There is a HubL function `{{i18n_getlanguage()}}` that will spit out the two letter code that you are asking for, so you don’t need to rely on the URL if you don’t want to. This way, there is always some value set for the language (it defaults to `en`) so that you don’t have the situation where you are in now where this is no country code in the URL"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-07-01 15:26:47",
    "text": "another hackier way IMO is to see if you are in the last iteration of the loop and return the default menu if no matches have been made, the positive is that it doesn’t require changes to your current field grouping"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2019-07-01 15:36:23",
    "edited": {
      "time_stamp": "2019-07-01 15:36:40"
    },
    "text": "<@UFBNA9K9A> You are a rockstar! Thank you for both of these solutions.  I’m concerned going with the i18n approach since in many cases a URL won’t contain “en/“…\n\nWho would you write the conditional statement for the second hackier solution you mentioned that only looks at the last iteration loop?"
  },
  {
    "poster": {
      "poster_name": "gwahhab",
      "poster_handle": "gwahhab"
    },
    "time_stamp": "2019-07-01 15:39:13",
    "text": "<@UFBNA9K9A> one issue we are running into is salesforce syncing form submissions before certain workflows are running. We assign reps in salesforce by state and sfdc is syncing from hs before a state is assigned which then causes it to be assigned ot the wrong person in sfdc. is there anyway around this"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-07-01 15:41:28",
    "text": "Right, that’s kinda the point for i18n solution. You aren’t looking at the URL, just the value that the function prints out. When the default language is set as `en` for example and their is no slug because that’s the default but the function still gives you `en`. It should be determined by the language switcher module but that’s worth verifying.\n\nFor the conditional statement on loop index you can use `loop.last` per here: <https://designers.HubSpot.com/docs/hubl/for-loops>"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-07-01 15:42:43",
    "text": "First thing that comes ot mind is to change the inclusion list to say that only contacts where State “is known” are eligible to sync.  Would that work for you?"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-07-01 15:43:13",
    "text": "Or the assignment workflow could stamp a boolean saying they are ready to sync and that can be what your inclusion list is built off of"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2019-07-01 15:46:16",
    "text": "<@UFBNA9K9A> Ahhhhh, I see your point about the i18n approach.  Ok, that’s probably the better approach here.\n\nHow would you write the conditional logic using that approach inside of a loop?  I still need a way to attribute a specific menu to a specific language."
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-07-01 15:54:04",
    "text": "Don't you have a language for each menu already when you ask for the two letter code?"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2019-07-01 15:55:02",
    "text": "<@UFBNA9K9A>, right, I do.  I thought part of your suggestion was to remove those."
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-07-01 15:55:49",
    "text": "Only as part of the i18n solution. Sorry, I was trying to do two things at once"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-07-01 15:56:21",
    "text": "On my phone at the moment so I think I'm confusing myself"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2019-07-01 15:56:27",
    "text": "All good. :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "gwahhab",
      "poster_handle": "gwahhab"
    },
    "time_stamp": "2019-07-01 16:18:27",
    "text": "iu thought about option 1 but we have like 8000 contacts in the db who never end up getting a value and do still need to sync"
  },
  {
    "poster": {
      "poster_name": "gwahhab",
      "poster_handle": "gwahhab"
    },
    "time_stamp": "2019-07-01 16:18:39",
    "text": "tell me more about option 2 thought"
  },
  {
    "poster": {
      "poster_name": "gwahhab",
      "poster_handle": "gwahhab"
    },
    "time_stamp": "2019-07-01 16:18:46",
    "text": "that might work"
  },
  {
    "poster": {
      "poster_name": "gwahhab",
      "poster_handle": "gwahhab"
    },
    "time_stamp": "2019-07-01 16:19:31",
    "text": "actually in understand now"
  },
  {
    "poster": {
      "poster_name": "gwahhab",
      "poster_handle": "gwahhab"
    },
    "time_stamp": "2019-07-01 16:19:36",
    "text": "let me think about that a bit"
  },
  {
    "poster": {
      "poster_name": "gwahhab",
      "poster_handle": "gwahhab"
    },
    "time_stamp": "2019-07-01 16:19:43",
    "text": "thanks for your help"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-07-01 16:20:09",
    "text": "Of course"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2019-07-01 16:44:15",
    "text": "<@UFBNA9K9A> is there any documentation on the i18n function you mentioned? I can’t seem to find any and unclear on how I should write the conditional statement to use it."
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2019-07-01 17:04:13",
    "text": "Disregard. I think I got it."
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2019-07-01 17:27:27",
    "text": "<@UFBNA9K9A> thank you again dude! The i18n route was the way to go."
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-07-01 17:29:20",
    "text": "No problem, glad that worked out for you"
  }
]