[
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-06-28 10:15:30",
    "edited": {
      "time_stamp": "2022-06-28 10:19:03"
    },
    "text": "<@U03JP7D0S8Y>\nI did this with custom code:\n<https://www.loom.com/share/1055b1b1448b41dd9eea9ac4269e0d55>\nCode:\n```\nexports.main = async (event, callback) =&gt; {\n\nconsole.log(event.fields.lastmodifieddate)\n//example: 1656425128348\n  \nfunction addWorkDays(startDate, days) {\n    if(isNaN(days)) {\n        console.log(\"Value provided for \\\"days\\\" was not a number\");\n        return\n    }\n    if(!(startDate instanceof Date)) {\n        console.log(\"Value provided for \\\"startDate\\\" was not a Date object\");\n        return\n    }\n    // Get the day of the week as a number (0 = Sunday, 1 = Monday, .... 6 = Saturday)\n    var dow = startDate.getDay();\n    var daysToAdd = parseInt(days);\n    // If the current day is Sunday add one day\n    if (dow == 0)\n        daysToAdd++;\n    // If the start date plus the additional days falls on or after the closest Saturday calculate weekends\n    if (dow + daysToAdd &gt;= 6) {\n        //Subtract days in current working week from work days\n        var remainingWorkDays = daysToAdd - (5 - dow);\n        //Add current working week's weekend\n        daysToAdd += 2;\n        if (remainingWorkDays &gt; 5) {\n            //Add two days for each working week by calculating how many weeks are included\n            daysToAdd += 2 * Math.floor(remainingWorkDays / 5);\n            //Exclude final weekend if remainingWorkDays resolves to an exact number of weeks\n            if (remainingWorkDays % 5 == 0)\n                daysToAdd -= 2;\n        }\n    }\n    startDate.setDate(startDate.getDate() + daysToAdd);\n    return startDate.getTime();\n}\n\nconsole.log(1)\nvar date = new Date(Number(event.fields.lastmodifieddate));\nconsole.log(date)\n//example: 2020-02-25T13:15:28.348Z\n\n  var daysToAdd = 5;\n\n  console.log(2)\n  var newDate = addWorkDays(date, daysToAdd);\n  console.log(3)\n  console.log(newDate)\n\nconsole.log(4)\n\n\n  callback({\n    outputFields: {\n    newdate: newDate\n    }\n  });\n}```\nThis example adds 5 working days to the lastmodifieddate property"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-06-28 10:15:56",
    "text": "You can then copy this value to another properties using the copy action"
  },
  {
    "poster": {
      "poster_name": "Adam Berggren",
      "poster_handle": "adam.berggren"
    },
    "time_stamp": "2022-06-29 00:13:56",
    "text": "Oh got to try! :slightly_smiling_face: Thanks man!"
  }
]