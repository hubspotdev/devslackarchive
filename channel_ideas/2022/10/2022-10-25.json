[
  {
    "poster": {
      "poster_name": "James Wilson",
      "poster_handle": "james.wilson"
    },
    "time_stamp": "2022-10-25 03:31:35",
    "text": "Asking for an upvote, if you know the struggle\n\n<https://community.HubSpot.com/t5/CMS-Development/Where-to-find-detailed-dnd-module-usage-information/m-p/709831#M31019>",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2022-10-25 13:38:32"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Dustin Perolio",
      "poster_handle": "dustin.perolio"
    },
    "time_stamp": "2022-10-25 09:37:37",
    "edited": {
      "time_stamp": "2022-10-25 09:39:14"
    },
    "text": "That `|replace` idea seems very clever <@UATE4ATHP>, will definitely have to try that in the future, thanks for sharing! And +1 to macro usage. For reusable pieces, I do `components.button.render()` for instance, with the module path (i.e. `module.button` ) being an optional argument, defaulting to `module` ."
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2022-10-25 09:42:19",
    "text": "I think youâ€™d have to instead set a variable in the head of the page, then update the variable in the macro with do and .update() (though that would have to be a dictionary rather than a straightforward variable)"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2022-10-25 09:45:34",
    "text": "I was gonna suggest a namespace variable. Basically like global variables in HubL"
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2022-10-25 09:49:08",
    "text": "How do you set namespace variables?"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2022-10-25 09:50:16",
    "text": "<@UATE4ATHP> It's more so that I have a large block of conditional logic that sets a `{{ var }}` to a specific CSS class based on what's selected in each module.  This code block will be redundant across many modules so I'm hoping to have the code set in one file that I can import (which worked) in the custom modules that need it."
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2022-10-25 09:50:37",
    "text": "I did get it to work using a simple `import` not a `macro`"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2022-10-25 09:55:10",
    "edited": {
      "time_stamp": "2022-10-25 09:55:41"
    },
    "text": "I think a namespace could work for you.\n\nSo in your template, before you add modules you can define a namespace variable\n\n`{% set ns = namespace() %}`\n\nThen in a module you can create a field in it.\n\n`{% set ns.class = 'blahblah' %}`\n\nThen in any module AFTER that you can access it with\n\n`{{ns.class}}`"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2022-10-25 09:57:03",
    "text": "Sometime i just set the whole module in there\n\n`{% set ns.module = module %}`\n\nthen you can access that modules data in any other module or template"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2022-10-25 10:01:22",
    "text": "<https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-globals.namespace>"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2022-10-25 12:04:03",
    "text": "<@UATE4ATHP> thanks! I'll play with that"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-10-25 13:14:57",
    "text": "<https://community.HubSpot.com/t5/HubSpot-Ideas/Passkey-Login-For-HubSpot-App-and-Membership-Pages/idi-p/710161#M126349>"
  },
  {
    "text": "Hey James,\n\nA good solution for this is to enter into developer mode in a page editor and then create the layout youre trying to make in code --&gt; Copy the section to hubl.\n\nDef the fastest way to the correct hubl!",
    "time_stamp": "2022-10-25 13:38:32"
  },
  {
    "poster": {
      "poster_name": "Markus Zweng",
      "poster_handle": "markus.kaskaden"
    },
    "time_stamp": "2022-10-25 13:52:49",
    "text": "Hi all!\nUsing the `callback` parameter of `related_blog_posts` requires to format the blog post publish date on the client side. There is a variable `publishDateLocalized` that contains a `format` value in its dict, but this string is empty as soon as there is a custom format configured by the user via the blog settings using LDML specification. It would be great if the dict of `publishDateLocalized` would contain a string already holding the correctly rendered date according the locale and user settings.",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2022-11-28 09:52:27"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Melvin Cruz",
      "poster_handle": "email"
    },
    "time_stamp": "2022-10-25 16:44:11",
    "text": "Hi <@UA5DFM7CK> did you resolved this? having the same situation, please let me know. Thank you"
  }
]