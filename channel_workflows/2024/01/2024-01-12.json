[
  {
    "poster": {
      "poster_name": "Sarah Berry",
      "poster_handle": "sberry"
    },
    "time_stamp": "2024-01-12 02:01:44",
    "text": "Sorry, a contact yes. I want to update a HubSpot contacts field based on a field of another object its associated to <@U25PYL3Q8>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-01-12 07:29:29",
    "text": "do you have ops hub pro? If so then you should be able to do this"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-01-12 07:41:26",
    "text": "you can do this via custom code actions, or you can do “copy property” and then you would “edit available data” in the popup and that is where you can select different properties from related objects"
  },
  {
    "poster": {
      "poster_name": "Scott Cronin",
      "poster_handle": "scott.cronin"
    },
    "time_stamp": "2024-01-12 10:35:10",
    "text": "Hey everyone, I want to send a variety of transactional emails to non-contact email addresses including deal personalization tokens. In order to do this, I have built a Single Send API template, which has a custom token called `{{bodyText}}`. I then have a custom workflow action (not CCA, but one with fields that triggers a webhook), which allows me to enter the recipient, email body, and other data as input fields personalized either completely or partially by deal tokens in the WFA. The crux is that I want to have HTML formatting in the email body, as the emails have varying styling, including paragraphs, bolding, hyperlinks, etc. Furthermore, I want to use deal personalization tokens mixed into the `{{bodyText}}` value that populates the email body.\n\nIn the custom WFA, if I use an input field with `\"fieldType\": \"textarea\"` , the HTML tags don't stick in the editor, but are reflected on the back end, successfully passing both deal personalization tokens and HTML tags within the email body. *However,* this only works for the initially entered value - any subsequent edits to the field cause the HTML that is stored in the ether on the back end to be lost, and overwritten with the no-element-containing editor value.\n\nIf I use an input field with `\"fieldType\": \"html\"`, the personalization tokens don't work, but the HTML element tags stick in the editor.\n\nAny thoughts on how to solve for this?\n\n`{`\n      `\"typeDefinition\": {`\n        `\"name\": \"bodyText\",`\n        `\"type\": \"string\",`\n        `\"fieldType\": \"textarea\"`\n      `},`\n      `\"supportedValueTypes\": [\"STATIC_VALUE\"],`\n      `\"isRequired\": false`\n    `},`\n      `{`\n      `\"typeDefinition\": {`\n        `\"name\": \"bodyTextHTML\",`\n        `\"type\": \"string\",`\n        `\"fieldType\": \"html\"`\n      `},`\n      `\"supportedValueTypes\": [\"STATIC_VALUE\"],`\n      `\"isRequired\": false`\n    `}`\n    `],`",
    "reply_count": 7,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-01-12 10:46:06"
      },
      {
        "time_stamp": "2024-01-12 10:46:42"
      },
      {
        "time_stamp": "2024-01-12 10:47:24"
      },
      {
        "time_stamp": "2024-01-12 10:49:16"
      },
      {
        "time_stamp": "2024-01-12 11:34:13"
      },
      {
        "time_stamp": "2024-01-12 11:57:40"
      },
      {
        "time_stamp": "2024-01-15 08:26:02"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Scott Cronin",
      "poster_handle": "scott.cronin"
    },
    "time_stamp": "2024-01-12 10:46:06",
    "text": "Example email body snippet being pasted into WFA:\n```&lt;p&gt;Hi {{ personalization_token('deal.single_send_email_api____to__name', 'there') }},&lt;/p&gt; &lt;br&gt; &lt;p&gt;A landlord submitted the following claim to us.&lt;br&gt;&lt;br&gt;Bond Number: {{ personalization_token('deal.bond_number_adjusted', 'N/A') }}&lt;br&gt;```"
  },
  {
    "text": "How it looks in `bodyText` after saving the WFA:",
    "time_stamp": "2024-01-12 10:46:42"
  },
  {
    "text": "How it looks in `bodyTextHTML` after saving the WFA:",
    "time_stamp": "2024-01-12 10:47:24"
  },
  {
    "text": "Personalization token error when trying to populate the `bodyTextHTML` field:",
    "time_stamp": "2024-01-12 10:49:16"
  },
  {
    "text": "'Ello folks!\n\nI'm Smitty and I'm new to the Developer world and the community here at HubSpot.\n\nTo provide an update, I'm in the process of creating a Custom Code workflow for a client (currently doing a test project).\n\nI've attempted to use Node.js and Python but have not had any luck. I keep receiving this and a log error. Can anyone help me spot the issue?",
    "time_stamp": "2024-01-12 11:31:36",
    "reply_count": 6,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-01-12 13:14:20"
      },
      {
        "time_stamp": "2024-01-12 13:16:58"
      },
      {
        "time_stamp": "2024-01-12 14:37:48"
      },
      {
        "time_stamp": "2024-01-15 06:07:08"
      },
      {
        "time_stamp": "2024-01-22 08:17:54"
      },
      {
        "time_stamp": "2024-01-22 09:30:48"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-01-12 11:34:13",
    "text": "well that is super disjointed. I attempted to do some really creative emails like this and found myself needing to do quite a bit of work arounds with properties and what not.\n\nEventually I saved a bunch of data into a json string to power this stuff, and using the workflows I would update the json string, and then use my custom code to parse it out so it could be delivered correctly into the emails.\n\nNot sure how much that will work for you, but wanted to share what I did when I ran into issues like this"
  },
  {
    "poster": {
      "poster_name": "Scott Cronin",
      "poster_handle": "scott.cronin"
    },
    "time_stamp": "2024-01-12 11:57:40",
    "text": "Hey Nicholas, thanks for weighing in! Did you store the JSON in an object property or a workflow action input field? I'm hoping to stick to using WFA inputs to store the body content rather than an object property."
  },
  {
    "poster": {
      "poster_name": "Scott Marion",
      "poster_handle": "scott943"
    },
    "time_stamp": "2024-01-12 13:14:20",
    "edited": {
      "time_stamp": "2024-01-12 13:16:40"
    },
    "text": "Hi Brandon,  You have to create your secret (holding your access token) and the tell the client to use it.  Are you doing both?"
  },
  {
    "text": "",
    "time_stamp": "2024-01-12 13:16:58"
  },
  {
    "poster": {
      "poster_name": "Brandon Smith",
      "poster_handle": "brandon008"
    },
    "time_stamp": "2024-01-12 14:37:48",
    "text": "Hey Scott,\n\nYes, I have that portion of the code applied based on what you circled.\n\nIt is still giving me that log error."
  }
]