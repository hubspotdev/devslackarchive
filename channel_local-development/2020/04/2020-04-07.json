[
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2020-04-07 04:13:57",
    "text": "hey <@UQ4ED6QFM> another person in my team did run into an additional weird issue. I'll DM you with the deets"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2020-04-07 04:53:11",
    "edited": {
      "time_stamp": "2020-04-07 05:05:27"
    },
    "text": "&gt; for example - If used on `hs upload` :\n&gt; change to revision of updated files to a version prior to previous command execution and publish\n&gt; delete files that were uploaded and not updates of existing file.\nIn my mind we have some sort of version ID tied in to each `hs upload` instance. i.e. I do a full batch upload, but something errors out across multiple files, unexpectedly (happened yesterday). I would want to have a version number affiliated with that upload and the instance prior to that upload, to be able to revert all files to the state they existed just prior to the `hs upload` occurring. Obviously, this would all have to make sense with how many sessions can actually be stored in one instance, but having to do a bunch of guess-work when an upload triggers a lot of issues can be extremely frustrating.  So, I guess the action sequence would be `run hs upload` &gt; version snapshot made with version number &gt; THEN upload occurs with version number.\n\n&gt; Would it make sense for this to work on `watch` and `fetch`? if so what would be your expectation of how it’d work?\nI could see this working with `fetch` more-so than with `watch` With this, I would just expect a version number to be affiliated with the `fetch` instance, which could be rolled back to if any errors were seen after that instance.\n\nEven the ability to run a command that manually triggered a version snapshot to be made would be amazing, that would allow you at HS to avoid a lot of weird situational conflicts. Something like, `hs snapshot &lt;name-version&gt;` or what-have-you.  And then have an affiliated `hs revert &lt;name-version&gt;`  In this instance, I would at the very least have the option to create an instance before pushing large changes. I would totally do this before starting a watch or pushing anything up. Perhaps have a store limit with 10 saved versions accessible through the CLI.  -- I think this addresses your last question as well."
  },
  {
    "text": "Trying to work through the server less function tutorial, getting this error",
    "time_stamp": "2020-04-07 10:17:58",
    "reply_count": 8,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2020-04-07 10:18:47"
      },
      {
        "time_stamp": "2020-04-07 10:19:11"
      },
      {
        "time_stamp": "2020-04-07 10:24:26"
      },
      {
        "time_stamp": "2020-04-07 10:24:39"
      },
      {
        "time_stamp": "2020-04-07 10:25:21"
      },
      {
        "time_stamp": "2020-04-07 11:26:04"
      },
      {
        "time_stamp": "2020-04-07 12:17:59"
      },
      {
        "time_stamp": "2020-06-01 06:22:57"
      }
    ]
  },
  {
    "text": "",
    "time_stamp": "2020-04-07 10:18:47"
  },
  {
    "text": "",
    "time_stamp": "2020-04-07 10:19:11"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2020-04-07 10:24:26",
    "text": "Does your portal have CMS enterprise?"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2020-04-07 10:24:39",
    "text": "yeah. its a dev portal"
  },
  {
    "text": "",
    "time_stamp": "2020-04-07 10:25:21"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2020-04-07 11:26:04",
    "text": "Taking a look at your scopes right now to see why you don’t have access to serverless"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2020-04-07 12:17:59",
    "text": "I tried it with a actual portal with enterprise and it worked"
  }
]