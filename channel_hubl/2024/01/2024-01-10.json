[
  {
    "poster": {
      "poster_name": "christian wilms",
      "poster_handle": "christianwilms0"
    },
    "time_stamp": "2024-01-10 05:02:14",
    "edited": {
      "time_stamp": "2024-01-10 05:24:25"
    },
    "text": "Hi :slightly_smiling_face:\n\nI am trying to replace:\n`<div class=\"blog-comments btn-wrapper btn-primary-wrapper sr-spacer-top-50\">`\n  `<h3>Comments</h3>`\n in a blog post template with a dynamic \"rich text\" dnd module (to be able to make it translatable) with the following:\n`{% dnd_area \"dnd_area\"` \n   `label=\"comments\",`\n   `class=\"comments-title-dnd-area-container-override\",`\n`%}`\n   `{% dnd_section%}`\n     `{% dnd_module path=\"@HubSpot/rich_text\" %}`\n       `{% module_attribute \"html\" %}`\n         `<h3>Comments test</h3>`\n       `{% end_module_attribute %}`\n     `{% end_dnd_module %}`\n   `{% end_dnd_section %}`\n`{% end_dnd_area %}`\n\nIt works in the editor where I can change the default \"`<h3>Comments test</h3>`\" but when I save and preview or refresh the editor page its still the default markup being shown.\n\nDo you have an idea what I am doring wrong or if there is a better approach that I am trying?",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-01-10 05:13:59"
      },
      {
        "time_stamp": "2024-01-10 05:23:27"
      },
      {
        "time_stamp": "2024-01-10 05:24:15"
      },
      {
        "time_stamp": "2024-01-10 05:54:43"
      }
    ]
  },
  {
    "subtype": "tombstone",
    "text": "This message was deleted.",
    "time_stamp": "2024-01-10 05:11:14",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2024-01-10 05:22:13"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "christian wilms",
      "poster_handle": "christianwilms0"
    },
    "time_stamp": "2024-01-10 05:13:59",
    "text": "I think maybe my issue also relates to the issue where its not possible to translate labels:\n<https://community.HubSpot.com/t5/Custom-Quote-Template-Beta/Label-translation/m-p/440603>"
  },
  {
    "poster": {
      "poster_name": "Courtney Fantinato",
      "poster_handle": "courtneyfantinato"
    },
    "time_stamp": "2024-01-10 05:22:13",
    "text": "&gt; Please do not post the same question in multiple channels. It is against the <https://HubSpotdev.slack.com/archives/C22PU4LV8/p1704816004641479|code of conduct.> "
  },
  {
    "poster": {
      "poster_name": "Courtney Fantinato",
      "poster_handle": "courtneyfantinato"
    },
    "time_stamp": "2024-01-10 05:23:27",
    "text": "Please avoid using “hi guys” as per the <https://HubSpotdev.slack.com/archives/C22PU4LV8/p1704816004641479|code of conduct.> "
  },
  {
    "poster": {
      "poster_name": "christian wilms",
      "poster_handle": "christianwilms0"
    },
    "time_stamp": "2024-01-10 05:24:15",
    "text": "sorry. :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "christian wilms",
      "poster_handle": "christianwilms0"
    },
    "time_stamp": "2024-01-10 05:54:43",
    "text": "for the onces interessed I decided to make a macro for it and calling that in my template file."
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2024-01-10 08:04:58",
    "text": "Is it possible to combine a variable name to create dynamic variables based on the loop index?\n\n{% set systemsPrices0 = [] %}\n{% set systemsPrices1 = [] %}\n\n{% for row in LINE_ITEMS %}\n{% do \"systemsPrices\"~loop.index0.append(row.price) %}\n{% endfor %}\n\nHow I would like it to write\n\n{% set systemsPrices0 = [] %}\n{% set systemsPrices1 = [] %}\n\n{% for row in ITEMS %}\n{% do systemsPrices0.append(row.price) %}\n{% endfor %}",
    "reply_count": 21,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2024-01-10 08:11:37"
      },
      {
        "time_stamp": "2024-01-10 08:16:03"
      },
      {
        "time_stamp": "2024-01-10 08:16:10"
      },
      {
        "time_stamp": "2024-01-10 08:17:05"
      },
      {
        "time_stamp": "2024-01-10 08:33:55"
      },
      {
        "time_stamp": "2024-01-10 08:34:12"
      },
      {
        "time_stamp": "2024-01-10 08:35:40"
      },
      {
        "time_stamp": "2024-01-10 10:37:54"
      },
      {
        "time_stamp": "2024-01-10 14:24:47"
      },
      {
        "time_stamp": "2024-01-10 14:27:08"
      },
      {
        "time_stamp": "2024-01-10 14:34:08"
      },
      {
        "time_stamp": "2024-01-10 14:42:41"
      },
      {
        "time_stamp": "2024-01-11 04:35:33"
      },
      {
        "time_stamp": "2024-01-11 04:35:36"
      },
      {
        "time_stamp": "2024-01-11 04:46:03"
      },
      {
        "time_stamp": "2024-01-11 04:49:09"
      },
      {
        "time_stamp": "2024-01-11 05:27:12"
      },
      {
        "time_stamp": "2024-01-11 05:35:14"
      },
      {
        "time_stamp": "2024-01-12 04:33:04"
      },
      {
        "time_stamp": "2024-01-12 04:55:59"
      },
      {
        "time_stamp": "2024-01-12 05:01:27"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2024-01-10 08:11:37",
    "text": "Instead of updating the name, you could just nest it deeper if that works?\nSomething like this\n\n{% for row in ITEMS %}\n{% do systemsPrices[loop.index0].append(row.price) %}\n{% endfor %}\n\nthen your 2 vars would be accessible through\n{{ systemsPrices[0] }}\n{{ systemsPrices[1] }}\n\nNot sure what you have to set initially might need to play around with it"
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2024-01-10 08:16:03",
    "text": "Hi Matt. Thank you for your help. I just tried that and couldn't get that to work. I need to access the data outside of the loop."
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2024-01-10 08:16:10",
    "text": "I thought of another way I could achieve this."
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2024-01-10 08:17:05",
    "text": "{% set systemsPrices0 = [] %}\n{% set systemsPrices1 = [] %}\n{% set systemsPrices2 = [] %}\n\n{% for row in LINE_ITEMS %}\n\n  {% if loop.index0 ==  0 %}\n    {% do systemsPrices0.append(row.price) %}\n  {% elif loop.index0 ==  1 %}\n  {% do systemsPrices1.append(row.price) %}\n  {% elif loop.index0 ==  2 %}\n  {% do systemsPrices2.append(row.price) %}\n  {% endif %}\n\n{% endfor %}\n\n{{systemsPrices2}}"
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2024-01-10 08:33:55",
    "text": "```{% set systemsPrices = {\"0\" : [], \"1\": []} %}\n{% do systemsPrices[0].append('myPrice') %}\n{% do systemsPrices[0].append('myPrice2') %}\n{% do systemsPrices[1].append('myPrice1') %}\n{% do systemsPrices[1].append('myPrice2') %}\n{{ systemsPrices|pprint }}```\nThis sort of thing also works\nJust needed the correct set at the beginning"
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2024-01-10 08:34:12",
    "text": "I’ve not done the loop here just because I didn’t have it for testing"
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2024-01-10 08:35:40",
    "text": "```{% set systemsPrices = {\"0\" : [], \"1\": [], \"2\": []} %}\n{% for row in LINE_ITEMS %}\n    {% do systemsPrices[loop.index0].append(row.price) %}\n{% endfor %}\n{{ systemsPrices[0] }}\n{{ systemsPrices[1] }}\n{{ systemsPrices[2] }}```\n"
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2024-01-10 10:37:54",
    "text": "Thanks Matt I will give this a try."
  },
  {
    "poster": {
      "poster_name": "Nicholas Zmudzinski",
      "poster_handle": "nzmudzinski"
    },
    "time_stamp": "2024-01-10 13:57:36",
    "text": "Thank you both for the answers last week. I'm looking for a life line here hoping for some help as I am still not getting the result I'm looking for with this.\n\nBasically, we have a custom module in HubSpot that is used in programmable email. It references a custom CRM object called \"Projects\" and I am trying to code some additional functionality into the module to allow us to basically filter the output based on two new properties: project_status__checkbox_ (a multiple checkbox property, so an enumeration) and project_campaign_ids (a string).\n\nI've tried so many different approaches so this and every time, all of the 6 projects from the Contact property render when I am expecting 4 since the goal is to exclude IDs for Projects that have a project_status__checkbox_ that includes \"Funded\", \"Hidden\", \"Retired\", \"Skeleton\", \"Unlisted\", or \"Unsearchable\"\n\nI'd be so grateful for any thoughts you have about what I'm doing wrong here :pray:\n\nI've tried to convert the checkboxes into a string and use string_containing, but no dice. Also tried defining excluded statuses as an array and then checking the object's project_status__checkbox_ against the array, also didn't work.\n\nYou'll see there is also two lines in here to do with campaign_ids and I have yet to crack that one either, but the idea there is to take a string of comma-separated values and only output records in the Projects object if the string includes an ID entered in a module variable, but because some of those IDs can be contained within another (i.e., \"5\" is in \"15\"), I split it into an array first.\n\n```{% set project_id_array = [contact.recommended_project_id_1,contact.recommended_project_id_2,contact.recommended_project_id_3,contact.recommended_project_id_4,contact.recommended_project_id_5,contact.recommended_project_id_6] %}\n\n{% for project_id in project_id_array %}\n{% set project = crm_object(\"project\",'project_id='~project_id) %}\n\n{% if project.name != null %}\n\n{% if project.project_status__checkbox_ != \"Funded\" or \n      project.project_status__checkbox_ != \"Hidden\" or \n      project.project_status__checkbox_ != \"Retired\" or \n      project.project_status__checkbox_ != \"Skeleton\" or \n      project.project_status__checkbox_ != \"Unlisted\" or \n      project.project_status__checkbox_ != \"Unsearchable\" %}\n \t\n{% set campaign_ids_array = project.project_campaign_ids|split(\",\") %}\n{% if not module.campaign_id or module.campaign_id in campaign_ids_array %}\n\n\t// HTML with additional variables here //\n\n\t\t{% endif %}\n\n{% endif %}\n\n{% endfor %}```"
  },
  {
    "poster": {
      "poster_name": "Nicholas Zmudzinski",
      "poster_handle": "nzmudzinski"
    },
    "time_stamp": "2024-01-10 14:22:59",
    "text": "Another attempt looked like this, but also didn't work and yielded the same result where all 6 projects render despite 2 of them including \"Unsearchable\" in the checkbox property:\n```{% set project_id_array = [contact.recommended_project_id_1,contact.recommended_project_id_2,contact.recommended_project_id_3,contact.recommended_project_id_4,contact.recommended_project_id_5,contact.recommended_project_id_6] %}\n\n{% set excluded_statuses = [\"Funded\", \"Hidden\", \"Retired\", \"Skeleton\", \"Unlisted\", \"Unsearchable\"] %}\n\n{% for project_id in project_id_array %}\n{% set project = crm_object(\"project\",'project_id='~project_id) %}\n\n{% if project.name != null %}\n\n{% set include_project = true %}\n\n{% for status in excluded_statuses %}\n{% if status in project_status__checkbox_ %}\n{% set include_project = false %}\n{% endif %}\n{% endfor %}\n\n{% if include_project %}\n\n{% set campaign_ids_array = project.project_campaign_ids|split(\",\") %}\n{% if not module.campaign_id or module.campaign_id in campaign_ids_array %}\n\n// HTML with additional variables here //\n\n{% endif %}\n\n{% endif %}\n\n{% endif %}\n\n{% endfor %}```"
  },
  {
    "poster": {
      "poster_name": "Evelynn Ulsh",
      "poster_handle": "evelynn"
    },
    "time_stamp": "2024-01-10 14:23:00",
    "text": "Hmm, I have a hunch that you might be running into an quirk with the way that contact properties are evaluated in emails, but it might be worth troubleshooting some other things first.\n\nI don’t recall the multi-select schema off the top of my head — can you share the output of `{{ project.project_status__checkbox_|pprint }}` so we can see how it’s structured?"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2024-01-10 14:24:47",
    "edited": {
      "time_stamp": "2024-01-10 14:33:24"
    },
    "text": "if the count is 3 or less I’d just do something like:\n```{% set price_1 = LINE_ITEMS[0]['price'] or null %}\n{% set price_2 = LINE_ITEMS[1]['price'] or null %}\n{% set price_3 = LINE_ITEMS[2]['price'] or null %}```\nIf the count is unknown then I’d simplify it to:\n```{% set systemsPrices = {} %}\n{% for row in LINE_ITEMS %}\n  {% do systemsPrices.update( { loop.index: row.price } ) %}\n{% endfor %}```"
  },
  {
    "poster": {
      "poster_name": "Nicholas Zmudzinski",
      "poster_handle": "nzmudzinski"
    },
    "time_stamp": "2024-01-10 14:26:04",
    "text": "When I insert that into the module code, the output is just \"null\""
  },
  {
    "poster": {
      "poster_name": "Evelynn Ulsh",
      "poster_handle": "evelynn"
    },
    "time_stamp": "2024-01-10 14:26:46",
    "text": "Hmm, that means you’re not actually getting a value for that property."
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2024-01-10 14:27:08",
    "text": "Thank you John"
  },
  {
    "poster": {
      "poster_name": "Evelynn Ulsh",
      "poster_handle": "evelynn"
    },
    "time_stamp": "2024-01-10 14:34:01",
    "text": "There’s a few semi-obvious things to check there — whether you’ve got the right property name, etc.\n\nBut, here’s my hunch about the contact property evaluation: in emails specifically, contact properties are populated very late in the rendering process — after the point that filters, functions, and logical comparisons are evaluated. I’m wondering if you might not be running into an issue where some of your logic is evaluating before you’ve actually gotten the data.\n\nTo check that, try temporarily replacing the contact properties in your project IDs array with hard-coded test IDs, and see if you see the same behavior."
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2024-01-10 14:34:08",
    "text": "yeah man! edited 2nd to last line in the code from `row` to `row.price` btw"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2024-01-10 14:37:11",
    "text": "I literally spent the whole day today working on a programmable email module lol. I'll take a look and see if I can find something"
  },
  {
    "poster": {
      "poster_name": "Nicholas Zmudzinski",
      "poster_handle": "nzmudzinski"
    },
    "time_stamp": "2024-01-10 14:38:43",
    "text": "<@UATE4ATHP> My whole day too, just on trying to make this work! Thank you for jumping in to lend a hand...\n\n<@U04AQA0QM8E> When I replace the contact properties in the array w/ the project IDs I'm using to test this, I get the exact same result.\n\nI'm also in a sandbox environment - not sure if that might be having an impact\n\n`{% set project_id_array = [15563,18172,34612,27801,29852,60881] %}`"
  },
  {
    "poster": {
      "poster_name": "Nicholas Zmudzinski",
      "poster_handle": "nzmudzinski"
    },
    "time_stamp": "2024-01-10 14:40:07",
    "text": "I've also triple checked that I've got the right internal names for these properties, module variables, etc. and it's all correct"
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2024-01-10 14:42:41",
    "text": "I appreciate it."
  },
  {
    "poster": {
      "poster_name": "Evelynn Ulsh",
      "poster_handle": "evelynn"
    },
    "time_stamp": "2024-01-10 15:00:50",
    "edited": {
      "time_stamp": "2024-01-10 15:01:27"
    },
    "text": "Well, there’s still the mystery of why `project.project_status__checkbox_` is null when you `pprint` it. If you put a debug output of some sort in the loop that runs over the `project_status__checkbox_` values, does it print? That’ll let us see if you’re even getting to the point where you’re doing any comparisons.\n\nWhat do you get if you `pprint` a whole `project` object? That’ll let you get a look at the structure of the object as a whole and see if the properties are even getting retrieved.\n\nAs a side note, the documentation states that you can only have <https://developers.HubSpot.com/docs/cms/guides/email/hubdb-crm-objects#email-sending-limits|a maximum of 5 CRM calls> in a given email, and you’re calling `crm_object` 6 times here. Just wanted to flag that you might want to look into a way to call those projects in batch, lest you run into trouble when you actually get to sending."
  },
  {
    "poster": {
      "poster_name": "Nicholas Zmudzinski",
      "poster_handle": "nzmudzinski"
    },
    "time_stamp": "2024-01-10 15:12:25",
    "text": "Adding the property in for debugging still just brings up null\n\nWhen I `pprint` the entire object for one project ID I get the following (I'm manually replacing out the exact content that it includes, but it is returning what is expecting):\n\nnull (SizeLimitingPyMap: {summary=*CONTENT*, project_page_url=*CONTENT*, image_url=*CONTENT*, organization_id=*CONTENT*, name=*CONTENT*, country_name=*CONTENT*, primary_theme=*CONTENT* organization_name=*CONTENT*, id=*CONTENT*})\n\nNotably this doesn't include the two new properties that the additional logic is meant to evaluate -- project.project_status__checkbox_ and project.project_campaign_ids\n\nMaybe that's my issue, is they aren't included so the logic isn't evaluating them at all? Do they need to be defined for `crm_objects` somehow?\n\nAlso we've had this module for a while and it only uses 1 CRM call in `{% set project = crm_object(\"project\",'project_id='~project_id) %}` even though it is producing 6 blocks of HTML that renders in the email."
  },
  {
    "poster": {
      "poster_name": "Evelynn Ulsh",
      "poster_handle": "evelynn"
    },
    "time_stamp": "2024-01-10 15:17:10",
    "text": "Yeah, it looks like you’re not retrieving the new properties, for some reason.\n\nYou typically shouldn’t have to do anything special with the property to be able to retrieve it via `crm_object` — it’s possible that this is a bug of some sort."
  },
  {
    "poster": {
      "poster_name": "Nicholas Zmudzinski",
      "poster_handle": "nzmudzinski"
    },
    "time_stamp": "2024-01-10 15:20:54",
    "text": "You're right, that is strange that it's not retrieving those. I will be chasing that lead and see what I can find..."
  }
]