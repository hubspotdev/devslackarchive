[
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2022-12-28 11:40:25",
    "text": "Has anyone ever used the second `attribute` parameter of the `|join` filter?",
    "reply_count": 24,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2022-12-28 12:20:31"
      },
      {
        "time_stamp": "2022-12-28 12:35:48"
      },
      {
        "time_stamp": "2022-12-28 12:37:47"
      },
      {
        "time_stamp": "2022-12-28 12:39:02"
      },
      {
        "time_stamp": "2022-12-28 12:39:49"
      },
      {
        "time_stamp": "2022-12-28 12:43:01"
      },
      {
        "time_stamp": "2022-12-28 12:43:33"
      },
      {
        "time_stamp": "2022-12-28 12:44:36"
      },
      {
        "time_stamp": "2022-12-28 12:45:13"
      },
      {
        "time_stamp": "2022-12-28 12:54:08"
      },
      {
        "time_stamp": "2022-12-28 12:55:42"
      },
      {
        "time_stamp": "2022-12-28 13:01:39"
      },
      {
        "time_stamp": "2022-12-28 13:02:42"
      },
      {
        "time_stamp": "2022-12-28 13:02:52"
      },
      {
        "time_stamp": "2022-12-28 13:03:15"
      },
      {
        "time_stamp": "2022-12-28 13:03:27"
      },
      {
        "time_stamp": "2022-12-28 13:03:44"
      },
      {
        "time_stamp": "2022-12-28 13:04:22"
      },
      {
        "time_stamp": "2022-12-28 13:07:30"
      },
      {
        "time_stamp": "2022-12-28 13:09:49"
      },
      {
        "time_stamp": "2022-12-28 13:11:05"
      },
      {
        "time_stamp": "2022-12-29 06:28:28"
      },
      {
        "time_stamp": "2022-12-29 07:46:10"
      },
      {
        "time_stamp": "2022-12-29 08:43:22"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jack Smith",
      "poster_handle": "jasmith"
    },
    "time_stamp": "2022-12-28 12:20:31",
    "text": "Are you curious how it works?"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2022-12-28 12:35:48",
    "text": "I sure am"
  },
  {
    "poster": {
      "poster_name": "Jack Smith",
      "poster_handle": "jasmith"
    },
    "time_stamp": "2022-12-28 12:37:47",
    "edited": {
      "time_stamp": "2022-12-28 12:38:10"
    },
    "text": "If you are running the filter on a list of a dictionary, it will join the attributes of that dictionary based on the second `attribute` parameter.\n```{% set list = [{'foo':'aaa'}, {'foo':'bbb'}] %}\n{{ list|join(',', 'foo') }}```\nWill output `aaa,bbb`"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2022-12-28 12:39:02",
    "text": "ahhhhhh! Thank you <@UCJANAW1Y>"
  },
  {
    "poster": {
      "poster_name": "Jack Smith",
      "poster_handle": "jasmith"
    },
    "time_stamp": "2022-12-28 12:39:49",
    "text": "You're welcome. Source code if you're curious: <https://github.com/HubSpot/jinjava/blob/77d6a45c4a0db1aa1a97f72134340e688c508c54/src/main/java/com/HubSpot/jinjava/lib/filter/JoinFilter.java>"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-12-28 12:43:01",
    "text": "<@UCJANAW1Y> you've probably seen it but how hard would it be to get this implemented, would a pull request for this be approved? <https://HubSpotdev.slack.com/archives/C26E7JT8V/p1672252662495029>"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2022-12-28 12:43:33",
    "text": "hahaha I was just fixing to ask that <@U01QVR44MEY>"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2022-12-28 12:44:36",
    "text": "or at least noticed in issues"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-12-28 12:45:13",
    "text": "I mean the java code for it is literally 2 lines and a couple of changes in the other files"
  },
  {
    "poster": {
      "poster_name": "Jack Smith",
      "poster_handle": "jasmith"
    },
    "time_stamp": "2022-12-28 12:54:08",
    "text": "Should this be recursive?"
  },
  {
    "poster": {
      "poster_name": "Jack Smith",
      "poster_handle": "jasmith"
    },
    "time_stamp": "2022-12-28 12:55:42",
    "text": "Like `[[\"foo\", [\"bar\", \"baz\"]], [\"foobar\"]]|flatten` returns `[\"foo\", \"bar\", \"baz\", \"foobar\"]` or `[\"foo\", [\"bar\", \"baz\"], \"foobar\"]`\n\nI guess I could add a parameter to define whether it should be recursive"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-12-28 13:01:39",
    "text": "Yeah very true"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2022-12-28 13:02:42",
    "text": "I prefer recursive"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-12-28 13:02:52",
    "edited": {
      "time_stamp": "2022-12-28 13:05:34"
    },
    "text": "Normal js flat doesn't do it recursively. Edit: by default (you can provide a parameter for the depth though)"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2022-12-28 13:03:15",
    "text": "<https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat>"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2022-12-28 13:03:27",
    "text": "&gt; The `flat()` method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth."
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2022-12-28 13:03:44",
    "text": "thereâ€™s a depth param in js"
  },
  {
    "text": "Yeah but only if you define the depth parameter so it isn't really infinitely recursive",
    "time_stamp": "2022-12-28 13:04:22"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-12-28 13:07:30",
    "text": "<@UCJANAW1Y> so if I or John created a pull request do you think you could get it put in production?"
  },
  {
    "poster": {
      "poster_name": "Jack Smith",
      "poster_handle": "jasmith"
    },
    "time_stamp": "2022-12-28 13:09:49",
    "text": "Yeah. It sounds like a very nice thing to have, I could also add it if y'all want me to"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-12-28 13:11:05",
    "text": "I mean if you would add it that would be awesome"
  }
]