[
  {
    "poster": {
      "poster_name": "Aanchal Sheth (HubSpot PM)",
      "poster_handle": "asheth"
    },
    "time_stamp": "2023-12-08 03:33:14",
    "text": "Yes, you're in already <@U01QVR44MEY>. Stayed tuned, details coming up very soon :smile:"
  },
  {
    "poster": {
      "poster_name": "Aanchal Sheth (HubSpot PM)",
      "poster_handle": "asheth"
    },
    "time_stamp": "2023-12-08 03:34:13",
    "text": "Let me know if you want to be a part of this alpha too <@U05FPHAQVAQ>. We'd appreciate your feedback!"
  },
  {
    "poster": {
      "poster_name": "Witold",
      "poster_handle": "witold.rosendaal"
    },
    "time_stamp": "2023-12-08 06:03:50",
    "edited": {
      "time_stamp": "2023-12-08 06:04:24"
    },
    "text": "<@U01QVR44MEY> and <@U04EJHVD8FM> you are hero’s and great help! Thanks a lot. Double thanks for helping me two times in 1/2 weeks <@U04EJHVD8FM>\n!\nYes I would love to be part of the Alpha <@U05KNCMAE7N>. What should I do for this?"
  },
  {
    "poster": {
      "poster_name": "Aanchal Sheth (HubSpot PM)",
      "poster_handle": "asheth"
    },
    "time_stamp": "2023-12-08 06:06:17",
    "edited": {
      "time_stamp": "2023-12-08 06:07:50"
    },
    "text": "Just sent you more info <@U05FPHAQVAQ> :+1: All you need to do is fill<https://docs.google.com/forms/d/1_fy-J84IWql5VTHsGoarwHRb9zNeHBR-_yagTkKGLiw/edit| this form>"
  },
  {
    "poster": {
      "poster_name": "Ayoola Animashaun",
      "poster_handle": "aanimashaun"
    },
    "time_stamp": "2023-12-08 07:04:47",
    "text": "Hi <@U04EJHVD8FM>,\n\nI’ve been able to load other properties and functions within the context… but not able to use the context, serverless and alert actions within the context. Any idea how to add this?"
  },
  {
    "poster": {
      "poster_name": "Seth Kaplan",
      "poster_handle": "skaplan"
    },
    "time_stamp": "2023-12-08 07:41:35",
    "text": "are you passing them in via the value prop of the provider?"
  },
  {
    "poster": {
      "poster_name": "Ayoola Animashaun",
      "poster_handle": "aanimashaun"
    },
    "time_stamp": "2023-12-08 08:01:34",
    "text": "`const contextValue = {` \n        `prop: '123',` \n        `updateBigProp: updateBiggerProp,` \n        `bigProp: BiggerProp,`\n       `// fetchCrmObjectProperties: actions.fetchCrmObjectProperties,`\n       `// context: context,`\n       `// runServerless: runServerlessFunction,`\n      `//  sendAlert: actions.addAlert`\n    `};`\n\n    `return (`\n        `&lt;projectContext.Provider value={{ ...contextValue }}&gt;`\n            `&lt;ButtonRowExtension`\n                `fetchCrmObjectProperties={actions.fetchCrmObjectProperties}`\n                `context={context}`\n                `runServerless={runServerlessFunction}`\n                `sendAlert={actions.addAlert}`\n            `/&gt;`\n        `&lt;/projectContext.Provider&gt;`\n    `);`\n\nI can access props, bigProps and the updateBigProps function"
  },
  {
    "poster": {
      "poster_name": "Colin Johnson",
      "poster_handle": "colin776"
    },
    "time_stamp": "2023-12-08 08:51:21",
    "text": "I know it might not fall for cards fully but this is we are feeling it. SOOOOO Date time stuff is not fun.... any reason that date time component value does not match back end api format?",
    "reply_count": 29,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2023-12-08 08:54:25"
      },
      {
        "time_stamp": "2023-12-08 08:54:33"
      },
      {
        "time_stamp": "2023-12-08 08:55:43"
      },
      {
        "time_stamp": "2023-12-08 08:55:53"
      },
      {
        "time_stamp": "2023-12-08 08:56:08"
      },
      {
        "time_stamp": "2023-12-08 08:56:15"
      },
      {
        "time_stamp": "2023-12-08 08:56:22"
      },
      {
        "time_stamp": "2023-12-08 08:56:24"
      },
      {
        "time_stamp": "2023-12-08 08:56:47"
      },
      {
        "time_stamp": "2023-12-08 08:57:51"
      },
      {
        "time_stamp": "2023-12-08 09:01:38"
      },
      {
        "time_stamp": "2023-12-08 09:01:48"
      },
      {
        "time_stamp": "2023-12-08 09:01:52"
      },
      {
        "time_stamp": "2023-12-08 09:02:07"
      },
      {
        "time_stamp": "2023-12-08 09:02:11"
      },
      {
        "time_stamp": "2023-12-08 09:02:28"
      },
      {
        "time_stamp": "2023-12-08 09:02:49"
      },
      {
        "time_stamp": "2023-12-08 09:03:27"
      },
      {
        "time_stamp": "2023-12-08 09:03:50"
      },
      {
        "time_stamp": "2023-12-08 09:05:20"
      },
      {
        "time_stamp": "2023-12-08 09:05:29"
      },
      {
        "time_stamp": "2023-12-08 09:07:12"
      },
      {
        "time_stamp": "2023-12-08 09:07:40"
      },
      {
        "time_stamp": "2023-12-08 09:08:08"
      },
      {
        "time_stamp": "2023-12-08 09:08:23"
      },
      {
        "time_stamp": "2023-12-08 09:08:31"
      },
      {
        "time_stamp": "2023-12-08 09:08:32"
      },
      {
        "time_stamp": "2023-12-08 09:08:51"
      },
      {
        "time_stamp": "2023-12-08 10:10:39"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-12-08 08:54:25",
    "text": "Bro I was dealing with this for an hour last night"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-12-08 08:54:33",
    "text": "It sucks!!"
  },
  {
    "time_stamp": "2023-12-08 08:55:43",
    "text": "its the worst"
  },
  {
    "poster": {
      "poster_name": "Killean Johnson",
      "poster_handle": "killean.johnson"
    },
    "time_stamp": "2023-12-08 08:55:53",
    "text": "Running on 45 minutes of pure rage currently"
  },
  {
    "poster": {
      "poster_name": "Colin Johnson",
      "poster_handle": "colin776"
    },
    "time_stamp": "2023-12-08 08:56:08",
    "text": "save us <@U03FJQPSC0Y> :smile:"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-12-08 08:56:15",
    "edited": {
      "time_stamp": "2023-12-08 08:57:34"
    },
    "text": "`new Date(value.year, value.month, value.day).toTime()` , this makes it Epoc milliseconds (what the api expects)"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-12-08 08:56:22",
    "text": "This is my life"
  },
  {
    "poster": {
      "poster_name": "Colin Johnson",
      "poster_handle": "colin776"
    },
    "time_stamp": "2023-12-08 08:56:24",
    "text": "lol"
  },
  {
    "poster": {
      "poster_name": "Killean Johnson",
      "poster_handle": "killean.johnson"
    },
    "time_stamp": "2023-12-08 08:56:47",
    "text": "You have just saved me so much time, you're a saint"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-12-08 08:57:51",
    "text": "oh and definitely definitely don't ever try to combine a date picker with a time field"
  },
  {
    "poster": {
      "poster_name": "Seth Kaplan",
      "poster_handle": "skaplan"
    },
    "time_stamp": "2023-12-08 08:59:13",
    "text": "The contextValue should contain the functions. You should then be able to use `useContext(Context)` in ButtonRowExtension to access them."
  },
  {
    "poster": {
      "poster_name": "Seth Kaplan",
      "poster_handle": "skaplan"
    },
    "time_stamp": "2023-12-08 08:59:39",
    "text": "I'm not sure how your code is structured but I'm assuming it is a bug rather than something broken on our end :+1:"
  },
  {
    "poster": {
      "poster_name": "Seth Kaplan",
      "poster_handle": "skaplan"
    },
    "time_stamp": "2023-12-08 09:01:38",
    "text": "Let me make sure I'm understanding. BE returns milliseconds but our components expect `{year, month, date}` as numbers?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-12-08 09:01:48",
    "text": "yeah"
  },
  {
    "poster": {
      "poster_name": "Seth Kaplan",
      "poster_handle": "skaplan"
    },
    "time_stamp": "2023-12-08 09:01:52",
    "text": "Which endpoints are you using that return datetimes with milliseconds (just curious)"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-12-08 09:02:07",
    "text": "every endpoint..."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-12-08 09:02:11",
    "text": "All object endpoints"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-12-08 09:02:28",
    "text": "it's just the standard date format for HubSpot"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-12-08 09:02:49",
    "text": "onChange events also trigger the {year, month, day} format"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-12-08 09:03:27",
    "text": "so then you have to deal with things like computing the users timezone, converting it to utc, then convert to epoc milliseconds"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-12-08 09:03:50",
    "text": "fetchProperties with a date or datetime field also returns epoc"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-12-08 09:05:20",
    "text": "<https://legacydocs.HubSpot.com/docs/faq/how-should-timestamps-be-formatted-for-HubSpots-apis>"
  },
  {
    "poster": {
      "poster_name": "Seth Kaplan",
      "poster_handle": "skaplan"
    },
    "time_stamp": "2023-12-08 09:05:29",
    "text": "Looking around a lots of HubSpot source code and I'm seeing tons of utils for converting milliseconds -&gt; this component's format."
  },
  {
    "poster": {
      "poster_name": "Seth Kaplan",
      "poster_handle": "skaplan"
    },
    "time_stamp": "2023-12-08 09:07:12",
    "text": "I believe we use <https://momentjs.com/> internally for datetime stuff"
  },
  {
    "poster": {
      "poster_name": "Seth Kaplan",
      "poster_handle": "skaplan"
    },
    "time_stamp": "2023-12-08 09:07:40",
    "text": "But TLDR -&gt; it would be nice to `not` have to transfer milliseconds into the format this component wants, right?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-12-08 09:08:08",
    "text": "yeah exactly, and then back from this component to the api"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-12-08 09:08:23",
    "text": "It would just make this component plug and play"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-12-08 09:08:31",
    "text": "like the text and number components"
  },
  {
    "poster": {
      "poster_name": "Seth Kaplan",
      "poster_handle": "skaplan"
    },
    "time_stamp": "2023-12-08 09:08:32",
    "text": "gotcha. Maybe a \"datetimeType\" prop or something would work. Let me take this back to the team! :blossom:"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-12-08 09:08:51",
    "text": "thanks <@U04EJHVD8FM>, you're awesome!"
  },
  {
    "poster": {
      "poster_name": "Seth Kaplan",
      "poster_handle": "skaplan"
    },
    "time_stamp": "2023-12-08 10:10:39",
    "text": "Also, this type of feedback is invaluable. If there is something y'all are annoyed by or require you to do some extra work, please let us know. I know there are a ton of quality-of-life improvement opportunities for us :slightly_smiling_face:"
  }
]