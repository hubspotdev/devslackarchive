[
  {
    "poster": {
      "poster_name": "Stephanie O'Gay Garcia",
      "poster_handle": "stephanie"
    },
    "time_stamp": "2018-11-16 08:41:13",
    "text": "The choice field in custom modules: if we want to add in a lot of choices it would be nice if we could upload those (e.g. CSV) and for the drop-down to be searchable."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-16 08:45:03",
    "text": "dropdowns are searchable"
  },
  {
    "poster": {
      "poster_name": "Stephanie O'Gay Garcia",
      "poster_handle": "stephanie"
    },
    "time_stamp": "2018-11-16 08:57:26",
    "text": "So they are. I couldn't get it going on the preview but I can see it now."
  },
  null,
  null,
  null,
  {
    "poster": {
      "poster_name": "Patrick Eng",
      "poster_handle": "patrick404"
    },
    "time_stamp": "2018-11-16 12:45:38",
    "edited": {
      "time_stamp": "2018-11-16 12:46:00"
    },
    "text": "Major pet peeve, but for something like the File Manager, I would love if there was a warning anytime someone tried to upload a 60,000px wide image that is 8MB and asked them if they're sure that's a good idea (preferably implying that is not a good idea). I think this would help many members of my team who might not realize the consequence of putting images of that size on all our pages",
    "reply_count": 43,
    "reply_users_count": 5,
    "replies": [
      {
        "time_stamp": "2018-11-16 12:49:04"
      },
      {
        "time_stamp": "2018-11-16 12:51:17"
      },
      {
        "time_stamp": "2018-11-16 12:51:36"
      },
      {
        "time_stamp": "2018-11-16 12:58:58"
      },
      {
        "time_stamp": "2018-11-16 13:00:26"
      },
      {
        "time_stamp": "2018-11-16 13:00:56"
      },
      {
        "time_stamp": "2018-11-16 13:01:26"
      },
      {
        "time_stamp": "2018-11-16 13:01:43"
      },
      {
        "time_stamp": "2018-11-16 13:14:09"
      },
      {
        "time_stamp": "2018-11-16 13:16:20"
      },
      {
        "time_stamp": "2018-11-16 13:31:08"
      },
      {
        "time_stamp": "2018-11-16 13:36:48"
      },
      {
        "time_stamp": "2018-11-16 13:37:38"
      },
      {
        "time_stamp": "2018-11-16 13:38:06"
      },
      {
        "time_stamp": "2018-11-16 13:38:20"
      },
      {
        "time_stamp": "2018-11-16 13:38:52"
      },
      {
        "time_stamp": "2018-11-16 13:38:55"
      },
      {
        "time_stamp": "2018-11-16 13:39:07"
      },
      {
        "time_stamp": "2018-11-16 13:39:51"
      },
      {
        "time_stamp": "2018-11-16 13:47:29"
      },
      {
        "time_stamp": "2018-11-16 13:48:22"
      },
      {
        "time_stamp": "2018-11-16 13:49:19"
      },
      {
        "time_stamp": "2018-11-16 13:50:08"
      },
      {
        "time_stamp": "2018-11-16 13:50:58"
      },
      {
        "time_stamp": "2018-11-16 13:51:13"
      },
      {
        "time_stamp": "2018-11-16 13:52:46"
      },
      {
        "time_stamp": "2018-11-16 13:53:18"
      },
      {
        "time_stamp": "2018-11-16 13:54:30"
      },
      {
        "time_stamp": "2018-11-16 13:57:59"
      },
      {
        "time_stamp": "2018-11-16 13:58:17"
      },
      {
        "time_stamp": "2018-11-16 13:59:46"
      },
      {
        "time_stamp": "2018-11-16 14:00:55"
      },
      {
        "time_stamp": "2018-11-16 14:01:30"
      },
      {
        "time_stamp": "2018-11-16 14:01:47"
      },
      {
        "time_stamp": "2018-11-16 14:02:44"
      },
      {
        "time_stamp": "2018-11-16 14:02:57"
      },
      {
        "time_stamp": "2018-11-16 14:03:00"
      },
      {
        "time_stamp": "2018-11-16 14:04:20"
      },
      {
        "time_stamp": "2018-11-16 14:05:11"
      },
      {
        "time_stamp": "2018-11-16 14:05:32"
      },
      {
        "time_stamp": "2018-11-16 14:05:36"
      },
      {
        "time_stamp": "2018-11-16 14:05:49"
      },
      {
        "time_stamp": "2018-11-16 14:06:21"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-11-16 12:46:20",
    "text": "HA!"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-16 12:49:04",
    "text": "HubSpot automatically resizes images.\nWhile gigantic images take up space on HS’s end it doesn’t affect end users much unless you’re not using the `image_resize_url()` and someone intentionally removes width and height params from images in rich text fields"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-11-16 12:51:17",
    "text": "what is the % saving approx that HubSpot gives you?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-11-16 12:51:36",
    "text": "an 8mb 60k px wide image  would become _____"
  },
  {
    "poster": {
      "poster_name": "Patrick Eng",
      "poster_handle": "patrick404"
    },
    "time_stamp": "2018-11-16 12:58:58",
    "text": "Jon could you explain what the image_resize_url is? I'm not familiar with that, so my fear is that we aren't using that. I know HS uses srcsets, but does it matter if we use a HubSpot cdn or our own domain?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-16 13:00:26",
    "text": "it’s a function that takes an image URL in and outputs a url to a resized version of the image.\n<https://designers.HubSpot.com/en/docs/hubl/hubl-supported-functions#resize-image-url>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-16 13:00:56",
    "text": "This only works with images hosted on HubSpot and should work regardless of the domain as long as that domain is linked to HS."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-16 13:01:26",
    "text": "images plopped into a rich text editor or images with a specified width and height attribute  automatically get a srcset applied to them."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-16 13:01:43",
    "text": "you can use this function however to generate your own srcset allowing you to have full control"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2018-11-16 13:14:09",
    "edited": {
      "time_stamp": "2018-11-16 13:14:12"
    },
    "text": "haha we have had this thought before.\n\nWhen you upload an image to the file manager, images are automatically optimized. Specifically, JPEGs and PNGs are stripped of their metadata (EXIF and other stuff that make images bigger). All images are also recompressed to be visually lossless. Additionally, we may serve images in a different encoding if it can be represented as a smaller PNG than a JPEG.\n\nImages are re-saved at 72dpi regardless of their original resolution. If you upload a file at 300dpi, originally created for print, it will saved at 72dpi, which is the standard for the web.\n\nAs Jon noted we will also resize images. As the CMS renders a page, HubSpot automatically resizes images, looking for images that have width or height attributes. If those images are hosted on the file manager, we append width and/or height path segments to the image's URL. If the URL has a height or width parameter, the CMS intercepts that request and attempts to resize it to the requested dimension(s). Browsers are given multiple options for the image resolution to load, so your images will look crisp on standard and high-resolution displays.\n(I talk a bit about this here: <https://designers.HubSpot.com/blog/site-speed-and-performance-what-we-do-and-what-you-can-do>)\n\nEducation is very important though - offline image optimization is also important"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-16 13:16:20",
    "edited": {
      "time_stamp": "2018-11-16 13:17:42"
    },
    "text": "Other image related wizardry that Will didn’t mention - if a browser can view webp images, HubSpot serves webp if the file size is smaller(usually is).\n\nThis image magic is one of the single coolest :sprocket:features to me as a developer"
  },
  {
    "poster": {
      "poster_name": "Patrick Eng",
      "poster_handle": "patrick404"
    },
    "time_stamp": "2018-11-16 13:31:08",
    "text": "Jon and Will, this is good to know! While I'll still try to make sure people don't do this, at least it's not as consequential as I had been telling them (though I probably won't tell them HS is correcting their mistakes haha)"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2018-11-16 13:36:48",
    "text": "Okay -- this all raises a nagging question I've had about how people handle high-def screens and the image elements. I've found myself just defaulting to have the ?noresize cancellation of this compression applied as images always turn out fuzzy with the native compression"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-16 13:37:38",
    "text": "I haven’t noticed fuzzy results at all with images compressed by the CDN."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-16 13:38:06",
    "text": "if you however are outputting a large image at a resolution way higher than the image is getting displayed the browser scales it down and the aliasing can look bad"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-11-16 13:38:20",
    "text": "i have and have used the ?noresize "
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-11-16 13:38:52",
    "text": "actually, just made that recommendation on the community forumn page today"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-16 13:38:55",
    "text": "there are very few times that ?noresize really makes a lot of sense.\n\nthe main one is in html emails"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-11-16 13:39:07",
    "text": "i always use on email"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-16 13:39:51",
    "text": "even then on emails you can still use resized images you just have to be conscientious of it when coding."
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2018-11-16 13:47:29",
    "text": "So this comes into play for me when we have content editors who drop in an image... even at a 2x scale... within a RTE or with an image editor. They put a hard width of 400px on it, and the image is resized to a hard 400px in the source and as a result on any hi-def screen it is no longer the happy 2x it should be. But we need that max-width applied individually as opposed to a global treatment"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2018-11-16 13:48:22",
    "text": "And the width entered into the module editor takes it as the hard width that the image should be resized to - as opposed to the max-width the image should be displayed at"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2018-11-16 13:49:19",
    "text": "This makes my content editors very grumpy. And by proxy me. When I have to go in every time and fix it because they come back to me asking why it's fuzzy on their happy highres macbook"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-16 13:50:08",
    "text": "the fix is for most images have a field for the image and you control the width attributes and can do what you want with the resizing"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-16 13:50:58",
    "text": "if the image has srcset then the image will accomodate for each screen size"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-16 13:51:13",
    "text": "based on what image the browser feels is the right image for the situation"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-16 13:52:46",
    "text": "that can mean on a retina screen you might see a blurrier image under the right conditions.\n\nFor example with srcset, if you were on a laptop with a very slow internet connection even though it can visually show an image at a much bigger size for clarity, it can choose to show a lower res one because the user would rather see the image within a reasonable time frame than have it  take 10 minutes to load"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-16 13:53:18",
    "text": "this functionality is amazing for mobile devices"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-11-16 13:54:30",
    "text": "srcset is the best ever"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2018-11-16 13:57:59",
    "text": "so--- is there a native way utilizing srcset in the Rich Text Editor fields? With hardcoded images, sure I could create something that filters into it.... but a RTE the HTML renders as just an &lt;img&gt;"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2018-11-16 13:58:17",
    "text": "&lt;img src= &gt; *"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-16 13:59:46",
    "text": "I don’t generally do it but you could parse everything in the richtext field before it’s outputted and possibly add the attributes that way automatically. though you’d have to be clever with parsing strings or regex"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2018-11-16 14:00:55",
    "text": "Yeah... this is why it doesn't work for my people."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-16 14:01:30",
    "text": "idk, my clients and the agencies I work with don’t generally have any issues with it"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2018-11-16 14:01:47",
    "text": "Do they add many images through RTEs?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-16 14:02:44",
    "text": "not a ton, only place I think they do it a ton is on blog posts. most of the time when they want to display images they want them to be displayed in specific ways that it’s just easier to give them a module that does what they want"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2018-11-16 14:02:57",
    "text": "*sigh*"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2018-11-16 14:03:00",
    "text": "I wish"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2018-11-16 14:04:20",
    "text": "It's super common for my client to have images living within the flow of RTEs that they then scale with the width element. They also want these to be smart content ready, so I can't use custom modules"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2018-11-16 14:05:11",
    "edited": {
      "time_stamp": "2018-11-16 14:05:20"
    },
    "text": "When you add an image via the image picker in Rich Text, we generally should be inserting a `width` attribute (which will allow `srcset` to happen auto-magically server side). Dana, are not seeing this?"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2018-11-16 14:05:32",
    "text": "Nope"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2018-11-16 14:05:36",
    "text": "Let me set up an example page"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2018-11-16 14:05:49",
    "text": "I'll PM you"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2018-11-16 14:06:21",
    "text": ":thumbsup:"
  },
  null,
  null
]