[
  {
    "poster": {
      "poster_name": "Bhréin Brannick",
      "poster_handle": "bhreinb"
    },
    "time_stamp": "2021-04-15 02:39:03",
    "text": "Here is the `assignments`  construct in JinJava\n\n<https://jinja.palletsprojects.com/en/2.11.x/templates/#assignments>\n\nfirst example:\n```{% set navigation = [('index.html', 'Index'), ('about.html', 'About')] %}```\nand now also `block assignments`\n\n<https://jinja.palletsprojects.com/en/2.11.x/templates/#block-assignments>\n\nfirst example:\n```{% set navigation %}\n    &lt;li&gt;&lt;a href=\"/\"&gt;Index&lt;/a&gt;\n    &lt;li&gt;&lt;a href=\"/downloads\"&gt;Downloads&lt;/a&gt;\n{% endset %}```\nit looks like both are `set` tags and the starting tokens are the same?"
  },
  {
    "poster": {
      "poster_name": "Jack Smith",
      "poster_handle": "jasmith"
    },
    "time_stamp": "2021-04-15 04:08:56",
    "text": "Sorry, what I meant is that they were different because one is just `set var` and the other is `set var = ...`"
  },
  {
    "poster": {
      "poster_name": "Bhréin Brannick",
      "poster_handle": "bhreinb"
    },
    "time_stamp": "2021-04-15 05:49:37",
    "text": "Ah I missed that subtlety good spot…I assume `JinJava` doesn’t support that?"
  },
  {
    "poster": {
      "poster_name": "Simon Lafis",
      "poster_handle": "simon"
    },
    "time_stamp": "2021-04-15 05:54:52",
    "edited": {
      "time_stamp": "2021-04-15 05:56:24"
    },
    "text": "Does anyone know how I can hide modules in admin that has `overrideable=False`? Or is't possible to get a module's html only? Have tried with `{% include %}` but doesn't work"
  },
  {
    "poster": {
      "poster_name": "Jack Smith",
      "poster_handle": "jasmith"
    },
    "time_stamp": "2021-04-15 07:52:40",
    "text": "Assignment blocks are something we are considering but as of now aren't supported"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2021-04-15 08:12:40",
    "edited": {
      "time_stamp": "2021-04-15 08:13:10"
    },
    "text": "So I was able to work around my problem above by declaring a new list and iterating over the field list and appending the extra item to that. It’s a little scary though and would love to understand why my original code stopped working\n```{% set newArray = [] %}\n{% for panel in module.panels%}\n    {% do newArray.append(panel) %}\n{% endfor %}\n{% do newArray.append({\"title\":module.tiles_panel.tiles_title,\"description\":module.tiles_panel.tiles_description,\"content_tiles\":module.tiles_panel.content_tiles}) %}```"
  },
  {
    "poster": {
      "poster_name": "Bhréin Brannick",
      "poster_handle": "bhreinb"
    },
    "time_stamp": "2021-04-15 08:13:38",
    "text": "Cool thx a million :+1:"
  },
  {
    "poster": {
      "poster_name": "Jack Smith",
      "poster_handle": "jasmith"
    },
    "time_stamp": "2021-04-15 08:43:16",
    "text": "Would you be able to write a minimal example that reproduces this? What type of data is `module.panels` when calling the do tag? I will look into this"
  },
  {
    "poster": {
      "poster_name": "Jack Smith",
      "poster_handle": "jasmith"
    },
    "time_stamp": "2021-04-15 09:01:16",
    "text": "Is `module.panels` a repeater?"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2021-04-15 09:08:13",
    "text": "Yes, it’s a repeater"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2021-04-15 09:08:44",
    "text": "How would you like me to write the example?"
  },
  {
    "poster": {
      "poster_name": "Bhréin Brannick",
      "poster_handle": "bhreinb"
    },
    "time_stamp": "2021-04-15 09:28:15",
    "text": "Hi there…I notice `JinJava` has the same scoping behaviour as `JinJa` (<https://jinja.palletsprojects.com/en/2.11.x/templates/#assignments>) [See: Section Scoping Behavior]\n\nI’m wondering though is there a way to push `Contexts`  defined in the parent down to children (for example when processing within a `for` loop) or vice versa…I think in `JinJa` this can be solved via `namespace` but I don’t think this construct works in `JinJava`  from trying it so I’m wondering is there a suggested way to solve this? Many thanks in advance.",
    "reply_count": 11,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2021-04-19 11:31:13"
      },
      {
        "time_stamp": "2021-04-20 11:23:14"
      },
      {
        "time_stamp": "2021-05-07 12:08:12"
      },
      {
        "time_stamp": "2021-05-10 02:23:17"
      },
      {
        "time_stamp": "2021-05-10 13:10:30"
      },
      {
        "time_stamp": "2021-05-21 07:45:23"
      },
      {
        "time_stamp": "2021-05-21 08:10:30"
      },
      {
        "time_stamp": "2021-05-21 10:52:32"
      },
      {
        "time_stamp": "2021-05-21 11:13:33"
      },
      {
        "time_stamp": "2021-05-21 11:18:03"
      },
      {
        "time_stamp": "2021-05-21 11:25:17"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jack Smith",
      "poster_handle": "jasmith"
    },
    "time_stamp": "2021-04-15 12:31:36",
    "text": "<@UJQNNKKHN> This has now been fixed. It was a bug that prevented saving design manager assets, but it did not affect the actual functionality of any published assets."
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2021-04-15 12:31:58",
    "text": "Great, thanks Jack, I’ll check it out"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2021-04-15 12:55:56",
    "text": "Hey <@UCJANAW1Y> it looks like I’m still seeing the same thing in both the design manager and trying to upload w local dev"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2021-04-15 12:56:05",
    "text": "Will that take time to take effect?"
  }
]