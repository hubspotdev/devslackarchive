[
  {
    "poster": {
      "poster_name": "Christian Dow",
      "poster_handle": "christianrdow"
    },
    "time_stamp": "2022-09-13 07:19:27",
    "text": "I ran into this while traveling this week and with a team member yesterday - neither of which are devs - both have Mac devices. Each has the source maps options turned on for whatever reason and neither had seemingly heard of the setting before I brought it up. A third user on the client side has the same issue. Same errors about the source maps for css and js files."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2022-09-13 07:51:22",
    "text": "An update on the issue: an update rolled out (that i wasnt aware of originally) temporarily that involved us adding sourcemap urls to CSS files. Instead of linking to a generated json file it linked to the actual unminified file. This causes the warning indication in the console that the sourcemap is not JSON. A fix has been rolled out but may require republishing your css file that is affected to make the warning disappear. There is no urgency for you to republish your files as the warning doesn't have side effects other than notifying you in your dev tools.\n\nThe purpose of a sourcemap is purely for developers to be able to view a live page and see their unminified/compiled code in the browser. On HubSpot using the hsDebug=true parameter all of your files will appear unminified. Making the sourcemap functionality redundant for the majority of HubSpot sites.\n\n<@U01AHCQ7EJC> it's not a special setting. The browser ONLY checks for sourcemaps if you open the developer tools in the browser. Otherwise those files are completely ignored and do not impact anything other than the warning you see in the console. It's not a performance thing because those files never get loaded by normal visitors, it's not a security thing, it's just a minor inconvenience when you open the console in the developer tools."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-09-13 07:51:53",
    "text": "I woundnt style the naked button element"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-09-13 07:52:32",
    "text": "try and always use a class"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2022-09-13 07:54:08",
    "text": "Thanks for the follow up on this <@U7SL518D6>"
  },
  {
    "poster": {
      "poster_name": "Reuben",
      "poster_handle": "reuben.levine"
    },
    "time_stamp": "2022-09-13 07:55:01",
    "text": "Fair point <@U38EZFVFE>. But if the button is styled, it shouldn’t affect the context menus, should it?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-09-13 08:03:25",
    "text": "if they are native buttons and your styles come after or are more specific yes it will."
  },
  {
    "poster": {
      "poster_name": "Reuben",
      "poster_handle": "reuben.levine"
    },
    "time_stamp": "2022-09-13 08:05:13",
    "text": "But shouldn’t CMS functions and styles be private where user created styles can’t affect them. If I style the button element itself, as opposed to the pseudo element, no changes occur."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-09-13 08:07:44",
    "text": "css doesnt work that way. If the style sheet is on the page, and the system button is on the page, even if its in the editor, then it will be affected or potentially could be affected in some way."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-09-13 08:08:53",
    "text": "Should your styles be affecting it? …. probably not. Is the potential always there.? Absolutely."
  },
  {
    "poster": {
      "poster_name": "Reuben",
      "poster_handle": "reuben.levine"
    },
    "time_stamp": "2022-09-13 08:18:34",
    "text": "That’s my point. The potential shouldn’t be there. There’s a reason I’m not able to change the background of the left sidebar through my `theme-overrides.css` file. It’s not simply because the styles within the `theme-overrides.css` file are being overridden by system css files or because the classes for the sidebar aren’t in the css file. That same logic should apply here. The css code that I create, regardless of where, shouldn’t be able to affect the system sttyles."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-09-13 08:19:32",
    "text": "some of the page is in an iframe, but the buttons i belive are not."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-09-13 08:20:52",
    "text": "So anything outside of the iframe wouldnt be stylable."
  },
  {
    "poster": {
      "poster_name": "Reuben",
      "poster_handle": "reuben.levine"
    },
    "time_stamp": "2022-09-13 08:23:26",
    "text": "Which I get. Still don’t think it should be happening. It’s working as expected programmatically, but not from a user point of view."
  },
  {
    "poster": {
      "poster_name": "Reuben",
      "poster_handle": "reuben.levine"
    },
    "time_stamp": "2022-09-13 08:23:59",
    "text": "Meaning, the CSS is cascading as it should, but as a user I would expect to not be able to change anything that’s part of the system."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-09-13 08:24:10",
    "text": ":shrug:"
  }
]