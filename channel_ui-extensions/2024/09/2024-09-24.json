[
  {
    "poster": {
      "poster_name": "Richard Davies",
      "poster_handle": "richard512"
    },
    "time_stamp": "2024-09-24 01:59:06",
    "text": "Hey, <@U05KNCMAE7N>, I never received an email. Would you be able to invite me, please? Thank you!"
  },
  {
    "poster": {
      "poster_name": "Stacey Thomas",
      "poster_handle": "stacey.thomas"
    },
    "time_stamp": "2024-09-24 02:22:03",
    "text": "I had a similar experience with a 3rd party API where i had to retreive a token and use it for the subsequent call, but any overlapping attempts were creating a new token and then those calls were calling an error similar to what you described. This was because the 3rd party had protection in place to ensure the token was only valid if the subsequent request came from the same IP address which generated the token (which from alot of googling, isn't possible to do in HubSpot unless you do it all in one custom coded action, and still doesn't taken into consideration overlapping calls...)\n\nMy solution was for the 3rd party API to add IP relaxation in place for my user. Not sure if you're able to do the same or if that will solve anything for your situation specifically.\n\nIf not, a possible solution would be to make both calls at the same time on the same card, but both using the same token...? (not sure if it will like that, of course..)\nOr, add a delay to one of the calls so it only fires off the second call once the first one receives a response...? (again might need to be on the same crm card...)\nWe would probably need to know a bit more specifically about the use case / number of calls firing off to see if there is anything else more viable."
  },
  {
    "poster": {
      "poster_name": "Stacey Thomas",
      "poster_handle": "stacey.thomas"
    },
    "time_stamp": "2024-09-24 02:25:33",
    "text": "Is the module referenced in the error definitely installed via npm install and listed in your package.json? Or is the path referenced incorrect? It looks like it cannot find it!"
  },
  {
    "poster": {
      "poster_name": "Magnus Foldager",
      "poster_handle": "magnus"
    },
    "time_stamp": "2024-09-24 03:18:24",
    "text": "Thanks for the reply, <@U03MPE6V73M> - and apologies for missing the notifications.\n\nManaging multiple portals in development environments has proven a challenge for us, and we’ve finally arrived at a good setup where we have a sturdy setup on our development sandboxes - everything is connected and matches our Prod environment - apart from e.g. properties.\n\nCreating these properties both on Prod and Dev opens us up to issues like mismatching option keys, errors in the internal key for the property, etc.\n\nDo you have any documentation of your suggested setup now? Sounds like we’d have to do the following when working on a new feature:\n1. Create any properties, etc. we think we might need in the prod environment\n2. Create a new dev sandbox\n3. Enable any workflows relevant to the process - and update any secrets, etc.\n4. Create new or update existing objects to make sure we get the right type of testing companies\n5. Update our local setup including secrets, portal connections, etc.\n6. Add anything we missed or discover during the process to both the prod and dev setup — or start over\nThis is too much work for me or my engineers to go through when working on extensions - and to be completely honest, we’ll probably just stop working with sandboxes entirely and test in Production instead.\n\nI understand your reasoning in the first point, but disagree with the second point - simply due to how complex it is to set up a dev sandbox.. and the functionality to have a match existed with the sync feature.\n\nThis will add so much work to our workflow, and I think it’s a shame that good functionality was taken away because others are not using it."
  },
  {
    "poster": {
      "poster_name": "Adrian Martén",
      "poster_handle": "adrian.marten"
    },
    "time_stamp": "2024-09-24 09:48:36",
    "text": "It was a mix of dependencies and secrets across the larger project and the HubSpot App project structure :melting_face: "
  },
  {
    "poster": {
      "poster_name": "Colin Ekers",
      "poster_handle": "colin308"
    },
    "time_stamp": "2024-09-24 11:13:57",
    "text": "Hey everyone I have hopefully a very simple questions if someone can help? Can you change the background colour of the custom UI extensions. I am not a developer but asking for a friend :wink:  so I am sorry if it is easy and obvious to find or achieve?",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-09-24 11:18:22"
      },
      {
        "time_stamp": "2024-09-25 07:30:59"
      },
      {
        "time_stamp": "2024-09-25 07:34:34"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Aanchal Sheth (HubSpot PM)",
      "poster_handle": "asheth"
    },
    "time_stamp": "2024-09-24 11:18:22",
    "text": "Hi Colin,\nIt's not possible to change the background color for them. But would love to know they're trying to achieve :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Brad Tollett",
      "poster_handle": "brad208"
    },
    "time_stamp": "2024-09-24 15:22:07",
    "edited": {
      "time_stamp": "2024-09-24 15:22:58"
    },
    "text": "We have a meeting calendar embedded on our website and I'm adding it as a step to a multi-step form that I'm creating that collects the information that we need for onboarding new customers. Right now, I made it open in a modal above another step but I planned for it to be it's own step, so that I could prevent a user from progressing until some background processes complete.\n\nYes, there could be a meeting link component instead that would allow us to embed the respective meeting link calendar into a card, but the problem here is that we send this calendar out many places and we need to do it in a way that if the meeting link ever changes nothing will break, which has happened numerous times in the past. By embedding the calendar on our website we know if the meeting link ever changes then that's the place we update the embed and it updates everywhere else without having to go through tons of emails, website pages, etc.\n\nIt's also just how most iframes work and it leaves it to the user whether or not they want it embedded in a card, panel, etc. or if they want it to open via a modal rather than just forcing the modal.\n\nI imagine the modal is to prevent it from loading automatically and slowing stuff down unless the user decides to trigger it via UX, but if it's hidden behind a step then it won't load automatically. More so, the developers currently have the option to trigger a modal to open without user interaction anyways (via useEffect), so that nullifies this assumption and if the developer does need to create an iframe that loads right away it will currently be forced to function like a pop-up ad, which ruins the experience more than if they could've just embedded it directly."
  },
  {
    "poster": {
      "poster_name": "Brad Tollett",
      "poster_handle": "brad208"
    },
    "time_stamp": "2024-09-24 15:29:22",
    "text": "With that said, a meeting calendar widget would be great to have if it's simple to switch between which calendar gets loaded, an iframe is just more convenient for us in this instance for the reasons mentioned above. I can also think of a number of instances where an iframe could be very useful embedded in a card. (One for instance being, embedding third-party reporting as it relates to the leads/customer record directly in HubSpot that can be reviewed when prospecting for expansion sales, etc.)"
  },
  {
    "text": "Hi everyone!\nI'm having some issue here, with API Extension &lt;Select&gt;\nIt seems the property such as label, tooltip, and description are not working.\nIs there any update?",
    "time_stamp": "2024-09-24 18:14:13",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-09-25 07:12:43"
      },
      {
        "time_stamp": "2024-09-25 17:37:53"
      },
      {
        "time_stamp": "2024-09-27 07:30:05"
      },
      {
        "time_stamp": "2024-09-29 19:26:33"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Lucky John Faderon (Dudez)",
      "poster_handle": "lfaderon"
    },
    "time_stamp": "2024-09-24 18:16:18",
    "text": "It was just working before, today I just saw the &lt;Select&gt; don't show these properties anymore."
  }
]