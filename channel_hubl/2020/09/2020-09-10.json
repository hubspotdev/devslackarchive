[
  {
    "poster": {
      "poster_name": "Rodrigo Fernández",
      "poster_handle": "rodrigo035"
    },
    "time_stamp": "2020-09-10 05:30:45",
    "text": "hello everyone,\n\nIs it possible to get the information of a contact that is in deals with Hubl?:thinking_face:\n\nas well as the custom contact tokens but for deals\n\nI have tried the following {{ contact.deals.products | pprint }}\n\nbut it returns null"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 07:29:01",
    "text": "In the above code, you have the var referrer_domain outside the script tag…"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 07:30:35",
    "text": "```&lt;script&gt;\nvar referrer_domain = '{{request.referrer}}';\n\n{% if referrer_domain == \"<http://mysite.com|mysite.com>\" %}\n\n  console.log('referrer active');\n  console.log(referrer_domain)\n\n{% endif %}\n&lt;/script&gt;```"
  },
  {
    "poster": {
      "poster_name": "Tim Ostheimer",
      "poster_handle": "tostheimer"
    },
    "time_stamp": "2020-09-10 10:38:45",
    "text": "Can someone explain why\n```{{ \"test\"|replace(\" \",\"_\") }}```\noutputs `test` but\n```{{ (\"test\"|replace(\" \",\"_\")) }}```\noutputs `[test]` but\n```{{ (\"test\") }}```\noutputs `test`?\n\nWhy does wrapping a string being run through a replace filter in parenthesis turn it into an array?\n\n```{{ \"test\"|replace(\" \",\"_\")|pprint }}```\noutputs `(String: test)`\n```{{ (\"test\"|replace(\" \",\"_\"))|pprint }}```\noutputs `(PyList: [test])`\n```{{ (\"test\")|pprint }}```\noutputs `(String: test)`"
  },
  {
    "poster": {
      "poster_name": "Brad Angelcyk",
      "poster_handle": "brad965"
    },
    "time_stamp": "2020-09-10 11:27:01",
    "text": "Hm, I don’t think that will work given the HubSpot form I have earlier in the process does not have all of the fields that I need to perform the calculations.  The non-HubSpot forms method might work."
  },
  {
    "poster": {
      "poster_name": "Brad Angelcyk",
      "poster_handle": "brad965"
    },
    "time_stamp": "2020-09-10 11:29:47",
    "text": "actually, can a HubSpot “form” submission modify all properties even if the pre-built form does not include those properties?  I have several contact properties that I’m using for this tool that are not on the initial form as I don’t have the data until later in the process."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 11:31:41",
    "text": "You coudl add those form fields to your form and make them hidden…"
  },
  {
    "poster": {
      "poster_name": "Brad Angelcyk",
      "poster_handle": "brad965"
    },
    "time_stamp": "2020-09-10 11:38:05",
    "text": "oh true"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 11:39:33",
    "text": "in that same breath, when you are updating HubSpot form fields you want to make sure you are doing somethign like `$('.hs_email input').val(<mailto:'newemail@gmail.com|'newemail@gmail.com>').change()`"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 11:39:48",
    "text": "the change() is needed otehrwise it won’t take the input"
  },
  {
    "poster": {
      "poster_name": "Elise Ferguson",
      "poster_handle": "elise.ferguson"
    },
    "time_stamp": "2020-09-10 12:44:55",
    "text": "Not sure if it works for custom modules but for example the HubSpot rich_text module you can add the following between the open and closing dnd_module tags:\n```{% module_attribute \"html\" %}\n    &lt;h1&gt;Hello, world!&lt;/h1&gt;\n  {% end_module_attribute %}```\n"
  },
  {
    "poster": {
      "poster_name": "Brad Angelcyk",
      "poster_handle": "brad965"
    },
    "time_stamp": "2020-09-10 13:17:17",
    "text": ":nod:  I’m already doing that for another hidden field.  the initial contact form isn’t on the same sandbox account that I’m working on so I didn’t even take that into consideration.  can you use the `hbspt.forms.create` script but hide the entire form for a second submission behind the scenes?  or it would probably still cause a browser redirection?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 13:19:06",
    "text": "should be able to do _`inlineMessage: 'message'` on the embed_"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 13:19:12",
    "text": "so that it doesn't redirect"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 13:19:16",
    "text": "<https://legacydocs.HubSpot.com/docs/methods/forms/advanced_form_options>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 13:20:13",
    "text": "or use the `onFormSubmit: function($form) {/* do code here for after 1st submission, like unhide the second form or whatever *?}`"
  },
  {
    "poster": {
      "poster_name": "Rachel McBee",
      "poster_handle": "rachel.mcbee"
    },
    "time_stamp": "2020-09-10 13:47:38",
    "text": "Hi there! I have a wacky issue regarding modals. I want to have more than one on a page, as in someone clicks on an image for more info in the pop-up. I’ve created a custom module that does the job….but only pulls up the latest modal I’ve created on a page.\n\nFor example, I have three images on the page. Each one is clickable to open a modal with more info. But whether I click on image 1, image 2, or image 3, it ONLY shows modal 3. happy to publish a page for visualization if that helps!\n\nDISCLAIMER: I am a super n00b with JS. SUPER N00B. Here’s the code for a module with text on one side, image on the other.\nThere are fields for:\n• Image\n• Headline\n• Headline Color\n• Rich Text\n• Button Name (to open modal)\n• Class (for adding custom classes to the module)\n• Modal name\n• Modal header\n• Modal image\n&lt;div class=“service-group {{ module.text_field }}“&gt;\n  &lt;div class=“page-center”&gt;\n    &lt;div class=“span6\" style=“direction: ltr;“&gt;\n      &lt;div class=“service-title” style=“color:{{ module.header_color }};“&gt;\n            &lt;h4 style=“text-align:left!important;“&gt;{{ module.service_product_headline }}&lt;/h4&gt;\n      &lt;/div&gt;\n      &lt;div class=“text-left”&gt;\n            {{ module.service_product_text }}\n      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=“span6\"&gt;\n    &lt;span class=“service-group-icon mtb20” style=“text-align:center; direction: ltr;“&gt;\n        {% if module.image_field.src %}\n\t{% set sizeAttrs = ‘width=“{{ module.image_field.width }}” height=“{{ module.image_field.height }}“’ %}\n\t{% if module.image_field.size_type == ‘auto’ %}\n\t\t{% set sizeAttrs = ‘style=“max-width: 100%; height: auto;“’ %}\n\t{% elif module.image_field.size_type == ‘auto_custom_max’ %}\n\t{% endif %}\n      &lt;a name=“{{ module.modal_name }}“&gt;&lt;/a&gt;&lt;a href=“#{{ module.modal_name }}” id=“{{ module.button_name }}“&gt;&lt;img src=“{{ module.image_field.src }}” alt=“{{ module.image_field.alt }}” style=“max-width:90%; height:auto;“&gt;&lt;/a&gt;\n{% endif %}\n    &lt;/span&gt;\n  &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;!-- The Modal --&gt;\n&lt;div id=“{{ module.modal_name }}” class=“modal”&gt;&lt;!-- Modal content --&gt;\n&lt;div class=“modal-content”&gt;\n&lt;div class=“modal-header”&gt;&lt;span class=“close”&gt;×&lt;/span&gt;\n&lt;h2&gt;{{ module.modal_header }}&lt;/h2&gt;\n&lt;/div&gt;\n&lt;div class=“modal-body text-center”&gt;\n  &lt;p&gt;{% if module.modal_image.src %}\n\t{% set sizeAttrs = ‘width=“{{ module.modal_image.width }}” height=“{{ module.modal_image.height }}“’ %}\n\t{% if module.modal_image.size_type == ‘auto’ %}\n\t\t{% set sizeAttrs = ‘style=“max-width: 100%; height: auto;“’ %}\n\t{% elif module.modal_image.size_type == ‘auto_custom_max’ %}\n\t\t{% set sizeAttrs = ‘width=“100%” height=“auto” style=“max-width: {{ module.modal_image.max_width }}px; max-height: {{ module.modal_image.max_height }}px”’ %}\n\t{% endif %}\n\t&lt;img src=“{{ module.modal_image.src }}” alt=“{{ module.modal_image.alt }}” {{ sizeAttrs }}&gt;\n{% endif %}&lt;/p&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;script&gt;\n\n// Get the modal\nvar modal = document.getElementById(“{{ module.modal_name }}“);\n\n// Get the button that opens the modal\nvar btn = document.getElementById(“{{ module.button_name }}“);\n\n// Get the &lt;span&gt; element that closes the modal\nvar span = document.getElementsByClassName(“close”)[0];\n\n// When the user clicks the button, open the modal\nbtn.onclick = function() {\n  modal.style.display = “block”;\n}\n\n// When the user clicks on &lt;span&gt; (x), close the modal\nspan.onclick = function() {\n  modal.style.display = “none”;\n}\n\n// When the user clicks anywhere outside of the modal, close it\nwindow.onclick = function(event) {\n  if (event.target == modal) {\n    modal.style.display = “none”;\n  }\n}\n&lt;/script&gt;",
    "reply_count": 31,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2020-09-10 13:48:52"
      },
      {
        "time_stamp": "2020-09-10 15:49:20"
      },
      {
        "time_stamp": "2020-09-10 15:50:53"
      },
      {
        "time_stamp": "2020-09-10 15:55:51"
      },
      {
        "time_stamp": "2020-09-10 15:56:28"
      },
      {
        "time_stamp": "2020-09-10 15:56:37"
      },
      {
        "time_stamp": "2020-09-10 15:57:07"
      },
      {
        "time_stamp": "2020-09-10 16:03:28"
      },
      {
        "time_stamp": "2020-09-10 16:03:55"
      },
      {
        "time_stamp": "2020-09-10 16:04:10"
      },
      {
        "time_stamp": "2020-09-10 16:04:12"
      },
      {
        "time_stamp": "2020-09-10 16:04:31"
      },
      {
        "time_stamp": "2020-09-10 16:07:27"
      },
      {
        "time_stamp": "2020-09-10 16:10:35"
      },
      {
        "time_stamp": "2020-09-10 16:10:37"
      },
      {
        "time_stamp": "2020-09-10 16:11:05"
      },
      {
        "time_stamp": "2020-09-10 16:13:20"
      },
      {
        "time_stamp": "2020-09-10 16:14:39"
      },
      {
        "time_stamp": "2020-09-10 16:16:08"
      },
      {
        "time_stamp": "2020-09-10 16:16:21"
      },
      {
        "time_stamp": "2020-09-10 16:16:44"
      },
      {
        "time_stamp": "2020-09-10 16:17:24"
      },
      {
        "time_stamp": "2020-09-10 16:17:37"
      },
      {
        "time_stamp": "2020-09-10 16:18:18"
      },
      {
        "time_stamp": "2020-09-10 16:19:50"
      },
      {
        "time_stamp": "2020-09-10 16:20:14"
      },
      {
        "time_stamp": "2020-09-10 16:20:34"
      },
      {
        "time_stamp": "2020-09-10 16:20:48"
      },
      {
        "time_stamp": "2020-09-10 16:20:59"
      },
      {
        "time_stamp": "2020-09-10 16:21:26"
      },
      {
        "time_stamp": "2020-09-10 16:21:40"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Rachel McBee",
      "poster_handle": "rachel.mcbee"
    },
    "time_stamp": "2020-09-10 13:48:52",
    "text": "FWIW I tried implementing a lightbox solution but I couldn’t get it to work. I tore apart a Vast template from HubSpot to build this, so there may be some arguing code and that’s why it’s not working. But this is the closest I’ve come to creating a solution that would work for multiple uses so I’m hoping it’s an easy fix that I’m just totally missing! :crossed_fingers:"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 15:49:20",
    "edited": {
      "time_stamp": "2020-09-10 15:49:57"
    },
    "text": "So you have this module a few times on a page (or want to have it multiple times), is that correct <@U01A96SC79C>?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 15:50:53",
    "text": "In each of these modules, are you giving them different BUTTON NAMES AND MODULE NAMES? Are you also giving them names with no spaces? Making sure they are good to be used as IDs?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 15:55:51",
    "text": "Because you are telling me that only the third one is opening up, its because your third module is last one placed, and your JS code is overwriting itself… so you need to create an IFFE inside your modules, that will keep your JS stuff separated and prevents it from overwriting something very similar.\n\n<https://developer.mozilla.org/en-US/docs/Glossary/IIFE>\n\n```(function () {\n  /* place all your module JS inside this function() -- that will keep it scoped by itself */\n  var modal = .....\n  var btn = .....\n})();```"
  },
  {
    "poster": {
      "poster_name": "Rachel McBee",
      "poster_handle": "rachel.mcbee"
    },
    "time_stamp": "2020-09-10 15:56:28",
    "text": "AH! okay, I will look into that!"
  },
  {
    "poster": {
      "poster_name": "Rachel McBee",
      "poster_handle": "rachel.mcbee"
    },
    "time_stamp": "2020-09-10 15:56:37",
    "text": "I’m like, I know there’s something…but it all looks right to me…THAT would make sense!"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 15:57:07",
    "text": "You should be able to get that running like that"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 16:03:28",
    "text": "I’d do this much differently if I were making it to put all the modal data into data atributes on the modal open button, then create the modal inside one script  that dynamilcaly inserts all of that modal data from the button, and then removes it all after hitting the close button. this is much more involved than what you are doing so I didn’t dive into that"
  },
  {
    "poster": {
      "poster_name": "Rachel McBee",
      "poster_handle": "rachel.mcbee"
    },
    "time_stamp": "2020-09-10 16:03:55",
    "text": "That did it!! but now I can’t get the close functionality to work. any idea on that? I can keep digging."
  },
  {
    "poster": {
      "poster_name": "Rachel McBee",
      "poster_handle": "rachel.mcbee"
    },
    "time_stamp": "2020-09-10 16:04:10",
    "text": "yeah this was such a crazy journey that brought me to this point, you have no idea LOL"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 16:04:12",
    "text": "send me the preview url"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 16:04:31",
    "text": "I do have an idea… I remember learning  javascript :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Rachel McBee",
      "poster_handle": "rachel.mcbee"
    },
    "time_stamp": "2020-09-10 16:07:27",
    "text": "woot :slightly_smiling_face: please don’t judge the design, I’m totally a sketch-artist before the actual art :rolling_on_the_floor_laughing: <https://afb.accuweather.com/-temporary-slug-e83602b5-a91d-4f36-8f6d-ad3fb45f326f?hs_preview=HrSNqXEu-34819310723>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 16:10:35",
    "text": "okay, so"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 16:10:37",
    "text": "```var span = document.getElementsByClassName(\"close\")[0];```"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 16:11:05",
    "text": "that is lookig for the first close class in the document"
  },
  {
    "poster": {
      "poster_name": "Rachel McBee",
      "poster_handle": "rachel.mcbee"
    },
    "time_stamp": "2020-09-10 16:13:20",
    "text": "wasn’t sure if the [0] had to be there or not, I tried both ways (that was back when I was trying the [0], [1], etc approach that super did not work)"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 16:14:39",
    "text": "`var span = document.querySelector('#{{ module.modal_name }} .close')`"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 16:16:08",
    "text": "document.querySelector is a little less rigid then your getElementsByClassName and ID…. it is what most developers are using now\n\nSo, in this we are targeting your element that has your module name, and the element that has a class of close that is INSIDE of it (or a child of the original element)"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 16:16:21",
    "text": "That way that close does its own thing"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 16:16:44",
    "text": "That should make it so your modal is targeted properly"
  },
  {
    "poster": {
      "poster_name": "Rachel McBee",
      "poster_handle": "rachel.mcbee"
    },
    "time_stamp": "2020-09-10 16:17:24",
    "text": "thank you so so sooooo much for your help with this"
  },
  {
    "poster": {
      "poster_name": "Rachel McBee",
      "poster_handle": "rachel.mcbee"
    },
    "time_stamp": "2020-09-10 16:17:37",
    "text": "it’s like a giant headache suddenly evaporated. lol"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 16:18:18",
    "text": "not a problem!!!"
  },
  {
    "poster": {
      "poster_name": "Rachel McBee",
      "poster_handle": "rachel.mcbee"
    },
    "time_stamp": "2020-09-10 16:19:50",
    "text": "I may come back to ask about how to click anywhere else in the window to close it but I’m going to try my best to figure it out first LOL"
  },
  {
    "poster": {
      "poster_name": "Rachel McBee",
      "poster_handle": "rachel.mcbee"
    },
    "time_stamp": "2020-09-10 16:20:14",
    "text": "appreciate the help 1000x and I hope the rest of your day is fantastic!"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 16:20:34",
    "text": "send me a message tomorrow if you need some help with it."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 16:20:48",
    "text": "I’m getting dinner started and won’t be back online until tomorrow"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 16:20:59",
    "text": "thanks! glad you are in a better spot!!!"
  },
  {
    "poster": {
      "poster_name": "Rachel McBee",
      "poster_handle": "rachel.mcbee"
    },
    "time_stamp": "2020-09-10 16:21:26",
    "text": "sounds great! enjoy dinner! (I’m doing both right now, one of these will not end well) :grimacing: :smile:"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-10 16:21:40",
    "text": ":weary:"
  }
]