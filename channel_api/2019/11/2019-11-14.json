[
  {
    "text": "when consuming the Forms API, if the portal ID is a not existing one (like the `1111111111111` in the image) the content type of the 404 returned is text/html. Should not it return as application/json?",
    "time_stamp": "2019-11-14 01:15:06",
    "reply_count": 9,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-11-14 01:15:47"
      },
      {
        "time_stamp": "2019-11-14 01:41:04"
      },
      {
        "time_stamp": "2019-11-14 01:42:31"
      },
      {
        "time_stamp": "2019-11-14 02:01:16"
      },
      {
        "time_stamp": "2019-11-14 02:09:58"
      },
      {
        "time_stamp": "2019-11-14 02:12:26"
      },
      {
        "time_stamp": "2019-11-14 02:12:57"
      },
      {
        "time_stamp": "2019-11-14 02:15:05"
      },
      {
        "time_stamp": "2019-11-14 02:15:46"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Aitor",
      "poster_handle": "aitor.tomas"
    },
    "time_stamp": "2019-11-14 01:15:47",
    "text": "for example, if the portal ID exists but the form ID does not exist, it returns as application/json (as well as any other validation error)"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-11-14 01:41:04",
    "edited": {
      "time_stamp": "2019-11-14 02:02:25"
    },
    "text": "don’t you need to include an accept header?"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-11-14 01:42:31",
    "text": "ie. Accept: application/json"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-11-14 02:01:16",
    "edited": {
      "time_stamp": "2019-11-14 02:01:38"
    },
    "text": "<@UK277PCMP> yeah, seems to work for 405 errors.. without accept i get html response, with accept I get json :slightly_smiling_face: I guess it’ll work the same way with 404's.."
  },
  {
    "text": "with Accept, I just get an empty body and no content-type in the reponse header. Everything works as expected for all errors except for the 404 when the portal ID does not exist",
    "time_stamp": "2019-11-14 02:09:58"
  },
  {
    "poster": {
      "poster_name": "Aitor",
      "poster_handle": "aitor.tomas"
    },
    "time_stamp": "2019-11-14 02:12:26",
    "text": "you can try with this endpoint:\n```\nPOST <https://api.hsforms.com/submissions/v3/integration/submit/11111111111111/12345>\n```"
  },
  {
    "poster": {
      "poster_name": "Aitor",
      "poster_handle": "aitor.tomas"
    },
    "time_stamp": "2019-11-14 02:12:57",
    "text": "`11111111111111` is the non-existing portal ID"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-11-14 02:15:05",
    "text": "Might just be how the API handles errors"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-11-14 02:15:46",
    "text": "As long as they’re returning the correct header code I guess.. which they seem to be"
  },
  {
    "poster": {
      "poster_name": "Adam Wright",
      "poster_handle": "adam377"
    },
    "time_stamp": "2019-11-14 11:20:31",
    "text": "Are there any plans to make API endpoints for enrolling for companies, deals, etc. into workflows? Looks like it’s just contacts right now.",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-11-14 12:26:53"
      },
      {
        "time_stamp": "2019-11-14 12:28:02"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-11-14 12:26:53",
    "text": "Hey <@UMCBG6QK0> Not in the short term. For a little background as to why, we are working on moving contact workflows over to our new generic automation platform (what currently powers company, deals, etc workflows).  As you can imagine this takes a lot of careful planning and will encompass a lot of edge cases given all the things workflows can do and how heavily they are relied upon to be right. Once that migration is complete, the team can turn their attention to opening up an API for all types of workflows.  I don’t have a time estimate for this at the movement. As a workaround, I recommend setting a flag field that would then trigger the workflow based on it’s criteria. I know that’s not idea but it will hopefully suffice for now"
  },
  {
    "poster": {
      "poster_name": "Adam Wright",
      "poster_handle": "adam377"
    },
    "time_stamp": "2019-11-14 12:28:02",
    "text": "Alrighty, had that in mind for a possible workaround, thanks for the update"
  }
]