[
  {
    "poster": {
      "poster_name": "Mansi Govani",
      "poster_handle": "mansi.govani"
    },
    "time_stamp": "2020-01-15 08:43:52",
    "text": "<@U25PYL3Q8> thank you for your reply. But I didn't really follow you here.\n\nIs there any easy solution to have customer reviews on HubSpot?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 08:44:59",
    "text": "If you want to have people submit reviews, it isn't a simple solution"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 08:46:36",
    "text": "If you want to display reviews using hubdb, that is simple. If you want to input the reviews into hubdb, that is simple."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 08:47:08",
    "text": "There isn't a way to submit to hubdb as a form unless you use a server or serverless function that can access the api..."
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2020-01-15 09:12:48",
    "text": "Hey guys, what is the best way to create a deal and a task associated with that deal at the \"same time\" since we don't know the deal id yet? Is it by Getting recently created deals with a `.results[0]`  to get the id of the deal just created and then create the task? Thanks for your help!",
    "reply_count": 6,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2020-01-15 09:26:46"
      },
      {
        "time_stamp": "2020-01-15 09:27:27"
      },
      {
        "time_stamp": "2020-01-15 09:28:40"
      },
      {
        "time_stamp": "2020-01-15 09:29:00"
      },
      {
        "time_stamp": "2020-01-15 10:53:35"
      },
      {
        "time_stamp": "2020-01-15 11:01:53"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Isaac Takushi",
      "poster_handle": "itakushi"
    },
    "time_stamp": "2020-01-15 09:26:46",
    "edited": {
      "time_stamp": "2020-01-15 09:26:55"
    },
    "text": "Hey, <@UDU6KEBFB>. Yep, you could poll the _Get recently created deals_ endpoint or listen for a `deal.creation` webhook notification (<https://developers.HubSpot.com/docs/methods/webhooks/webhooks-overview>)."
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2020-01-15 09:27:27",
    "text": "ok all right thanks"
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2020-01-15 09:28:40",
    "text": "When you create the deal it should return a 200 response with the deal ID"
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2020-01-15 09:29:00",
    "text": "```Returns a 200 on success with the data for\nthe newly created deal in the response:\n{\n  \"portalId\": 62515,\n  \"dealId\": 151088,```\n<https://developers.HubSpot.com/docs/methods/deals/create_deal>"
  },
  {
    "poster": {
      "poster_name": "Mansi Govani",
      "poster_handle": "mansi.govani"
    },
    "time_stamp": "2020-01-15 10:19:08",
    "text": "Is there a way in which I can save form submission as HubSpot Contact property and then someway (automated) insert into hubDB?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 10:21:39",
    "text": "that woudl require a server/serverless function as well"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 10:22:21",
    "text": "or you could create a list of people that fill out your form, then export these properties into a spreadsheet, then manually upload those into hubdb"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 10:23:21",
    "text": "its going to be a manual or program that does this -- there just isnt' the functionality to do this natively in HS. Allowing a live website form to drive a database table could cause huge issues on HubSpot servers and it likely a huge security risk as well"
  },
  {
    "poster": {
      "poster_name": "Mansi Govani",
      "poster_handle": "mansi.govani"
    },
    "time_stamp": "2020-01-15 10:26:52",
    "text": "ok, thank you so much for your help! I truly appreciate it!"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 10:27:12",
    "text": "I wish there was a better answer for you"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 10:27:31",
    "text": "Might look into zapier to see if you can play around with that and make it happen"
  },
  {
    "poster": {
      "poster_name": "Mansi Govani",
      "poster_handle": "mansi.govani"
    },
    "time_stamp": "2020-01-15 10:31:03",
    "text": "Zapier allows Google Reviews to be posted on HubSpot. So then that will be another option to use. But it will not allow individual product reviews. It will be common around."
  },
  {
    "text": "",
    "time_stamp": "2020-01-15 10:33:39"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 10:34:02",
    "text": "you could create a blog that has testimonials. Upon compleating a form, you can push that info into a blog post.. then use a recent posts to make that work"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 10:34:07",
    "text": "that might work for you"
  },
  {
    "poster": {
      "poster_name": "Isaac Takushi",
      "poster_handle": "itakushi"
    },
    "time_stamp": "2020-01-15 10:53:35",
    "text": "Great point, <@UDJV5B73R>! Somehow that slipped my mind :sweat_smile:"
  },
  {
    "poster": {
      "poster_name": "Mansi Govani",
      "poster_handle": "mansi.govani"
    },
    "time_stamp": "2020-01-15 10:57:55",
    "text": "Someone tried using Webhooks <https://community.HubSpot.com/t5/APIs-Integrations/Zapier-Webhooks-Hubdb-Integration/td-p/224347>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 11:01:48",
    "text": "well that should work then if you set it up properly"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2020-01-15 11:01:53",
    "text": "already did the other way but I'll switch to this it is cleaner"
  },
  {
    "poster": {
      "poster_name": "Mansi Govani",
      "poster_handle": "mansi.govani"
    },
    "time_stamp": "2020-01-15 11:03:50",
    "text": ":slightly_smiling_face: trying. But got an error \"*We had trouble sending your test through.*\nThe app returned \"Unsupported Media Type\" with no further details. The app or service was expecting a file and received either an unsupported file type or an unexpected value. Check your file or image fields to make sure they are setup correctly.\""
  },
  {
    "text": "",
    "time_stamp": "2020-01-15 11:11:51"
  },
  {
    "poster": {
      "poster_name": "Mansi Govani",
      "poster_handle": "mansi.govani"
    },
    "time_stamp": "2020-01-15 11:12:07",
    "text": "Any idea what can be wrong?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 11:19:44",
    "text": "Unsupported Media Type -- if we google that"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 11:19:55",
    "text": "<https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/415>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 11:20:26",
    "text": "<https://developers.HubSpot.com/docs/methods/hubdb/v2/update_table>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 11:21:30",
    "text": "i used zapier once, but I'm not familiar with it. I would just program this to happen and throw it on heroku or a php server. I'd look into the api information and see if you can make any adjustments to get the call right"
  },
  {
    "poster": {
      "poster_name": "Mansi Govani",
      "poster_handle": "mansi.govani"
    },
    "time_stamp": "2020-01-15 12:31:48",
    "text": "I changed Payload Type (optional) to JSON from form and it works now. But now it creates a blank row and no data is inserted"
  },
  {
    "subtype": "tombstone",
    "text": "This message was deleted.",
    "time_stamp": "2020-01-15 12:34:47",
    "reply_count": 9,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2020-01-15 12:36:49"
      },
      {
        "time_stamp": "2020-01-15 12:40:59"
      },
      {
        "time_stamp": "2020-01-15 12:41:15"
      },
      {
        "time_stamp": "2020-01-15 12:41:49"
      },
      {
        "time_stamp": "2020-01-15 12:42:08"
      },
      {
        "time_stamp": "2020-01-15 14:12:39"
      },
      {
        "time_stamp": "2020-01-15 14:12:52"
      },
      {
        "time_stamp": "2020-01-15 14:13:12"
      },
      {
        "time_stamp": "2020-01-15 14:52:54"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Cory Dymond",
      "poster_handle": "cory218"
    },
    "time_stamp": "2020-01-15 12:36:49",
    "text": "Even making a request straight in the browser gives me this error:\n```{\n  \"correlationId\": \"xxxxx\",\n  \"errorTokens\": {\n    \"id\": [\"5574003719\"]\n  },\n  \"errorType\": \"NOT_FOUND\",\n  \"message\": \"Unable to find model with id 5574003719\",\n  \"requestId\": \"f3ad264f-c049-4e6e-ae31-bab6e9a804f7\",\n  \"status\": \"error\"\n}```"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 12:37:38",
    "text": "I'm not going to be able to debug that... Might need to talk to zapier about that?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 12:40:59",
    "text": "Did you just make up that id?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 12:41:15",
    "text": "if you look at the return from this url: `<https://api.hubapi.com/content/api/v2/blog-posts?hapikey=demo>`"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 12:41:49",
    "text": "I searched the reults and didn't find the id `5574003719`"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 12:42:08",
    "text": "I found an id that worked: <https://api.hubapi.com/content/api/v2/blog-posts/12026507320?hapikey=demo>"
  },
  {
    "poster": {
      "poster_name": "tylerlutz",
      "poster_handle": "tyler697"
    },
    "time_stamp": "2020-01-15 12:47:24",
    "text": "Hello! Is there an API endpoint that allows me to merge deals? I know under the contacts API there is a `merge-vids` endpoint but I did not see one for deals.",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2020-01-15 12:51:43"
      },
      {
        "time_stamp": "2020-01-15 12:57:03"
      },
      {
        "time_stamp": "2020-01-15 12:57:54"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2020-01-15 12:51:43",
    "text": "Nope, not possible today"
  },
  {
    "poster": {
      "poster_name": "tylerlutz",
      "poster_handle": "tyler697"
    },
    "time_stamp": "2020-01-15 12:57:03",
    "text": "That is what I thought. Thanks!"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2020-01-15 12:57:54",
    "text": "If you’d like you can add your vote to this idea <https://community.HubSpot.com/t5/HubSpot-Ideas/Merging-Deals/idi-p/4948>"
  },
  {
    "poster": {
      "poster_name": "Cory Dymond",
      "poster_handle": "cory218"
    },
    "time_stamp": "2020-01-15 14:12:39",
    "text": "sorry, i pulled the ID from their example just to put that in"
  },
  {
    "poster": {
      "poster_name": "Cory Dymond",
      "poster_handle": "cory218"
    },
    "time_stamp": "2020-01-15 14:12:52",
    "text": "does this API normally take like 20-30 seconds to respond?"
  },
  {
    "poster": {
      "poster_name": "Cory Dymond",
      "poster_handle": "cory218"
    },
    "time_stamp": "2020-01-15 14:13:12",
    "text": "i'm just trying to grab the URL of a blog"
  },
  {
    "poster": {
      "poster_name": "Cory Dymond",
      "poster_handle": "cory218"
    },
    "time_stamp": "2020-01-15 14:43:03",
    "text": "I'm wondering if the blog post API normally takes 5+ seconds to respond. Am I perhaps doing something wrong when I make an AJAX call to get the URL of a blog post?",
    "reply_count": 35,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2020-01-15 14:44:54"
      },
      {
        "time_stamp": "2020-01-15 14:45:14"
      },
      {
        "time_stamp": "2020-01-15 14:46:54"
      },
      {
        "time_stamp": "2020-01-15 14:50:04"
      },
      {
        "time_stamp": "2020-01-15 14:53:57"
      },
      {
        "time_stamp": "2020-01-15 14:57:14"
      },
      {
        "time_stamp": "2020-01-15 15:00:44"
      },
      {
        "time_stamp": "2020-01-15 15:00:47"
      },
      {
        "time_stamp": "2020-01-15 15:03:10"
      },
      {
        "time_stamp": "2020-01-15 15:04:17"
      },
      {
        "time_stamp": "2020-01-15 15:04:46"
      },
      {
        "time_stamp": "2020-01-15 15:05:01"
      },
      {
        "time_stamp": "2020-01-15 15:05:42"
      },
      {
        "time_stamp": "2020-01-15 15:05:46"
      },
      {
        "time_stamp": "2020-01-15 15:06:34"
      },
      {
        "time_stamp": "2020-01-15 15:07:05"
      },
      {
        "time_stamp": "2020-01-15 15:08:33"
      },
      {
        "time_stamp": "2020-01-15 15:08:57"
      },
      {
        "time_stamp": "2020-01-15 15:09:47"
      },
      {
        "time_stamp": "2020-01-15 15:10:01"
      },
      {
        "time_stamp": "2020-01-15 15:12:09"
      },
      {
        "time_stamp": "2020-01-15 15:12:20"
      },
      {
        "time_stamp": "2020-01-15 15:12:26"
      },
      {
        "time_stamp": "2020-01-15 15:12:49"
      },
      {
        "time_stamp": "2020-01-15 15:33:26"
      },
      {
        "time_stamp": "2020-01-15 15:36:49"
      },
      {
        "time_stamp": "2020-01-15 15:38:51"
      },
      {
        "time_stamp": "2020-01-15 15:39:00"
      },
      {
        "time_stamp": "2020-01-15 15:39:09"
      },
      {
        "time_stamp": "2020-01-15 15:44:29"
      },
      {
        "time_stamp": "2020-01-15 15:51:04"
      },
      {
        "time_stamp": "2020-01-15 15:57:11"
      },
      {
        "time_stamp": "2020-01-16 10:11:04"
      },
      {
        "time_stamp": "2020-01-16 10:12:06"
      },
      {
        "time_stamp": "2020-01-16 10:22:52"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Cory Dymond",
      "poster_handle": "cory218"
    },
    "time_stamp": "2020-01-15 14:44:54",
    "text": "```$.get( proxyurl + '<https://api.hubapi.com/content/api/v2/blog-posts/>' + blogId + '?hapikey=' + apiKey, function( data ) {\n\tconsole.log('request loaded: ' + data.absolute_url);\n\t$('#modal-full .modal-content').load( proxyurl + data.absolute_url + ' #body-content' );\n});```"
  },
  {
    "poster": {
      "poster_name": "Cory Dymond",
      "poster_handle": "cory218"
    },
    "time_stamp": "2020-01-15 14:45:14",
    "text": "That's the code I'm working with."
  },
  {
    "poster": {
      "poster_name": "Cory Dymond",
      "poster_handle": "cory218"
    },
    "time_stamp": "2020-01-15 14:46:54",
    "text": "The `proxyurl` is just using a cors-anywhere setup to get around cors restrictions."
  },
  {
    "poster": {
      "poster_name": "Morgan VanDerLeest",
      "poster_handle": "mvanderleest"
    },
    "time_stamp": "2020-01-15 14:50:04",
    "edited": {
      "time_stamp": "2020-01-15 14:50:13"
    },
    "text": "I believe cors-anywhere is using a free Heroku instance, so it will occasionally take a few extra seconds for the Heroku dynos to boot up and work on your request. That probably accounts for a good bit of the delay."
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-01-15 14:52:54",
    "text": "you’ve removed the hapikey from the url yeah?"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-01-15 14:53:57",
    "text": "are you using this client side? don’t think you should expose the hsapikey client side"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-01-15 14:57:14",
    "text": "Are you trying to do this on a site built on HubSpot’s CMS, or a site elsewhere?"
  },
  {
    "poster": {
      "poster_name": "Cory Dymond",
      "poster_handle": "cory218"
    },
    "time_stamp": "2020-01-15 15:00:44",
    "text": "it will eventually be on HubSpots CMS. i'm developing locally right now though."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 15:00:47",
    "text": "The reason anyone is asking -- If you expose your api key on a page, there is a chance that a crawler picks it up and then your api key can be used by hackers to remove your data, mine your data.. or to competely ignore"
  },
  {
    "poster": {
      "poster_name": "Cory Dymond",
      "poster_handle": "cory218"
    },
    "time_stamp": "2020-01-15 15:03:10",
    "text": "If I do this on my HubSpot hosted account, I shouldn't have to use the CORS request, correct? I'm operating under the assumption that when I go live with this, I should be able to remove the cors proxy and be ok with the cross browser stuff. Is that incorrect?"
  },
  {
    "poster": {
      "poster_name": "Cory Dymond",
      "poster_handle": "cory218"
    },
    "time_stamp": "2020-01-15 15:04:17",
    "text": "Or I guess it wouldn't matter because I'd still be exposing my API key? What's the best method to get a blog post dynamically?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 15:04:46",
    "text": "exposing the key is bad"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 15:05:01",
    "text": "so if you wanted to launch your own heroku end point to get rid of cors, you could do that"
  },
  {
    "poster": {
      "poster_name": "Cory Dymond",
      "poster_handle": "cory218"
    },
    "time_stamp": "2020-01-15 15:05:42",
    "text": "I was planning on doing that if need be. My main concern is just being able to get a blog post dynamically, so if I'm doing this incorrectly, I've got no issue trying another method."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 15:05:46",
    "text": "to get a blog post generally I use  <https://designers.HubSpot.com/en/docs/hubl/hubl-supported-functions#blog-recent-posts>"
  },
  {
    "poster": {
      "poster_name": "Cory Dymond",
      "poster_handle": "cory218"
    },
    "time_stamp": "2020-01-15 15:06:34",
    "text": "I'd like to be able do that after the page load. I don't really want to have a page with hundreds of hidden blog posts if I don't have to."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 15:07:05",
    "text": "create a json object"
  },
  {
    "poster": {
      "poster_name": "Cory Dymond",
      "poster_handle": "cory218"
    },
    "time_stamp": "2020-01-15 15:08:33",
    "text": "so output a JSON object in hubl with the required HTML for all blog posts and then use that to update my modal?"
  },
  {
    "text": "",
    "time_stamp": "2020-01-15 15:08:44"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 15:08:57",
    "text": "starting at line 13 is where I'm doing"
  },
  {
    "text": "",
    "time_stamp": "2020-01-15 15:09:44"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 15:09:47",
    "text": "that one is a little bit more clear"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 15:10:01",
    "text": "::<https://gist.github.com/NickDeckerDevs/c6c6bffa002a2673c3c352ac635d5be1>"
  },
  {
    "text": "",
    "time_stamp": "2020-01-15 15:10:02"
  },
  {
    "poster": {
      "poster_name": "Cory Dymond",
      "poster_handle": "cory218"
    },
    "time_stamp": "2020-01-15 15:12:09",
    "text": "ahhh nice. i think that's exactly what i need."
  },
  {
    "poster": {
      "poster_name": "Cory Dymond",
      "poster_handle": "cory218"
    },
    "time_stamp": "2020-01-15 15:12:20",
    "text": "thank you so much. you're a huge help on here."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 15:12:26",
    "text": "no problem!"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 15:12:49",
    "text": "I like helping"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-01-15 15:33:26",
    "edited": {
      "time_stamp": "2020-01-15 15:34:36"
    },
    "text": "Had a thought - you could get around storing it in inline, in the page by setting up a page template which has the following code:\n\n```{{ standard_header_includes }}\n\n{% set my_content = content_by_id(request.query_dict.id) %}\n&lt;div id=\"response\" data-json=\"{{ my_content | tojson | escape }}\"&gt;&lt;/div&gt;\n{{ standard_footer_includes  }}```\nYou could do a .ajax, to that URL (as it’ll be on the same domain) and pass in the URL ?id=blogId\n\nThe response will be html, but you can then pass that into jquery\n```$(response).find('#response').data('json');```\nIt’s not perfect, but you can’t seem to setup a template without the &lt;!-- start coded_template: id: comment at the top :smile:, otherwise you’;d be able to setup a dynamic jsonp callback essentially"
  },
  {
    "poster": {
      "poster_name": "Cory Dymond",
      "poster_handle": "cory218"
    },
    "time_stamp": "2020-01-15 15:36:49",
    "text": "dang, that's actually almost exactly what i was trying to do originally, but i couldn't get my head around it."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 15:38:51",
    "text": "oh damn"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 15:39:00",
    "text": "that is good"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-15 15:39:09",
    "text": "I'll have to remember that <@UQERM7BLY>"
  },
  {
    "poster": {
      "poster_name": "Cory Dymond",
      "poster_handle": "cory218"
    },
    "time_stamp": "2020-01-15 15:44:29",
    "text": "it feels sneaky lol"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-01-15 15:51:04",
    "edited": {
      "time_stamp": "2020-01-15 15:55:07"
    },
    "text": "haha yeah - i’ve seen a few old, legacy production sites (not on HubSpot) use this for all ajax requests, i also think it’s the way some libraries do modals. Not ideal, but does the job. It’s likely to use less resources than storing data on-page as I believe HubSpot can cache those requests (see: request_dict <https://designers.HubSpot.com/docs/hubl/hubl-supported-variables#hs_cos_wrapper_widget_2872294893>). Additionally, I imagine the .ajax fn / browser is going to cache it too\n\nYou’ll likely want to add some restrictions onto the content_by_id function (e.g. limiting it to just blog posts), and maybe build the JSON object yourself to restrict the keys that are made public"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-01-15 15:57:11",
    "edited": {
      "time_stamp": "2020-01-15 15:58:00"
    },
    "text": "ok.. enough procrastinating.. back working on a slideshow :neutral_face:"
  }
]