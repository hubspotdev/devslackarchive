[
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-02-17 08:25:43",
    "text": "Per the <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax|MDN docs>:\n&gt; Only <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols|iterable> objects, like `Array`, can be spread in array and function parameters.\n"
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-02-17 08:28:21",
    "text": "It makes the think HubSpot is forcing some type of strictness on the code."
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-02-17 08:30:16",
    "text": "In my offline testing, your code should work."
  },
  {
    "text": "Hey everyone, it is not clear in the documentation how to output custom code to use later on in the WF with the copy action. I am outputing the fields in the callback but the later copy actions is not working no matter how I approach this. I've tested output vars randomNumber as well, but to no avail. Should I be returning the value somehwere?",
    "time_stamp": "2023-02-17 08:34:54",
    "reply_count": 41,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-02-17 08:37:10"
      },
      {
        "time_stamp": "2023-02-17 08:37:14"
      },
      {
        "time_stamp": "2023-02-17 08:37:40"
      },
      {
        "time_stamp": "2023-02-17 08:37:52"
      },
      {
        "time_stamp": "2023-02-17 08:38:04"
      },
      {
        "time_stamp": "2023-02-17 08:38:22"
      },
      {
        "time_stamp": "2023-02-17 08:39:16"
      },
      {
        "time_stamp": "2023-02-17 08:39:59"
      },
      {
        "time_stamp": "2023-02-17 08:40:09"
      },
      {
        "time_stamp": "2023-02-17 08:40:19"
      },
      {
        "time_stamp": "2023-02-17 08:40:27"
      },
      {
        "time_stamp": "2023-02-17 08:40:36"
      },
      {
        "time_stamp": "2023-02-17 08:40:55"
      },
      {
        "time_stamp": "2023-02-17 08:41:05"
      },
      {
        "time_stamp": "2023-02-17 08:41:16"
      },
      {
        "time_stamp": "2023-02-17 08:41:47"
      },
      {
        "time_stamp": "2023-02-17 08:42:11"
      },
      {
        "time_stamp": "2023-02-17 08:42:19"
      },
      {
        "time_stamp": "2023-02-17 08:42:57"
      },
      {
        "time_stamp": "2023-02-17 08:43:31"
      },
      {
        "time_stamp": "2023-02-17 08:43:34"
      },
      {
        "time_stamp": "2023-02-17 08:43:55"
      },
      {
        "time_stamp": "2023-02-17 08:44:15"
      },
      {
        "time_stamp": "2023-02-17 08:45:05"
      },
      {
        "time_stamp": "2023-02-17 08:45:53"
      },
      {
        "time_stamp": "2023-02-17 08:46:16"
      },
      {
        "time_stamp": "2023-02-17 08:46:32"
      },
      {
        "time_stamp": "2023-02-17 08:46:38"
      },
      {
        "time_stamp": "2023-02-17 08:46:52"
      },
      {
        "time_stamp": "2023-02-17 08:48:15"
      },
      {
        "time_stamp": "2023-02-17 08:49:02"
      },
      {
        "time_stamp": "2023-02-17 08:49:15"
      },
      {
        "time_stamp": "2023-02-17 08:51:29"
      },
      {
        "time_stamp": "2023-02-17 08:51:44"
      },
      {
        "time_stamp": "2023-02-17 08:52:07"
      },
      {
        "time_stamp": "2023-02-17 08:52:09"
      },
      {
        "time_stamp": "2023-02-17 08:53:29"
      },
      {
        "time_stamp": "2023-02-17 08:54:01"
      },
      {
        "time_stamp": "2023-02-17 08:55:11"
      },
      {
        "time_stamp": "2023-02-17 08:55:48"
      },
      {
        "time_stamp": "2023-02-17 08:56:01"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 08:37:10",
    "text": "That code looks good to me, here's an example where I'm outputting a string phone number"
  },
  {
    "text": "",
    "time_stamp": "2023-02-17 08:37:14"
  },
  {
    "text": "",
    "time_stamp": "2023-02-17 08:37:40"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 08:37:52",
    "text": "As you can see in the copy property value action it shows up"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 08:38:04",
    "text": "You just need to make sure you save the custom code"
  },
  {
    "text": "",
    "time_stamp": "2023-02-17 08:38:22"
  },
  {
    "poster": {
      "poster_name": "Aki Drakontaeidis-Dellaportas",
      "poster_handle": "aki"
    },
    "time_stamp": "2023-02-17 08:39:16",
    "text": "Thanks for the feedback. The property does appear as an output on the copy action, similar to yours but the copy action itself still fails to copy over to the property"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 08:39:59",
    "text": "Oh that's probably because you have an error in your custom code where you aren't outputting anything"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 08:40:09",
    "text": "have you run a couple of console.logs"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 08:40:19",
    "text": "and tested on a contact?"
  },
  {
    "text": "I think you might be right",
    "time_stamp": "2023-02-17 08:40:27"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 08:40:36",
    "text": "Yep"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 08:40:55",
    "text": "so that's probably because your random function is running async"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 08:41:05",
    "text": "and the output isn't waiting for the result"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 08:41:16",
    "text": "what type of random number do you want?"
  },
  {
    "text": "I m using this library defined at the top there",
    "time_stamp": "2023-02-17 08:41:47"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 08:42:11",
    "text": "That package isn't supported I believe"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 08:42:19",
    "text": "one moment let me get you the supported packages"
  },
  {
    "text": "Nope it definitely is supported",
    "time_stamp": "2023-02-17 08:42:57"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 08:43:31",
    "text": "Oh now I see, are you trying to output a random number and sorting or just a random number"
  },
  {
    "poster": {
      "poster_name": "Aki Drakontaeidis-Dellaportas",
      "poster_handle": "aki"
    },
    "time_stamp": "2023-02-17 08:43:34",
    "text": "ya, pulled it from docs. its actually recommended due to it not using timestamps"
  },
  {
    "poster": {
      "poster_name": "Aki Drakontaeidis-Dellaportas",
      "poster_handle": "aki"
    },
    "time_stamp": "2023-02-17 08:43:55",
    "text": "I am basically trying to output a random number and save it into a property for use in a later if statement"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 08:44:15",
    "edited": {
      "time_stamp": "2023-02-17 08:44:29"
    },
    "text": "Well in your code you only output `random_sorting` not `randomNumber`"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 08:45:05",
    "text": "But in your output fields (in the UI) you are saying you are going to output 2 things"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 08:45:53",
    "text": "in your code swap `random_sorting` for `randomNumber`"
  },
  {
    "poster": {
      "poster_name": "Aki Drakontaeidis-Dellaportas",
      "poster_handle": "aki"
    },
    "time_stamp": "2023-02-17 08:46:16",
    "text": "I think it needs to be random_sorting because that is the property's internal name"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 08:46:32",
    "text": "It doesn't matter what the property internal name is"
  },
  {
    "text": "",
    "time_stamp": "2023-02-17 08:46:38"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 08:46:52",
    "text": "HubSpot will handle that when you use the copy action"
  },
  {
    "poster": {
      "poster_name": "Aki Drakontaeidis-Dellaportas",
      "poster_handle": "aki"
    },
    "time_stamp": "2023-02-17 08:48:15",
    "text": "OK, i m getting no errors on the code with the above now. I ll try copying, but that is when it fails :confused:"
  },
  {
    "text": "Yup, failed again",
    "time_stamp": "2023-02-17 08:49:02"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 08:49:15",
    "text": "Ok let me build this out on my end"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 08:51:29",
    "text": "Use this code:\n```const rn = require('random-number-csprng');\n\nexports.main = async (event, callback) =&gt; {\n\n  callback({\n    outputFields: {\n      random_sorting: await rn(1,5000)\n    }\n  });\n}```\n"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 08:51:44",
    "text": "My initial thought of it running async turned out to be correct"
  },
  {
    "poster": {
      "poster_name": "Aki Drakontaeidis-Dellaportas",
      "poster_handle": "aki"
    },
    "time_stamp": "2023-02-17 08:52:07",
    "text": "yea? I was thinking it was type conflicts, ie returning a string isntead of number. trying yours now"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 08:52:09",
    "text": "Just tested it on several contacts and it's going fine"
  },
  {
    "poster": {
      "poster_name": "Aki Drakontaeidis-Dellaportas",
      "poster_handle": "aki"
    },
    "time_stamp": "2023-02-17 08:53:29",
    "text": "Worked like a charm!"
  },
  {
    "poster": {
      "poster_name": "Aki Drakontaeidis-Dellaportas",
      "poster_handle": "aki"
    },
    "time_stamp": "2023-02-17 08:54:01",
    "text": "You've helped out greatly. What can I do to help the community back?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 08:55:11",
    "text": "Honestly if you just want to check around for things that you know how to fix, that would help the community tremendously"
  },
  {
    "poster": {
      "poster_name": "Aki Drakontaeidis-Dellaportas",
      "poster_handle": "aki"
    },
    "time_stamp": "2023-02-17 08:55:48",
    "text": "Will most certainly do to pay back for this. Thanks."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 08:56:01",
    "text": "of course"
  },
  {
    "poster": {
      "poster_name": "Logan Armstrong",
      "poster_handle": "logan565"
    },
    "time_stamp": "2023-02-17 09:14:32",
    "text": "Anybody have some good examples/libraries of using python for HubSpot automations instead of js?",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-02-17 11:57:57"
      },
      {
        "time_stamp": "2023-02-17 12:33:57"
      },
      {
        "time_stamp": "2023-02-24 09:57:43"
      },
      {
        "time_stamp": "2023-02-24 10:00:49"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Zimo",
      "poster_handle": "matt_zimo"
    },
    "time_stamp": "2023-02-17 11:46:30",
    "text": "I'm using a webhook in a workflow to make a GET request to another one of our system. When I'm testing it, I get the following error: Testing results include invalid JSON. Select up to 20 fields from the webhook response to output that can be used in later actions in the workflow.\"  How do I select the response fields?",
    "reply_count": 5,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-02-17 12:03:10"
      },
      {
        "time_stamp": "2023-02-17 12:03:59"
      },
      {
        "time_stamp": "2023-02-17 12:04:43"
      },
      {
        "time_stamp": "2023-02-17 12:20:04"
      },
      {
        "time_stamp": "2023-02-17 12:34:08"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-02-17 11:57:57",
    "text": "Any specific examples you are looking to do? I'm happy to convert my js to python"
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-02-17 12:03:10",
    "text": "Is your we hook returning a valid json response?"
  },
  {
    "poster": {
      "poster_name": "Nelly Harb",
      "poster_handle": "nelly.harb"
    },
    "time_stamp": "2023-02-17 12:03:56",
    "text": "Hey everyone, I wanted to know if it is possible to create a custom code workflow related to labels?\n\nI want to copy the name of the contact associated to the deal, with the label “Decision Maker” (on the deal), and paste their name on the “Decision Maker Name” deal property.\n\nAny help or guidance on where I should be looking would be highly appreciated :nevergonnagiveyouup:",
    "reply_count": 12,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-02-17 12:22:01"
      },
      {
        "time_stamp": "2023-02-17 12:36:23"
      },
      {
        "time_stamp": "2023-02-17 12:38:24"
      },
      {
        "time_stamp": "2023-02-17 12:38:30"
      },
      {
        "time_stamp": "2023-02-17 12:38:33"
      },
      {
        "time_stamp": "2023-02-17 12:38:38"
      },
      {
        "time_stamp": "2023-02-17 12:47:38"
      },
      {
        "time_stamp": "2023-02-17 12:53:13"
      },
      {
        "time_stamp": "2023-02-22 13:14:28"
      },
      {
        "time_stamp": "2023-02-22 13:50:55"
      },
      {
        "time_stamp": "2023-02-22 13:51:02"
      },
      {
        "time_stamp": "2023-02-22 13:51:31"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Zimo",
      "poster_handle": "matt_zimo"
    },
    "time_stamp": "2023-02-17 12:03:59",
    "text": "I don't know."
  },
  {
    "poster": {
      "poster_name": "Matt Zimo",
      "poster_handle": "matt_zimo"
    },
    "time_stamp": "2023-02-17 12:04:43",
    "text": "oh, it's not a json, it's xml"
  },
  {
    "poster": {
      "poster_name": "Matt Zimo",
      "poster_handle": "matt_zimo"
    },
    "time_stamp": "2023-02-17 12:20:04",
    "text": "how do I choose the xml fields to copy into my HubSpot record?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 12:22:01",
    "text": "Yeah you could definitely do that just use the associations api to pull in all the contacts with that particular label and then use the contacts api to figure out their name"
  },
  {
    "poster": {
      "poster_name": "Logan Armstrong",
      "poster_handle": "logan565"
    },
    "time_stamp": "2023-02-17 12:33:57",
    "text": "Thanks Justin, if you have the time it would be great to see any simple ones – we have an intern working on some coded actions, and I'm proficient enough with js, but she's much more versed on python so I'm just looking for some training materials for her"
  },
  {
    "poster": {
      "poster_name": "Matt Zimo",
      "poster_handle": "matt_zimo"
    },
    "time_stamp": "2023-02-17 12:34:08",
    "text": "ooh, maybe I should use a custom code action instead of the send a webhook action"
  },
  {
    "poster": {
      "poster_name": "Nelly Harb",
      "poster_handle": "nelly.harb"
    },
    "time_stamp": "2023-02-17 12:36:23",
    "text": "Thanks Carter for that info.\nI see multiple version of the Associations API, do you know which one specifically? This is new to me :melting_face:"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 12:38:24",
    "text": "<https://developers.HubSpot.com/docs/api/crm/deals>"
  },
  {
    "text": "You're totally good, this one is going to be the best one:",
    "time_stamp": "2023-02-17 12:38:30"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 12:38:33",
    "text": "object type is 0-1"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 12:38:38",
    "text": "(contacts)"
  },
  {
    "poster": {
      "poster_name": "Nelly Harb",
      "poster_handle": "nelly.harb"
    },
    "time_stamp": "2023-02-17 12:47:38",
    "text": "Thank you so much, I will run this solution by the team!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 12:53:13",
    "text": "of course, let me know how it goes"
  },
  {
    "poster": {
      "poster_name": "Logan Armstrong",
      "poster_handle": "logan565"
    },
    "time_stamp": "2023-02-17 15:37:39",
    "text": "is there a way to parse the month of a date picker property? I'm looking for the Hubl datetime filters that I think could probably do this but it seems they've been deprecated",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-02-17 21:39:32"
      },
      {
        "time_stamp": "2023-02-17 21:52:51"
      },
      {
        "time_stamp": "2023-02-20 10:42:31"
      },
      {
        "time_stamp": "2023-02-20 10:42:45"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-17 21:39:32",
    "text": "What format to do you want it in? for example (using May): 05, 5, M, MAY"
  },
  {
    "text": "",
    "time_stamp": "2023-02-17 21:52:51"
  }
]