[
  {
    "poster": {
      "poster_name": "Shamash Athoraya",
      "poster_handle": "shamash.athoraya"
    },
    "time_stamp": "2019-06-19 05:30:08",
    "edited": {
      "time_stamp": "2019-06-19 05:30:57"
    },
    "text": "is the `{% video_player %}` tag the only/best way to enable statistics on video playback?",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-06-19 06:55:45"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Shamash Athoraya",
      "poster_handle": "shamash.athoraya"
    },
    "time_stamp": "2019-06-19 06:55:45",
    "text": "If so, how would you use it in a custom module? Don't understand how I can get the file id. Do I have to use the API or can you do it with a file selector field somehow?"
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2019-06-19 07:41:39",
    "text": "is there a way to escape hubl? so if i write hubl in a rich text area but want it to display when i add the field to my page?",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-06-19 07:47:45"
      },
      {
        "time_stamp": "2019-06-19 08:01:08"
      },
      {
        "time_stamp": "2019-06-19 08:06:22"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Chris Abplanalp",
      "poster_handle": "cabplanalp"
    },
    "time_stamp": "2019-06-19 07:41:54",
    "text": "Is there any HubL function that returns all Blog posts, not just limit to 200? How do other folks get around the 200 limit of the “blog_recent_posts” function?",
    "reply_count": 9,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-06-19 07:47:07"
      },
      {
        "time_stamp": "2019-06-19 07:47:35"
      },
      {
        "time_stamp": "2019-06-19 07:48:17"
      },
      {
        "time_stamp": "2019-06-19 07:50:05"
      },
      {
        "time_stamp": "2019-06-19 07:50:29"
      },
      {
        "time_stamp": "2019-06-19 07:50:52"
      },
      {
        "time_stamp": "2019-06-19 07:56:21"
      },
      {
        "time_stamp": "2019-06-19 07:57:16"
      },
      {
        "time_stamp": "2019-06-19 08:32:20"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-06-19 07:47:07",
    "text": "the blog template itself will return 1k posts if that helps"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-06-19 07:47:35",
    "text": "otherwise, you'll have to use the API directly"
  },
  {
    "poster": {
      "poster_name": "Tim L",
      "poster_handle": "tim462"
    },
    "time_stamp": "2019-06-19 07:47:45",
    "edited": {
      "time_stamp": "2019-06-19 07:48:02"
    },
    "text": "There’s the ‘edit source code’ option which would let you plug in what you want. There is also exactly  an escape filter: <https://designers.HubSpot.com/docs/hubl/hubl-supported-filters#escape>"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-06-19 07:48:17",
    "text": "<https://developers.HubSpot.com/docs/methods/blogv2/get_blog_posts>"
  },
  {
    "poster": {
      "poster_name": "Chris Abplanalp",
      "poster_handle": "cabplanalp"
    },
    "time_stamp": "2019-06-19 07:50:05",
    "text": "<@U7V9DQ31P> but how do u make calls to the API with JS without exposing API key"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-06-19 07:50:29",
    "text": "have to run your own server and enable CORS on that, then make your JS calls to that server"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-06-19 07:50:52",
    "text": "<https://www.kelp.agency/blog/how-to-enable-cors-ajax-requests-for-any-HubSpot-api>"
  },
  {
    "poster": {
      "poster_name": "Chris Abplanalp",
      "poster_handle": "cabplanalp"
    },
    "time_stamp": "2019-06-19 07:56:21",
    "text": "<@U7V9DQ31P>, thank you for this, I believe I over complicated from a previous project where I was pulling in multiple posts across multiple blogs, I am now dealing with one blog only so from what you said, one blog can have 1K by default so we might be good"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-06-19 07:57:16",
    "text": "yeah you should be good, just use the blog template like it's intended :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2019-06-19 08:01:08",
    "text": "It’s actually quite a complicated thing with  a form response message and personalisation token that I manually add to create the form but i need the personalisation token to stay as {{ personalisation.etc }} to go into the form js,\nI guess the easiest way is to edit the source and add a {% raw %} tag around the content but i don’t want the client to have to do that"
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2019-06-19 08:06:22",
    "text": "i found |tojson does what i want"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-06-19 08:32:20",
    "text": "would be nice if there wasnt that 200post limit, though..."
  },
  {
    "poster": {
      "poster_name": "Jonathan Stanis",
      "poster_handle": "jstanis"
    },
    "time_stamp": "2019-06-19 11:34:01",
    "text": "Does anyone have a method of filtering out blog posts that have recently been visited from a list of related posts that appears at the bottom of a blog post? I feel like this is not possible."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-06-19 12:56:11",
    "text": "you could randomize the recent posts"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2019-06-19 13:00:05",
    "text": "New Try\n\nI have question about &lt;code&gt; and &lt;pre&gt; into blog post.\n\nI want to add this code (an extract of .yaml) in a blog post\n{{- range $job, $val := .Values.cronjob.crons }}\n\nFirst I tried\n1/ &lt;pre&gt;&lt;code&gt;{{- range $job, $val := .Values.cronjob.crons }}&lt;/pre&gt;&lt;/code&gt; : doesn’t work\n\nSo I think I need to escape {{ and }} because {{ and }}  are HubL terms\nThen I tried\n2/ {% raw %}&lt;pre&gt;&lt;code&gt;{{- range $job, $val := .Values.cronjob.crons }}&lt;/pre&gt;&lt;/code&gt;{% endraw %} : doesn’t work\n\nDoes anyone have a solution to print code into a blog post in HubSpot ?",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-06-20 07:02:30"
      },
      {
        "time_stamp": "2019-06-20 07:04:23"
      },
      {
        "time_stamp": "2019-06-26 18:23:17"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-06-19 13:02:56",
    "text": "<https://carbon.now.sh>",
    "reply_count": 5,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-06-19 13:05:02"
      },
      {
        "time_stamp": "2019-06-19 13:05:30"
      },
      {
        "time_stamp": "2019-06-19 13:05:44"
      },
      {
        "time_stamp": "2019-06-19 13:06:05"
      },
      {
        "time_stamp": "2019-06-19 13:08:18"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2019-06-19 13:05:02",
    "text": "Interesting, but there is no way to put directly code because my client is an IT firm and produce some code for his community\n\nI know developper would prefer get directly code than image"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-06-19 13:05:30",
    "text": "you can iframe it"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-06-19 13:05:44",
    "text": "&lt;iframe\n  src=\"<https://carbon.now.sh/embed/?bg=rgba(239%2C40%2C44%2C1)&amp;t=one-light&amp;wt=none&amp;l=auto&amp;ds=true&amp;dsyoff=20px&amp;dsblur=68px&amp;wc=true&amp;wa=true&amp;pv=56px&amp;ph=56px&amp;ln=false&amp;fm=Hack&amp;fs=14px&amp;lh=143%25&amp;si=false&amp;es=2x&amp;wm=false&amp;code=.google%2520%257Bcolor%253A%2520blue%257D>\"\n  style=\"transform:scale(0.7); width:1024px; height:473px; border:0; overflow:hidden;\"\n  sandbox=\"allow-scripts allow-same-origin\"&gt;\n&lt;/iframe&gt;"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2019-06-19 13:06:05",
    "text": "Yes I will try"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-06-19 13:08:18",
    "text": "Append a GitHub gist id to the url"
  },
  {
    "text": "I'm having some trouble including CSS files in my coded template-- using the traditional &lt;link&gt; for CDN files works fine.. I tried to follow the HubL documentation, however I can't seem to get this working-- am I doing it wrong? Thanks for all the help, this community has been a saving grace :heart:",
    "time_stamp": "2019-06-19 14:12:38",
    "reply_count": 4,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-06-19 14:17:06"
      },
      {
        "time_stamp": "2019-06-19 14:17:16"
      },
      {
        "time_stamp": "2019-06-19 14:21:17"
      },
      {
        "time_stamp": "2019-06-19 14:22:45"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-06-19 14:17:06",
    "text": "right click your css file in the finder click copy public url, grab the path you see in the generated code plop that in where your path is in the include"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-06-19 14:17:16",
    "text": "it’s likely something might be just slightly off there"
  },
  {
    "poster": {
      "poster_name": "Mo Tanveer",
      "poster_handle": "mtanveer"
    },
    "time_stamp": "2019-06-19 14:21:17",
    "text": "{{ get_public_template_url('TEST/style.css') }} is what I get, and each time I try it-- no results. I've tried both the path and the actual generated code."
  },
  {
    "poster": {
      "poster_name": "Jason Rosa",
      "poster_handle": "jasonrosa"
    },
    "time_stamp": "2019-06-19 14:22:45",
    "text": "Hey Mo, if you want to send me a DM with a link to your template, I'd be happy to give this a quick look."
  },
  {
    "poster": {
      "poster_name": "Joe",
      "poster_handle": "joe"
    },
    "time_stamp": "2019-06-19 15:16:45",
    "text": "I think i'm having a dumb moment, i have the following syntax:\n```\n{% set inventory_avail = false %}\n{% for item in variants %}\n  {% if item.inventory_level &gt; 0 %} {# there are some true in my variants variable #}\n    {% set inventory_avail = true %} {# the variable outside the loop should now be true #}\n  {% endif %}\n  {{ inventory_avail }} {# returns true #}\n{% endfor %}\n{{ inventory_avail }} {# returns false #}\n```\nI understand variables declared within loops are scoped to that loop, but i'd assume calling a {% set %} on a higher scoped variable would update its context.",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-06-19 15:23:31"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Joe",
      "poster_handle": "joe"
    },
    "time_stamp": "2019-06-19 15:23:31",
    "text": "Well, it's not the most ideal / cleanest, but it works:\n```\n{% set inventory_avail = {\"avail\": false} %}\n{% for item in variants %}\n  {% if item.inventory_level &gt; 0 %}{% set inventory_avail2 = inventory_avail.update({\"avail\": true}) %}{% endif %}\n{% endfor %}\n{{ inventory_avail.avail }} {# returns true if a variant has inventory #}\n```"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-06-19 15:27:10",
    "text": "anyone got a trick for getting the current page’s depth based on a menu?\n\nExample: I need to change an element’s appearance if it’s a 2nd level item in the main menu, but it needs to have another appearance for 3rd level item.",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-06-19 15:36:31"
      },
      {
        "time_stamp": "2019-06-19 15:37:22"
      },
      {
        "time_stamp": "2019-06-19 15:37:23"
      },
      {
        "time_stamp": "2019-06-19 15:38:29"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-06-19 15:27:38",
    "text": "isnt there a class for level 2"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-06-19 15:28:16",
    "text": "well in the menu itself I have hs-menu-depth-2 but that’s not exactly what I’m trying to do"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-06-19 15:29:09",
    "text": "kinda hard to put into words but basically I need to trigger a different set of css for a sidebar menu based on if the current page is a 2nd level or 3rd level page, and I’m not meaning the link for the active page"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-06-19 15:29:16",
    "text": "I’m meaning I need to change the whole menu"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-06-19 15:29:20",
    "text": "based on it"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-06-19 15:29:37",
    "text": "like a body class"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-06-19 15:29:57",
    "text": "body class would work, but even if there’s something I can grab using HubL"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-06-19 15:30:10",
    "text": "js a no go?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-06-19 15:32:02",
    "text": "it’s not a no-go, just not as easy as I was hoping it to be. I’ll start working that way though as it’s better than where I’m currently at"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-06-19 15:32:26",
    "text": "var that grabs current active menu link"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-06-19 15:32:35",
    "text": "compare with current url"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-06-19 15:36:31",
    "text": "Can you use the menu function?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-06-19 15:37:22",
    "text": "The node should have a depth property"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-06-19 15:37:23",
    "text": "I can, just would have to rewrite this module and I’m trying not to create extra work for myself on this. unfortunately though that’s the true right way to go on this I think"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-06-19 15:38:29",
    "text": "I might go that route though at this point. The way I’m currently going with it is a pain in the butt to work with"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-06-19 15:46:15",
    "text": "hey folks -- question about repeaters. Can you grab the length/number of items created in the module outside of the {% for %} loop?",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-06-19 15:59:17"
      },
      {
        "time_stamp": "2019-06-19 16:01:27"
      },
      {
        "time_stamp": "2019-06-19 16:04:02"
      },
      {
        "time_stamp": "2019-06-19 16:04:22"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-06-19 15:46:41",
    "text": "if so... how? My searches are failing me."
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2019-06-19 15:59:17",
    "text": "<@UDFTHC6PK> {{module.items|length}}"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-06-19 16:01:27",
    "text": "agh. thank you"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-06-19 16:04:02",
    "text": ":joy: I kept plugging in `.length` and was just so frustrated"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-06-19 16:04:22",
    "text": "maybe it's time to turn the brain off for the day...."
  }
]