[
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-01-31 05:25:19",
    "text": "<@UBDMV6Y9Y> ok, so I am assuming that there is a validation for the  header_ and footer_ includes for every html file on the ftp upload (in order to make it a template)"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-01-31 05:27:02",
    "text": "now i can't upload all my html blocks (that get compiled into a page with the includes) because, well, there just that: a block or portion of the page"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-01-31 05:28:17",
    "text": "maybe switch it back until there's a way to pass in \"yes this is a template, validate for _includes\" or \"no, this is just a content block of html, no need for _includes\""
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-01-31 06:06:57",
    "text": "<@U7SL518D6> so just to clarify on this, the only way to create modules with randomly generated (read unique) name's (for the intent of unique content in the page editor) is to build the template in the drag 'n' drop"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-01-31 06:07:20",
    "text": "ie theres no way to build a coded template like this:"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-01-31 06:07:35",
    "text": "```{% include 'a_text_block.html' %}\n\n{% include 'a_text_block.html' %}\n```"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-01-31 06:07:54",
    "text": "where a_text_block is:"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-01-31 06:08:19",
    "text": "```\n&lt;div&gt;\n  &lt;p&gt;\n    {% text \"unique_name\" label=\"Enter text here\", value=\"I love it here\" %}\n    &lt;/p&gt;\n&lt;/div&gt;\n```"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-31 06:08:53",
    "text": ":faceplam:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-31 06:09:42",
    "text": "you are missing the entire idea. Use custom modules. NOT HubL Tags. then you wont even need to do randomly generated names"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-31 06:09:59",
    "text": "Use a flex column if a similar layout is repeated, giving the editor more control"
  },
  {
    "poster": {
      "poster_name": "Liam Harwood",
      "poster_handle": "lharwood"
    },
    "time_stamp": "2019-01-31 06:58:50",
    "text": "Ah right, makes sense. I’ll switch it back, we’re currently looking into a better way to handle this."
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-01-31 07:00:38",
    "text": "thanks"
  },
  {
    "text": "<https://media.giphy.com/media/KJ1f5iTl4Oo7u/giphy.gif>",
    "time_stamp": "2019-01-31 07:02:26",
    "edited": {
      "time_stamp": "2019-01-31 07:05:06"
    }
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-01-31 07:03:20",
    "text": "damn no giphy in threads..."
  },
  {
    "poster": {
      "poster_name": "Liam Harwood",
      "poster_handle": "lharwood"
    },
    "time_stamp": "2019-01-31 07:20:33",
    "text": "It should be switched back now, sorry for any confusion"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-01-31 11:10:55",
    "text": "instead of a `+` try a `~`"
  },
  {
    "text": "what would cause an invalid property value?",
    "time_stamp": "2019-01-31 12:23:28"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 12:24:25",
    "text": "test code ```\nHTML\n\n&lt;div class=\"meeting_cost_calc\" {% if module.bg_image_desktop.src %} style=\"background-image: url({{ module.bg_image_desktop.src }});\"{% endif %}&gt;\n\nCSS\n.meeting_cost_calc {\n  background-size: cover;\n  background-position: center;\n}\n```"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 12:25:47",
    "text": "Could this have to do with HubSpot and permissions?"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 12:25:56",
    "text": "THis comes from the preview with all the iframe stuff."
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-31 12:34:22",
    "text": "looking at the inspector, in your background image url, you dont have a leading ’.  looks like this: ```background-image: 'url(https:cdnblahblah.png');```",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-01-31 12:43:06"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-31 12:34:51",
    "text": "which is dif than the code you put below the screen grab"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 12:38:01",
    "text": "I went to a test-portal to try again (because I have all permissions here)\n\n```&lt;section class=\"meeting_cost_calc\" {% if module.bg_image_desktop.src %} style=\"background-image: url({{ module.bg_image_desktop.src }});\" {% endif %}&gt;&lt;/section&gt;```\n\nresults in same issue.  The way I get it working on inspector is to add \" \" around the url."
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 12:41:56",
    "text": "So I have no idea how to fix this. I have been trying adding quotes.. Moving if end if inside the style, around it. all over"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 12:43:06",
    "text": "II added that myself when messing with inspector"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-01-31 12:43:48",
    "edited": {
      "time_stamp": "2019-01-31 12:47:00"
    },
    "text": "```&lt;section class=\"meeting_cost_calc\" style=\" {% if module.bg_image_desktop %}background-image: url('{{ module.bg_image_desktop.src }}');{% endif %}\" &gt;&lt;/section&gt;```"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 12:46:07",
    "text": "i did this"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 12:46:15",
    "text": "doing it again just in case."
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 12:46:28",
    "text": "```&lt;div class=\"meeting_cost_calc\" {% if module.bg_image_desktop.src %} style=\"background-image: url('{{ module.bg_image_desktop.src }}');\"{% endif %}&gt;```"
  },
  {
    "poster": {
      "poster_name": "Louie Gerodiaz",
      "poster_handle": "louiegerodiaz"
    },
    "time_stamp": "2019-01-31 12:46:34",
    "text": "you might find this helpful if you're using HubL `if` statements that way. got this idea around somewhere :eyes:"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 12:46:35",
    "text": "this is what I just sent."
  },
  {
    "poster": {
      "poster_name": "Louie Gerodiaz",
      "poster_handle": "louiegerodiaz"
    },
    "time_stamp": "2019-01-31 12:46:40",
    "text": "```\n&lt;section class=\"meeting_cost_calc\" style=\" {{ \"background-image: url('{{ module.bg_image_desktop.src }}');\" if module.bg_image_desktop }}\" &gt;&lt;/section&gt;\n```"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 12:47:00",
    "text": "hmm.. let me try this"
  },
  {
    "poster": {
      "poster_name": "Louie Gerodiaz",
      "poster_handle": "louiegerodiaz"
    },
    "time_stamp": "2019-01-31 12:48:00",
    "text": "wait, I think you might tweak it a bit further, haven't tested that one out on the design manager"
  },
  {
    "poster": {
      "poster_name": "Louie Gerodiaz",
      "poster_handle": "louiegerodiaz"
    },
    "time_stamp": "2019-01-31 12:49:51",
    "text": "```\n&lt;section class=\"meeting_cost_calc\" style=\" {{ \"background-image: url('\" ~ module.bg_image_desktop.src ~ \"');\" if module.bg_image_desktop }}\" &gt;&lt;/section&gt;\n```"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 12:49:51",
    "text": "```&lt;div class=\"meeting_cost_calc\" {% if module.bg_image_desktop.src %} style=\" {{ \"background-image: url('{{ module.bg_image_desktop.src }}')\" }};\"{% endif %}&gt;```\n\nexpression within expression did not work either."
  },
  {
    "poster": {
      "poster_name": "Louie Gerodiaz",
      "poster_handle": "louiegerodiaz"
    },
    "time_stamp": "2019-01-31 12:49:56",
    "text": "try this one instead"
  },
  {
    "poster": {
      "poster_name": "Louie Gerodiaz",
      "poster_handle": "louiegerodiaz"
    },
    "time_stamp": "2019-01-31 12:52:57",
    "text": "basically I'm just using the shorthand version of the `if` statement, so from\n```\n{% if variable %}\nPrint me\n{% endif %}\n```\n\nto\n\n```\n{{ 'Print me' if variable }}\n```"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 12:55:28",
    "text": "I see that. I have tried this way as well. Same idea. This should be working. As the other should also."
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 12:55:49",
    "text": "Can anyone tell me why this wouldnt work??\n```style=\"{% if module.bg_image_desktop.src %} background-image: url('\"{{ module.bg_image_desktop.src }}\"');{% endif %}\"&gt;```"
  },
  {
    "poster": {
      "poster_name": "Louie Gerodiaz",
      "poster_handle": "louiegerodiaz"
    },
    "time_stamp": "2019-01-31 12:58:02",
    "text": "I've notice you've already enclosed the url with both single and double quote. can you try to retain just the single one? something like this\n```\nstyle=\"{% if module.bg_image_desktop.src %} background-image: url('{{ module.bg_image_desktop.src }}');{% endif %}\"&gt;\n```"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 13:07:12",
    "edited": {
      "time_stamp": "2019-01-31 13:07:51"
    },
    "text": "```&lt;div class=\"meeting_cost_calc\" style=\"{% if module.bg_image_desktop.src %} background-image: url('{{ module.bg_image_desktop.src }}'); height: 100px;{% endif %}\"&gt;```\n\nGets me this in inspector and is all invalid...\n```\nbackground-image: url('<https://cdn2.HubSpot.net/hubfs/2799205/Video%20Shorts/can>'t-hear-you-ss.png'); height: 100px;\n```"
  },
  {
    "poster": {
      "poster_name": "Josh Anthony",
      "poster_handle": "janthony"
    },
    "time_stamp": "2019-01-31 13:08:39",
    "text": "there’s an apostrophe in the url"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 13:08:55",
    "text": "That! Has to be it!"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 13:09:06",
    "text": "I have been looking at code all day!"
  },
  {
    "poster": {
      "poster_name": "Josh Anthony",
      "poster_handle": "janthony"
    },
    "time_stamp": "2019-01-31 13:09:16",
    "text": "Been there, done that. :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 13:09:38",
    "text": "But... this comes after hubl sends the code to html"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 13:10:02",
    "text": "so, what should I do about that"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 13:10:09",
    "text": "I have surrounded in quotes"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 13:10:29",
    "text": "I can rename file. lol"
  },
  {
    "poster": {
      "poster_name": "Josh Anthony",
      "poster_handle": "janthony"
    },
    "time_stamp": "2019-01-31 13:10:47",
    "text": "Or do string replace `'` with `\\'`"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-31 13:11:52",
    "text": "```\nbackground-image: url(\"<https://cdn2.HubSpot.net/hubfs/2799205/Video%20Shorts/can't-hear-you-ss.png>\"); height: 100px;\n```"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 13:11:56",
    "text": "how? the file name is coming from hubl using fields"
  },
  {
    "poster": {
      "poster_name": "Josh Anthony",
      "poster_handle": "janthony"
    },
    "time_stamp": "2019-01-31 13:12:06",
    "text": "I think there’s a filter"
  },
  {
    "poster": {
      "poster_name": "Louie Gerodiaz",
      "poster_handle": "louiegerodiaz"
    },
    "time_stamp": "2019-01-31 13:12:22",
    "text": "`{{ module.bg_image_desktop.src|urlencode }}`"
  },
  {
    "poster": {
      "poster_name": "Josh Anthony",
      "poster_handle": "janthony"
    },
    "time_stamp": "2019-01-31 13:12:42",
    "text": "<https://designers.HubSpot.com/docs/hubl/hubl-supported-filters#replace>"
  },
  {
    "poster": {
      "poster_name": "Josh Anthony",
      "poster_handle": "janthony"
    },
    "time_stamp": "2019-01-31 13:12:52",
    "text": "or what Louie said"
  },
  {
    "poster": {
      "poster_name": "Josh Anthony",
      "poster_handle": "janthony"
    },
    "time_stamp": "2019-01-31 13:13:03",
    "text": "his is better :stuck_out_tongue:"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 13:13:30",
    "text": "yup... trying what louie showed.. that should essentially escape it"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-31 13:14:09",
    "text": "not sure that would work with the file name, it would work for paths but for name, it might require it to be as it is or it would throw a forbidden error."
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 13:14:46",
    "text": "Shouldnt HubSpot interface do this escaping for us?"
  },
  {
    "poster": {
      "poster_name": "Josh Anthony",
      "poster_handle": "janthony"
    },
    "time_stamp": "2019-01-31 13:15:03",
    "text": "We don’t always want to do the escape, though."
  },
  {
    "poster": {
      "poster_name": "Josh Anthony",
      "poster_handle": "janthony"
    },
    "time_stamp": "2019-01-31 13:15:37",
    "text": "To my understanding the includes are just outputting the raw string, so that shouldn’t matter, I think."
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-31 13:15:43",
    "text": "for example, escaping it would result in\n```\n<https://cdn2.HubSpot.net/hubfs/2799205/Video%20Shorts/can&amp;#39;t-hear-you-ss.png>\nor\n<https://cdn2.HubSpot.net/hubfs/2799205/Video%20Shorts/can&amp;apos;t-hear-you-ss.png>\n\n```\nwhich wouldnt resolve to the image name"
  },
  {
    "poster": {
      "poster_name": "Josh Anthony",
      "poster_handle": "janthony"
    },
    "time_stamp": "2019-01-31 13:16:04",
    "text": "For a urlencode, though?"
  },
  {
    "poster": {
      "poster_name": "Josh Anthony",
      "poster_handle": "janthony"
    },
    "time_stamp": "2019-01-31 13:16:48",
    "text": "That should just give you the chars in `%number`"
  },
  {
    "poster": {
      "poster_name": "Gabe Sousa",
      "poster_handle": "gsousa09"
    },
    "time_stamp": "2019-01-31 13:18:11",
    "text": "Hello everyone. Relatively new to HubSpot. Was wondering if there was a way to list out pages that are using a specific template using HUBL? I’m trying to print out a list of our case studies pages and could only find ways to list out blog pages. "
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-31 13:18:41",
    "text": "You would want this then:\n```\n<https://cdn2.HubSpot.net/hubfs/2799205/Video%20Shorts/can%27t-hear-you-ss.png>\n```"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-31 13:18:48",
    "text": "that would work for image path"
  },
  {
    "poster": {
      "poster_name": "Josh Anthony",
      "poster_handle": "janthony"
    },
    "time_stamp": "2019-01-31 13:18:51",
    "text": "Each blog post has a separate template, so just pull from that specific blog."
  },
  {
    "poster": {
      "poster_name": "Josh Anthony",
      "poster_handle": "janthony"
    },
    "time_stamp": "2019-01-31 13:18:56",
    "text": "<@UE2UDHRJ6>"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 13:19:06",
    "text": "I am renaming it.. but it looks like the system renamed it, but is using the old name still."
  },
  {
    "poster": {
      "poster_name": "Josh Anthony",
      "poster_handle": "janthony"
    },
    "time_stamp": "2019-01-31 13:19:18",
    "text": "HubSpot cache strikes again :rage:",
    "reply_count": 5,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-01-31 13:39:07"
      },
      {
        "time_stamp": "2019-01-31 13:41:04"
      },
      {
        "time_stamp": "2019-01-31 13:41:14"
      },
      {
        "time_stamp": "2019-01-31 13:41:25"
      },
      {
        "time_stamp": "2019-01-31 13:41:44"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 13:21:21",
    "text": "Deleted it entirely, and added it again. now it works"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 13:21:32",
    "text": "Man... this stuff is tiring lol"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-31 13:22:06",
    "text": "boo"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 13:22:18",
    "text": "I think I am so smart and I can code no problem... but I am fighting with drag and drop stuff stuff.",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-01-31 15:27:16"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 13:22:29",
    "text": "So really.. no so smart lol"
  },
  {
    "time_stamp": "2019-01-31 13:22:54",
    "text": "",
    "reply_count": 11,
    "reply_users_count": 5,
    "replies": [
      {
        "time_stamp": "2019-01-31 13:24:41"
      },
      {
        "time_stamp": "2019-01-31 13:28:54"
      },
      {
        "time_stamp": "2019-01-31 13:29:39"
      },
      {
        "time_stamp": "2019-01-31 13:33:20"
      },
      {
        "time_stamp": "2019-01-31 13:34:32"
      },
      {
        "time_stamp": "2019-01-31 13:37:43"
      },
      {
        "time_stamp": "2019-01-31 13:38:04"
      },
      {
        "time_stamp": "2019-01-31 13:38:34"
      },
      {
        "time_stamp": "2019-01-31 15:06:42"
      },
      {
        "time_stamp": "2019-01-31 15:08:41"
      },
      {
        "time_stamp": "2019-01-31 15:09:01"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 13:23:11",
    "text": "lol"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-01-31 13:24:41",
    "text": "<https://www.youtube.com/watch?v=DCu1G2rxj5c>"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-31 13:28:54",
    "text": "ha.  auto save every .3 sec"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-31 13:29:39",
    "text": "brilliant"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 13:33:20",
    "text": "Believe it or not. I use git even with these projects."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-31 13:34:32",
    "edited": {
      "time_stamp": "2019-01-31 13:34:46"
    },
    "text": "because of that video that <@U7ADCU3BM> linked we’ve considered having a dragon drop easter egg in the chrome extension"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-31 13:37:43",
    "text": "kinda curious - has anyone ever tried dragging my computer to the trash?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-31 13:38:04",
    "text": "does it error and go “you’re stupid” or?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-31 13:38:34",
    "text": "i hope it does say that"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-31 13:39:07",
    "text": "<https://github.com/williamspiro/HubSpot-Developer-Extension/wiki/So-you're-having-HubSpot-Caching-Issues%3F>"
  },
  {
    "poster": {
      "poster_name": "Josh Anthony",
      "poster_handle": "janthony"
    },
    "time_stamp": "2019-01-31 13:41:04",
    "text": "That would require me to use Chrome. :stuck_out_tongue:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-31 13:41:14",
    "text": "it’s worth it"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-31 13:41:25",
    "text": "trust me"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-31 13:41:44",
    "text": "even if you only use it as a secondary browser"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-01-31 15:06:42",
    "text": "<@U7SL518D6> I dragged all the system files on my second grade classroom's mac classic in the into the trash to see what would happen. computer didn't boot up after that..."
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-01-31 15:08:41",
    "edited": {
      "time_stamp": "2019-01-31 15:08:59"
    },
    "text": "so in a way, yes. But more like school-district-IT-person-calling-a-second-grader-stupid kind of thing"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-31 15:09:01",
    "text": "lol"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-01-31 15:11:59",
    "text": "...and :faceplam: aside I did get modules working the way needed, so thanks for the help this morning. I have been developing entire on the local hubl server, so seeing some of the benefits of using the DM a little more. still trying to find the balance between local dev and in the browser."
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-01-31 15:13:55",
    "text": "<https://media.giphy.com/media/AhJIPUnoUYgyA/giphy.gif>"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 15:21:24",
    "text": "Is hubl supported in rich text field?"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-01-31 15:25:52",
    "text": "yes"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-01-31 15:27:16",
    "text": "I've fought more with the drag and drop editor than literally anything else in terms of coding."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-31 15:29:24",
    "text": "no problem.\n\nYeah honestly I would say - while you’re still getting used to HubSpot, dev mostly in the design manager. It’s easier to translate the other way around, especially since you can’t do a lot of things via FTP"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 15:30:17",
    "text": "```{{ request.query_dict.test }}```\nshould pull from url with `?test=something`"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-01-31 15:30:28",
    "text": "discovering this the hard way..."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-31 15:30:41",
    "edited": {
      "time_stamp": "2019-01-31 15:31:12"
    },
    "text": "if you prefer to use build tools you can set up a code pen with some of your tools preconfigured then copy n paste the compiled code over. that way you get the best of both worlds.\n\nHowever you want to do it."
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 15:31:08",
    "text": "I am assuming you just put it in the editor as if it is normal text with the surrounding hubl tags?"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-01-31 15:31:49",
    "text": "this is mostly been my last few days"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-01-31 15:31:49",
    "text": "<https://thumbs.gfycat.com/DearestBrightAcouchi-small.gif>"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-01-31 15:32:05",
    "text": "in keeping with the trekkie theme..."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-31 15:32:10",
    "text": "lol"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-31 15:32:56",
    "text": "HubSpot takes a bit of getting used to but once you get the hang of it, there are a lot of benefits that come automatically"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-01-31 15:35:38",
    "text": "I can see those in the distance. backend management and a very \"customizable\" (aka big huge guardrails) editing environment for those content folks"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 15:35:41",
    "text": "Any tutorials on this? The code is not showing up on the page, but the value of query_dict.test doesnt show on the loaded page"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-01-31 15:35:44",
    "text": "to name a few"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-31 15:37:15",
    "text": "yea, auto minification and combining, caching, image resizing.  the Custom Module system is like the dream of developers. (modular legos)"
  },
  {
    "poster": {
      "poster_name": "Joel Warren",
      "poster_handle": "joel"
    },
    "time_stamp": "2019-01-31 15:41:03",
    "text": "yea should work, I normally have this in module code rather than rich text fields though",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-01-31 15:56:30"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-01-31 15:41:28",
    "text": "totally. I was treating html blocks like modules because thats how I've done it in django and other static site generators. all I am basically doing now is copying the markup into a custom module and presto, wrks just like I need it to."
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-01-31 15:41:47",
    "text": "btw saw your talk from inbound last year. helpful in getting my head around this concept"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-01-31 15:43:28",
    "text": "Are you adding it to edit source code, or straight into the WSIWYG?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-31 15:44:13",
    "edited": {
      "time_stamp": "2019-01-31 15:45:01"
    },
    "text": "Thanks, yeah, once you get into a flow with HubSpot you start to find ways to make your work more “site agnostic” so the next time you’re working on a HS site that has that problem you can copy your modules/files to the next portal and have a blank unthemed slate basically that you just theme up and presto.\n\nMakes the work more enjoyable not repeating things you’ve done before, and speeds things up too"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-01-31 15:49:02",
    "text": "works for me in edit source code"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-01-31 15:50:41",
    "text": "plus the fact that all website are eseentially the same"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-01-31 15:54:12",
    "text": "<http://www.novolume.co.uk/admin/resources/template-01-.png>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-31 15:55:10",
    "text": "yep"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 15:55:25",
    "text": "Yes. The problem is, the query string that it is showing is not what I redirected to"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 15:55:43",
    "text": "The `request.referrer` shows the querys I want"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 15:56:03",
    "text": "now I am trying to figure out how to extract these using hubl"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 15:56:30",
    "text": "I would really like to use Rich text so company can work with the code."
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 15:58:24",
    "text": "This COULD be because this is in a iframe and the HubSpot viewer is messing this up"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-01-31 15:58:53",
    "text": "I think you might be on to something"
  },
  {
    "poster": {
      "poster_name": "Michael Bruce Allen",
      "poster_handle": "codeamend"
    },
    "time_stamp": "2019-01-31 16:01:00",
    "text": "Well. I found that buy using the editor of the web page section going to the eye and using that address. It all worked."
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-01-31 16:07:43",
    "text": "yup, page preview is your best friend"
  }
]