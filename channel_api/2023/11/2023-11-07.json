[
  {
    "poster": {
      "poster_name": "Tommie van Zegveld",
      "poster_handle": "tommie.vanzegveld"
    },
    "time_stamp": "2023-11-07 05:30:48",
    "text": "Hey guys, I quikly joined to ask a quick unclear question about OAuth tokens.\nThe access token expires based on the \"expires_in\" parameter. But I was wondering whether or not the refresh token also has an expiration date.\nI could not find the answer in the documentation",
    "reply_count": 2,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-11-07 08:01:56"
      },
      {
        "time_stamp": "2023-11-07 08:02:09"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Adam Brown",
      "poster_handle": "abrown"
    },
    "time_stamp": "2023-11-07 07:36:40",
    "text": "hey chat! trying to do a GET all contacts with the endpoint for that respective call. running into an issue where I am declaring other properties in my parameters that are not the standard ones that are returned, but it will not display the info when I log the output. (I have verified that there is data for the properties which is what is confusing to me\n`const contactParams = {`\n  `properties: [\"hs_object_id\", \"phone\", \"email\", \"big_commerce_customer_id\"],`\n  `limit: 10, // Set limit to 10 as requested`\n`};`\nthe output will not include the phone = (HubSpot property) or the big_commerce_customer_id = (custom property), eventhough I am asking to.\n\nAny info would be appreciated as I am kind of lost as to why its telling me from a value that I am passing that there is no value for these properties",
    "reply_count": 45,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-11-07 08:07:40"
      },
      {
        "time_stamp": "2023-11-07 08:09:11"
      },
      {
        "time_stamp": "2023-11-07 08:09:28"
      },
      {
        "time_stamp": "2023-11-07 08:09:43"
      },
      {
        "time_stamp": "2023-11-07 08:09:58"
      },
      {
        "time_stamp": "2023-11-07 08:10:24"
      },
      {
        "time_stamp": "2023-11-07 08:10:36"
      },
      {
        "time_stamp": "2023-11-07 08:10:49"
      },
      {
        "time_stamp": "2023-11-07 08:10:55"
      },
      {
        "time_stamp": "2023-11-07 08:11:06"
      },
      {
        "time_stamp": "2023-11-07 08:11:14"
      },
      {
        "time_stamp": "2023-11-07 08:11:26"
      },
      {
        "time_stamp": "2023-11-07 08:11:35"
      },
      {
        "time_stamp": "2023-11-07 08:12:08"
      },
      {
        "time_stamp": "2023-11-07 08:12:23"
      },
      {
        "time_stamp": "2023-11-07 08:12:52"
      },
      {
        "time_stamp": "2023-11-07 08:13:45"
      },
      {
        "time_stamp": "2023-11-07 08:14:01"
      },
      {
        "time_stamp": "2023-11-07 08:14:28"
      },
      {
        "time_stamp": "2023-11-07 08:15:14"
      },
      {
        "time_stamp": "2023-11-07 08:15:18"
      },
      {
        "time_stamp": "2023-11-07 08:15:31"
      },
      {
        "time_stamp": "2023-11-07 08:15:46"
      },
      {
        "time_stamp": "2023-11-07 08:16:15"
      },
      {
        "time_stamp": "2023-11-07 08:16:21"
      },
      {
        "time_stamp": "2023-11-07 08:16:51"
      },
      {
        "time_stamp": "2023-11-07 08:17:24"
      },
      {
        "time_stamp": "2023-11-07 08:17:54"
      },
      {
        "time_stamp": "2023-11-07 08:17:54"
      },
      {
        "time_stamp": "2023-11-07 08:18:20"
      },
      {
        "time_stamp": "2023-11-07 08:18:30"
      },
      {
        "time_stamp": "2023-11-07 08:18:42"
      },
      {
        "time_stamp": "2023-11-07 08:18:49"
      },
      {
        "time_stamp": "2023-11-07 08:19:44"
      },
      {
        "time_stamp": "2023-11-07 08:19:47"
      },
      {
        "time_stamp": "2023-11-07 08:20:02"
      },
      {
        "time_stamp": "2023-11-07 08:20:08"
      },
      {
        "time_stamp": "2023-11-07 08:20:40"
      },
      {
        "time_stamp": "2023-11-07 08:22:36"
      },
      {
        "time_stamp": "2023-11-07 08:28:36"
      },
      {
        "time_stamp": "2023-11-07 08:29:02"
      },
      {
        "time_stamp": "2023-11-07 08:29:24"
      },
      {
        "time_stamp": "2023-11-07 08:30:18"
      },
      {
        "time_stamp": "2023-11-07 08:32:04"
      },
      {
        "time_stamp": "2023-11-07 08:32:14"
      }
    ]
  },
  {
    "text": "Hey Tommie. In the context of HubSpot's OAuth implementation, refresh tokens do not technically expire on their own. However, there are certain conditions where a refresh token may become invalid before that period:\n1. A user manually revokes the refresh token from their account settings.\n2. HubSpot forcibly revokes the refresh token due to a security concern.\n3. The app is updated in such a way that the scopes change, requiring a new authorization.\nIt's important to handle cases where a refresh token may no longer work by prompting users to re-authorize your application. If you're ever in doubt, try using your refresh token to fetch a new access tokenâ€”if the request fails because the refresh token is invalid, you would then guide the user through the authorization process again.\nWhen you use a refresh token to get a new access token, HubSpot will also return a new refresh token which you should store and use for subsequent refreshes.\nHere's the section on refreshing access tokens using refresh tokens from the docs <https://developers.HubSpot.com/docs/api/oauth/tokens>\n\nYou can get a new refresh token from this endpoint:",
    "time_stamp": "2023-11-07 08:01:56",
    "edited": {
      "time_stamp": "2023-11-07 08:02:38"
    }
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:02:09",
    "text": "Also here's this from the community: <https://community.HubSpot.com/t5/APIs-Integrations/Does-the-OAuth-refresh-token-expire/m-p/336010/highlight/true#M32681>"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:07:40",
    "text": "so you'll submit the properties in the url of the request not the body. So your URL should look like this:\n\n```<https://api.hubapi.com/crm/v4/objects/contacts/[contactid]?properties=phone,big_commerce_customer_id>```"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:09:11",
    "text": "and the properties are just comma seperated"
  },
  {
    "poster": {
      "poster_name": "Adam Brown",
      "poster_handle": "abrown"
    },
    "time_stamp": "2023-11-07 08:09:28",
    "text": "I am doing this in Node.JS, not a curl, api refencse docs show passing a parameters function"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:09:43",
    "text": "are you using the batch api?"
  },
  {
    "poster": {
      "poster_name": "Adam Brown",
      "poster_handle": "abrown"
    },
    "time_stamp": "2023-11-07 08:09:58",
    "text": "retrieve all contacts"
  },
  {
    "poster": {
      "poster_name": "Adam Brown",
      "poster_handle": "abrown"
    },
    "time_stamp": "2023-11-07 08:10:24",
    "text": "<https://developers.HubSpot.com/docs/api/crm/contacts#retrieve-contacts>"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:10:36",
    "text": "yes, but which endpoint?"
  },
  {
    "poster": {
      "poster_name": "Adam Brown",
      "poster_handle": "abrown"
    },
    "time_stamp": "2023-11-07 08:10:49",
    "text": "<https://api.hubapi.com/crm/v3/objects/contacts>"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:10:55",
    "text": "Which endpoint?"
  },
  {
    "poster": {
      "poster_name": "Adam Brown",
      "poster_handle": "abrown"
    },
    "time_stamp": "2023-11-07 08:11:06",
    "text": "the one I just sent"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:11:14",
    "text": "That's not a particular endpoint"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:11:26",
    "text": "does your url look like this?\n*/crm/v3/objects/contacts/batch/read*"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:11:35",
    "text": "or like this:\n*/crm/v3/objects/contacts/*"
  },
  {
    "poster": {
      "poster_name": "Adrian Galicia",
      "poster_handle": "adrian.galicia"
    },
    "time_stamp": "2023-11-07 08:11:45",
    "text": "thankyou <@U01QVR44MEY>"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:12:08",
    "text": "Yes for that endpoint you submit the properties parameter in the url, as a query parameter"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:12:23",
    "text": "the batch endpoint is the one where you submit the properties parameter in the body"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:12:52",
    "text": "You'll use this url:\n```<https://api.hubapi.com/crm/v4/objects/contacts/?properties=phone,big_commerce_customer_id&amp;limit=10>```\n"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:13:45",
    "text": "Here's the Node axios code for you:\n\n```const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '<https://api.hubapi.com/crm/v4/objects/contacts?properties=phone,big_commerce_customer_id&amp;limit=10>',\n  headers: { \n    'Authorization': 'Bearer pat-XXXXXXXX'\n  }\n};\n\naxios.request(config)\n.then((response) =&gt; {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) =&gt; {\n  console.log(error);\n});```\n"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:14:01",
    "text": "just replace pat-XXXXXXX with your private app token"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:14:09",
    "text": "of course"
  },
  {
    "poster": {
      "poster_name": "Adam Brown",
      "poster_handle": "abrown"
    },
    "time_stamp": "2023-11-07 08:14:28",
    "text": "why would the reference docs say that you can add any properties in a query parameter?"
  },
  {
    "text": "",
    "time_stamp": "2023-11-07 08:15:14"
  },
  {
    "text": "",
    "time_stamp": "2023-11-07 08:15:18"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:15:31",
    "text": "That's the batch read endpoint, NOT the list endpoint"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:15:46",
    "text": "You're attempting to use the list endpoint if I understand correctly"
  },
  {
    "text": "",
    "time_stamp": "2023-11-07 08:16:15"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:16:21",
    "text": "provide the parameters in the URL"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:16:51",
    "text": "hence the `?properties=phone,big_commerce_customer_id&amp;limit=10`"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:17:24",
    "text": "you provide the parameter different depending on which endpoint you're using"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:17:54",
    "text": "usually batch endpoints take everything in the body of the request and the other endpoints usually have some query parameters"
  },
  {
    "poster": {
      "poster_name": "Adam Brown",
      "poster_handle": "abrown"
    },
    "time_stamp": "2023-11-07 08:17:54",
    "text": "oka I will give it a go, but to answer your question, I was attempting to do what this bullet point says:\n\n To request a list of all contacts, make a `GET` request to `/crm/v3/objects/contacts`."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:18:20",
    "text": "yep yep, use the URL above or the node axios code I provided"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:18:30",
    "text": "let me know how it goes"
  },
  {
    "poster": {
      "poster_name": "Adam Brown",
      "poster_handle": "abrown"
    },
    "time_stamp": "2023-11-07 08:18:42",
    "text": "the limit was just for testing so I wasn't pulling a list of 2 million +"
  },
  {
    "poster": {
      "poster_name": "Adam Brown",
      "poster_handle": "abrown"
    },
    "time_stamp": "2023-11-07 08:18:49",
    "text": "appreciate the help sir"
  },
  {
    "poster": {
      "poster_name": "Adam Brown",
      "poster_handle": "abrown"
    },
    "time_stamp": "2023-11-07 08:19:44",
    "text": "does it change anything that I am not using the client library?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:19:47",
    "text": "of course man, the endpoint will only allow you to pull up to 500 at a time. You have to use the `after` parameter to pull the next group"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:20:02",
    "text": "nope nope, I really don't like using the client library"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:20:08",
    "text": "the endpoints are usually more reliable"
  },
  {
    "poster": {
      "poster_name": "Adam Brown",
      "poster_handle": "abrown"
    },
    "time_stamp": "2023-11-07 08:20:40",
    "edited": {
      "time_stamp": "2023-11-07 08:21:46"
    },
    "text": "thought you could only pull a max list of 100 per the limitations guide?"
  },
  {
    "poster": {
      "poster_name": "Adam Brown",
      "poster_handle": "abrown"
    },
    "time_stamp": "2023-11-07 08:22:36",
    "text": "also where can I find the docs ofr when to put it in the URL verse passing it in parameters"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:28:36",
    "text": "Yes sorry 100 objects per call is the correct limit."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:29:02",
    "text": "for the url verse body. I suggest looking at the example requests on the right hand side"
  },
  {
    "text": "",
    "time_stamp": "2023-11-07 08:29:24"
  },
  {
    "poster": {
      "poster_name": "Adam Brown",
      "poster_handle": "abrown"
    },
    "time_stamp": "2023-11-07 08:30:18",
    "text": "the one endpoint you sent uses a v4? I see nothing about that in the docs. Am I able to to change the examples  NOT client library?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:32:04",
    "text": "There are some v4 endpoints (specifically for use with the associations api). v3 and v4 are usually pretty interchangeable with object endpoints"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-07 08:32:14",
    "text": "They won't return data differently"
  },
  {
    "poster": {
      "poster_name": "Nicolas CALMETTES",
      "poster_handle": "nicolas.calmettes"
    },
    "time_stamp": "2023-11-07 08:33:59",
    "edited": {
      "time_stamp": "2023-11-07 08:51:14"
    },
    "text": ":wave::skin-tone-2: Hello everyone, I don't understand why when I make an API call to obtain the list of all quotes from our HubSpot account, the hs_status value only returns DRAFT or APPROVAL_NOT_NEEDED without distinction between Signed, Signature pending, etc... Does someone could help me?",
    "reply_count": 2,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-11-08 08:09:07"
      },
      {
        "time_stamp": "2023-11-08 08:09:54"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Eric Hirsh",
      "poster_handle": "ehirsh"
    },
    "time_stamp": "2023-11-07 11:05:54",
    "text": "thanks for replying <@U064MAXBHNC>. I've heard that use case a few times (embedded support portal in your SaaS product). Do I assume correctly that you use the Tickets API today to get the ticket information?  SOmething we are considering but no timelines to report at this time.\n\nWhat would a solution look like to you / what object/API do you imagine going to to find an associated id, and then where do you imagine going to get the full details?"
  },
  {
    "poster": {
      "poster_name": "Yiz Segall",
      "poster_handle": "yiz.segall"
    },
    "time_stamp": "2023-11-07 12:45:23",
    "text": "anyone got any good ways of dealing with rate limits? I using the CRM search to find the company that matches a company in another system. Theoretically I could find all the companies in 1 api call, but I would lose the easy ability to match the company id in HubSpot to the third party company. Unless there is an easy way to do this?",
    "reply_count": 35,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-11-07 16:58:37"
      },
      {
        "time_stamp": "2023-11-08 06:29:26"
      },
      {
        "time_stamp": "2023-11-08 06:31:31"
      },
      {
        "time_stamp": "2023-11-08 06:32:11"
      },
      {
        "time_stamp": "2023-11-08 06:35:30"
      },
      {
        "time_stamp": "2023-11-08 06:36:04"
      },
      {
        "time_stamp": "2023-11-08 06:36:17"
      },
      {
        "time_stamp": "2023-11-08 06:36:56"
      },
      {
        "time_stamp": "2023-11-08 06:37:00"
      },
      {
        "time_stamp": "2023-11-08 06:37:38"
      },
      {
        "time_stamp": "2023-11-08 06:37:44"
      },
      {
        "time_stamp": "2023-11-08 06:37:50"
      },
      {
        "time_stamp": "2023-11-08 06:38:09"
      },
      {
        "time_stamp": "2023-11-08 06:38:33"
      },
      {
        "time_stamp": "2023-11-08 06:38:52"
      },
      {
        "time_stamp": "2023-11-08 06:39:06"
      },
      {
        "time_stamp": "2023-11-08 06:39:12"
      },
      {
        "time_stamp": "2023-11-08 06:39:25"
      },
      {
        "time_stamp": "2023-11-08 06:39:41"
      },
      {
        "time_stamp": "2023-11-08 06:40:12"
      },
      {
        "time_stamp": "2023-11-08 06:40:16"
      },
      {
        "time_stamp": "2023-11-08 06:40:52"
      },
      {
        "time_stamp": "2023-11-08 06:41:27"
      },
      {
        "time_stamp": "2023-11-08 06:41:54"
      },
      {
        "time_stamp": "2023-11-08 06:42:23"
      },
      {
        "time_stamp": "2023-11-08 06:43:42"
      },
      {
        "time_stamp": "2023-11-08 06:43:55"
      },
      {
        "time_stamp": "2023-11-08 06:46:26"
      },
      {
        "time_stamp": "2023-11-08 06:47:10"
      },
      {
        "time_stamp": "2023-11-08 06:49:22"
      },
      {
        "time_stamp": "2023-11-08 06:49:36"
      },
      {
        "time_stamp": "2023-11-08 06:50:00"
      },
      {
        "time_stamp": "2023-11-08 06:50:18"
      },
      {
        "time_stamp": "2023-11-08 06:51:28"
      },
      {
        "time_stamp": "2023-11-08 23:35:23"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Logan Armstrong",
      "poster_handle": "logan565"
    },
    "time_stamp": "2023-11-07 13:43:53",
    "text": "turns out you only need to use one"
  },
  {
    "poster": {
      "poster_name": "Niko Dixon",
      "poster_handle": "niko209"
    },
    "time_stamp": "2023-11-07 16:58:37",
    "text": "To run this kind of function optimally, I think youâ€™d go a bit deeper than the code by recreating the 3rd party company ID property so it requires unique values. This would enable you to use the batch read endpoints, with the 3rd party ID as your IDs. You would then be able to retrieve the HubSpot companies in batches of 100."
  }
]