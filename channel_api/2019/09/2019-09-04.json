[
  {
    "poster": {
      "poster_name": "Adam Wright",
      "poster_handle": "adam377"
    },
    "time_stamp": "2019-09-04 10:10:28",
    "edited": {
      "time_stamp": "2019-09-04 10:11:18"
    },
    "text": "When using workflow extensions, does the webhook payload still include a full contact record or does it only include the properties defined in the extension? And if it’s the latter, is there any way to include property history using workflow extensions? The documentation at <https://developers.HubSpot.com/docs/methods/workflow-extensions/workflow-extensions-overview> is a little unclear.",
    "reply_count": 9,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-09-04 10:24:08"
      },
      {
        "time_stamp": "2019-09-04 10:27:04"
      },
      {
        "time_stamp": "2019-09-04 10:42:19"
      },
      {
        "time_stamp": "2019-09-04 11:20:41"
      },
      {
        "time_stamp": "2019-09-04 11:24:43"
      },
      {
        "time_stamp": "2019-09-04 11:25:42"
      },
      {
        "time_stamp": "2019-09-04 11:25:56"
      },
      {
        "time_stamp": "2019-09-04 11:29:42"
      },
      {
        "time_stamp": "2019-09-04 11:44:23"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Walter Gueler",
      "poster_handle": "wgueler"
    },
    "time_stamp": "2019-09-04 10:24:08",
    "text": "The payload does not include everything but you can make a call to the contact api to get anything else you want (both history and non history options)"
  },
  {
    "poster": {
      "poster_name": "Adam Wright",
      "poster_handle": "adam377"
    },
    "time_stamp": "2019-09-04 10:27:04",
    "text": "I was hoping to avoid the extra API calls, but it’s not the end of the world. Thanks!"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-09-04 10:42:19",
    "text": "You can add the properties you want as fields and make them object properties. So you won’t get everything but you should be able get what you need without an extra call in most cases"
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2019-09-04 11:06:12",
    "text": "*CMS files API*: which key give the information where the file is used? Explanation: when I click on \"Marketing-&gt;Files and Templates-&gt;Files\", and if I click on a file, a window at the right side of the screen give me the places where this file is used; I want to get this information from the API, but which key give this information?",
    "reply_count": 25,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-09-04 11:08:18"
      },
      {
        "time_stamp": "2019-09-04 11:10:21"
      },
      {
        "time_stamp": "2019-09-04 11:33:13"
      },
      {
        "time_stamp": "2019-09-04 11:35:19"
      },
      {
        "time_stamp": "2019-09-04 11:36:21"
      },
      {
        "time_stamp": "2019-09-04 11:37:04"
      },
      {
        "time_stamp": "2019-09-04 11:37:18"
      },
      {
        "time_stamp": "2019-09-04 11:37:22"
      },
      {
        "time_stamp": "2019-09-04 11:37:56"
      },
      {
        "time_stamp": "2019-09-04 11:39:16"
      },
      {
        "time_stamp": "2019-09-04 11:41:05"
      },
      {
        "time_stamp": "2019-09-04 11:41:50"
      },
      {
        "time_stamp": "2019-09-04 11:42:46"
      },
      {
        "time_stamp": "2019-09-05 08:46:29"
      },
      {
        "time_stamp": "2019-09-05 08:50:10"
      },
      {
        "time_stamp": "2019-09-05 08:59:19"
      },
      {
        "time_stamp": "2019-09-05 08:59:40"
      },
      {
        "time_stamp": "2019-09-05 08:59:57"
      },
      {
        "time_stamp": "2019-09-05 09:00:22"
      },
      {
        "time_stamp": "2019-09-05 09:01:19"
      },
      {
        "time_stamp": "2019-09-05 09:01:22"
      },
      {
        "time_stamp": "2019-09-05 09:05:41"
      },
      {
        "time_stamp": "2019-09-05 09:06:27"
      },
      {
        "time_stamp": "2019-09-05 09:07:15"
      },
      {
        "time_stamp": "2019-09-05 09:14:50"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-09-04 11:08:18",
    "text": "`cosindex/api/v1/connections/&lt;id&gt;/parents?portalId=&lt;portalId&gt;&amp;clienttimeout=14000&amp;levels=0&amp;fields=BASIC`"
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2019-09-04 11:10:21",
    "text": "Thanks Matt."
  },
  {
    "poster": {
      "poster_name": "Walter Gueler",
      "poster_handle": "wgueler"
    },
    "time_stamp": "2019-09-04 11:20:41",
    "text": "That's cool, never tried that yet "
  },
  {
    "poster": {
      "poster_name": "Adam Wright",
      "poster_handle": "adam377"
    },
    "time_stamp": "2019-09-04 11:24:43",
    "text": "But would object properties include history, or is a separate API call to retrieve the Contact record still needed for that?"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-09-04 11:25:42",
    "text": "Ah, if you need history, that would be one of the cases the workflows extension doesn’t cover.  Sorry I missed that in your initial post"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-09-04 11:25:56",
    "text": "Out of curiosity, what are using the property history for?"
  },
  {
    "poster": {
      "poster_name": "Adam Wright",
      "poster_handle": "adam377"
    },
    "time_stamp": "2019-09-04 11:29:42",
    "edited": {
      "time_stamp": "2019-09-04 11:30:19"
    },
    "text": "A workaround for the limitations of the Zoom webinar integration… Relying on their last webinar registration join link property has problems if you’re running multiple webinars and want to send out reminder emails in addition to the initial registration confirmation… So, the webhook would be triggered prior to sending a reminder email with the webinar ID, and webinar registration join link history would be searched for the corresponding link, so a custom upcoming webinar join link property can be updated and referenced in the reminder email"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-09-04 11:33:13",
    "text": "Just curious, what is the use case for this information?"
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2019-09-04 11:35:19",
    "text": "To clean up files that are not used. But what kind of request you gave me? I cannot find documentation about this..."
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-09-04 11:36:21",
    "text": "GET request against the HubSpot API"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-09-04 11:37:04",
    "text": "It isn’t publicly documented at this time"
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2019-09-04 11:37:18",
    "text": "Ok :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-09-04 11:37:22",
    "text": "But you will see it being called when loading the side panel for an image"
  },
  {
    "poster": {
      "poster_name": "Libo Song",
      "poster_handle": "lsong"
    },
    "time_stamp": "2019-09-04 11:37:56",
    "text": "Note: if you have a link to that file, it is not indexed. For example: pdf file, doc, etc."
  },
  {
    "poster": {
      "poster_name": "Libo Song",
      "poster_handle": "lsong"
    },
    "time_stamp": "2019-09-04 11:39:16",
    "text": "That API is not an exhaustive indexing, it may miss some usage some place."
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2019-09-04 11:41:05",
    "text": "Very important note... Thanks. I assume I cannot parse contents of pages/mails/blog posts to find links, for example?"
  },
  {
    "poster": {
      "poster_name": "Libo Song",
      "poster_handle": "lsong"
    },
    "time_stamp": "2019-09-04 11:41:50",
    "text": "I think you can. But that API does not do this."
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2019-09-04 11:42:46",
    "text": "Ok. Thanks a lot. I'm gonna use this with parsimony."
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-09-04 11:44:23",
    "text": "Ah I see, for a workflow extension based solution, you’ll need to make an extra call to get that information."
  }
]