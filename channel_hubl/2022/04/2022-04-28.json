[
  {
    "poster": {
      "poster_name": "Sam Sharples",
      "poster_handle": "sam.sharples"
    },
    "time_stamp": "2022-04-28 07:58:43",
    "edited": {
      "time_stamp": "2022-04-28 08:01:21"
    },
    "text": "does this help with your first question?:\n\n```{% set table_info = hubdb_table_rows(123456) %}\n{% set table_length_array=[]%}\n{% for x in range(0,table_info|length) %}\n{% do table_length_array.append( loop.index0 ) %}\n{% endfor %}\n {% for items in table_length_array|shuffle|slice(2,\" \") %}\n  {% if loop.index &lt;=1 %}\n    {% for item in items %}\n      &lt;div&gt;{{table_info[item].hs_path}}&lt;/div&gt;\n    {% endfor %}\n  {% endif %}\n{% endfor %}```"
  },
  {
    "poster": {
      "poster_name": "Sandipan Saha",
      "poster_handle": "sandipan.s"
    },
    "time_stamp": "2022-04-28 08:03:30",
    "text": "Thanks <@U02K6V72MR8> for replying. Let me test this out and get back to you!"
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2022-04-28 08:46:38",
    "text": "is there a filter available to convert a string that contains html tags to render the HTML and not just the code?\n&lt;h1&gt;test&lt;/h1&gt;",
    "reply_count": 15,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2022-04-28 08:50:07"
      },
      {
        "time_stamp": "2022-04-28 08:51:25"
      },
      {
        "time_stamp": "2022-04-28 08:54:01"
      },
      {
        "time_stamp": "2022-04-28 08:54:22"
      },
      {
        "time_stamp": "2022-04-28 08:54:37"
      },
      {
        "time_stamp": "2022-04-28 08:55:08"
      },
      {
        "time_stamp": "2022-04-28 08:55:26"
      },
      {
        "time_stamp": "2022-04-28 08:56:34"
      },
      {
        "time_stamp": "2022-04-28 09:00:24"
      },
      {
        "time_stamp": "2022-04-28 09:09:42"
      },
      {
        "time_stamp": "2022-04-28 10:06:46"
      },
      {
        "time_stamp": "2022-04-28 12:51:19"
      },
      {
        "time_stamp": "2022-04-28 12:54:42"
      },
      {
        "time_stamp": "2022-04-28 12:55:30"
      },
      {
        "time_stamp": "2022-05-02 19:26:24"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2022-04-28 08:50:07",
    "text": "<https://developers.HubSpot.com/docs/cms/hubl/filters#striptags>"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2022-04-28 08:51:25",
    "text": "or did you mean <https://developers.HubSpot.com/docs/cms/hubl/filters#escape|escape>?"
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2022-04-28 08:54:01",
    "text": "Hi Mark, I am working on a custom quote"
  },
  {
    "text": "",
    "time_stamp": "2022-04-28 08:54:22"
  },
  {
    "text": "",
    "time_stamp": "2022-04-28 08:54:37"
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2022-04-28 08:55:08",
    "text": "the comments to the buyer has limited rich text ability... I was seeing if you could enter custom HTML in here and then render it out in the quote template"
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2022-04-28 08:55:26",
    "text": "but when I put code in there it just shows the HTML code"
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2022-04-28 08:56:34",
    "text": "so I want the HTML tags to stay but be rendered as HTML and not text"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2022-04-28 09:00:24",
    "text": "Ah, in that case, I donâ€™t believe so. That should be the default behavior in the CMS, so the only filters I know of are going to do the opposite (either rendering the HTML as text or removing the tags entirely)"
  },
  {
    "poster": {
      "poster_name": "Sami Sundberg",
      "poster_handle": "sami.sundberg"
    },
    "time_stamp": "2022-04-28 09:09:42",
    "edited": {
      "time_stamp": "2022-04-28 09:11:03"
    },
    "text": "How about wrapping the content with  `{% raw %}{% endraw %}`? Could that work? :thinking_face:"
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2022-04-28 10:06:46",
    "text": "Thanks Mark. I tried that Sami and no dice."
  },
  {
    "poster": {
      "poster_name": "Andreas Wessolly",
      "poster_handle": "webdesign"
    },
    "time_stamp": "2022-04-28 10:11:17",
    "text": "Hi everyone, on my page i have this Blogpost containing a HubSpot Video: <https://www.wmm.marketing/de/blog/5-gr%C3%BCnde-warum-ihre-HubSpot-strategie-nicht-mehr-funktioniert>\n\n When i check this page with Lighthouse it has 12MB in size,  without the video it has 920kb, meaning the video gets loaded completely during Page Load. Is there a way to prevent this? I was told to add the attribute\n```preload=\"none\" ```\nbut that did not help unfortunately,",
    "reply_count": 19,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2022-04-28 10:14:36"
      },
      {
        "time_stamp": "2022-04-28 10:16:19"
      },
      {
        "time_stamp": "2022-04-28 10:19:09"
      },
      {
        "time_stamp": "2022-04-28 10:26:55"
      },
      {
        "time_stamp": "2022-04-28 10:47:58"
      },
      {
        "time_stamp": "2022-04-28 11:56:16"
      },
      {
        "time_stamp": "2022-04-28 12:05:56"
      },
      {
        "time_stamp": "2022-04-28 12:08:47"
      },
      {
        "time_stamp": "2022-05-02 10:11:17"
      },
      {
        "time_stamp": "2022-05-02 10:22:34"
      },
      {
        "time_stamp": "2022-05-02 10:23:03"
      },
      {
        "time_stamp": "2022-05-02 10:27:46"
      },
      {
        "time_stamp": "2022-05-02 10:29:16"
      },
      {
        "time_stamp": "2022-05-02 10:29:38"
      },
      {
        "time_stamp": "2022-05-02 10:33:50"
      },
      {
        "time_stamp": "2022-05-02 10:44:57"
      },
      {
        "time_stamp": "2022-05-02 10:47:05"
      },
      {
        "time_stamp": "2022-05-02 10:47:26"
      },
      {
        "time_stamp": "2022-05-02 10:54:21"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "James Magnarelli",
      "poster_handle": "jmagnarelli"
    },
    "time_stamp": "2022-04-28 10:14:36",
    "text": "cc <@U01QA9LNN2V> since we were just talking about this"
  },
  {
    "poster": {
      "poster_name": "Lincoln Bryant",
      "poster_handle": "lbryant"
    },
    "time_stamp": "2022-04-28 10:16:19",
    "text": ":wave: hi there, investigating this now"
  },
  {
    "poster": {
      "poster_name": "Lincoln Bryant",
      "poster_handle": "lbryant"
    },
    "time_stamp": "2022-04-28 10:19:09",
    "text": "HS video players use iframes so there isn't way to apply attributes / styles or interact with the `video` tag directly from JS. but looking into Lighthouse impact and if there is anything we can do to offer lazy loading &amp; avoid those warnings"
  },
  {
    "poster": {
      "poster_name": "Andreas Wessolly",
      "poster_handle": "webdesign"
    },
    "time_stamp": "2022-04-28 10:26:55",
    "text": "would it make a difference if i would use the Default Video Player Module? Does this have lazy loading capability? i can adjust the blogpost layout so that i can choose a video, that would not be a problem :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Lincoln Bryant",
      "poster_handle": "lbryant"
    },
    "time_stamp": "2022-04-28 10:47:58",
    "text": "no, the default Video module / video field have the same issues as rich text."
  },
  {
    "poster": {
      "poster_name": "Andreas Wessolly",
      "poster_handle": "webdesign"
    },
    "time_stamp": "2022-04-28 11:56:16",
    "text": "ok"
  },
  {
    "poster": {
      "poster_name": "Lincoln Bryant",
      "poster_handle": "lbryant"
    },
    "time_stamp": "2022-04-28 12:05:56",
    "text": "Still researching options here but there's not an easy fix, the underlying tech we use (VideoJS + HLS ) <https://github.com/videojs/video.js/issues/7005|eagerly loads by default> despite the `preload` attribute. I need to discuss with team but i'll update here ASAP"
  },
  {
    "poster": {
      "poster_name": "Andreas Wessolly",
      "poster_handle": "webdesign"
    },
    "time_stamp": "2022-04-28 12:08:47",
    "text": "thanks a lot for your help <@U01QA9LNN2V>!"
  },
  {
    "text": "I feel a bit bad by doing this :sweat_smile:  but here it goes...\n\nUsing replace filter for escaped string to convert escaped characters back to html:\n`&lt;`=&gt; `&lt;`\n`&gt;` =&gt; `&gt;`\n\n```&lt;section class=\"comments\"&gt;\n    Original:\n    {% module \"comments\"\n      label=\"Comments\"\n      path=\"@HubSpot/rich_text\",\n      html={{\n        \"&lt;h4&gt;\" ~ template_translations.comments.message ~ \"&lt;/h4&gt;\" ~\n        ptoken_comments\n      }}\n    %}\n    \n    Custom:\n    &lt;div class=\"custom-section\" style=\"border:2px solid green;\"&gt;\n      {{ template_data.quote.hs_comments|replace(\"&lt;\", \"&lt;\")|replace(\"&gt;\", \"&gt;\") }}\n    &lt;/div&gt;\n  &lt;/section&gt;```",
    "time_stamp": "2022-04-28 12:51:19"
  },
  {
    "text": "will give it a try thank you for this code-jitsu",
    "time_stamp": "2022-04-28 12:54:42"
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2022-04-28 12:55:30",
    "text": "<https://media1.tenor.com/images/3e07cfd3c4373dc8bcf3fde349be3ed3/tenor.gif?itemid=8065477>"
  }
]