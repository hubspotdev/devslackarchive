[
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-29 07:56:01",
    "text": "<@UCY83QS6Q> yes, 100%"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-29 07:56:25",
    "text": "I think it ends up being required if you use multiple separate \"projects\" or use tailwind in your theme"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-06-29 07:57:45",
    "text": "And that is because there are other styles (layout.css from HubSpot? other?) that otherwise would have higher precedence due to order in the HTML?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-29 07:58:36",
    "text": "yea, but I don't think it conflicts with HubSpot files"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-29 07:58:58",
    "text": "in my case, it was the way tailwind uses media queries to render different levels of padding"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-29 07:59:11",
    "text": "```px-10 lg:px-20```"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-29 07:59:57",
    "edited": {
      "time_stamp": "2023-06-29 08:00:25"
    },
    "text": "the `lg:px-20` would ~never trigger~ get overwritten without adding `lg:!px-20`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-29 08:00:02",
    "text": "but with important it works just fine"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-06-29 08:06:26",
    "text": "Yeah, I’m curious what is doing the overwriting in your case (how general is it vs something with your setup?)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-29 08:07:01",
    "text": "when I get a chance I can record a video going over it"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-29 08:07:23",
    "text": "it's a pretty common pattern I think"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-06-29 08:08:01",
    "text": "No need for a video, maybe a screenshot of the styles inspector to show the precedence of various CSS files/selectors?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-29 08:08:20",
    "text": "sure, I should be able to grab that"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-29 08:08:26",
    "text": "let me see if I can do it quickly"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-29 08:08:34",
    "text": "I'll have to remove the important stuff"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-29 08:15:29",
    "text": "on a maybe related note...if I remove that parent class but keep the config:\n```export default {\n  content: [`${componentsDir}/**/*.{js,ts,jsx,tsx}`],\n  important: '.global-nav-wrapper',\n...```\nnone of the tailwind classes load"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-29 08:36:46",
    "text": "going to dm you a screenshot"
  },
  {
    "poster": {
      "poster_name": "Mike Thomas",
      "poster_handle": "mike542"
    },
    "time_stamp": "2023-06-29 10:29:00",
    "text": "It’s great to see this progressing to a public beta. Our team are always excited to see new developments!\n\nI’ve got a comment. It might be a little long.\n\nWhen we use HubSpot CMS, we go to great pains to ensure our developers don’t “short-circuit” CMS Hub by doing things like hardcoding content, lobbing out core functionality, or introducing “shims” that achieve a goal, but ultimately undermine the end-user experience of being able to quickly and easily edit content. Basically - we put our clients/HubSpot customers first - which I think is a shared vision.\n\nWhat’s in this repo, which exposes both new frameworks and new tools to the community, doesn’t seem to contain any examples or demos where the requirements of the average CMS editor has been considered.\n\nI’ve spun up “*My Teammates’ Cars”* and I’m immediately excited and curious to see how this is achieved and how the content is fed in from the CMS. And yet - I’m confronted with no options about how to edit/add cars, and I find that the content is hardcoded in a JSX file.\n\nI’m no JS expert - I’ve got 20 plus years in PHP and Infra - but I’m honestly looking at this thinking I’m not sure I get it. At all. I’m looking for references to things like HubDB, and there’s some allusion to this the To-Do app, which gives me some hope, but there’s no hint at how to make this all tie-up.\n\nOur developers don’t have the benefit of my years of experience to figure this out, and when I think about the HubSpot Developers who have “become” developers through a natural extension of technical marketing skills and the very easy tools HubSpot have provided through the years… well, I just I think the lack of CMS/CRM tie-in here leaves it’s purpose a little vague.\n\nI appreciate it’s BETA, but putting developers aside for one minute, what’s in this for the customer? Can _“Server-side API calls from inside a JS partial or JS module”_ really *not* be in a v1 release?",
    "reply_count": 7,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-06-29 11:00:58"
      },
      {
        "time_stamp": "2023-06-29 13:06:05"
      },
      {
        "time_stamp": "2023-06-29 13:13:30"
      },
      {
        "time_stamp": "2023-06-29 13:22:54"
      },
      {
        "time_stamp": "2023-06-30 04:42:37"
      },
      {
        "time_stamp": "2023-06-30 07:19:56"
      },
      {
        "time_stamp": "2023-06-30 08:24:11"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-06-29 11:00:58",
    "text": "Thanks a bunch for the feedback! I don’t have the time to get back to you yet, but certainly will. :thank-you:"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-06-29 13:06:05",
    "text": "Quick thing to ask before the longer response. Is your feedback primarily coming from what you’ve seen in <https://github.com/HubSpot/cms-js-building-blocks-hello-world/> and the prior <https://docs.google.com/document/d/1nV9aU8t0ovQZ53mxaqNEQtLU6hFnba9v3er-Vasvqds/edit|JS Building Blocks Private Beta docs google doc>? Or is it coming from the updated documentation and examples at <https://github.com/HubSpot/cms-js-building-block-examples>? (have you had a chance to look there too? … it is possible we should have done a better job of announcing the updated examples and docs)"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-06-29 13:13:30",
    "text": "And for a more in depth response (I too can have long comments, I even have my own internal :timmfin-wall-of-text: slack reaction emoji :wink:)\n\nFrom the top I think there are some small changes we could make to our examples and docs to help highlight the specific cases you are talking about. And your push for API calls from inside JS components is totally fair. We agree that is important and are hoping to work more on that soon. However do want to set expectations for what we have now (under promise over deliver? :crossed_fingers:) and we knew that developers like you would be asking about it, so mentioning its current omission was important.\n\n&gt; but there’s no hint at how to make this all tie-up.\n\nAgain fair criticism. We can and should improve our documentation and examples. However, one aspect we’re concerned about that maybe you maybe less concerned about is the cost and barrier to entry to learning React. We’ve heard from many developers in the lead up to this that were skeptical and concerned about React. Maybe they are worried about having to learn new technology, maybe they feel like React and server-render JS is “anti HTML” or “anti webdev”, or maybe they felt like they just want to get their job done and don’t want to have to wade through new complexity.\n\nIn this documentation and our examples, we were trying to strike a balance of giving devs a gradual ramp up to React and our new CMS API and primitives. Because we thought that some devs would be frustrated or discouraged by seeing HubL/custom object fetching, Islands, new React syntax, etc all at once. Plus we don’t want devs to have to jump through too many hoops until they are able to run an example. For example, it could be pretty annoying to have to create custom objects and/or HubDB tables before the first example even works in your account.\n\nSo we very well could have struck the wrong balance there so far, but I don’t think it would be in our interest to make sure first/simplest examples use and show “all the things”."
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-06-29 13:22:54",
    "text": "And one more thing, in reference to “doesn’t seem to contain any examples or demos where the requirements of the average CMS editor has been considered”, have you seen how JS modules can pull in field values that have been set by a marketer/content creator in the page editor? I.e. defining fields via `fields.jsx` and having the custom values per page come through as `fieldValues`<https://github.com/HubSpot/cms-js-building-block-examples/blob/main/docs/reference.md#using-field-values| props in your JS component>?\n\nWhile that is certainly a different case that fetching from HubDB or the CRM, I personally think that devs building custom modules that non-technical clients/consumers can own and customize in the page editor with WYSISWYG is a big part of the HubSpot CMS’s value.\n\nMaybe changing our hello world example so that each of the cars was a default value in some repeater field would better help indicate that in the hello world example?"
  }
]