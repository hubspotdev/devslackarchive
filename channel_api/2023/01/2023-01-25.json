[
  {
    "text": "Can any one please help me how to print the array response values on HUbspot CRM card\nlet line_items_result = {};\nif (line_items) {\n        for (const key in line_items) {\n\n            line_items_result[\"label\"]= key,\n            line_items_result[\"value\"]= line_items[key]\n        }\n      }\n\t}\n\t//console.log(line_items_result);\n      sendResponse({\n        sections: [\n          {\n             \"type\": \"descriptionList\",\n             \"direction\": \"row\",\n             \"items\": *`_${line_items_result}_`*\n          },\n          {\n            \"type\": \"text\",\n            \"format\": \"markdown\",\n            \"text\": \"Show line items\"\n          }\n        ]\n      });",
    "time_stamp": "2023-01-25 03:23:44",
    "edited": {
      "time_stamp": "2023-01-25 03:45:49"
    },
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-01-25 10:04:30"
      },
      {
        "time_stamp": "2023-01-27 05:59:16"
      }
    ]
  },
  {
    "text": "",
    "time_stamp": "2023-01-25 03:26:56"
  },
  {
    "poster": {
      "poster_name": "Jatin Sandilya",
      "poster_handle": "sandilya.jatin"
    },
    "time_stamp": "2023-01-25 04:06:52",
    "text": "Hi,\n\nAnyone here know the right way (programatically) to differentiate a Lead &amp; a Contact in HubSpot since there’s no Lead Object in HubSpot compared to other CRMs?\n\nI believe a Contact is a Lead in HubSpot if the `leadStatus` field is not set or set as `New | Attempted to Contact` .\n\nIs this correct or am I off?"
  },
  {
    "poster": {
      "poster_name": "Isabela Nery",
      "poster_handle": "isabela.nery"
    },
    "time_stamp": "2023-01-25 05:44:19",
    "text": "Hi everyone! o/\n\nIs there any list of all available properties of a contact?\nI saw (<https://developers.HubSpot.com/docs/api/crm/contacts|on the endpoint> GET *`/crm/v3/objects/contacts`*) that it is possible to add the “properties” parameter to include more contact properties, but I can’t find the possible values ​​that this parameter can receive .-.",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-01-25 06:03:28"
      },
      {
        "time_stamp": "2023-01-25 09:07:01"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Federico Mozzo",
      "poster_handle": "federico.mozzo"
    },
    "time_stamp": "2023-01-25 06:03:28",
    "text": "You can get all properties using Properties API (<https://developers.HubSpot.com/docs/api/crm/properties>) or you can take a look inside HubSpot on Settings -&gt; Properties"
  },
  {
    "poster": {
      "poster_name": "Endrit Ibraimi",
      "poster_handle": "endrit275"
    },
    "time_stamp": "2023-01-25 06:24:51",
    "text": "Hi guys, I wanted to ask if anybody has made before integration of Coassemble with HubSpot through OpenAPI. An integration through zapier exists  but I need more custom approach to integrate it with OpenAPI ?"
  },
  {
    "poster": {
      "poster_name": "Raul Villaronga",
      "poster_handle": "rvillaronga"
    },
    "time_stamp": "2023-01-25 06:47:23",
    "text": "<@U032T5MCZEW> did you ever get a resolution to this? I'm experiencing the same issue..."
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2023-01-25 06:47:31",
    "text": "Nah, finding out today"
  },
  {
    "poster": {
      "poster_name": "Bas Top",
      "poster_handle": "bastop"
    },
    "time_stamp": "2023-01-25 08:42:18",
    "text": "Hey guys, Im getting a 409 error from your api when im making a call to crm/v3/objects/contacts/search endpoint. I  thought this was really weird because we are only getting data and not trying to update something. Does somebody have a idea what this could be/maybe a bug?",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-01-25 09:23:38"
      },
      {
        "time_stamp": "2023-01-26 00:02:29"
      },
      {
        "time_stamp": "2023-01-26 00:03:16"
      },
      {
        "time_stamp": "2023-01-26 04:13:54"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Isabela Nery",
      "poster_handle": "isabela.nery"
    },
    "time_stamp": "2023-01-25 09:07:01",
    "text": "that was exactly what I was looking for! thanks a lot!"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2023-01-25 09:07:19",
    "text": "getting back to this - they're using the HubSpot Node package. Wonder if there's inherently more of a delay using that instead of directly interacting with the APIs"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-25 09:07:40",
    "edited": {
      "time_stamp": "2023-01-25 09:07:45"
    },
    "text": "I mean a little bit, but not seconds worth"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2023-01-25 09:09:07",
    "text": "yeah very odd"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2023-01-25 09:09:26",
    "text": "unless the search api is just really variable with seeing records :shrug: the record itself was made instantly"
  },
  {
    "poster": {
      "poster_name": "Danny Brauer",
      "poster_handle": "danny401"
    },
    "time_stamp": "2023-01-25 09:23:38",
    "text": "What is the text of the error?"
  },
  {
    "poster": {
      "poster_name": "Sejal Parikh (HubSpot PM)",
      "poster_handle": "sparikh"
    },
    "time_stamp": "2023-01-25 10:04:30",
    "text": "Hi Prasad, we just published a new code sample, that shows how to do this\n<https://github.com/HubSpot/ui-extensions-examples/tree/main/with-asana-api>"
  },
  {
    "poster": {
      "poster_name": "Jordan Manavian",
      "poster_handle": "jordan.manavian"
    },
    "time_stamp": "2023-01-25 10:20:51",
    "edited": {
      "time_stamp": "2023-01-25 10:23:43"
    },
    "text": "Hi everyone, so we are having an issue with deduping and trying to figure out where the issue / breakdown is.\n1. In our case, we have a HS form that on submission creates a contact (no company created). \n2. We then get that user to self signup later on our platform, which then we import via API a Company, Contact and Account.\n3. Currently with that, the new contact and account don't get imported, and the company gets added and not linked to the contact that was already created\n    a. We assume this is because the imported contact has the same email as the current contact",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-01-26 15:06:38"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jordan Manavian",
      "poster_handle": "jordan.manavian"
    },
    "time_stamp": "2023-01-25 10:22:26",
    "text": "From what we want, and what we see detailed here <https://knowledge.HubSpot.com/crm-setup/deduplication-of-contacts-companies-deals-tickets>\nThe contact should be \"merged\" on api import"
  },
  {
    "poster": {
      "poster_name": "Andrew Dunbar",
      "poster_handle": "andrew127"
    },
    "time_stamp": "2023-01-25 10:30:52",
    "text": "Hello, I developed a listing and posting template that dynamically updates based on custom object data. However, I am unable to call more than 400 “units” at a time due to HubSpot’s offset rule. I’ve gone in and added some code to allow for the offset (see below), but it doesn’t work for more than 400. Does anyone have any suggestions or experience with allowing all custom object data to show on a dynamic template?\n\n{% set tests = crm_objects(“unit”, “limit=100&amp;offset=0”, “building_address,building_name,unit_name,bedroom_count,neighborhood,unit__,status,renewal_status”) %}\n                    {% set a = crm_objects(“unit”, “limit=100&amp;offset=100\", “building_address,building_name,unit_name,bedroom_count,neighborhood,unit__,status,renewal_status”) %}\n                    {% set b = crm_objects(“unit”, “limit=100&amp;offset=200”, “building_address,building_name,unit_name,bedroom_count,neighborhood,unit__,status,renewal_status”) %}\n                    {% set c = crm_objects(“unit”, “limit=100&amp;offset=300\", “building_address,building_name,unit_name,bedroom_count,neighborhood,unit__,status,renewal_status”) %}\n                    {% set d = crm_objects(“unit”, “limit=100&amp;offset=400”, “building_address,building_name,unit_name,bedroom_count,neighborhood,unit__,status,renewal_status”) %}"
  },
  {
    "poster": {
      "poster_name": "Isabela Nery",
      "poster_handle": "isabela.nery"
    },
    "time_stamp": "2023-01-25 11:27:49",
    "text": "Hi everyone o/\n\nI’m studying how to <https://legacydocs.HubSpot.com/docs/methods/forms/submit_form_v3_authentication|create a new response in a form via API> and I have a question regarding this topic mentioned in the documentation:\n“_The fields in the form will correspond to contact properties set up for the HubSpot account. Please see the Contacts API and Contact Properties API for more details._”\n\n•  To create a new answer, do I necessarily need to create a contact for the person who replied? \n• In that case would I first add a contact and then submit the answer? \n• Or when creating the answer the new contact is already created automatically? \n• Or creating a contact for the person who responded is optional?"
  },
  {
    "poster": {
      "poster_name": "Justin Dwyer",
      "poster_handle": "justin.dwyer"
    },
    "time_stamp": "2023-01-25 11:47:28",
    "text": "Hey there, I'm looking to link to my subscription preferences page from outside of a HubSpot email, but I need a way to build each contact's unique URL.\n\nDoes the API expose the data necessary for this anywhere?"
  },
  {
    "poster": {
      "poster_name": "Lucas Horta Monteiro de Castro",
      "poster_handle": "lucashorta"
    },
    "time_stamp": "2023-01-25 13:36:29",
    "text": "Hey everyone, what's up?\n\nI would like to ask a question about the DateTime format in the request. That is, what are the possible formats that the HubSpot API accepts?\n\nAtt.",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-01-25 13:57:33"
      },
      {
        "time_stamp": "2023-01-25 13:58:41"
      },
      {
        "time_stamp": "2023-01-26 04:24:25"
      },
      {
        "time_stamp": "2023-01-26 07:36:05"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-25 13:57:33",
    "edited": {
      "time_stamp": "2023-01-25 13:58:15"
    },
    "text": "You can use either a Unix timestamp in milliseconds or UTC format."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-25 13:58:41",
    "text": "Unix milliseoncds in the default, some endpoints don't accept UTC"
  },
  {
    "poster": {
      "poster_name": "Scott",
      "poster_handle": "sbuzard"
    },
    "time_stamp": "2023-01-25 14:30:35",
    "text": "Hi all. I’m wondering if anyone has modified the <https://github.com/HubSpot/haPiHP|haPiHP library> to use the new <https://developers.HubSpot.com/docs/api/migrate-an-api-key-integration-to-a-private-app|API key migrations> - it’s a long shot I know, but hoping to find a way to alter the <https://github.com/HubSpot/haPiHP/blob/master/class.baseclient.php|class.baseclient.php> to use private apps instead of the HAPIkey."
  },
  {
    "poster": {
      "poster_name": "Bas Top",
      "poster_handle": "bastop"
    },
    "time_stamp": "2023-01-26 00:02:29",
    "text": "```Client error: `POST <https://api.hubapi.com/crm/v3/objects/contacts/search>` resulted in a `409 Conflict` response:\nerror code: 1018```\n"
  },
  {
    "poster": {
      "poster_name": "Bas Top",
      "poster_handle": "bastop"
    },
    "time_stamp": "2023-01-26 00:03:16",
    "text": "Its weird because we have used this endpoint with the same static options for a wile now and it never did this."
  },
  {
    "poster": {
      "poster_name": "Christopher Chiha",
      "poster_handle": "christopher051"
    },
    "time_stamp": "2023-01-26 00:20:42",
    "text": "Hello,\n\nI have a workflow that runs daily at 10am, and enrolls some records that will reach a custom code action which has an API called inside it.\n\nHowever as we have the 150 api call limit/10 seconds, we are receiving some errors that we are hitting the secondly limit.\n\nWhat could be the best way to avoid these errors when we enroll 200+ records into a custom code that calls an API endpoint?",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-01-26 07:30:09"
      },
      {
        "time_stamp": "2023-01-26 23:00:26"
      },
      {
        "time_stamp": "2023-01-26 23:01:43"
      },
      {
        "time_stamp": "2023-01-27 07:12:14"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Avery Bloom",
      "poster_handle": "avery931"
    },
    "time_stamp": "2023-01-26 00:57:16",
    "text": "I hate to be a downer, but I just have to say that there is basically no documentation of HubSpot's official ruby gem, and it's this close :pinching_hand:  to completely unusable because of it",
    "reply_count": 50,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-01-26 00:58:56"
      },
      {
        "time_stamp": "2023-01-26 11:27:07"
      },
      {
        "time_stamp": "2023-01-26 11:27:52"
      },
      {
        "time_stamp": "2023-01-26 11:28:28"
      },
      {
        "time_stamp": "2023-01-26 11:29:24"
      },
      {
        "time_stamp": "2023-01-26 11:29:35"
      },
      {
        "time_stamp": "2023-01-26 11:29:59"
      },
      {
        "time_stamp": "2023-01-26 11:30:37"
      },
      {
        "time_stamp": "2023-01-26 11:30:48"
      },
      {
        "time_stamp": "2023-01-26 11:30:54"
      },
      {
        "time_stamp": "2023-01-26 11:31:14"
      },
      {
        "time_stamp": "2023-01-26 11:31:57"
      },
      {
        "time_stamp": "2023-01-26 11:32:07"
      },
      {
        "time_stamp": "2023-01-26 11:32:27"
      },
      {
        "time_stamp": "2023-01-26 11:32:27"
      },
      {
        "time_stamp": "2023-01-26 11:33:06"
      },
      {
        "time_stamp": "2023-01-26 11:33:40"
      },
      {
        "time_stamp": "2023-01-26 11:33:52"
      },
      {
        "time_stamp": "2023-01-26 11:34:17"
      },
      {
        "time_stamp": "2023-01-26 11:34:22"
      },
      {
        "time_stamp": "2023-01-26 11:34:25"
      },
      {
        "time_stamp": "2023-01-26 11:34:55"
      },
      {
        "time_stamp": "2023-01-26 11:35:15"
      },
      {
        "time_stamp": "2023-01-26 11:35:28"
      },
      {
        "time_stamp": "2023-01-26 11:36:14"
      },
      {
        "time_stamp": "2023-01-26 11:36:25"
      },
      {
        "time_stamp": "2023-01-26 11:37:09"
      },
      {
        "time_stamp": "2023-01-26 11:37:31"
      },
      {
        "time_stamp": "2023-01-26 11:38:16"
      },
      {
        "time_stamp": "2023-01-26 11:39:50"
      },
      {
        "time_stamp": "2023-01-26 11:40:02"
      },
      {
        "time_stamp": "2023-01-26 11:41:34"
      },
      {
        "time_stamp": "2023-01-26 11:42:13"
      },
      {
        "time_stamp": "2023-01-26 11:42:46"
      },
      {
        "time_stamp": "2023-01-26 11:43:10"
      },
      {
        "time_stamp": "2023-01-26 11:44:29"
      },
      {
        "time_stamp": "2023-01-26 11:44:32"
      },
      {
        "time_stamp": "2023-01-26 11:44:38"
      },
      {
        "time_stamp": "2023-01-26 11:44:53"
      },
      {
        "time_stamp": "2023-01-26 11:45:05"
      },
      {
        "time_stamp": "2023-01-26 11:45:32"
      },
      {
        "time_stamp": "2023-01-26 11:46:08"
      },
      {
        "time_stamp": "2023-01-26 11:48:06"
      },
      {
        "time_stamp": "2023-01-26 11:48:27"
      },
      {
        "time_stamp": "2023-01-26 11:49:09"
      },
      {
        "time_stamp": "2023-01-26 11:49:12"
      },
      {
        "time_stamp": "2023-01-26 11:49:48"
      },
      {
        "time_stamp": "2023-01-26 11:52:18"
      },
      {
        "time_stamp": "2023-01-26 11:52:51"
      },
      {
        "time_stamp": "2023-01-26 11:52:59"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Avery Bloom",
      "poster_handle": "avery931"
    },
    "time_stamp": "2023-01-26 00:58:56",
    "text": "To go through the trouble of having this whole gem, with all this code... most of which seems to work... but with no docs at all... it's just wild."
  }
]