[
  {
    "poster": {
      "poster_name": "Lukas Knobling",
      "poster_handle": "lukas.knobling"
    },
    "time_stamp": "2024-03-11 07:02:23",
    "text": "thank you <@U06NE4F7E9Y> for that quick response, but is form validation and content verification enough? I was reading on the weekend a bit about that and also find methods like jwt-token or is this just for providing permissions for as an example an API?\n\nYes CORS has my colleague implemented and also heard about CSRF but just want to do the implementation as safe as possible so that nobody else can access our servers or do something bad there.\n\nI thought about a method like signature the request i send to the backend, like hubSpot is doing that with webhooks they send to a server. Is that necessary?"
  },
  {
    "poster": {
      "poster_name": "Lukas Knobling",
      "poster_handle": "lukas.knobling"
    },
    "time_stamp": "2024-03-11 07:06:04",
    "text": "and would it be good to do everything \"Form Validation\", \"Content Verification\", \"CORS\" and \"CSRF\" or would this lead to less safety?"
  },
  {
    "poster": {
      "poster_name": "Oleh Rabchuck",
      "poster_handle": "winner.dev.20"
    },
    "time_stamp": "2024-03-11 07:12:22",
    "text": "CSRF tokens are used to prevent CSRF attacks. CSRF attacks occur when an attacker tricks a user into performing actions on a website without their knowledge.\nIn your case, you can use a combination of form validation, content verification, CSRF tokens, and JWT tokens to ensure maximum security.\n\nRegarding the signature of the request you send to the backend, it's not necessary if you're using JWT tokens for authentication and authorization. However, if you want to add an additional layer of security, you can consider signing the request data using a secret key."
  },
  {
    "poster": {
      "poster_name": "Oleh Rabchuck",
      "poster_handle": "winner.dev.20"
    },
    "time_stamp": "2024-03-11 07:14:06",
    "text": "`And would it be good to do everything \"Form Validation\", \"Content Verification\", \"CORS\" and \"CSRF\" or would this lead to less safety?` Answer:) signing the request is not strictly necessary, but it can provide an additional layer of security."
  },
  {
    "poster": {
      "poster_name": "Lukas Knobling",
      "poster_handle": "lukas.knobling"
    },
    "time_stamp": "2024-03-11 07:17:14",
    "text": "`However, if you want to add an additional layer of security, you can consider signing the request data using a secret key.`\n\nAnd how would that be possible with a secret key in the HubSpot CMS? Just write it hard in the frontendcode is not good i think xD"
  },
  {
    "poster": {
      "poster_name": "Oleh Rabchuck",
      "poster_handle": "winner.dev.20"
    },
    "time_stamp": "2024-03-11 07:19:36",
    "text": "Yeah, you're right, hardcoding a secret key in the frontend code is not a good practice as it can be easily exposed. Instead of this, you can use a secure method to generate and store the secret key in the HubSpot CMS."
  },
  {
    "poster": {
      "poster_name": "Lukas Knobling",
      "poster_handle": "lukas.knobling"
    },
    "time_stamp": "2024-03-11 07:24:43",
    "text": "And do you know how? :sweat_smile:\nAre there functions provided by HubSpot or are there already bibs for that? or do I have to develop this? ;)"
  },
  {
    "poster": {
      "poster_name": "Oleh Rabchuck",
      "poster_handle": "winner.dev.20"
    },
    "time_stamp": "2024-03-11 07:27:07",
    "text": "Yes, HubSpot provides serverless functions that you can use to secure communication between the HubSpot CMS and your backend with a secret key."
  },
  {
    "poster": {
      "poster_name": "Oleh Rabchuck",
      "poster_handle": "winner.dev.20"
    },
    "time_stamp": "2024-03-11 07:28:34",
    "text": "<https://developers.HubSpot.com/docs/cms/data/serverless-functions>"
  },
  {
    "poster": {
      "poster_name": "Lukas Knobling",
      "poster_handle": "lukas.knobling"
    },
    "time_stamp": "2024-03-11 07:29:07",
    "text": "aah okay :) thank you very much for your time and help :)\nlet's see how I can implement this :)"
  },
  {
    "poster": {
      "poster_name": "Oleh Rabchuck",
      "poster_handle": "winner.dev.20"
    },
    "time_stamp": "2024-03-11 07:29:29",
    "text": ":+1:"
  },
  {
    "poster": {
      "poster_name": "Oleh Rabchuck",
      "poster_handle": "winner.dev.20"
    },
    "time_stamp": "2024-03-11 07:29:33",
    "text": "Good luck"
  },
  {
    "poster": {
      "poster_name": "Lukas Knobling",
      "poster_handle": "lukas.knobling"
    },
    "time_stamp": "2024-03-11 07:35:10",
    "text": "Ah but thats only possible with CMS Hub Enterprise right? if i do not have then, i have to use the other methods you explained right?"
  }
]