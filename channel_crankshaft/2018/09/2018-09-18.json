[
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-18 07:57:06",
    "edited": {
      "time_stamp": "2018-09-18 07:57:23"
    },
    "text": "Question related to the grid again - *what style of grid should it be*, Should it be bootstrap esque with  column sizes, fraction based like Shopify’s Timber? something similar to Foundation’s XY Grid?"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-09-18 07:58:36",
    "text": "i'd say bootstrap to stay with consistency of current hs scaffolding"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-09-18 07:59:33",
    "text": "i also think its the most known from all of those"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-18 07:59:37",
    "text": "I think regardless of the direction we go I can add backward compatibility for the spans and rows HS adds"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-18 07:59:54",
    "text": "I would agree with your point bootstrap is probably the best known"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-09-18 08:00:09",
    "edited": {
      "time_stamp": "2018-09-18 08:00:44"
    },
    "text": "Jon, are you talking class names or the actual css styles? classname I think sticking with bootstrap-style naming conventions would be best"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-18 08:01:26",
    "text": "I’m thinking class names as well as how they’re actually built out."
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-09-18 08:03:59",
    "text": "got it. yeah, then I say stick with Bootstrap. in terms of styling, I will say I'm a pretty big fan of Lost Grid's math: calc(99.9% * 6/12 - (30px - 30px * 6/12)). But obviously flex is awesome too, would think eventually the dev would pick from a few flavors, float, flex, grid, etc..."
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-09-18 08:06:18",
    "text": "what if something like this was built for it: <https://getbootstrap.com/docs/3.3/customize/>"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-09-18 08:06:39",
    "text": "you could then customize which scaffolding system you used, and add other options for the files"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-18 08:07:01",
    "text": "So that brings in another thought I’ve had. I have CSS I’m willing to contribute which creates a grid of equal width cells super easily. This grid makes sense for use with say repeatable items in custom modules, but it’s not the same sort of grid you’d want for a full site because all cells have to be equal width.\n\nWe could have multiple types of grids as long as we don’t make it confusing",
    "reply_count": 11,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2018-09-18 08:11:46"
      },
      {
        "time_stamp": "2018-09-18 08:19:57"
      },
      {
        "time_stamp": "2018-09-18 08:20:19"
      },
      {
        "time_stamp": "2018-09-18 08:20:30"
      },
      {
        "time_stamp": "2018-09-18 08:26:29"
      },
      {
        "time_stamp": "2018-09-18 08:26:34"
      },
      {
        "time_stamp": "2018-09-18 08:27:04"
      },
      {
        "time_stamp": "2018-09-18 08:27:30"
      },
      {
        "time_stamp": "2018-09-18 08:28:11"
      },
      {
        "time_stamp": "2018-09-18 08:32:16"
      },
      {
        "time_stamp": "2018-09-18 13:20:25"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-09-18 08:07:09",
    "text": "true"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-18 08:07:26",
    "text": "regarding the options my thought was. Yes have that sort of thing, but all in HubL"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-18 08:08:26",
    "text": "We can have toggles for different functionality and not bloat the file size, by simply using hubl conditionals"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-09-18 08:11:46",
    "text": "we use our own type of grid classes as well: <https://github.com/websolutions/base-scss/blob/master/scss/objects/_wsol-grid.scss>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-18 08:19:57",
    "text": "This actually makes me feel it’s even more important to make it so the grid itself is an optional part of the framework"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-18 08:20:19",
    "text": "like even a separate file all-together."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-18 08:20:30",
    "text": "that way modules can load it if they choose to use it and whatnot"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-09-18 08:26:29",
    "text": "i'd love to try and basically modify the new bootstrap 4 css to replace the col-12 with the spans (so those still work consistently) then all you would need to do is add a span-6-md tag to make it work for medium"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-09-18 08:26:34",
    "text": "like a mashup of the old and new"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-18 08:27:04",
    "text": "yea I have that currently with bootstrap 3 with my company’s internal framework"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-18 08:27:30",
    "text": "I agree with doing it with the bootstrap4 route"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-18 08:28:11",
    "text": "sounds like that’s the most obvious choice in general for familiarity and making it easier to support the HS span classes"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-18 08:32:16",
    "text": "I think I still stand by the idea of actually having a separate file for the grid - would make it easier for people to roll their own, and be able to use it for Custom modules. there are some things though that I don’t know how to solve in that case without using css custom properties and we can’t support IE 11 if we use those"
  },
  {
    "subtype": "channel_topic",
    "topic": "CrankShaft is an Open Source Framework for building modern websites on HubSpot. Still in it’s infancy pitch your ideas!",
    "text": "set the channel topic: CrankShaft is an Open Source Framework for building modern websites on HubSpot. Still in it’s infancy pitch your ideas!",
    "time_stamp": "2018-09-18 12:56:54"
  },
  {
    "poster": {
      "poster_name": "Jenna Schultz",
      "poster_handle": "jenna"
    },
    "time_stamp": "2018-09-18 13:20:25",
    "text": "^^ I agree with doing the separate file for the grid. Much easier to manipulate."
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2018-09-18 13:22:16",
    "text": "Thoughts on utility classes? Not trying to suggest too much bloat, but I often use certain utility classes in my projects, like spacing (margin-top/margin-bottom), alignment (text-center), transformation (uppercase/lowercase), etc."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-18 13:24:47",
    "text": "I had already planned on incorporating those. I have code I can pop in for this"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-18 13:25:10",
    "text": "I think they are also something we could make toggleable through a boolean variable."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-18 13:26:44",
    "text": "I personally use utility classes a lot and teach my clients how to use em"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-18 13:45:20",
    "text": "oh and as stated - anyone who wants to contribute please shoot me your github username or email address and I’ll add you as a contributor."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-18 14:27:53",
    "text": "Question - currently when you guys build HS sites, I assume you start with some version of the HS boilerplate of some kind. Do you separate your site styles from that main theme file or do you just edit that main file to your hearts content?\n\n*I’m just thinking do we want to do the bootstrappy thing where they seperate out customizations for the sake of having some sort of an upgrade path for old sites, or just say screw that upgrade path lets just build it so you can get your hands dirty everywhere?*"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-09-18 14:34:52",
    "text": "^ Along with that note, would people be interested in refactoring the css file to be an \"include-only\" file consisting of imports of smaller files? the way a style.scss file sometimes is just a series of @import commands, so you're not maintaining one huge file, but rather a bunch of smaller files? Genuinely curious if people would find that useful or confusing lol.",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2018-09-19 07:32:09"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-18 14:38:10",
    "text": "My thoughts on that: I’m a fan of separating chunks of the code out, but includes require saving the parent and child files both, making edits confusing. So I feel if we do that maybe it should only be for pieces that wont actually be manually updated by devs?\n\nLike say have grid variables  declared above a grid include and include the file. With the intent that if someone customizes, they’re not going to actually customize that included file, just the main file they’re working with."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-18 14:38:49",
    "text": "just using grid css as an example"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-09-18 14:40:40",
    "text": "No, I get you, that's why I ask. I generally like it when using frameworks because it makes it really easy if I'm using my own grid or something, I can just comment that out or delete that line and I cut out a good portion of my file weight"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-09-18 14:42:21",
    "text": "And on the one hand, maintaining version control on smaller files in HS makes sense, but yeah, always updating the parent would be a pain, I forgot about that. haven't used HubL in CSS in a while lol"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-18 15:27:15",
    "edited": {
      "time_stamp": "2018-09-18 15:27:30"
    },
    "text": "was just reviewing bootstraps scss grid code in BS 4. my gawd I feel like they just overcomplicated some things for the sake of overcomplicating it lol."
  },
  null
]