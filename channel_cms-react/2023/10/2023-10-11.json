[
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 08:40:37",
    "text": "Hey, quick double check, is there anything special about the \"partials\" folder that is a sibling to the \"modules\" folder? Can I have another \"partials\" folder that is nested inside of \"modules\" or especially inside of a ExampleModule folder?",
    "reply_count": 59,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-10-11 08:42:33"
      },
      {
        "time_stamp": "2023-10-11 08:43:23"
      },
      {
        "time_stamp": "2023-10-11 08:44:14"
      },
      {
        "time_stamp": "2023-10-11 08:44:27"
      },
      {
        "time_stamp": "2023-10-11 08:44:33"
      },
      {
        "time_stamp": "2023-10-11 08:48:58"
      },
      {
        "time_stamp": "2023-10-11 08:49:11"
      },
      {
        "time_stamp": "2023-10-11 08:49:20"
      },
      {
        "time_stamp": "2023-10-11 08:49:34"
      },
      {
        "time_stamp": "2023-10-11 08:49:44"
      },
      {
        "time_stamp": "2023-10-11 08:50:00"
      },
      {
        "time_stamp": "2023-10-11 08:50:08"
      },
      {
        "time_stamp": "2023-10-11 08:50:22"
      },
      {
        "time_stamp": "2023-10-11 08:50:53"
      },
      {
        "time_stamp": "2023-10-11 08:52:27"
      },
      {
        "time_stamp": "2023-10-11 08:54:06"
      },
      {
        "time_stamp": "2023-10-11 08:57:00"
      },
      {
        "time_stamp": "2023-10-11 08:57:03"
      },
      {
        "time_stamp": "2023-10-11 08:57:49"
      },
      {
        "time_stamp": "2023-10-11 08:57:52"
      },
      {
        "time_stamp": "2023-10-11 10:16:29"
      },
      {
        "time_stamp": "2023-10-11 10:17:38"
      },
      {
        "time_stamp": "2023-10-11 10:18:12"
      },
      {
        "time_stamp": "2023-10-11 10:20:32"
      },
      {
        "time_stamp": "2023-10-11 10:23:51"
      },
      {
        "time_stamp": "2023-10-11 10:24:04"
      },
      {
        "time_stamp": "2023-10-11 10:24:20"
      },
      {
        "time_stamp": "2023-10-11 10:24:56"
      },
      {
        "time_stamp": "2023-10-11 10:26:28"
      },
      {
        "time_stamp": "2023-10-11 10:26:42"
      },
      {
        "time_stamp": "2023-10-11 10:27:51"
      },
      {
        "time_stamp": "2023-10-11 10:29:27"
      },
      {
        "time_stamp": "2023-10-11 10:30:39"
      },
      {
        "time_stamp": "2023-10-11 10:30:42"
      },
      {
        "time_stamp": "2023-10-11 10:33:14"
      },
      {
        "time_stamp": "2023-10-11 10:33:25"
      },
      {
        "time_stamp": "2023-10-11 10:33:28"
      },
      {
        "time_stamp": "2023-10-11 10:34:16"
      },
      {
        "time_stamp": "2023-10-11 10:35:03"
      },
      {
        "time_stamp": "2023-10-11 10:35:09"
      },
      {
        "time_stamp": "2023-10-11 10:35:42"
      },
      {
        "time_stamp": "2023-10-11 10:35:47"
      },
      {
        "time_stamp": "2023-10-11 10:36:30"
      },
      {
        "time_stamp": "2023-10-11 10:37:14"
      },
      {
        "time_stamp": "2023-10-11 10:37:14"
      },
      {
        "time_stamp": "2023-10-11 10:42:08"
      },
      {
        "time_stamp": "2023-10-11 10:43:38"
      },
      {
        "time_stamp": "2023-10-11 10:44:10"
      },
      {
        "time_stamp": "2023-10-11 10:50:20"
      },
      {
        "time_stamp": "2023-10-11 10:51:12"
      },
      {
        "time_stamp": "2023-10-11 10:51:38"
      },
      {
        "time_stamp": "2023-10-11 10:52:13"
      },
      {
        "time_stamp": "2023-10-11 10:52:23"
      },
      {
        "time_stamp": "2023-10-11 10:52:43"
      },
      {
        "time_stamp": "2023-10-11 10:53:44"
      },
      {
        "time_stamp": "2023-10-11 10:54:20"
      },
      {
        "time_stamp": "2023-10-11 10:54:33"
      },
      {
        "time_stamp": "2023-10-11 10:54:36"
      },
      {
        "time_stamp": "2023-10-11 10:54:48"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-10-11 08:42:33",
    "text": "`components/partials` does have meaning. Relative to the dev server those Components will get indexed and served as routes. And further our build system is expecting \"Partials\" to be at that location. This means you would not be able to point to them from HubL if they were in a different location."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 08:43:23",
    "text": "but I can still use a \"regular\" partial folders if I don't need them as routes or to point them via HubL right?"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-10-11 08:44:14",
    "text": "yes ... though maybe confusing to overload that concept in your codebase :shrug:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 08:44:27",
    "edited": {
      "time_stamp": "2023-10-11 08:44:41"
    },
    "text": "yea, I can see that"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 08:44:33",
    "text": "thanks for your help"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 08:48:58",
    "text": "<@UAYBXDG4U> also, just so that I'm sure, I have a hooks and lib folder inside of my \"components\" folder"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 08:49:11",
    "text": "would it break if I move those outside into the main \"cms-assets\" folder?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 08:49:20",
    "text": "which I think is called \"app\" in the new boilerplate"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-10-11 08:49:34",
    "text": "New boilerplate?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 08:49:44",
    "text": "github repo/examples"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 08:50:00",
    "text": "when I first started there was a \"cms-assets\" folder"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 08:50:08",
    "text": "I've kept that"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 08:50:22",
    "text": "but maybe should update to the way it's structured in the example"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-10-11 08:50:53",
    "text": "I see what you are asking"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-10-11 08:52:27",
    "edited": {
      "time_stamp": "2023-10-11 08:54:40"
    },
    "text": "• ProjectDirectory (contact-profile-project)\n    ◦ hsproject.json\n    ◦ ProjectComponentDirectory (contact-profile-app)\n        ▪︎ cms-assets.json\n        ▪︎ components\n            • modules\n            • partials"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-10-11 08:54:06",
    "text": "So, you need a ProjectDirectory with a `hsproject.json` . And within that you need a \"ProjecComponentDirectory\" which we have called \"assets\" and \"app\" ... but really you can call it anything. You need a `cms-assets.json` file in that directory. Also that can be considered the \"Root\" i.e. all you components/lib/utils/etc... need to be within that."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 08:57:00",
    "text": "ok, gotcha"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 08:57:03",
    "text": "that cleans things up then"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 08:57:49",
    "text": "right now I have `project/app/components/hooks..lib` but I'm going to adjust to `project/app/hooks/` `project/app/components` etc"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 08:57:52",
    "text": "thanks"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 10:16:29",
    "text": "anyone have any thoughts for a good naming convention for partials that are local to a specific module?\n\nI'm using `/components/modules/ExampleModule/blocks/PartOfExample.jsx`  at the moment but I don't love it..."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 10:17:38",
    "edited": {
      "time_stamp": "2023-10-11 10:17:44"
    },
    "text": "`local-components`\n`local-partials`\n`module-partials`\n`sub-components`\n...insert naming stuff joke..."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 10:18:12",
    "text": "maybe name it based on what it is every time..."
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-11 10:20:32",
    "text": "IMO I’m not sure what meaning partials has a naming concept outside of what Byron described where it’s available to use in hubl"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-11 10:23:51",
    "text": "I personally lean towards flatter organization and not trying to figure out folder names haha"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 10:24:04",
    "text": "I see the main `project/app/components/partials` as components that can be used in any module or as standalone."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 10:24:20",
    "text": "and then I have some that are connected to a module and should only be used within that module"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 10:24:56",
    "text": "flatter could be fine I guess...just toss them into the module folder"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-11 10:26:28",
    "text": "the structure I’ve used most is treating /components/partials and /components/modules as “exports” for the app and then put everything that shouldn’t be exported in /components "
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-11 10:26:42",
    "text": "And by exports I mean exported for use in hubl "
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 10:27:51",
    "text": "interesting..."
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-11 10:29:27",
    "text": "You can put whatever structure you want alongside the modules and partials folder, but IMO a person picking up the code base would be able to figure out what the interface is most easily if it’s just things intentionally exposed as modules or partials in that folder "
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 10:30:39",
    "edited": {
      "time_stamp": "2023-10-11 10:33:40"
    },
    "text": "so you might have:\n```project/app/components/modules/Hero/index.tsx\nproject/app/components/modules/Hero/fields.tsx```\nand then also:\n```project/app/components/Hero.tsx```"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 10:30:42",
    "text": "?"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-11 10:33:14",
    "text": "If the hero has fields then it’s a module right? It’d need to be exported "
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 10:33:25",
    "text": "whoops yea, forgot /modules"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-11 10:33:28",
    "text": "By being in /components/modules "
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-11 10:34:16",
    "edited": {
      "time_stamp": "2023-10-11 10:34:37"
    },
    "text": "So then can the last component be used without the field values?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 10:35:03",
    "text": "no"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 10:35:09",
    "text": "I guess it would be an island"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 10:35:42",
    "text": "I usually put everything in an island"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-11 10:35:47",
    "text": "If it’s not being used outside of the context of the hero module I’d colocate it in the module folder "
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-11 10:36:30",
    "text": "While putting everything in an island may work if there’s no interactivity happening you probably don’t need to "
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 10:37:14",
    "edited": {
      "time_stamp": "2023-10-11 10:37:24"
    },
    "text": "yea, I've probably gotten too used to copying and pasting from an original \"island\" component that I used previously"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-11 10:37:14",
    "text": "Or you may be able to do it lower in the tree "
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 10:42:08",
    "text": "so if I need fields but do not need interactivity, I can return directly from:\n\n```export const Component = () =&gt; {\n  return (here)\n}```\nI've been returning an island from there every time"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 10:43:38",
    "text": "and the way you're suggesting is that I use `project/app/components/Here.tsx` and"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 10:44:10",
    "edited": {
      "time_stamp": "2023-10-11 10:45:01"
    },
    "text": "and do this in `project/app/components/modules/Example/index.tsx`\n```export const Component = () => {\n  return <Here />\n}```"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-11 10:50:20",
    "text": "yeah or even skip the `Here` file and put your component right in that export"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 10:51:12",
    "text": "I think `Here` would probably be made up of a bunch of smaller components in the end"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 10:51:38",
    "text": "so maybe in a `project/app/components/Here/Here.tsx`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 10:52:13",
    "text": "I kind of like the idea of only using the `/modules` folder to deal with the HubSpot related export part"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 10:52:23",
    "text": "but want to make sure I understand / if that's what you are actually saying"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-11 10:52:43",
    "text": "yup that is what i’m recommending"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-11 10:53:44",
    "text": "its up to you if you want to move it out to a separate file/location underneath but my main point is i would keep the `/components/modules` and `/components/partials` folders reserved for defining the modules and partials you want made available in hubl"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-11 10:54:20",
    "text": "with a side note of evaluating where exactly you do and don’t need to wrap things in islands"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 10:54:33",
    "text": "yea, ok, I think I gotcha"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 10:54:36",
    "text": "thanks for the explanation"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 10:54:48",
    "text": "refactoring now / getting ready for this thing to keep expanding"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 11:21:18",
    "text": "if I have a `&lt;Layout&gt;` component that I use to import tailwind styles (`import \"../styles/tailwind.css\";`)\n\nDoes additional css get loaded in for each module that uses the `&lt;Layout&gt;` component?",
    "reply_count": 37,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-10-13 11:29:03"
      },
      {
        "time_stamp": "2023-10-13 11:30:05"
      },
      {
        "time_stamp": "2023-10-13 11:31:11"
      },
      {
        "time_stamp": "2023-10-13 11:32:15"
      },
      {
        "time_stamp": "2023-10-13 11:33:21"
      },
      {
        "time_stamp": "2023-10-13 11:33:27"
      },
      {
        "time_stamp": "2023-10-13 11:33:29"
      },
      {
        "time_stamp": "2023-10-13 11:33:45"
      },
      {
        "time_stamp": "2023-10-13 11:33:53"
      },
      {
        "time_stamp": "2023-10-13 11:34:12"
      },
      {
        "time_stamp": "2023-10-13 11:34:16"
      },
      {
        "time_stamp": "2023-10-13 11:34:55"
      },
      {
        "time_stamp": "2023-10-13 11:35:04"
      },
      {
        "time_stamp": "2023-10-13 11:35:13"
      },
      {
        "time_stamp": "2023-10-13 11:35:43"
      },
      {
        "time_stamp": "2023-10-13 11:41:25"
      },
      {
        "time_stamp": "2023-10-13 11:42:00"
      },
      {
        "time_stamp": "2023-10-13 11:57:51"
      },
      {
        "time_stamp": "2023-10-13 11:58:04"
      },
      {
        "time_stamp": "2023-10-13 11:58:31"
      },
      {
        "time_stamp": "2023-10-13 11:58:56"
      },
      {
        "time_stamp": "2023-10-13 11:59:38"
      },
      {
        "time_stamp": "2023-10-13 11:59:48"
      },
      {
        "time_stamp": "2023-10-13 12:00:16"
      },
      {
        "time_stamp": "2023-10-13 12:01:04"
      },
      {
        "time_stamp": "2023-10-13 12:01:14"
      },
      {
        "time_stamp": "2023-10-13 12:01:35"
      },
      {
        "time_stamp": "2023-10-13 12:02:31"
      },
      {
        "time_stamp": "2023-10-13 12:38:16"
      },
      {
        "time_stamp": "2023-10-13 12:55:03"
      },
      {
        "time_stamp": "2023-10-13 12:55:24"
      },
      {
        "time_stamp": "2023-10-13 12:56:35"
      },
      {
        "time_stamp": "2023-10-13 13:08:16"
      },
      {
        "time_stamp": "2023-10-13 13:09:32"
      },
      {
        "time_stamp": "2023-10-13 13:09:48"
      },
      {
        "time_stamp": "2023-10-13 13:19:38"
      },
      {
        "time_stamp": "2023-10-13 13:19:57"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 11:27:06",
    "text": "I've gone too far in refactoring to check but I'm pretty sure that's the case"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 11:27:14",
    "text": "is there a better approach?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 11:27:50",
    "text": "make a dedicated partial that only handles the tailwindcss import?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 11:48:17",
    "edited": {
      "time_stamp": "2023-10-11 11:48:25"
    },
    "text": "that does seem to work..any way to get it into the html <head> instead?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 12:06:53",
    "text": "^ this also makes thinks tricky when testing components locally",
    "reply_count": 6,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-10-11 12:45:21"
      },
      {
        "time_stamp": "2023-10-11 12:54:05"
      },
      {
        "time_stamp": "2023-10-11 16:23:06"
      },
      {
        "time_stamp": "2023-10-11 16:24:13"
      },
      {
        "time_stamp": "2023-10-11 16:27:07"
      },
      {
        "time_stamp": "2023-10-11 16:27:39"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 12:07:08",
    "edited": {
      "time_stamp": "2023-10-11 13:21:37"
    },
    "text": "but still feels like a better option than loading in styles for each module"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 12:07:24",
    "text": "has anyone run into this issue?"
  },
  {
    "poster": {
      "poster_name": "Taylor O'Reilly",
      "poster_handle": "taylor699"
    },
    "time_stamp": "2023-10-11 12:45:21",
    "text": "I also run into this constantly. What ive ended up doing is creating a \"testing\" template thats just the header and footer and i work off that preview instead."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 12:54:05",
    "text": "<@U036TUPVAV8> are you doing the same kind of \"load tailwind as a partial\" setup? Loading it just once in the base template?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 14:50:31",
    "text": "^ I also wonder if not having all of the CSS contained in each module has implications for how things are rendered from the server. I assume if the page doesn't have CSS yet then it would look odd?"
  },
  {
    "poster": {
      "poster_name": "Taylor O'Reilly",
      "poster_handle": "taylor699"
    },
    "time_stamp": "2023-10-11 16:23:06",
    "text": "Are you breaking out tailwind into a global file and then partial files for each module? I haven't done that. Im just using webpack to to build and upload when changes in my local environment and the only css in modules that I have is things that are related to module fields"
  },
  {
    "poster": {
      "poster_name": "Taylor O'Reilly",
      "poster_handle": "taylor699"
    },
    "time_stamp": "2023-10-11 16:24:13",
    "text": "I've been building this theme up for a while but i used this as a starting point. <https://github.com/ozguruysal/HubSpot-tailwind>"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 16:27:07",
    "text": "I'm running into the issue with the new js-rendering react stuff, I think my theme tailwind setup is similar to what you described—I happen to talk about it here in a few posts: <https://fasterbetter.dev>"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-10-11 16:27:39",
    "text": "(probably taking down that blog/project soon because it's out of date and I'm not maintaining it)"
  }
]