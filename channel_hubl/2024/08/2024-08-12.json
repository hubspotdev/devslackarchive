[
  {
    "poster": {
      "poster_name": "Twentyninetimes",
      "poster_handle": "tech817"
    },
    "time_stamp": "2024-08-12 02:57:32",
    "edited": {
      "time_stamp": "2024-08-12 02:58:44"
    },
    "text": "If you don’t need content to be mixed in the result list, you could perhaps loop through tags from the blog and the HubDB items and append them to an array - skipping duplicates - that you use to loop through to output your filter list.\n\nThen have a loop for renderingen each list content from the blog and the HubDB, e.g. using tags as html data-selector=“<tagname here>” which you can then manipulate with JS."
  },
  {
    "poster": {
      "poster_name": "Twentyninetimes",
      "poster_handle": "tech817"
    },
    "time_stamp": "2024-08-12 03:00:54",
    "text": "If you need the list to be mixed randomly or by date you’d have to save the content output of each list (e.g. json output) and mix it based on your preferred method."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-08-12 15:18:59",
    "text": "building emails you still use CSS, mostly inline"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-08-12 15:19:07",
    "text": "what hubl are you trying to use"
  },
  {
    "poster": {
      "poster_name": "Brian Aderer",
      "poster_handle": "baderer"
    },
    "time_stamp": "2024-08-12 15:23:32",
    "text": "thanks, got it figured out we are off and runnign"
  },
  {
    "text": "Anyone know how to solve for this?\n\n• I have an object that I use as my defaults.\n• I also have an object that I use for custom parameters that change depending on a variety of circumstances.\n• I want to combine the two objects into a new object using the `update` function.\n• I do this so that the new object uses all of my custom values, and if any custom values are not set, the values from the default object are used.\n• For example, the default object has `\"x\": \"1\", \"y\": \"2\"`\n• And the custom object has `\"x\": \"8\"`\n• The new combined object that I make with `set new = default` and then `do new.update(custom)` would have the value: `\"x\" \"8\", \"y\": \"2\"`\n• The problem is that after I successfully do this, my original `default` object has it’s properties updated with the values from the `custom` object.\nHow do I stop that from happening?\n\nHere’s my reduced test code:\n\n```{% set default_block_presets = {\n\t  \"padding\": 40\n\t}\n%}\n\n{% set custom_block_presets = {\n\t\t\"padding\": 100\n} \n%}\n\n&lt;b&gt;default_block_presets:&lt;/b&gt; {{ default_block_presets }}&lt;br&gt;&lt;br&gt; {# resolves to 40 #}\n\n&lt;b&gt;custom_block_presets:&lt;/b&gt; {{ custom_block_presets }}&lt;br&gt;&lt;br&gt; {# resolves to 100 #}\n\n{% set bp = default_block_presets %}\n{% do bp.update(custom_block_presets) %}\n\n&lt;b&gt;bp:&lt;/b&gt; {{ bp }}&lt;br&gt;&lt;br&gt; {# resolves to 100 #}\n\n&lt;b&gt;default_block_presets:&lt;/b&gt; {{ default_block_presets }}&lt;br&gt;&lt;br&gt; {# resolves to 100 #}\n\n&lt;b&gt;custom_block_presets:&lt;/b&gt; {{ custom_block_presets }}&lt;br&gt;&lt;br&gt; {# resolves to 100 #}```\n",
    "time_stamp": "2024-08-12 15:44:18",
    "reply_count": 43,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2024-08-14 07:51:07"
      },
      {
        "time_stamp": "2024-08-14 07:51:15"
      },
      {
        "time_stamp": "2024-08-14 07:52:01"
      },
      {
        "time_stamp": "2024-08-14 07:52:50"
      },
      {
        "time_stamp": "2024-08-14 07:56:05"
      },
      {
        "time_stamp": "2024-08-14 07:58:22"
      },
      {
        "time_stamp": "2024-08-14 08:00:13"
      },
      {
        "time_stamp": "2024-08-14 10:18:28"
      },
      {
        "time_stamp": "2024-08-14 10:20:04"
      },
      {
        "time_stamp": "2024-08-14 10:21:07"
      },
      {
        "time_stamp": "2024-08-14 10:21:31"
      },
      {
        "time_stamp": "2024-08-14 10:23:13"
      },
      {
        "time_stamp": "2024-08-14 10:40:41"
      },
      {
        "time_stamp": "2024-08-14 10:41:28"
      },
      {
        "time_stamp": "2024-08-14 10:46:55"
      },
      {
        "time_stamp": "2024-08-14 10:47:12"
      },
      {
        "time_stamp": "2024-08-14 10:59:43"
      },
      {
        "time_stamp": "2024-08-14 11:59:10"
      },
      {
        "time_stamp": "2024-08-14 11:59:16"
      },
      {
        "time_stamp": "2024-08-14 11:59:18"
      },
      {
        "time_stamp": "2024-08-14 12:00:37"
      },
      {
        "time_stamp": "2024-08-14 12:00:58"
      },
      {
        "time_stamp": "2024-08-14 12:01:06"
      },
      {
        "time_stamp": "2024-08-14 12:45:03"
      },
      {
        "time_stamp": "2024-08-14 12:45:30"
      },
      {
        "time_stamp": "2024-08-14 12:46:57"
      },
      {
        "time_stamp": "2024-08-20 03:19:59"
      },
      {
        "time_stamp": "2024-08-20 03:30:14"
      },
      {
        "time_stamp": "2024-08-20 03:32:09"
      },
      {
        "time_stamp": "2024-08-20 03:41:14"
      },
      {
        "time_stamp": "2024-08-20 15:13:36"
      },
      {
        "time_stamp": "2024-08-20 15:23:23"
      },
      {
        "time_stamp": "2024-08-21 02:51:39"
      },
      {
        "time_stamp": "2024-08-21 07:31:05"
      },
      {
        "time_stamp": "2024-08-21 07:33:54"
      },
      {
        "time_stamp": "2024-08-21 07:36:27"
      },
      {
        "time_stamp": "2024-08-21 08:51:13"
      },
      {
        "time_stamp": "2024-08-21 08:51:46"
      },
      {
        "time_stamp": "2024-08-21 09:20:46"
      },
      {
        "time_stamp": "2024-08-21 09:55:32"
      },
      {
        "time_stamp": "2024-08-21 09:56:08"
      },
      {
        "time_stamp": "2024-08-21 09:59:27"
      },
      {
        "time_stamp": "2024-08-21 10:01:53"
      }
    ]
  }
]