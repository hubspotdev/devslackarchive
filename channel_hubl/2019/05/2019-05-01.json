[
  {
    "text": "Are there any errors with this markup?",
    "time_stamp": "2019-05-01 07:43:06",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-05-01 08:25:28"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 08:25:28",
    "text": "```{% text \"video_bg_url\" label=\"Enter text here\", value=\"<https://cdn2.HubSpot.net/hubfs/4829685/NHADA.com/Videos/Raffle_Hero_Loop_Still.jpg>\", export_to_template_context=True %}\n{# Makes the parameters available to be stored and used in template logic #}\n{% image \"video_poster\" label=\"Select a video poster image\", src=\"<https://cdn2.HubSpot.net/hubfs/4829685/NHADA.com/Videos/Raffle_Hero_Loop_Still.jpg>\", export_to_template_context=True %}\n{{ content.widgets.simple_text_field.body.value }}\n{{ content.widgets.video_poster.body.src }}\n{# Prints the value of the HubL tag but can also be used in template logic #}\n  \n&lt;div class=\"c-hero-event c-hero\"&gt;\n    &lt;video playsinline autoplay muted loop poster=\"{{ content.widgets.video_poster.body.src }}\" data-object-fit=\"cover\"&gt;\n&lt;source src=\"{{ content.widgets.video_bg_url.body.value }}\" type=\"video/mp4\"&gt;      \n&lt;source src=\"{{ content.widgets.video_bg_url.body.value }}\" type=\"video/webm\"&gt;\n      \n    &lt;/video&gt;\n&lt;/div&gt;```"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-01 11:37:39",
    "edited": {
      "time_stamp": "2019-05-01 11:38:41"
    },
    "text": "so I have a site that uses a cookie to display a slightly different main navigation/menu. Here is the basic code:\n```{% if request.cookies.my_cookie == \"value_01\" %}\n\t{% menu \"nav_menu\", site_map_name=\"Menu 01\" %}\n{% elif  request.cookies.my_cookie == \"value_02\" %}\n\t{% menu \"nav_menu\", site_map_name=\"Menu 02\" %}\n{% else %}\n\t{# if cookies are disabled #}\n\t{% menu \"nav_menu\", site_map_name=\"default\" %}\n{% endif %}```"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-01 11:38:14",
    "text": "when switching the cookie value HubSpot caches the original menu. It takes a hard refresh to get the updated menu. Is there a way to prevent the HTML caching?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 11:39:28",
    "text": "use a `request.` on the page. i think that works"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 11:39:55",
    "text": "like something that it pulls from the browser."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 11:40:51",
    "text": "try `referrer`"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 11:41:41",
    "text": "let me know if that works"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-01 11:45:43",
    "text": "what do you mean <@U38EZFVFE>?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 11:46:31",
    "text": "there are certain request (if i remember right) that will prevent the page from being cached."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 11:47:01",
    "text": "`{{ request.referrer }}` i believe is one of them."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 11:47:36",
    "edited": {
      "time_stamp": "2019-05-01 11:47:41"
    },
    "text": "cause that changes on page load"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 11:50:56",
    "text": "Why are you using cookies for that?"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-01 11:51:29",
    "text": "oh so just add that to the template and it will disable html cache?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 11:52:07",
    "edited": {
      "time_stamp": "2019-05-01 11:52:13"
    },
    "text": "that was the thought"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 11:53:32",
    "text": "the IP address one as well..  ip address one"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 11:53:49",
    "edited": {
      "time_stamp": "2019-05-01 11:53:59"
    },
    "text": "thanks <@U7SL518D6> for reminding me on that"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-01 11:58:27",
    "text": "I will add, I don’t think breaking the cache in this way is the right solution. I don’t know a great solution but something like a header for a full site shouldn’t break caching else the whole site can’t be cached."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 11:59:41",
    "text": "true."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 11:59:56",
    "text": "nice thought"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-01 12:00:12",
    "text": "if it were one page and one really small thing, I’d be like go for it, but a site header seems like it’d hurt you more than help"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:00:31",
    "text": "smart module seems like a better solution"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-01 12:01:22",
    "text": "isn't that what a smart module does under the hood?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:01:24",
    "text": "but it can be tedious. I did for a client  based on selected language."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:01:36",
    "text": "or you can use HubSpots cookies"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:01:49",
    "text": "those clear pretty well"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-01 12:03:08",
    "text": "didn't want to have to duplicate a bunch of pages with slightly different menu"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:03:14",
    "text": "what change are you looking for?"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-01 12:03:48",
    "text": "what is setting the cookie?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:03:56",
    "text": "yeah."
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-01 12:04:06",
    "text": "when a specific page loads, js sets the cookie value"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:04:15",
    "text": "is it one you are setting?"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-01 12:04:19",
    "text": "yes"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:04:30",
    "text": "can you clear it yourself?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:04:56",
    "text": "clear it then set it again?"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-01 12:04:57",
    "text": "the cookie value gets updated no problem, the hubl is what takes a few refreshes"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:05:02",
    "text": "ah"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-01 12:05:41",
    "text": "when viewing from a fresh browser with no cookie, it will load the default (no cookie value) even after the cookie is set"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-01 12:05:50",
    "text": "but after a few refreshes it updates"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:05:53",
    "text": "no url change tho"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:05:55",
    "text": "?"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-01 12:06:19",
    "text": "ah, you know what"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-01 12:06:22",
    "text": "that's probably it lol"
  },
  {
    "time_stamp": "2019-05-01 12:06:35",
    "text": ""
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 12:06:37",
    "text": "that'll def do it"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 12:06:56",
    "text": "i like when chad is between jobs"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:07:07",
    "text": "hahaha"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:07:13",
    "text": "stop.."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:07:18",
    "text": "tell my wife that.."
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-01 12:07:20",
    "text": "chad you need some work?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 12:07:22",
    "text": "ha!"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:07:35",
    "text": "Im looking for the next great master piece!"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:07:36",
    "text": "haha"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:07:40",
    "text": "yeah.."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:08:03",
    "text": "im in between projects and i have about a month to kill."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:08:07",
    "text": "ish"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 12:08:15",
    "text": "i would like a month"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 12:08:17",
    "text": "ish"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 12:08:28",
    "text": "i have a couple hours",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-05-01 12:13:08"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 12:08:29",
    "text": "ish"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:08:47",
    "text": "work === money"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 12:09:05",
    "text": "month === :desert_island:"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:09:19",
    "text": "i did this with my spare time...."
  },
  {
    "text": "",
    "time_stamp": "2019-05-01 12:10:27"
  },
  {
    "text": "",
    "time_stamp": "2019-05-01 12:10:31"
  },
  {
    "text": "",
    "time_stamp": "2019-05-01 12:10:42"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 12:11:09",
    "text": "new floors?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 12:11:10",
    "text": "nice"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:11:17",
    "text": "yeah floors and staire"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 12:11:36",
    "text": "well done"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 12:11:44",
    "text": "i have work for you"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 12:11:46",
    "text": ":slightly_smiling_face:"
  },
  {
    "time_stamp": "2019-05-01 12:12:27",
    "text": ""
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:12:45",
    "text": "if its flooring im good.. :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 12:12:51",
    "text": "ha"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:13:04",
    "text": "im working to take a vacay from my wifes honey do lists"
  },
  {
    "subtype": "thread_broadcast",
    "time_stamp": "2019-05-01 12:13:08",
    "text": "I would like a couple hours, I have a couple minutes ish"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 12:13:40",
    "text": "<#CCQSQ2C6L|crankshaft> should take care of those minutes"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:13:59",
    "text": "<@U7SL518D6> you need a hoby"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-01 12:14:02",
    "text": "it is.. I’m already thinking to myself- oh man what did I get myself into"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-01 12:14:41",
    "edited": {
      "time_stamp": "2019-05-01 12:15:45"
    },
    "text": "oh I have a hobby, that’s working on non work specific HubSpot stuff.(so far it’s working for me.)\n\nSoon as Google Stadia is released, I’m probably going off grid for a bit lol.\n\nlove me some high quality gaming, just don’t currently have a computer worth playing games on."
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 12:15:44",
    "text": "raspberry pi wont do?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-01 12:15:51",
    "text": "already did that hobby"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-01 12:15:52",
    "text": "lol"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-01 12:16:03",
    "text": "more an arduino guy myself though"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 12:16:17",
    "edited": {
      "time_stamp": "2019-05-01 12:16:26"
    },
    "text": "need to build an arcade case for mine"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:18:14",
    "text": "#nerdtime"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-01 12:18:48",
    "edited": {
      "time_stamp": "2019-05-01 12:20:27"
    },
    "text": "my wife(she’s an engineer/tech ed teacher) brought home an arduino one day, with a few LEDs.\n\nShe spent like 4 hours trying to get it to simply make an led turn on, then off then on then off.\n\nI asked if I could help her make something. I told her to line up several LED’s in a line, and put a button on opposite ends of the line.\n\nWhile she was doing that I was programming the buttons and LEDs.\n\nhad a simplified game of pong going 15 minutes later.\n\n\nwife said I can’t play with her Arduino anymore."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:19:30",
    "text": "haha"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-01 12:19:33",
    "text": "fun"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 12:19:33",
    "text": "ha"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-01 12:20:21",
    "text": "update: made it update the cookie on click of any link that goes to one of those two pages so now once you get to the page it has the updated nav.... of course it does... so is this bad practice for caching?",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-05-01 12:21:39"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 12:20:24",
    "text": "working on a garden watering system using arduino",
    "reply_count": 3,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-05-02 01:49:09"
      },
      {
        "time_stamp": "2019-05-02 01:49:12"
      },
      {
        "time_stamp": "2019-05-02 01:51:08"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-01 12:21:39",
    "text": ":shrug::skin-tone-2:"
  },
  {
    "poster": {
      "poster_name": "Cesar Hernandez",
      "poster_handle": "cesar"
    },
    "time_stamp": "2019-05-01 13:03:50",
    "text": "How would one go about passing it field values to a module to a field that is in a group?\n\nFor example: if field has a full slug of `module.button.text` how, if possible, can I pass in a value through the `{% module %}` tag?",
    "reply_count": 8,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-05-01 13:47:04"
      },
      {
        "time_stamp": "2019-05-01 13:49:07"
      },
      {
        "time_stamp": "2019-05-01 13:49:49"
      },
      {
        "time_stamp": "2019-05-01 13:52:54"
      },
      {
        "time_stamp": "2019-05-01 13:53:55"
      },
      {
        "time_stamp": "2019-05-01 14:27:03"
      },
      {
        "time_stamp": "2019-05-01 14:27:24"
      },
      {
        "time_stamp": "2019-05-01 14:33:25"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Joe",
      "poster_handle": "joe"
    },
    "time_stamp": "2019-05-01 13:47:04",
    "edited": {
      "time_stamp": "2019-05-01 13:48:11"
    },
    "text": "<@UGMD3NH70> You'd use a `{% content_attribute \"field_name\" is_json=True %}` within a `{% module_block module %}`. Using your example:\n```\n{% module_block module \"module_internal_name\" path=\"/path/to/module\" %}\n  {% content_attribute \"button\" is_json=True %}{\n    \"text\": \"Your custom text\"\n  }{% end_content_attribute %}\n{% end_widget_block %}\n```\nIf it's a repeater field, be sure to wrap the json in square brackets cause it's an array of values:\n```\n[\n  { \n    \"field\": \"value\"\n  }, { \n    \"field\": \"value\"\n  }\n]\n```\n\nHad to do something similarly for some custom templates and was able to get nice and specific with my default values instead of relying completely on the presets I had in my custom modules."
  },
  {
    "poster": {
      "poster_name": "Joe",
      "poster_handle": "joe"
    },
    "time_stamp": "2019-05-01 13:49:07",
    "text": "do that `{% content_attribute \"field_name\" %}` for each one you want to define"
  },
  {
    "poster": {
      "poster_name": "Cesar Hernandez",
      "poster_handle": "cesar"
    },
    "time_stamp": "2019-05-01 13:49:49",
    "text": "Awesome! Thanks!"
  },
  {
    "poster": {
      "poster_name": "Joe",
      "poster_handle": "joe"
    },
    "time_stamp": "2019-05-01 13:52:54",
    "text": "<https://designers.HubSpot.com/docs/hubl/hubl-module-syntax-and-parameters#block-syntax>\nhas some more information. obviously the documentation acts as if you're using the default HubSpot modules (`text`, `rich_text`, etc) but, similar logic of how it works can be applied to custom modules as well"
  },
  {
    "poster": {
      "poster_name": "Cesar Hernandez",
      "poster_handle": "cesar"
    },
    "time_stamp": "2019-05-01 13:53:55",
    "text": "Great, you’ve been really helpful :pray:"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-05-01 14:14:53",
    "text": "with using a choice field, is there a way to grab just the label?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-01 14:16:42",
    "text": "you can only grab the value unfortunately"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-05-01 14:23:42",
    "text": "anyway to do a substring in HubL i cant think straight right now for some reason",
    "reply_count": 27,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2019-05-01 14:25:46"
      },
      {
        "time_stamp": "2019-05-01 14:27:06"
      },
      {
        "time_stamp": "2019-05-01 14:27:38"
      },
      {
        "time_stamp": "2019-05-01 14:27:49"
      },
      {
        "time_stamp": "2019-05-01 14:28:23"
      },
      {
        "time_stamp": "2019-05-01 14:28:40"
      },
      {
        "time_stamp": "2019-05-01 14:28:48"
      },
      {
        "time_stamp": "2019-05-01 14:29:06"
      },
      {
        "time_stamp": "2019-05-01 14:29:09"
      },
      {
        "time_stamp": "2019-05-01 14:29:20"
      },
      {
        "time_stamp": "2019-05-01 14:29:28"
      },
      {
        "time_stamp": "2019-05-01 14:29:34"
      },
      {
        "time_stamp": "2019-05-01 14:34:47"
      },
      {
        "time_stamp": "2019-05-01 14:35:14"
      },
      {
        "time_stamp": "2019-05-01 14:39:32"
      },
      {
        "time_stamp": "2019-05-01 14:42:05"
      },
      {
        "time_stamp": "2019-05-01 14:42:15"
      },
      {
        "time_stamp": "2019-05-01 14:49:29"
      },
      {
        "time_stamp": "2019-05-01 14:50:22"
      },
      {
        "time_stamp": "2019-05-01 14:53:30"
      },
      {
        "time_stamp": "2019-05-01 14:55:09"
      },
      {
        "time_stamp": "2019-05-01 14:55:34"
      },
      {
        "time_stamp": "2019-05-01 14:55:46"
      },
      {
        "time_stamp": "2019-05-01 14:55:50"
      },
      {
        "time_stamp": "2019-05-01 14:56:03"
      },
      {
        "time_stamp": "2019-05-01 14:56:11"
      },
      {
        "time_stamp": "2019-05-01 14:56:16"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Joe",
      "poster_handle": "joe"
    },
    "time_stamp": "2019-05-01 14:25:46",
    "edited": {
      "time_stamp": "2019-05-01 14:25:52"
    },
    "text": "I think the `replace` filter is what you're looking for?\n<https://designers.HubSpot.com/docs/hubl/hubl-supported-filters#replace>"
  },
  {
    "poster": {
      "poster_name": "Cesar Hernandez",
      "poster_handle": "cesar"
    },
    "time_stamp": "2019-05-01 14:27:03",
    "text": "For JSON group values, how did you account for fields such as URL/Links and Image?"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-05-01 14:27:06",
    "text": "might need to use regex_replace"
  },
  {
    "poster": {
      "poster_name": "Cesar Hernandez",
      "poster_handle": "cesar"
    },
    "time_stamp": "2019-05-01 14:27:24",
    "text": "<@UAQHN1F2Q>"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-05-01 14:27:38",
    "text": "as the values im looking at will all have a `something|variable` type value so I need to pick off the first part"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-01 14:27:49",
    "text": "replace won’t do the same as substring.\n\nThere is a way to do it, but it functions a little differently. forgot exactly how but has to do with an advanced way of using the format filter.\n\n<https://designers.HubSpot.com/docs/hubl/hubl-supported-filters#format>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-01 14:28:23",
    "text": "oh if that’s all you’re doing aj, use split"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-05-01 14:28:40",
    "text": "but that would output 2 sep entries correct?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-01 14:28:48",
    "text": "`|split('|')`"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-01 14:29:06",
    "text": "it would give you an array, and you can just use [0]"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-01 14:29:09",
    "text": "on the array"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-05-01 14:29:20",
    "text": ":faceplam:  thats a good point"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-05-01 14:29:28",
    "text": "thanks Jon, saving my sanity once again"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-01 14:29:34",
    "text": "haha not a problem"
  },
  {
    "poster": {
      "poster_name": "Joe",
      "poster_handle": "joe"
    },
    "time_stamp": "2019-05-01 14:33:25",
    "text": "similar to if you specified the group field names yourself, `image` and `link` would have similar internal values within the `{% content_attribute is_json=True %}` section.\n`\"image_field_name\": { \"src\": \"<https://placehold.it/300x150>\", \"alt\": \"300x150\", \"width\": 300, \"height\": 150 }`\nand\n`\"link_field_name\": { \"href\": \"<https://HubSpot.com>\" }`\n\nTbh, I haven't had the need to preset a `link` field within a `{% module_block module %}` yet, but the concept should be similar to the image field type above. The developer tools might also give some guidance for what field names you might need for those field types."
  },
  {
    "poster": {
      "poster_name": "Joe",
      "poster_handle": "joe"
    },
    "time_stamp": "2019-05-01 14:34:47",
    "text": "<@U7SL518D6> to the rescue as usual lol"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-01 14:35:14",
    "text": "darn, left my cape in the car"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-01 14:39:32",
    "text": "suggesting community champions get capes now: <https://HubSpotdev.slack.com/archives/C26E7JT8V/p1556743122049100>"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 14:42:05",
    "text": "ohhh"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 14:42:15",
    "text": "more swag that i can yoink from real devs"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-01 14:49:29",
    "text": "I still haven’t gotten mine"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 14:50:22",
    "text": "all the sippy cups are mine!"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-01 14:53:30",
    "text": ":disappointed:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 14:55:09",
    "text": "maybe it is time to give up on HubSpot"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-01 14:55:34",
    "text": "lol, feel like I’ve invested too much to switch away."
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 14:55:46",
    "text": "that's how they get you"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-01 14:55:50",
    "text": "y’know they could give me stock options instead. that’d be cool"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 14:56:03",
    "text": "just hope for the sippy cup"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-01 14:56:11",
    "text": "stock options...jeez"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-01 14:56:16",
    "text": "hahaha"
  }
]