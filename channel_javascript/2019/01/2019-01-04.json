[
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-01-04 08:15:18",
    "text": "never used stickybits, but maybe you would want to include it as a dependency in your component, then apply it after the 'mounted' lifecycle hook? also, if you're using vue, I would think the browsers you're targeting would just support good ol' CSS position: sticky?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-04 08:19:57",
    "text": "vue is backward compatible to atleast IE 10. and what I’m doing with Vue isn’t actually all that crazy I’m mostly using it just to render some data"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-04 08:20:52",
    "text": "CSS position sticky doesn’t work in IE 11 or 10,regardless the library stickybits has a function where when it detects the user has scrolled it adds a class you can use to change the element’s styling on scroll. I need to do that."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-04 08:23:12",
    "text": "is this what you’re talking about with including it as a dependency? <https://vuejs.org/v2/guide/components-edge-cases.html#Dependency-Injection>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-04 08:25:23",
    "edited": {
      "time_stamp": "2019-01-04 08:25:39"
    },
    "text": "I owe you a beer <@U26BLKGE4> ark!"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-01-04 08:33:06",
    "text": "lol, soon dude :stuck_out_tongue: :beer:\n\nare you building the instance locally? I was thinking of kinda going the React route (haha) and if you were using webpack, just adding in an `import`  statement at the top, then webpack would bundle it and make sure it was available for use within that file.\n\nIf you're not using webpack and just using a standard Vue instance, then I _think_ you would just need to make sure stickybits is loaded before Vue, then just apply those functions AFTER the component is mounted in the dom, and possibly run some functions in the update or destroy methods as well if anything is being added / removed from the dom"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-04 08:38:08",
    "text": "unfortunately I’m not building locally, haven’t quite figured out how I would approach working with HubSpot and vue/react locally it seems like it’d feel a little clunky"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-04 08:39:39",
    "text": "and you were exactly right it just needed to be executed in after mounted, seems I will likely only have to handle updates  under certain conditions and if I can avoid doing it I will"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-01-04 09:14:33",
    "text": "perfect. yeah, because there's a split second when the content isn't rendered in the dom (virtual dom? idk) the function will fail because it doesn't see the element. throwing these functions in the `mounted` (or `componentDidMount` in React) makes sure those functions will only fire once those elements are available"
  },
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null
]