[
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-04-03 07:17:20",
    "text": "<@U02LG4AU9JS>, I see. Right now we’re not looking into extending the core of how modules and D&amp;D areas work together. I understand the desire to make modules and D&amp;D more “component-like” and we should look more at that, but at least for the foreseeable future we are planning on making JS modules a new (and hopefully better!) way to implement custom modules… and not changing the page editor user experience/capabilities of those modules.\n\nThanks again for the feedback. I hope that having JSX-based fields can at least help make that bigger custom Column + Image + Accordion module a _little_ easier to build &amp; manage (since you can share field groups, the component rendering logic, etc across modules). But I do understand your point how things could be better for you and other developers if modules and D&amp;D were more composable."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-04-03 08:28:14",
    "text": "If I want to build a global navigation using a JS partial, how can I be sure I'm getting the benefits of server-side rendering? If I use `framer-motion` do I automatically lose server-side rendering? If I use state at all? Is there a way to check to see if I'm still server-side rendering as I go?",
    "reply_count": 16,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2023-04-03 08:32:37"
      },
      {
        "time_stamp": "2023-04-03 08:35:02"
      },
      {
        "time_stamp": "2023-04-03 08:36:51"
      },
      {
        "time_stamp": "2023-04-03 08:37:41"
      },
      {
        "time_stamp": "2023-04-03 08:39:49"
      },
      {
        "time_stamp": "2023-04-03 08:41:26"
      },
      {
        "time_stamp": "2023-04-03 08:41:37"
      },
      {
        "time_stamp": "2023-04-03 08:42:20"
      },
      {
        "time_stamp": "2023-04-03 08:43:40"
      },
      {
        "time_stamp": "2023-04-03 08:47:40"
      },
      {
        "time_stamp": "2023-04-03 08:51:51"
      },
      {
        "time_stamp": "2023-04-03 08:53:21"
      },
      {
        "time_stamp": "2023-04-03 08:54:39"
      },
      {
        "time_stamp": "2023-04-03 08:55:15"
      },
      {
        "time_stamp": "2023-04-03 08:56:32"
      },
      {
        "time_stamp": "2023-04-03 08:57:15"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-04-03 08:32:37",
    "text": "Anytime you are using a `js_partial` or `module` pointing to a JS Module, there will be a server side pass on that react tree ... unless you are using a client only island."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-04-03 08:35:02",
    "text": "so for something like a navigation, should I build it in a way that doesn't require state? Would that have performance benefits?"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-04-03 08:36:51",
    "text": "State is fine to use, it just doesn't have any meaning on the server right now. For example if you had a navigation and were using state for some visual treatment like the current page ... at server render time that visual treatment would be whatever the default state was in the component."
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-04-03 08:37:41",
    "text": "Use of Islands, and things like state, hooks ... is additive once hydration happens on the client."
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-04-03 08:39:49",
    "edited": {
      "time_stamp": "2023-04-03 08:40:40"
    },
    "text": "&gt; so for something like a navigation, should I build it in a way that doesn't require state? Would that have performance benefits?\nTo answer more directly, I think you could build a global nav with the JS Building Blocks that was entirely rendered on the server. It would get all the current performance benefits of pre-rendering/cacheing.\n\nIf you wanted to add client side interactivity, Islands would be the recommended and a performant way to do so."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-04-03 08:41:26",
    "text": "ok, great, I think I get that. Is there a way to \"check\" if I've done something that would prevent the nav from being entirely rendered on the server?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-04-03 08:41:37",
    "text": "similar to developerMode=true?"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-04-03 08:42:20",
    "text": "You could just \"view source\" for the page I think."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-04-03 08:43:40",
    "text": "alright, I'll try — that's my next project. Hoping to build a fancy nav but maintain high performance because it's global/required everywhere"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-04-03 08:47:40",
    "text": "thank you"
  },
  {
    "text": "Another thing you could do to check JS server rendering output is to disable Javascript in your browser. Like in Chrome by hitting ctrl/cmd+shift+p in the inspector and typing…  and then refreshing.",
    "time_stamp": "2023-04-03 08:51:51",
    "edited": {
      "time_stamp": "2023-04-03 08:53:50"
    }
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-04-03 08:53:21",
    "text": "Though maybe it could be nice for us to have a `?hsDebugNoHydration=true` or similar that only disables JS module/various HubSpot JS (and not all JS on the page)? :thinking_face:"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-04-03 08:54:39",
    "edited": {
      "time_stamp": "2023-04-03 08:54:45"
    },
    "text": "i was thinking maybe a `hydrateOn=\"never\"` option for the `Island` component"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-04-03 08:55:15",
    "text": "though maybe that’s less clear that it’d be only useful for debugging"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-04-03 08:56:32",
    "text": "yea, that seems like it could be useful. The whole server-side/hydration flow hasn't quite clicked for me yet despite it being explained frequently. I think I just need to code more things until it clicks."
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-04-03 08:57:15",
    "text": "I empathize with that :100: :sweat_smile: ."
  }
]