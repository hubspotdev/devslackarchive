[
  {
    "poster": {
      "poster_name": "Sabir Buxsoo",
      "poster_handle": "sabir"
    },
    "time_stamp": "2023-03-02 01:48:26",
    "text": "Hello everyone, I'm trying to build  CRM card that will be fetching data from an external API. However, I was thinking of not making the API call every time and only when I click on a button. This means on a first button click, I'm going to fetch the data and show it on the card. Now, when I come back to the card, I want to see that data that I previously fetched without making another API call. Is that possible and if so, can anyone point me to the right direction(docs)? Thanks",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-03-02 07:41:00"
      },
      {
        "time_stamp": "2023-03-02 07:41:33"
      },
      {
        "time_stamp": "2023-03-03 00:14:31"
      },
      {
        "time_stamp": "2023-03-03 07:32:03"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Lukas Kahwe Smith",
      "poster_handle": "lukas.smith"
    },
    "time_stamp": "2023-03-02 03:07:45",
    "text": "is there some way I can configure the capabilities of the rich text content type in HubDB? f.e. I don't want people to mess with `font-size`",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-03-02 06:26:21"
      },
      {
        "time_stamp": "2023-03-02 06:26:28"
      },
      {
        "time_stamp": "2023-03-02 08:19:55"
      },
      {
        "time_stamp": "2023-03-02 08:20:16"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matias Vad",
      "poster_handle": "matias618"
    },
    "time_stamp": "2023-03-02 06:02:07",
    "edited": {
      "time_stamp": "2023-03-02 06:02:50"
    },
    "text": "We’ve built quite big setup with GraphQL based on different HubDBs for different business units, in a single portal.\nNow we need to push the same source code to a new portal, which is going to be using the same functionality. But this new portal is only a single business unit.\n\nWe deploy through CI/CD.\n\nThis means all our GraphQL files will cause the deployment proces to fail in the upload process, when adding the new portal to our CI/CD, since then new portal doesn’t have - and never will have - all the different HubDB’s that the “main” portal requires.\n\nWe can `.hsignore` the specific business-unit GraphQL files, but this means our CI/CD won’t be complete, since we hav veto create a manual upload process based on the portal we’re upload to.\nOr we’d have to get creative in our CI/CD scripts.\n\nIt makes sense that GraphQL files validate if their HubDB counterparts are available, else the data would be invalid.\nBut it would be great, in this case to be able to ignore this validation.\n\nHave any of you had a similar issue with GraphQL and HubDB validation?",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-03-02 06:17:06"
      },
      {
        "time_stamp": "2023-03-02 06:44:23"
      },
      {
        "time_stamp": "2023-03-02 07:08:13"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matias Vad",
      "poster_handle": "matias618"
    },
    "time_stamp": "2023-03-02 06:17:06",
    "text": "Same issue would actually arise if a portal isn’t Enterprise, and we have serverless functions in the source.\n\nSeems like there needs to be a more granular way of ignoring, rather than having it either a) outside of git or b) adding additional CI/CD steps."
  },
  {
    "poster": {
      "poster_name": "Gobi Selvaraj",
      "poster_handle": "gselvaraj"
    },
    "time_stamp": "2023-03-02 06:26:21",
    "text": "Not right now."
  },
  {
    "poster": {
      "poster_name": "Gobi Selvaraj",
      "poster_handle": "gselvaraj"
    },
    "time_stamp": "2023-03-02 06:26:28",
    "text": "cc <@U6W3H6YN8>"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2023-03-02 06:44:23",
    "edited": {
      "time_stamp": "2023-03-02 06:45:19"
    },
    "text": "Good question, can you explain a bit more about why you are trying to deploy a single source of truth of code to various accounts that seemingly do not actually have the same data/features in them?\n\nWhat exactly are you creating that is distributed between these accounts? What is the use case?"
  },
  {
    "poster": {
      "poster_name": "Ruarri Serpa",
      "poster_handle": "rserpa"
    },
    "time_stamp": "2023-03-02 06:51:05",
    "edited": {
      "time_stamp": "2023-03-02 06:52:33"
    },
    "text": "Anyone else having inconsistencies with GraphQL results? A query executed in the graphiql explorer performs correctly with a limit of 100, a filter, and an offset when I manually increment my offset, returning 584 results.  When I loop that query in a Lambda function with `do…while`, `data.CRM.{my object name}.hasMore` returns false on the second run (200 results returned).\n\nRemoving the filter altogether will return all records for that object however (~980), so it doesn’t seem like a rate limit or problem with my loop.",
    "reply_count": 8,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-03-02 06:55:07"
      },
      {
        "time_stamp": "2023-03-02 06:59:32"
      },
      {
        "time_stamp": "2023-03-02 07:21:35"
      },
      {
        "time_stamp": "2023-03-02 07:45:37"
      },
      {
        "time_stamp": "2023-03-02 07:50:19"
      },
      {
        "time_stamp": "2023-03-02 07:53:44"
      },
      {
        "time_stamp": "2023-03-02 07:54:41"
      },
      {
        "time_stamp": "2023-03-02 07:56:50"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Stef Leitch",
      "poster_handle": "sleitch"
    },
    "time_stamp": "2023-03-02 06:55:07",
    "text": "Can you share the query you're working with?"
  },
  {
    "poster": {
      "poster_name": "Stef Leitch",
      "poster_handle": "sleitch"
    },
    "time_stamp": "2023-03-02 06:59:32",
    "text": "Also, if you include the `total` property in your query, do you get a different amount returned between Graphiql and your Lambda function?"
  },
  {
    "poster": {
      "poster_name": "Matias Vad",
      "poster_handle": "matias618"
    },
    "time_stamp": "2023-03-02 07:08:13",
    "edited": {
      "time_stamp": "2023-03-02 07:08:19"
    },
    "text": "I’m almost positive our issue is derived from building this in a child theme, so we can’t have different BUs attached to the Business Unit functionality in the portal with each their own child theme.\nThis causes us to have a multitude of GraphQL files, handling the different naming schemes.\nHaving a “simple” BU setup, would eliminate this, as we would just have the base file naming.\n\nI’ve fixed the issue though, by introducing a “Copy” step in our CI/CD, which is portal-specific, and ignores the unneeded files, without impacting our repo and ignore files.\n\nSo this is very much an edge case."
  },
  {
    "poster": {
      "poster_name": "Ruarri Serpa",
      "poster_handle": "rserpa"
    },
    "time_stamp": "2023-03-02 07:21:35",
    "edited": {
      "time_stamp": "2023-03-02 07:28:44"
    },
    "text": "_edit: I’ve adjusted my test data. There are 584 “campaign_victory” records. 500 are “approved”. This filtered query should return 500 total records._\n\nHere’s my query from graphiql :\n```query FetchApprovedCampaigns {\n  CRM {\n    p_campaign_victory_collection(limit: 100, filter: {approved__eq: true},  offset: 0) {\n      hasMore\n      total\n      items {\n        name\n        approved\n        launch_date\n        scale\n        slug\n        status\n        initiative\n      }\n\n    }\n  }\n}```\n`total` from Graphiql is 500, and `total` from Lambda is 200"
  },
  {
    "text": "well it's possible but you would need to use a cache server and HubSpot doesn't have one that you can use by default. One thing you could try to do (it wouldn't work every time but would work sometimes), is storing the data from the external api outside of the main function:",
    "time_stamp": "2023-03-02 07:41:00"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-02 07:41:33",
    "text": "Otherwise for a more fully built setup I would recommend reading this article: <https://aws.amazon.com/blogs/architecture/data-caching-across-microservices-in-a-serverless-architecture/>"
  },
  {
    "poster": {
      "poster_name": "Stef Leitch",
      "poster_handle": "sleitch"
    },
    "time_stamp": "2023-03-02 07:45:37",
    "edited": {
      "time_stamp": "2023-03-02 07:46:41"
    },
    "text": "Interesting... The queries are definitely identical between Graphiql and the Lambda?\n\nAlso how are you authenticating when executing the query from the Lambda? Could be a permissions issue potentially where it only has access to a subset of the objects that have been created.\n\nEdited to add: Actually permissions doesn't make much sense if you remove the filter and get all the results back."
  },
  {
    "poster": {
      "poster_name": "Stef Leitch",
      "poster_handle": "sleitch"
    },
    "time_stamp": "2023-03-02 07:50:19",
    "text": "Do you have two separate test portals? I see that exact query executing for two different portals, one of which when I take a look at the data only has 200 entries."
  },
  {
    "poster": {
      "poster_name": "Ruarri Serpa",
      "poster_handle": "rserpa"
    },
    "time_stamp": "2023-03-02 07:53:44",
    "text": "Ah - you got it. Started in a dev account, but didn’t have all the functionality needed for this use case, so moved development over to our sandbox. :melting_face:"
  },
  {
    "poster": {
      "poster_name": "Stef Leitch",
      "poster_handle": "sleitch"
    },
    "time_stamp": "2023-03-02 07:54:41",
    "text": "Got it! Glad that was the problem, I was starting to feel stumped haha :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Ruarri Serpa",
      "poster_handle": "rserpa"
    },
    "time_stamp": "2023-03-02 07:56:50",
    "text": "Thanks for the help! Consider that a request from me for Teams in Dev accounts :grin:"
  },
  {
    "poster": {
      "poster_name": "Lukas Kahwe Smith",
      "poster_handle": "lukas.smith"
    },
    "time_stamp": "2023-03-02 08:19:55",
    "text": "ok .. so I guess I would have to write some code to filter out any font-size settings from HubDB rich text fields in this case"
  },
  {
    "poster": {
      "poster_name": "Lukas Kahwe Smith",
      "poster_handle": "lukas.smith"
    },
    "time_stamp": "2023-03-02 08:20:16",
    "text": "is there any elegant way to do this?"
  },
  {
    "poster": {
      "poster_name": "Sabir Buxsoo",
      "poster_handle": "sabir"
    },
    "time_stamp": "2023-03-03 00:14:31",
    "text": "<@U01QVR44MEY> Yep, the cache server is the solution I was thinking of. As a first solution, I was thinking this was probably overkill, but it doesn't seem like it's possible to simply use HubSpot.\n\nOut of curiosity, can we potentially use the HubDB to store some data from the serveless function (via some API calls)? It wouldn't really help me given the limit characters on rich text (I need to store a JSON data over of 200k characters) but would ne nice to know if there is a possibility of storing data in HuDB for some use case if it ever comes up"
  }
]