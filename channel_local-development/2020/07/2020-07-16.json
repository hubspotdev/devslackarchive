[
  {
    "poster": {
      "poster_name": "Teun Rutten",
      "poster_handle": "teun"
    },
    "time_stamp": "2020-07-16 07:39:36",
    "text": "We use React a lot and use modules and HubDB to pass data to our React / Preact App. We just use regular modules and pass the field data to our app using data attributes. But I am not sure if this would work in your usecase."
  },
  {
    "poster": {
      "poster_name": "Teun Rutten",
      "poster_handle": "teun"
    },
    "time_stamp": "2020-07-16 07:48:21",
    "text": "Cool! Added a snippet we use for lazy loading images instead of using native lazy load."
  },
  {
    "text": "Welp, scratch that..",
    "time_stamp": "2020-07-16 07:50:36"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2020-07-16 07:51:21",
    "text": ":eyes:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2020-07-16 07:51:52",
    "text": "STOP BEING SPAMMY, TEUN :grinning_face_with_one_large_and_one_small_eye:"
  },
  {
    "poster": {
      "poster_name": "Teun Rutten",
      "poster_handle": "teun"
    },
    "time_stamp": "2020-07-16 07:52:04",
    "text": ":joy:"
  },
  {
    "poster": {
      "poster_name": "Teun Rutten",
      "poster_handle": "teun"
    },
    "time_stamp": "2020-07-16 07:53:00",
    "text": "I'll share it here instead:\n\n```export default () =&gt; {\n  let lazyImages = [].slice.call(document.querySelectorAll('img.lazy'));\n  if (lazyImages.length &lt; 1) return;\n\n  // If the browser does NOT support IntersectionObserver\n  if (!('IntersectionObserver' in window)) {\n    lazyImages.forEach(lazyImage =&gt; updateSrc(lazyImage));\n    return;\n  }\n\n  let lazyImageObserver = new IntersectionObserver((entries, observer) =&gt; {\n    entries.forEach(entry =&gt; {\n      if (entry.isIntersecting) {\n        let lazyImage = entry.target;\n        updateSrc(lazyImage);\n        lazyImageObserver.unobserve(lazyImage);\n      }\n    });\n  });\n\n  lazyImages.forEach(lazyImage =&gt; {\n    lazyImageObserver.observe(lazyImage);\n  });\n};\n\nfunction updateSrc(lazyImage) {\n  if (lazyImage.dataset.src) {\n    lazyImage.src = lazyImage.dataset.src;\n  }\n  if (lazyImage.dataset.srcset) {\n    lazyImage.srcset = lazyImage.dataset.srcset;\n  }\n  if (lazyImage.dataset.sizes) {\n    lazyImage.sizes = lazyImage.dataset.sizes;\n  }\n\n  lazyImage.classList.add('loaded');\n}```"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2020-07-16 07:54:12",
    "text": "i am talking to the lords of the community now for you :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Teun Rutten",
      "poster_handle": "teun"
    },
    "time_stamp": "2020-07-16 07:55:12",
    "text": "Guess editing a message 3 times in a row is marked as spam."
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2020-07-16 07:56:57",
    "text": ":faceplam:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2020-07-16 07:57:25",
    "text": "i believe your tenure here has come to an end, <@UGDF9EBPW>.  pack you bags"
  },
  {
    "poster": {
      "poster_name": "Teun Rutten",
      "poster_handle": "teun"
    },
    "time_stamp": "2020-07-16 07:57:40",
    "text": ":joy:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2020-07-16 08:03:28",
    "text": "you should be gravy now"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2020-07-16 08:03:59",
    "text": "put your mug back on the desk.  stick around, kid.  youâ€™re going places"
  },
  {
    "poster": {
      "poster_name": "Teun Rutten",
      "poster_handle": "teun"
    },
    "time_stamp": "2020-07-16 08:11:09",
    "text": "Hahaha"
  },
  {
    "poster": {
      "poster_name": "Teun Rutten",
      "poster_handle": "teun"
    },
    "time_stamp": "2020-07-16 08:11:29",
    "text": "Thanks"
  },
  {
    "poster": {
      "poster_name": "Teun Rutten",
      "poster_handle": "teun"
    },
    "time_stamp": "2020-07-16 08:11:38",
    "text": "Gonna screenshot this convo"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2020-07-16 08:12:03",
    "text": "i will autograph it as well"
  },
  {
    "poster": {
      "poster_name": "Teun Rutten",
      "poster_handle": "teun"
    },
    "time_stamp": "2020-07-16 08:12:15",
    "text": "Awesome"
  },
  {
    "poster": {
      "poster_name": "Reuben",
      "poster_handle": "reuben.levine"
    },
    "time_stamp": "2020-07-16 09:35:38",
    "text": "Is there a way to use a variable within `fields.json`? i.e. provide the content editor the ability to select a number and then use that number in `fields.json` file as a max in a repeatable field?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-07-16 10:40:59",
    "text": ""
  }
]