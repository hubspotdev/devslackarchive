[
  {
    "poster": {
      "poster_name": "Stefan Chrobot",
      "poster_handle": "stefan475"
    },
    "time_stamp": "2021-06-04 02:14:51",
    "text": "I need to know when the contact is no longer on a list"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2021-06-04 05:49:36",
    "text": "<@U7SL518D6> I did it! Just with the webpack configuration I was already using, I added a React app inside of just one module:\n```import React, { Component } from 'react'\nimport ReactDOM from 'react-dom'\n\n    class App extends Component{\n        render(){\n        return(\n            &lt;div className=\"App\"&gt;\n            &lt;h1&gt; Hello, World! &lt;/h1&gt;\n            &lt;/div&gt;\n        );\n    }\n}\n\nReactDOM.render(&lt;App /&gt;, document.getElementById(\"module-root\"));```\nI guess that code doesn't reveal much lol. But this is inside the regular JS file of a module and #module-root is inside of its regular HTML file."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2021-06-04 05:51:36",
    "text": "oh, I also had to add `\"@babel/preset-react\",` to my Babel config"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2021-06-04 05:51:58",
    "text": "I'll share the whole setup inside of a bootstrap setup when I get a chance"
  },
  {
    "poster": {
      "poster_name": "JeroenBuelens",
      "poster_handle": "jeroen.buelens"
    },
    "time_stamp": "2021-06-04 07:42:58",
    "text": "Question:\n\nis there any update on the possibility of creation of a Campaign API?\n<https://community.HubSpot.com/t5/HubSpot-Ideas/Complete-HubSpot-Campaigns-API/idi-p/20184>\ni've encountered a case where i needed to use the Campaign name linked to a HubSpot Deal with a Sync, so i'd like to get the actual campaign name.\nbut `hs_analytics_first_touch_converting_campaign`  holds the UUID, and i'd like to use something API to get the Campaign name with/from that UUID in sync.",
    "reply_count": 6,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2021-06-04 10:28:42"
      },
      {
        "time_stamp": "2021-06-04 10:29:02"
      },
      {
        "time_stamp": "2021-06-04 11:19:57"
      },
      {
        "time_stamp": "2021-06-04 11:27:29"
      },
      {
        "time_stamp": "2021-06-04 11:46:53"
      },
      {
        "time_stamp": "2021-08-27 02:48:15"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2021-06-04 08:42:41",
    "text": "Hey <@U0239HCLCN7> We have a media API in private beta right now which is why we reserved that. We haven’t put together a list of reserved names for custom objects but we definitely should, I’ll make sure this gets on our backlog. thanks for the tag <@U012W4YEUTX>"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2021-06-04 08:44:10",
    "text": "Good news here is that Engagments are each being split up into their own CRM Object so they’ll be fully supported in the CRM Search API as a part of which should help the amount of filter you’ll need to do"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-04 10:26:12",
    "text": "another issue to consider, what happens when a user's pre-existing object clashes with a stock object the HS team introduced"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-04 10:26:49",
    "text": "you'd probably want one of these guys to check a HubSpot list membership\n\n<https://developers.HubSpot.com/docs/api/marketing/contact-lists>"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-04 10:27:45",
    "text": "<@UFBNA9K9A> <@UD53A9UUR> any thoughts? the docs seem to disagree with themselves"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-04 10:28:42",
    "text": "last time I asked about something similar I heard there were spamming concerns involved"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-04 10:29:02",
    "text": "but seems like we need a reply from a HubSpotter here <@UD53A9UUR> <@UFBNA9K9A>"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2021-06-04 11:19:57",
    "text": "I asked the team who would be responsible for this if they have plans for a public Campaigns API"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2021-06-04 11:21:49",
    "text": "They are kinda supposed to disagree with themselves here since the older APIs handle datetimes differently than the new v3 APIs. So both sites are correct, this is a change we made when we created the new version"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2021-06-04 11:22:16",
    "text": "The idea was that the ISO 8601 format would be more readable during testing and debugging"
  },
  {
    "poster": {
      "poster_name": "Adam Wright",
      "poster_handle": "adam377"
    },
    "time_stamp": "2021-06-04 11:24:07",
    "edited": {
      "time_stamp": "2021-06-04 11:24:23"
    },
    "text": "Yeah, that part makes sense… Where things got complicated is that the ISO8601 seemed to only support the Z indicator, and not 0000/00:00. Meanwhile, Zapier will only output 0000/00:00 and not Z. So it’s kind of an ISO8601 partial support stand-off"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2021-06-04 11:27:29",
    "text": "It’s a Dublin based team  so I’m not expected a response until Tuesday since it’s late their time and Monday is a holiday there"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2021-06-04 11:31:31",
    "text": "Yeah I can see where that gets frustrating, probably not something we can do in the short term, but longer term I’ll add an issue to look at a parameter to define the format you want datetimes back in perhaps with some string templating so we don’t have to rely on everyone conforming to a standard"
  },
  {
    "subtype": "tombstone",
    "text": "This message was deleted.",
    "time_stamp": "2021-06-04 11:33:22",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2021-06-04 12:20:19"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2021-06-04 11:46:53",
    "text": "Ended up getting an answer already. It’s something they don’t have any short term plans for (aka the next 3 months) but are open to adding something in the future"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-04 12:18:06",
    "text": "I think the bigger issue is: Zapier is emitting some valid ISO 8601s which it seems that the HubSpot 8601 stuff cannot process as input"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-04 12:18:53",
    "text": "it's more of a \"be liberal in what you accept and conservative in what you generate\" issue... <https://en.wikipedia.org/wiki/Robustness_principle>"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-04 12:20:19",
    "text": "can you check both the domain and website properties? they are separate properties"
  },
  {
    "poster": {
      "poster_name": "Adam Wright",
      "poster_handle": "adam377"
    },
    "time_stamp": "2021-06-04 12:48:35",
    "text": "In my mind, accepting only UTC timestamps is sane/sensible/expected. No issue there. But, if you’re going to accept one valid form of ISO 8601 UTC, then any valid form of ISO 8601 UTC should be accepted"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2021-06-04 12:49:15",
    "text": "That makes sense, thank you"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-04 12:50:02",
    "text": "Python has a similar problem. Their `datetime.fromisoformat(...)` is broken in a similar way"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-04 12:56:09",
    "text": "It actually errored out for me on stamps HubSpot generated which were valid, because it cannot handle certain TZ formats"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-04 12:56:31",
    "text": "I had to replace it with isoparse from dateutil"
  },
  {
    "poster": {
      "poster_name": "Stephen Yager",
      "poster_handle": "stephen.yager"
    },
    "time_stamp": "2021-06-04 15:02:24",
    "text": "This is true, but at the same time, it should at least give you the index number of the one that has an issue, not necessarily the full error of what is wrong, but which one it is"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-04 15:19:12",
    "edited": {
      "time_stamp": "2021-06-04 17:04:10"
    },
    "text": "agreed, just stating reality, whether or not I agree"
  }
]