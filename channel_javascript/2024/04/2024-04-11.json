[
  {
    "poster": {
      "poster_name": "Celina Barry",
      "poster_handle": "celina.barry"
    },
    "time_stamp": "2024-04-11 11:03:51",
    "text": "Thanks <@U06B6J5BCRY> that’s super helpful! What I’m doing now doesn’t seem to work. Here’s what I have so far:\n\n```&lt;script&gt;\n  window.addEventListener('message', event =&gt; {\n    // Check if event.data exists\n    if (event.data &amp;&amp; event.data.type === 'hsFormCallback' &amp;&amp; event.data.eventName === 'onFormReady') {\n      var urlInputField = document.querySelector('input[name=\"last_form_fill_url\"]');\n      if (urlInputField) {\n        urlInputField.value = window.location.href;\n\n        // Hide the \"last_form_fill_url\" field by setting its display style to \"none\"\n        urlInputField.style.display = \"none\";\n        \n        // Trigger a keydown event on the \"last_form_fill_url\" field\n        var event = new Event('keydown', {\n          bubbles: true,\n          cancelable: true\n        });\n        try {\n          urlInputField.dispatchEvent(event);\n          console.log('Keydown event dispatched successfully.');\n        } catch (error) {\n          console.error('Error dispatching keydown event:', error);\n        }\n      } else {\n        console.error('Input field with name \"last_form_fill_url\" not found.');\n      }\n    } else {\n      console.error('Unexpected message received:', event.data);\n    }\n  });\n&lt;/script&gt;```\nHowever, the dependent fields are not showing even if the ‘last_form_fill_url’ is populated successfully. You’re suggesting I use a css class of “show” / “hide” would be the solution?\n\nthanks again!!! :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Matt Cruz",
      "poster_handle": "matt.cruz"
    },
    "time_stamp": "2024-04-11 13:41:01",
    "text": "are you setting them as dependent in the form's settings? my go-to is to load everything on the page as non-dependent and then use hide/show, so I will have some stuff being like \"if this field was filled in and the value was any of x y z, show this field, if the value was q r s, show this, if the field is none of those do this\" so I have full control in the code over when shows up when, this would work for you in theory as you wouldnt be _dependent_ on HubSpot's internal logic"
  },
  {
    "text": "yes I have it set up as a dependent form field on the form. the problem is that I think HS can tell when the form is being populated by an actual person vs when it’s happening as an event being pushed. I tried to trick the form with some crazy workaround:\n```&lt;script&gt;\n  window.addEventListener('message', event =&gt; {\n    // Check if event.data exists\n    if (event.data &amp;&amp; event.data.type === 'hsFormCallback' &amp;&amp; event.data.eventName === 'onFormReady') {\n      var urlInputField = document.querySelector('input[name=\"last_form_fill_url\"]');\n      if (urlInputField) {\n        urlInputField.value = window.location.href;\n\n        // Generate a random delay between 1 and 4 seconds for deleting and adding the last character\n        const deleteAddDelay = Math.random() * 3000 + 1000; // Random number between 1000 and 4000 milliseconds\n\n        // Wait for the randomly generated delay before deleting and adding the last character\n        setTimeout(() =&gt; {\n          // Delete the last character of the populated value\n          var currentValue = urlInputField.value;\n          urlInputField.value = currentValue.substring(0, currentValue.length - 1);\n\n          // Wait for a short delay before adding the last character back\n          setTimeout(() =&gt; {\n            // Add the last character back\n            urlInputField.value += currentValue.substring(currentValue.length - 1);\n\n            // Generate a random delay between 0 and 3 seconds for adding the space value\n            const spaceDelay = Math.random() * 3000; // Random number between 0 and 3000 milliseconds\n\n            // Wait for the randomly generated delay before adding the space value\n            setTimeout(() =&gt; {\n              // Add a space value after the last character\n              urlInputField.value += ' ';\n\n              // Hide the \"last_form_fill_url\" field by setting its visibility attribute to hidden\n              \n              // Trigger a keydown event on the \"last_form_fill_url\" field\n              var event = new Event('keydown', {\n                bubbles: true,\n                cancelable: true\n              });\n              try {\n                urlInputField.dispatchEvent(event);\n                console.log('Keydown event dispatched successfully.');\n              } catch (error) {\n                console.error('Error dispatching keydown event:', error);\n              }\n            }, spaceDelay);\n          }, 50); // Short delay before adding the last character back\n        }, deleteAddDelay);\n      } else {\n        console.error('Input field with name \"last_form_fill_url\" not found.');\n      }\n    } else {\n      console.error('Unexpected message received:', event.data);\n    }\n  });\n&lt;/script&gt;```\nthis currently lives on the page footer. However, if I fill out the “last_form_fill_url” myself, the dependent field shows. I thought about using show/hide on the js side but I want to build something the marketers could use to set page level form field visibility rules without needing to edit any code. Something user friendly so I don’t need to help them :slightly_smiling_face:",
    "time_stamp": "2024-04-11 13:58:29"
  }
]