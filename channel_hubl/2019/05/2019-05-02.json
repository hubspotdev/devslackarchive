[
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-02 01:49:09",
    "text": "send nudes"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-02 01:49:12",
    "edited": {
      "time_stamp": "2019-05-02 01:49:16"
    },
    "text": "<https://www.instagram.com/p/BoOwh-iH-en/>"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-02 01:51:08",
    "edited": {
      "time_stamp": "2019-05-02 01:51:19"
    },
    "text": "I have that idea too but didn't investigated in depth yet.\nWould appreciate to see how do u handle :nerd_face:"
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-05-02 06:00:13",
    "text": "Hey all, just a quick query, so I'm using the isotype filter plugin to filter blog posts by tag. currently I have this"
  },
  {
    "text": "",
    "time_stamp": "2019-05-02 06:00:29"
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-05-02 06:00:38",
    "text": "Which works great"
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-05-02 06:02:00",
    "text": "But now I need to show the most recent popular blog posts in the `all` filter and keep the rest as it already is"
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-05-02 06:02:23",
    "text": "So I need to sort of split that filter from everything else",
    "reply_count": 7,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-05-02 07:13:28"
      },
      {
        "time_stamp": "2019-05-02 07:57:04"
      },
      {
        "time_stamp": "2019-05-02 07:58:49"
      },
      {
        "time_stamp": "2019-05-02 08:09:28"
      },
      {
        "time_stamp": "2019-05-02 08:10:08"
      },
      {
        "time_stamp": "2019-05-02 08:25:08"
      },
      {
        "time_stamp": "2019-05-02 08:28:19"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-05-02 06:03:01",
    "text": "What would be the best way to go about this?"
  },
  {
    "poster": {
      "poster_name": "Chandresh",
      "poster_handle": "chandreshkumar"
    },
    "time_stamp": "2019-05-02 07:13:28",
    "text": "This is right way, I always add a static button for  *All* filter."
  },
  {
    "poster": {
      "poster_name": "Ryan",
      "poster_handle": "ryan.absalom"
    },
    "time_stamp": "2019-05-02 07:37:27",
    "text": "Hi could anyone take a look at my code below and see if there is a way to achieve what I am trying. Basically I am trying to use HubSpots image resizing on background images for custom widgets. I.E <https://www.ssaspro.co.uk/hubfs/Heros/our-approach.jpg> becomes <https://www.ssaspro.co.uk/hs-fs/hubfs/Heros/our-approach.jpg?width=600> on a mobile device"
  },
  {
    "text": "",
    "time_stamp": "2019-05-02 07:37:32"
  },
  {
    "poster": {
      "poster_name": "Ryan",
      "poster_handle": "ryan.absalom"
    },
    "time_stamp": "2019-05-02 07:38:45",
    "text": "my issue is that the variable bg does the replace on the link hubfs to hs-fs/hubfs but then it just reverts back whenever its inside the background-image: url()",
    "reply_count": 9,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-05-02 07:40:10"
      },
      {
        "time_stamp": "2019-05-02 07:50:55"
      },
      {
        "time_stamp": "2019-05-02 07:51:26"
      },
      {
        "time_stamp": "2019-05-02 07:51:31"
      },
      {
        "time_stamp": "2019-05-02 07:51:53"
      },
      {
        "time_stamp": "2019-05-02 07:53:00"
      },
      {
        "time_stamp": "2019-05-02 07:53:18"
      },
      {
        "time_stamp": "2019-05-02 07:54:21"
      },
      {
        "time_stamp": "2019-05-02 07:54:27"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 07:40:10",
    "text": "use `resize_image_url()` instead it will generate the correct urls"
  },
  {
    "text": "",
    "time_stamp": "2019-05-02 07:50:55"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 07:51:26",
    "text": "huzzah congrats"
  },
  {
    "poster": {
      "poster_name": "Ryan",
      "poster_handle": "ryan.absalom"
    },
    "time_stamp": "2019-05-02 07:51:31",
    "text": "<@U7SL518D6> seems to be causing the same issue"
  },
  {
    "poster": {
      "poster_name": "Ryan",
      "poster_handle": "ryan.absalom"
    },
    "time_stamp": "2019-05-02 07:51:53",
    "text": "<https://www.ssaspro.co.uk/hubfs/Backgrounds/business-owners.jpg?width=1000&amp;name=business-owners.jpg> if you go onto the image its still the full width"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 07:53:00",
    "text": "CDN takes a little bit to cache the resized images sometimes. that image in particular is pretty large so may take a little bit just be patient"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 07:53:18",
    "text": "it will eventually work as expected, there’s nothing additional you need to do"
  },
  {
    "poster": {
      "poster_name": "Ryan",
      "poster_handle": "ryan.absalom"
    },
    "time_stamp": "2019-05-02 07:54:21",
    "text": "it was my bad I didnt remove |replace from the variable bg, once that removed it seems to be working"
  },
  {
    "poster": {
      "poster_name": "Ryan",
      "poster_handle": "ryan.absalom"
    },
    "time_stamp": "2019-05-02 07:54:27",
    "text": "thanks a lot for your help :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-05-02 07:57:04",
    "edited": {
      "time_stamp": "2019-05-02 07:58:20"
    },
    "text": "Ok, but I need to show the most popular posts on the all filter"
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-05-02 07:58:49",
    "text": "Everything else should remain the same I just need to change what is shown on the `all` filter"
  },
  {
    "poster": {
      "poster_name": "Chandresh",
      "poster_handle": "chandreshkumar"
    },
    "time_stamp": "2019-05-02 08:09:28",
    "edited": {
      "time_stamp": "2019-05-02 08:11:02"
    },
    "text": "ohh then for this  add  `*` in data-category of article"
  },
  {
    "poster": {
      "poster_name": "Chandresh",
      "poster_handle": "chandreshkumar"
    },
    "time_stamp": "2019-05-02 08:10:08",
    "text": "because you are using `*` data-fliter in `all` button"
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-05-02 08:25:08",
    "text": "Is there something like a most popular data category?"
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-05-02 08:28:19",
    "text": "Because I already have `*` on the all filter"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 08:31:07",
    "text": "Ramping up work on <#CCQSQ2C6L|crankshaft> if you are interested in helping build a bootstrap/foundation/timber like framework tailor made for HubSpot join the slack channel, and check out the github. More to come - but I won’t spam other channels about it."
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-05-02 09:04:59",
    "text": "So, i am trying to use the blog_authors() function to grab an author via their email:\n```\n {% set blog_author = blog_authors('default', 250)|selectattr('email','equalto',dynamic_page_hubdb_row.email) %}\n{{blog_author |pprint}}\n```\nit's only returning the persons name though and not the rest of the properties of the person like email and facebook and all the other author info",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-05-02 09:19:00"
      },
      {
        "time_stamp": "2019-05-02 09:40:38"
      },
      {
        "time_stamp": "2019-05-02 09:40:48"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-05-02 09:05:01",
    "text": "thoughts?"
  },
  {
    "poster": {
      "poster_name": "Gobi Selvaraj",
      "poster_handle": "gselvaraj"
    },
    "time_stamp": "2019-05-02 09:19:00",
    "text": "Could you DM me your portal and page links, I will take a look."
  },
  {
    "text": "Anyone know why I would be getting this error?",
    "time_stamp": "2019-05-02 09:38:41",
    "reply_count": 3,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-05-02 09:47:40"
      },
      {
        "time_stamp": "2019-05-02 13:01:03"
      },
      {
        "time_stamp": "2019-05-02 14:12:30"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-05-02 09:40:38",
    "text": "we got it figured out, was missing the for loop to access it"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-05-02 09:40:48",
    "text": "thank you <@UG52C29EE>"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-05-02 09:47:40",
    "text": "Can you DM the template? I am looking at improving error messaging"
  },
  {
    "poster": {
      "poster_name": "Brian Krainer",
      "poster_handle": "bkrainer"
    },
    "time_stamp": "2019-05-02 11:33:00",
    "text": "<@U7AUHLHPU> those previously mentioned regexes should now be working as before. sorry for the hassle"
  },
  {
    "poster": {
      "poster_name": "Gobi Selvaraj",
      "poster_handle": "gselvaraj"
    },
    "time_stamp": "2019-05-02 13:01:03",
    "text": "This should be fixed now."
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2019-05-02 14:12:30",
    "text": "Is it. Thanks <@UG52C29EE>"
  }
]