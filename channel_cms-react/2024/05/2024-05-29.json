[
  {
    "poster": {
      "poster_name": "Dennis K",
      "poster_handle": "dennis579"
    },
    "time_stamp": "2024-05-29 06:42:22",
    "text": "O wow, not sure if I am correct, but looks like it’s also compiling TailwindCSS within css modules so you can write tailwindCSS and scope them per building block without having all the tailwindCSS in one file (and load this in the parent wrapper of the website)"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2024-05-29 07:17:48",
    "text": "has _anyone_ used this hs product with dynamic pages?",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-05-30 10:59:15"
      },
      {
        "time_stamp": "2024-05-30 11:00:19"
      },
      {
        "time_stamp": "2024-05-30 11:03:42"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-05-29 07:18:41",
    "text": "Hello John!"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-05-29 07:18:59",
    "text": "We are working on an example for this use case - the answer is yes."
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-05-29 07:19:19",
    "text": "However there are some caveats."
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-05-29 07:20:21",
    "text": "I will DM you as we are still working on official docs/example for this"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2024-05-29 07:35:13",
    "text": "awesome! Thanks <@UAYBXDG4U>"
  },
  {
    "poster": {
      "poster_name": "Dennis K",
      "poster_handle": "dennis579"
    },
    "time_stamp": "2024-05-29 09:37:58",
    "text": "<@UQERM7BLY> How exactly did you manage to use the Typo plugin? Getting module not found error when trying to deploy to HS"
  },
  {
    "poster": {
      "poster_name": "Dennis K",
      "poster_handle": "dennis579"
    },
    "time_stamp": "2024-05-29 10:51:53",
    "text": "Someone with the correct project settings (tsconfig, cms-assets.json) for getting tailwind/typography to work? Tailwind is working perfectly, but I can’t import or require the tailwind typography plugin",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-05-29 16:23:17"
      },
      {
        "time_stamp": "2024-05-29 18:36:51"
      },
      {
        "time_stamp": "2024-05-29 18:37:19"
      },
      {
        "time_stamp": "2024-05-29 22:15:34"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2024-05-29 16:23:17",
    "text": "can you share a snippet and file structure?"
  },
  {
    "text": "Tailwind.config.js\n```import { fileURLToPath } from 'url';\nconst componentsDir = fileURLToPath(new URL('./components', import.meta.url));\n// import typoPlugin from \"@tailwindcss/typography\"\n\nmodule.exports = {\n  content: [`${componentsDir}/**/*.{js,ts,jsx,tsx}`],\n  theme: {\n    extend: {\n      container: {\n        center: true,\n      },\n      colors: {\n        // ... some colors,\n      },\n    },\n  },\n  // plugins: [typo],\n  // plugins: [require('@tailwindcss/typography')],\n};```\nTried using both. Require and importing.\n\ntsconfig\n```{\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"jsx\": \"react-jsx\",\n    \"module\": \"ESNext\",\n    \"target\": \"ES2022\",\n    \"moduleResolution\": \"bundler\"\n  },\n  \"$schema\": \"<https://json.schemastore.org/tsconfig>\",\n  \"display\": \"Recommended\",\n  \"include\": [\"**/*.ts\", \"**/*.tsx\"]\n}```\nAnd Tailwind/typography is inside the package.json of my react app folder. Using the project structure like the Hello World example",
    "time_stamp": "2024-05-29 18:36:51"
  },
  {
    "poster": {
      "poster_name": "Dennis K",
      "poster_handle": "dennis579"
    },
    "time_stamp": "2024-05-29 18:37:19",
    "text": "Just during deployment it is displaying the error that it can’t find the package."
  },
  {
    "poster": {
      "poster_name": "Dennis K",
      "poster_handle": "dennis579"
    },
    "time_stamp": "2024-05-29 21:42:42",
    "edited": {
      "time_stamp": "2024-05-30 06:41:56"
    },
    "text": "I do have some questions, and hopefully someone could answer me this.\n\n1. Best practice for creating a Listing/Overview page of blog posts? We would need pagination. I bet you can create the whole Listing component in React, import this as JS Partial? And perhaps, if possible(?) use graphql to fetch the posts per page. \n2. For blog posts we would need the drag’n’drop content body. I bet it’s best to create a hubl template with the body tag there so clients can drag n drop the React modules inside?\n3. Layouts still would be best to create in the Hubl file? Lets say we have a Post with on the left side the content and the right side a sidebar with some user content. I would create this layout in Hubl, and load in the JsPartials for the sidebar and content. \n4. When to use a partial and when to use a module? In the example they have made a Header partial, but like this you can’t pass down advanced menu options? Could you nest this js partial inside a hubl module? Or is it best to create a React module for the Footer and Header and put this modules inside the template\n5. I tried adding the content options inside the Tailwind config so it can compile the Hubl files as well, but this CSS is not getting picked up. What could that be?",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-05-30 14:52:50"
      },
      {
        "time_stamp": "2024-05-30 15:38:36"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Dennis K",
      "poster_handle": "dennis579"
    },
    "time_stamp": "2024-05-29 22:15:34",
    "text": "Got it to work. Finally"
  }
]