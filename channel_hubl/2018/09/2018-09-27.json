[
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 07:09:49",
    "text": "use copy snippet on the field you created and add it to the hubl+html pane of the custom module"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 07:10:42",
    "text": "In addition though HubSpot actually already has this functionality you can simply pull the author and their data into the post, if you create a new drag and drop blog template and inspect the post detail template you’ll see the code for the author"
  },
  {
    "poster": {
      "poster_name": "Douglas Ward",
      "poster_handle": "dougward"
    },
    "time_stamp": "2018-09-27 07:22:50",
    "text": "Thanks, Jon. My client wants to be able to display multiple authors, some of whom may not have HubSpot accounts. So I created a simple module consisting of just a text field: <https://www.screencast.com/t/JR7IESMTh2L1>"
  },
  {
    "poster": {
      "poster_name": "Douglas Ward",
      "poster_handle": "dougward"
    },
    "time_stamp": "2018-09-27 07:22:57",
    "text": "I then added that module to my blog template: <https://www.screencast.com/t/QHQh0AIvfYws>"
  },
  {
    "poster": {
      "poster_name": "Douglas Ward",
      "poster_handle": "dougward"
    },
    "time_stamp": "2018-09-27 07:23:05",
    "text": "Now, when creating a blog post an author can input the Blog Authors field: <https://www.screencast.com/t/rFv6RA3kpj>"
  },
  {
    "poster": {
      "poster_name": "Douglas Ward",
      "poster_handle": "dougward"
    },
    "time_stamp": "2018-09-27 07:23:12",
    "text": "What I'd like to do is output the value of that field in my blog post template: <https://www.screencast.com/t/sVdKAev6>"
  },
  {
    "poster": {
      "poster_name": "Douglas Ward",
      "poster_handle": "dougward"
    },
    "time_stamp": "2018-09-27 07:23:18",
    "text": "Is this possible?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-27 07:30:09",
    "text": "You have to export to template context"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-27 07:30:36",
    "text": "<https://designers.HubSpot.com/docs/hubl/export-to-template-context>"
  },
  {
    "poster": {
      "poster_name": "Douglas Ward",
      "poster_handle": "dougward"
    },
    "time_stamp": "2018-09-27 07:51:30",
    "edited": {
      "time_stamp": "2018-09-27 07:53:11"
    },
    "text": "Thanks, Pete! I think I am very close. I added export_to_template_context=True to my module. I then am able to view developer info and I see that the value of the field is available on my page: <https://www.screencast.com/t/uvu0m1Qk>"
  },
  {
    "poster": {
      "poster_name": "Douglas Ward",
      "poster_handle": "dougward"
    },
    "time_stamp": "2018-09-27 07:52:13",
    "text": "But I can't get the value to display. Based on HubSpot documentation (<https://designers.HubSpot.com/docs/hubl/export-to-template-context>) it seems that I could use this: {{ widget_data.module_153800909128046_blog_authors.text_field_author_names }}"
  },
  {
    "poster": {
      "poster_name": "Douglas Ward",
      "poster_handle": "dougward"
    },
    "time_stamp": "2018-09-27 07:52:21",
    "text": "But that doesn't seem to work."
  },
  {
    "poster": {
      "poster_name": "Douglas Ward",
      "poster_handle": "dougward"
    },
    "time_stamp": "2018-09-27 07:52:28",
    "text": "Any idea?",
    "reply_count": 10,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-09-27 08:36:59"
      },
      {
        "time_stamp": "2018-09-27 08:42:40"
      },
      {
        "time_stamp": "2018-09-27 11:25:44"
      },
      {
        "time_stamp": "2018-09-27 12:02:34"
      },
      {
        "time_stamp": "2018-09-27 12:43:07"
      },
      {
        "time_stamp": "2018-09-27 12:44:03"
      },
      {
        "time_stamp": "2018-09-27 12:44:58"
      },
      {
        "time_stamp": "2018-09-27 12:52:35"
      },
      {
        "time_stamp": "2018-09-27 13:12:11"
      },
      {
        "time_stamp": "2018-09-27 13:12:17"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-09-27 08:07:28",
    "text": "I am trying to figure out how to convert a blob of json to a usable object that I can iterate through.\n\nBelow is a sample json with the ‘items’ property which is a list. I want to be able to be able to iterate through the list and make a readable unordered list out of it…\n```\n{% set json='{\"menu\": {\n    \"header\": \"SVG Viewer\",\n    \"items\": [\n        {\"id\": \"Open\"},\n        {\"id\": \"OpenNew\", \"label\": \"Open New\"},\n        null,\n        {\"id\": \"ZoomIn\", \"label\": \"Zoom In\"},\n        {\"id\": \"ZoomOut\", \"label\": \"Zoom Out\"},\n        {\"id\": \"OriginalView\", \"label\": \"Original View\"}\n    ]\n\t\t}}'\n%}\n\n{% set hashMap = json|fromjson %}\n\n{% set menuItems = hashMap|map('items') %}\n&lt;ul&gt;\n{% for item in menuItems %}\n  &lt;li&gt;\t{{item|map('id')}}&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n&lt;hr&gt;\n\n{{ json|fromjson|pprint }}\n\n```",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-10-02 15:32:07"
      },
      {
        "time_stamp": "2018-10-03 07:05:16"
      }
    ]
  },
  {
    "text": "here’s my output",
    "time_stamp": "2018-09-27 08:08:05"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-09-27 08:09:09",
    "text": "as you can see, the &lt;ul&gt; just has one item in it with ALL  “ID” property values instead of 5 list items"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-09-27 08:10:24",
    "text": "I think the issue is your filter, that original json string isn't being converted. I'm not seeing an explicit |fromjson filter supported from HS, but jinja docs reference a |from_json filter that may work"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-09-27 08:13:23",
    "text": "Just tried json|from_json, but it just outputs a null for that"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-09-27 08:13:32",
    "text": "i found fromjson here: <https://github.com/HubSpot/jinjava/pull/215>"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-09-27 08:15:04",
    "text": "huh, interesting..."
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-09-27 08:15:55",
    "text": "and there was a correction from Matt Coley where he said, it’s actually fromjson and not fromJson — but i can’t find where he made that correction"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-27 08:36:59",
    "text": "If you mouse over the value in that JSON view you should be able to see the path to that value. I don’t think you need to have that whole module number string in there, should be fairly straightforward."
  },
  {
    "poster": {
      "poster_name": "Douglas Ward",
      "poster_handle": "dougward"
    },
    "time_stamp": "2018-09-27 08:42:40",
    "text": "OH, cool, thank you so much. I'll give that a whirl..."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 09:54:29",
    "edited": {
      "time_stamp": "2018-09-27 09:54:43"
    },
    "text": "Anyone know if it’s possible to get a HS accounts Twitter Username using a HubL var?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 09:58:32",
    "text": "nvm think i might have found the way to get it via the undocumented follow_me_links() function"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-09-27 10:14:23",
    "text": "I thought this was in teh dev info at one point?"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-09-27 10:15:20",
    "text": "not sure if its being populated correctly `social_account_twitter: \"\"`"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-09-27 10:16:30",
    "text": "i dont think it is populated"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 10:16:34",
    "text": "haven’t looked at that I do know there’s a function that’s only ever referenced in the default follow me module, `follow_me_links()`\nWhich grabs the info from the follow me settings in social settings"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-09-27 10:16:45",
    "text": "i cant find it populated in any portals"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 10:16:53",
    "text": "I’ve been able to get the data I needed via that function"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 10:18:44",
    "text": "going to add my code for getting a twitter handle to <https://github.com/williamspiro/HubSpot-Developer-Extension/projects/2>",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2018-09-27 10:27:55"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 10:27:55",
    "text": "``` {%- set fm = follow_me_links() -%}\n{%- set network = fm|selectattr('iconName','equalto','twitter')|last -%}\n{%- set twitterHandle = network.followMeUrl|cut(\"<https://twitter.com/>\") if network -%}\n{{ twitterHandle }} ```"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 11:07:04",
    "text": "*devs that primarily do coded templates:*  do you have a trick for putting flex columns within if statements? (placing them within if statements disables the ability to edit their contents in the page editor)"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 11:16:16",
    "text": "Gonna be really surprised if no one has figured out a trick for this",
    "reply_count": 53,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2018-09-27 11:20:13"
      },
      {
        "time_stamp": "2018-09-27 11:24:04"
      },
      {
        "time_stamp": "2018-09-27 11:35:00"
      },
      {
        "time_stamp": "2018-09-27 11:35:24"
      },
      {
        "time_stamp": "2018-09-27 11:37:19"
      },
      {
        "time_stamp": "2018-09-27 11:37:39"
      },
      {
        "time_stamp": "2018-09-27 11:39:18"
      },
      {
        "time_stamp": "2018-09-27 11:40:14"
      },
      {
        "time_stamp": "2018-09-27 11:43:27"
      },
      {
        "time_stamp": "2018-09-27 11:44:32"
      },
      {
        "time_stamp": "2018-09-27 11:45:53"
      },
      {
        "time_stamp": "2018-09-27 11:47:20"
      },
      {
        "time_stamp": "2018-09-27 11:48:30"
      },
      {
        "time_stamp": "2018-09-27 11:49:33"
      },
      {
        "time_stamp": "2018-09-27 11:49:51"
      },
      {
        "time_stamp": "2018-09-27 11:51:53"
      },
      {
        "time_stamp": "2018-09-27 11:52:15"
      },
      {
        "time_stamp": "2018-09-27 11:53:53"
      },
      {
        "time_stamp": "2018-09-27 12:22:23"
      },
      {
        "time_stamp": "2018-09-27 12:22:49"
      },
      {
        "time_stamp": "2018-09-27 13:05:40"
      },
      {
        "time_stamp": "2018-09-27 13:27:15"
      },
      {
        "time_stamp": "2018-09-27 13:34:44"
      },
      {
        "time_stamp": "2018-09-27 13:35:28"
      },
      {
        "time_stamp": "2018-09-27 13:37:23"
      },
      {
        "time_stamp": "2018-09-27 13:37:48"
      },
      {
        "time_stamp": "2018-09-27 13:37:59"
      },
      {
        "time_stamp": "2018-09-27 13:52:34"
      },
      {
        "time_stamp": "2018-09-27 13:56:26"
      },
      {
        "time_stamp": "2018-09-27 13:57:52"
      },
      {
        "time_stamp": "2018-09-27 14:03:00"
      },
      {
        "time_stamp": "2018-09-27 14:03:25"
      },
      {
        "time_stamp": "2018-09-27 14:03:43"
      },
      {
        "time_stamp": "2018-09-27 14:04:33"
      },
      {
        "time_stamp": "2018-09-27 14:06:32"
      },
      {
        "time_stamp": "2018-09-27 14:07:24"
      },
      {
        "time_stamp": "2018-09-27 14:12:26"
      },
      {
        "time_stamp": "2018-09-27 14:15:17"
      },
      {
        "time_stamp": "2018-09-27 14:16:06"
      },
      {
        "time_stamp": "2018-09-27 14:16:33"
      },
      {
        "time_stamp": "2018-09-27 14:17:12"
      },
      {
        "time_stamp": "2018-09-27 14:17:34"
      },
      {
        "time_stamp": "2018-09-27 14:17:42"
      },
      {
        "time_stamp": "2018-09-27 14:17:48"
      },
      {
        "time_stamp": "2018-09-27 14:18:15"
      },
      {
        "time_stamp": "2018-09-27 14:19:22"
      },
      {
        "time_stamp": "2018-09-27 14:20:38"
      },
      {
        "time_stamp": "2018-09-27 14:21:32"
      },
      {
        "time_stamp": "2018-09-27 14:21:52"
      },
      {
        "time_stamp": "2018-09-27 14:22:43"
      },
      {
        "time_stamp": "2018-09-27 14:23:31"
      },
      {
        "time_stamp": "2018-09-27 14:24:21"
      },
      {
        "time_stamp": "2018-09-28 16:12:28"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-09-27 11:20:13",
    "text": "Sorry dude, we don't use flex columns much :confused: any way to declare the flex column in a block or something, then render the block dependent on the if statement?"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-09-27 11:24:04",
    "text": "Haven’t tried it yet or I’m sure I would have figured it out :wink:"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-27 11:25:44",
    "text": "Did that work <@U85SWA0RW>?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 11:35:00",
    "text": "<@U26BLKGE4> yes there is a block syntax for flex columns, and that if issue is precisely the problem"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 11:35:24",
    "text": "If you have a flex column inside an if statement it renders to the page but doesn’t let you edit it in the page editor."
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-09-27 11:37:19",
    "text": "Can you export flex columns to template context? Again, never messed around with it"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 11:37:39",
    "text": "hmm, interesting thought Mark Gonna test it"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-09-27 11:39:18",
    "text": "yeah, what I was getting at with the block syntax is configure the flex column outside the conditional, then just render it's contents based on the if statement. Don't know enough to be more specific, but that's how I'd approach it"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 11:40:14",
    "text": "that’s kinda what I’ve been trying to figure out how to pull off. for some reason didn’t think of export to template context. was trying to do things like use macros or set a variable to the flex column or something"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 11:43:27",
    "text": "almost worked.\nIt made it available in dev info but guess what… export_to_template_context doesn’t prevent a flex column from rendering to a page."
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-09-27 11:44:32",
    "text": "only idea then would be to have them render in the footer between &lt;!-- *. --&gt; or something hacky lol"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-09-27 11:45:53",
    "text": "or otherwise hide that section with CSS or something, but you're going to get the page weight no matter what it looks like :confused:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 11:47:20",
    "text": "yea here’s the problem with doing that - the content of the flex column needs to be relatively secure as in we can’t output the html if the if statement is false."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 11:48:30",
    "text": "basically we’re building a front end  user account system. Similar to what HubSpot’s releasing but the client needs this before HubSpot releases theirs"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 11:49:33",
    "text": "We have everything else working, a secure login system, with user account management, but we now have a problem of not being able to give the client flex columns in the secured pages."
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-09-27 11:49:51",
    "text": "hmmmm. yeah, only other thought in that case, which wouldn't be perfect but would be slightly better is set up a footer script that would delete the markup on page load... but obviously if someone knew what they were doing they could kill the JS and still see it....."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 11:51:53",
    "text": "yea, that plus css to hide the content temporarily might be the only way to do it. which really sucks because we actually devised a pretty good login system that handles all of the security stuff server side for the most part. just to have it basically be insecure because you could get around it this way"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 11:52:15",
    "text": "If there was a way to redirect someone to another URL via HubL that would solve this completely though"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-09-27 11:53:53",
    "text": "lol, you mean other than {% if XXX %} &lt;script&gt;window.location.replace(\"<http://www.HubSpot.com>\"); &lt;/script&gt;{% endif %} ?"
  },
  {
    "poster": {
      "poster_name": "Douglas Ward",
      "poster_handle": "dougward"
    },
    "time_stamp": "2018-09-27 12:02:34",
    "text": "Hi Pete. Unfortunately, no. I'm not seeing any additional information when I hover over the JSON. <https://www.screencast.com/t/v7TuXuUbP9JD>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 12:22:23",
    "text": "yes it has to be server side"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 12:22:49",
    "text": "a script tag or meta redirect still gives you the full html of the page before it kicks off"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-27 12:43:07",
    "text": "oh bummer, I see that info in the bottom of the browser when I hover"
  },
  {
    "text": "<@U85SWA0RW>",
    "time_stamp": "2018-09-27 12:44:03"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-27 12:44:58",
    "text": "that always helps me when I’m trying to grab some value. It can be confusing when to use widget, widget_data, content, etc"
  },
  {
    "poster": {
      "poster_name": "Douglas Ward",
      "poster_handle": "dougward"
    },
    "time_stamp": "2018-09-27 12:52:35",
    "text": "Oh, let me try that..."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 13:05:40",
    "text": "This is the solution I’m proposing to my client lol hopefully they will be cool with it\n``` &lt;script class=\"kill-w-fire\"&gt;\n  var elem = document.querySelectorAll('.kill-w-fire'); \n  elem.forEach.call( elem, function( node ) {\n    node.parentNode.removeChild( node ); \n});\n&lt;/script&gt; ```\n\nif the user is not authenticated the flex column and all modules get wrapped in a div and commented out.\n\nThe script above deletes all of the divs including itself, hiding all evidence that content was in the page. The only way you could still view the content would be if you managed to stop the redirect before it happened, and viewed source on the page instead of inspecting it."
  },
  {
    "poster": {
      "poster_name": "Douglas Ward",
      "poster_handle": "dougward"
    },
    "time_stamp": "2018-09-27 13:12:11",
    "text": "Pete, you are a genius! I checked the hover value and finally found one that worked: content.widgets.module_153805730648138.body.text_field_author_names"
  },
  {
    "poster": {
      "poster_name": "Douglas Ward",
      "poster_handle": "dougward"
    },
    "time_stamp": "2018-09-27 13:12:17",
    "text": "Thank you!!!"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-09-27 13:27:15",
    "edited": {
      "time_stamp": "2018-09-27 13:27:22"
    },
    "text": "best I can think of :confused:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 13:34:44",
    "text": "I’m not a security expert but when I do this AND do the meta redirect and a js redirect instantly when you hit the page, I honestly can’t figure out how to view source of the page. It happens so fast you can’t throttle performance or network to prevent it, and the network tab doesn’t show the html contents when you find the page."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 13:35:28",
    "text": "so I’m gonna call it above script kiddie level of sophistication and call it a day"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-09-27 13:37:23",
    "text": "Ironically, the only way I can think of potentially would be using a tool like wget (from my thread with AJ) or another web crawler."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 13:37:48",
    "text": "heh"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 13:37:59",
    "text": "one of my coworkers has that on his computer might have em try it"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-09-27 13:52:34",
    "text": "Obviously this is a dumbed down example, but your talking about wrapping something like a {% if contact.firstname %} &lt;!-- flex col here…--&gt; {% endif %}"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-09-27 13:56:26",
    "text": "that's my understanding"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 13:57:52",
    "text": "Yes Christine.\n\nand we found out Wget is able to get all the information. so it’s not secure enough. We have a cool idea though that might just work!"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-09-27 14:03:00",
    "text": "I do this all the time, but I do it this way"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-09-27 14:03:25",
    "text": "{% if content.absolute_url is string_containing “<http://yourdomain.com|yourdomain.com>” %}\n\t\t\t\t\t&lt;!-- see me in the editor? --&gt;\n\t\t\t\t\t{% endif %}"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-09-27 14:03:43",
    "text": "I just tested that right now and it worked"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 14:04:33",
    "text": "oh yea no, We have the editor part right, the problem isn’t that. The problem is we are litterally building a front end login system for our client’s clients"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-09-27 14:06:32",
    "text": "Yah I read the above conversations (we’ve done the before using HubSpot, certainly a pain). I thought the issue was wrapping the flex col in a if statement and having it show in the editor?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 14:07:24",
    "text": "It is.  you can’t have a flex column wrapped in an if statement. It breaks the editor’s ability to edit it. As in it renders it in the editor but the editor cant interact with the flex column"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-09-27 14:12:26",
    "edited": {
      "time_stamp": "2018-09-27 14:12:36"
    },
    "text": "Maybe I’m misunderstanding, Im able to edit this just fine in the editor:\n\t\t\t\t\t```{% if content.absolute_url is string_containing \"<http://domain.com|domain.com>\" %}\n{% widget_container \"workshopsList\" label=\"Flexible Col\", per_widget_wrapper_html='{{ module_html }}', wrapping_html='', no_wrapper=True %}{% end_widget_container %}\t\n{% endif %}```"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 14:15:17",
    "text": "trying now what you’re saying, though we haven’t been able to edit with something very similar to that"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-09-27 14:16:06",
    "text": "dumb question, never seen this param before \"per_widget_wrapper_html='{{ module_html }}'\", where'd you find that?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 14:16:33",
    "edited": {
      "time_stamp": "2018-09-27 14:16:43"
    },
    "text": "it’s outputted when you convert a drag n drop to coded"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-09-27 14:17:12",
    "text": "huh.. I'll have to play with that."
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-09-27 14:17:34",
    "text": "mhm"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-09-27 14:17:42",
    "text": "Comes in handy :wink:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 14:17:48",
    "text": "pretty sure it’s the equivalent of the widget wrapper html in drag n drop"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 14:18:15",
    "text": "Christine, you wanna know whats bizzare beyond belief"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 14:19:22",
    "text": "``` {% if content.absolute_url is string_containing \"<http://preview.hs-sites.com|preview.hs-sites.com>\" %}\n{% widget_container \"module_14420109561952738\" overrideable=true, wrapping_html='', label='Page Modules' %}\n  {% widget_block custom_widget \"module_1537997508969207\" wrapping_html='', per_widget_wrapper_html='', overrideable=true, widget_name='Rich Text', module_id=1155639, label='Rich Text' %}\n  {% widget_attribute \"html\" %}YOU'VE WON THE INTERNET TODAY, IT'S TIME TO GO HOME!{% end_widget_attribute %}\n  {% end_widget_block %}\n  {% widget_block custom_widget \"module_15263968942091106\" module_id=1155240, overrideable=true, per_widget_wrapper_html='', widget_name='Section Header', wrapping_html='', label='Section Header' %}\n  {% end_widget_block %}\n  {% widget_block custom_widget \"module_15263967124981054\" module_id=2878407, overrideable=true, per_widget_wrapper_html='', widget_name='Floating Graphic', wrapping_html='', label='Floating Graphic' %}\n  {% end_widget_block %}\n\n{% end_widget_container %}\n{%endif%} ```\nThis makes it editable\n\nAnything else, even\n```\n{% if true %}\n{% widget_container \"module_14420109561952738\" overrideable=true, wrapping_html='', label='Page Modules' %}\n  {% widget_block custom_widget \"module_1537997508969207\" wrapping_html='', per_widget_wrapper_html='', overrideable=true, widget_name='Rich Text', module_id=1155639, label='Rich Text' %}\n  {% widget_attribute \"html\" %}YOU'VE WON THE INTERNET TODAY, IT'S TIME TO GO HOME!{% end_widget_attribute %}\n  {% end_widget_block %}\n  {% widget_block custom_widget \"module_15263968942091106\" module_id=1155240, overrideable=true, per_widget_wrapper_html='', widget_name='Section Header', wrapping_html='', label='Section Header' %}\n  {% end_widget_block %}\n  {% widget_block custom_widget \"module_15263967124981054\" module_id=2878407, overrideable=true, per_widget_wrapper_html='', widget_name='Floating Graphic', wrapping_html='', label='Floating Graphic' %}\n  {% end_widget_block %}\n\n{% end_widget_container %}\n{%endif%} ```\n\nDoes not"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-09-27 14:20:38",
    "edited": {
      "time_stamp": "2018-09-27 14:21:08"
    },
    "text": "Does this mean we won the internet? :no_mouth:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 14:21:32",
    "text": "to make matters weirder. now my original if statement started working….\n\nI think something might be going on behind the scenes here. this seems a little flakey to rely on"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 14:21:52",
    "text": "Maybe caching is messing with me"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-09-27 14:22:43",
    "text": "It sounds like a cacheing issue, unless HubSpot is messing around with the backend"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 14:23:31",
    "text": "maybe <@U6GNQ7JBU> got back from his Vacay and decided to mess with me. lol"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-09-27 14:24:16",
    "edited": {
      "time_stamp": "2018-09-27 14:24:33"
    },
    "text": "Okay, my turn with a dumb question. I’ve got a `{% for content in contents %}` in a blog listing i have, but there are times when the listing will be empty, how can I check if its empty and render some message",
    "reply_count": 8,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2018-09-27 14:26:26"
      },
      {
        "time_stamp": "2018-09-27 14:26:48"
      },
      {
        "time_stamp": "2018-09-27 14:36:18"
      },
      {
        "time_stamp": "2018-09-27 14:37:13"
      },
      {
        "time_stamp": "2018-09-27 14:42:49"
      },
      {
        "time_stamp": "2018-09-27 14:43:14"
      },
      {
        "time_stamp": "2018-09-27 14:44:12"
      },
      {
        "time_stamp": "2018-09-27 14:44:23"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 14:24:21",
    "text": "I really dont know whether to trust this"
  },
  {
    "text": "Hi All, we’re in the middle of a redesign for our own company blog page and I’m not sure the best way to tackle this.. At the top of our blog listing page, we want this ‘featured blog’ section, which essentially we just want to pull the most recent article we post. Following that we want the next 3 most recent posts to display. I’ve dug into the various module quite a bit, as well as tried to edit the hubl for the blog listing section to no avail. Any help is appreciated! (I attached a screenshot of what I’m talking about with the design).",
    "time_stamp": "2018-09-27 14:24:38"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-09-27 14:26:26",
    "text": "```{% if content %}\n  {# Show the real content #}\n{% else %}\n  {# Show the no-content message #}\n{% endif %}```"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-09-27 14:26:48",
    "text": "This should work. If it doesn't, maybe test against some property in the blog post, like `content.id` or `content.name`"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-27 14:28:21",
    "text": "The best thing to do is to have ‘featured’ be a tag then the listing runs through everything and omits anything with that tag"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-27 14:28:43",
    "text": "And the featured post is just a loop that runs once and grabs the first post tagged featured",
    "reply_count": 22,
    "reply_users_count": 5,
    "replies": [
      {
        "time_stamp": "2018-09-27 14:29:42"
      },
      {
        "time_stamp": "2018-09-27 14:32:25"
      },
      {
        "time_stamp": "2018-09-27 14:32:27"
      },
      {
        "time_stamp": "2018-09-27 14:33:30"
      },
      {
        "time_stamp": "2018-09-27 14:33:38"
      },
      {
        "time_stamp": "2018-09-27 14:35:56"
      },
      {
        "time_stamp": "2018-09-27 14:35:58"
      },
      {
        "time_stamp": "2018-09-27 14:38:20"
      },
      {
        "time_stamp": "2018-09-27 14:38:46"
      },
      {
        "time_stamp": "2018-09-27 14:39:44"
      },
      {
        "time_stamp": "2018-09-27 14:40:17"
      },
      {
        "time_stamp": "2018-09-27 15:42:08"
      },
      {
        "time_stamp": "2018-09-27 15:46:09"
      },
      {
        "time_stamp": "2018-09-27 15:46:39"
      },
      {
        "time_stamp": "2018-09-27 15:47:02"
      },
      {
        "time_stamp": "2018-09-27 15:48:35"
      },
      {
        "time_stamp": "2018-09-27 15:49:10"
      },
      {
        "time_stamp": "2023-11-07 23:41:15"
      },
      {
        "time_stamp": "2023-11-08 06:32:16"
      },
      {
        "time_stamp": "2023-11-08 06:34:37"
      },
      {
        "time_stamp": "2023-11-08 06:37:36"
      },
      {
        "time_stamp": "2023-11-08 06:40:19"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jenna Schultz",
      "poster_handle": "jenna"
    },
    "time_stamp": "2018-09-27 14:29:42",
    "text": "Okay. So would I need to essentially tag every blog with Featured?"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2018-09-27 14:30:27",
    "text": "please don’t create loops that query things and then throw away most of the results. It’s very inefficient and will make your page load slower. There are lots of filtering options for posts. If you don’t see the one you need, let us know and we’ll happily add it.",
    "reply_count": 13,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2018-09-27 14:31:25"
      },
      {
        "time_stamp": "2018-09-27 14:33:12"
      },
      {
        "time_stamp": "2018-09-27 14:33:30"
      },
      {
        "time_stamp": "2018-09-27 14:34:49"
      },
      {
        "time_stamp": "2018-09-27 14:37:26"
      },
      {
        "time_stamp": "2018-09-27 14:38:39"
      },
      {
        "time_stamp": "2018-09-27 14:41:11"
      },
      {
        "time_stamp": "2018-09-27 14:42:07"
      },
      {
        "time_stamp": "2018-09-27 14:42:46"
      },
      {
        "time_stamp": "2018-09-27 14:43:02"
      },
      {
        "time_stamp": "2018-09-27 14:44:48"
      },
      {
        "time_stamp": "2018-09-27 14:45:12"
      },
      {
        "time_stamp": "2018-09-27 15:32:54"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 14:31:25",
    "edited": {
      "time_stamp": "2018-09-27 14:33:04"
    },
    "text": "I don’t think that’s what’s being talked about, or did you just have to tackle something where someone did this and wreaked havoc on some servers?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-27 14:32:25",
    "text": "No! just one that you want to appear in that particular loop"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-09-27 14:32:27",
    "text": "If the featured/recent are just the most recent ones, you can just use `blog_recent_posts('default', 4)`"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2018-09-27 14:33:12",
    "text": "&gt; And the featured post is just a loop that runs once and grabs the first post tagged featured\nis what I’m worried about"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-27 14:33:30",
    "text": "So a featured post loop might be something like ```{% set topic_posts = blog_recent_topic_posts('{{ group.id }}', 'featured', 2) %}\n{% for topic_post in topic_posts %}```"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2018-09-27 14:33:30",
    "text": "Not just, just everyday :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-27 14:33:38",
    "text": "that pulls in two featured posts"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 14:34:49",
    "text": "ahh.\n\nWell `{{ blog_recent_topic_posts('default', 'marketing-tips', 1 ) }}` solves that."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 14:35:56",
    "edited": {
      "time_stamp": "2018-09-27 14:36:19"
    },
    "text": "change the number to 1 to save :sprocket:  dev sanity"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-27 14:35:58",
    "text": "And to run the one that ignores featured posts you use the |selectattr filter"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-09-27 14:36:18",
    "text": "doesnt seem to work either way\n\n```{% for content in contents %}\t\n{% if content.name %}\n&lt;!-- my content --&gt;\n{% else %}\n&lt;!-- we empty --&gt;\n{% endif %}\t\t\t\t\t\t\t\t\t\n{% endfor %}```"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 14:37:13",
    "text": "the if should be on the outside I’d think"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-27 14:37:26",
    "text": "I’m just celebrating our culture of excess"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-09-27 14:38:20",
    "text": "The original post does say that the featured post is just \"the most recent article we post\". If you just want the most recent post, use `blog_recent_posts`. If you want to pick the post, use tags and `blog_recent_topic_posts`."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-27 14:38:39",
    "text": "I’ll loop over multiple databases, print everything, then `display:none;` everything except for the string I want"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 14:38:46",
    "text": "correct"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-27 14:39:44",
    "text": "ooooo yes. So you can just run two loops, one that grabs the first post and one that ignores the first post"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-27 14:40:17",
    "text": "We usually have clients that want to promote a specific post regardless of how new it is."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 14:41:11",
    "edited": {
      "time_stamp": "2018-09-27 14:41:55"
    },
    "text": "you forgot to then also print the current date and time, along with the visitors IP address to the page with a meta refresh of 1 second (we’re kidding)"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-27 14:42:07",
    "text": "You’re a wise man <@U7SL518D6>"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-27 14:42:46",
    "text": "Also, don’t play into the  idea that CSS is fast, that’s what they want you to believe"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-09-27 14:42:49",
    "text": "I actually wouldn't really expect `content` to ever be empty on a blog page. When do you expect the listing to be empty?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-27 14:43:02",
    "text": "Do your styles with jQuery and throw it into an interval function"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-09-27 14:43:14",
    "text": "Oooooh, the listing is empty"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-09-27 14:44:12",
    "text": "I thought you were saying you'd have empty items in posts. In that case, I usually test\n```{% if contents|count &gt; 0 %}\n{% for content in contents %}\n{# Listing goes here #}\n{% endfor %}\n{% else %}\nNo posts found!\n{% endif %}```"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-09-27 14:44:23",
    "text": "Is that what you're looking for?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 14:44:48",
    "edited": {
      "time_stamp": "2018-09-27 14:49:41"
    },
    "text": "then because macs suck <https://gist.github.com/pwnsdx/ce64de2760996a6c432f06d612e33aea>\n\n(don’t pop this into a codepen if you’re on a Mac)\n\nWont hurt anything permanently just will freeze your computer or iphone and force it to reboot. It just uses CSS to fill your RAM."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 14:45:12",
    "text": "but because you’re cool use fewer divs and use ::befores and ::afters instead"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2018-09-27 15:32:54",
    "text": ":hear_no_evil:"
  },
  {
    "poster": {
      "poster_name": "Jenna Schultz",
      "poster_handle": "jenna"
    },
    "time_stamp": "2018-09-27 15:42:08",
    "text": "Yes, <@U3A4KEWK1> , it is just the most recent. So essentially it’s 4 total recent posts, with the one at the top being larger. So what loop would I run to show the number 1 most recent. And how would I do the loop that excludes that first one. I’m not super fluent in developing for HubSpot yet :wink:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 15:46:09",
    "text": "`blog_recent_posts(\"blog\",1)` for the top post then in your main forloop you will have to exclude the first value using loop.index `{%unless loop.index === 1%}` your code to display the post `{%endunless%}`"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-27 15:46:39",
    "text": "could also use `{% unless loop.first %}`"
  },
  {
    "poster": {
      "poster_name": "Jenna Schultz",
      "poster_handle": "jenna"
    },
    "time_stamp": "2018-09-27 15:47:02",
    "text": "Okay perfect! I’ll try this tomorrow. Thank you all so much for your help!"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-09-27 15:48:35",
    "text": "I'd do something similar to one of these:\n```{% set posts = blog_recent_posts('default', 4) %}\n{% for post in posts %}\n  {% if loop.first %}\n    &lt;article class=\"blog-post blog-post--featured\"&gt;\n      {{ post.name }}\n    &lt;/article&gt;\n  {% else %}\n    &lt;article class=\"blog-post\"&gt;\n      {{ featured_post.name }}\n    &lt;/article&gt;\n  {% endif %}\n{% endfor %}\n\n{% set posts = blog_recent_posts('default', 4) %}\n{% for post in posts %}\n  &lt;article class=\"blog-post {% if loop.first %}blog-post--featured{% endif %}\"&gt;\n    {{ post.name }}\n  &lt;/article&gt;\n{% endfor %}\n\n{% set posts = blog_recent_posts('default', 4) %}\n{% set featured_post = posts[0] %}\n&lt;article class=\"blog-post blog-post--featured\"&gt;\n  {{ featured_post.name }}\n&lt;/article&gt;\n{% for post in posts %}\n  {% unless loop.first %}\n    &lt;article class=\"blog-post\"&gt;\n      {{ featured_post.name }}\n    &lt;/article&gt;\n  {% endunless %}\n{% endfor %}```"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-09-27 15:49:10",
    "text": "Pros and cons to each version, use whichever makes the most sense for how you're organizing it"
  }
]