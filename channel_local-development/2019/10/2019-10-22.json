[
  {
    "poster": {
      "poster_name": "Mattias Hagberg",
      "poster_handle": "mattias.hagberg"
    },
    "time_stamp": "2019-10-22 05:46:39",
    "text": "I'm having a look at the webpack plugin, but ran into issues while using the example config file",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-10-22 06:07:17"
      },
      {
        "time_stamp": "2019-10-22 06:12:49"
      },
      {
        "time_stamp": "2019-10-22 06:33:47"
      }
    ]
  },
  {
    "text": "",
    "time_stamp": "2019-10-22 05:47:09"
  },
  {
    "poster": {
      "poster_name": "Mattias Hagberg",
      "poster_handle": "mattias.hagberg"
    },
    "time_stamp": "2019-10-22 06:05:40",
    "edited": {
      "time_stamp": "2019-10-22 06:09:17"
    },
    "text": "Btw, I'm also tinkering around with using Parcel as a bundler running in parallel with `npx hs watch`, and so far I think it's working quite well.\n\nUsing the npm package `run-screen`, I run these commands in parallel:\n\n`parcel watch src/**/* --no-hmr --no-source-maps --out-dir Site`\n`npx hs watch Site Site`\n\nThis gives me a folder structure like follows, where \"Site\" is the watched folder that uploads to HS on change (with the parsed CSS and JS files)\n\n```\nsrc\n├── css\n│   └── main.scss\n└── js\n    └── index.js\n\nSite/\n├── css\n│   └── main.css\n├── index.html\n└── js\n    └── index.js```\n\nParcel automatically recognizes the *.scss extension and applies transforms accordingly, and the same goes for ES6 functions and the like for JS files"
  },
  {
    "poster": {
      "poster_name": "Gregory Cornelius",
      "poster_handle": "gcornelius"
    },
    "time_stamp": "2019-10-22 06:07:17",
    "text": "Hmm…I think that may be due to the version of webpack being used. What version of webpack did you run into problems using?"
  },
  {
    "poster": {
      "poster_name": "Mattias Hagberg",
      "poster_handle": "mattias.hagberg"
    },
    "time_stamp": "2019-10-22 06:12:49",
    "text": "Version 2.7.0"
  },
  {
    "poster": {
      "poster_name": "Gregory Cornelius",
      "poster_handle": "gcornelius"
    },
    "time_stamp": "2019-10-22 06:33:47",
    "text": "I am pretty sure that the plugin only works with more recent versions (4+), but I could see about updating it to support older versions."
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-10-22 09:00:22",
    "text": "Just curious, is the local hubl server basically going the way of the buffalo? I know the new workflow is sandbox portal for dev and prod portal, but it would be amazing to also have a local server that can parse hubl and hot reload for quick local dev. I am struggling to integrate the existing hubl server with the new local dev environment. For example, it wants those custom and custom-module folders to even spin up.",
    "reply_count": 3,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-10-22 12:16:02"
      },
      {
        "time_stamp": "2019-10-23 01:51:45"
      },
      {
        "time_stamp": "2019-10-23 07:34:05"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-10-22 12:16:02",
    "text": "From what I understand the hope is to in the future be able to use them in tandem (and have some updates to the local server as well) but right now the main goal is building out the CLI tools so 1) we can dev locally without FTP because of the 2FA concerns and 2) start tailoring our workflows to local dev and coded templates in preparation of the drag and drop pages getting a full release"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-10-22 12:52:35",
    "text": "I think buffalo are still alive… :slightly_smiling_face: Do you mean dodo?"
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2019-10-22 12:55:43",
    "text": "let’s go with wooly mastodon! generally underappreciated."
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-10-22 12:56:35",
    "text": "Wooly mastadon it is..."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-10-22 12:58:48",
    "text": "hahaha"
  },
  {
    "time_stamp": "2019-10-22 12:59:52",
    "text": ""
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2019-10-22 13:00:15",
    "text": "that was literally the best giphy of a mastodon i could get. all the giphys are of the band."
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2019-10-22 13:00:24",
    "text": "what a sorry state of giphy"
  }
]