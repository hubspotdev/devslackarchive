[
  {
    "poster": {
      "poster_name": "Taylor Hunt",
      "poster_handle": "taylorhunt"
    },
    "time_stamp": "2016-12-07 08:02:39",
    "text": "Where should I post a bug for HubDB's .csv importer? It's not handling quoted values correctly"
  },
  {
    "poster": {
      "poster_name": "Jeffrey Vocell",
      "poster_handle": "jvocell"
    },
    "time_stamp": "2016-12-07 08:04:25",
    "text": "Hey <@U329914MR>. Feel free to post it in the <#C22PDRW72|data-driven-content> room and our team will take a look when they have a chance."
  },
  {
    "poster": {
      "poster_name": "Taylor Hunt",
      "poster_handle": "taylorhunt"
    },
    "time_stamp": "2016-12-07 08:04:35",
    "text": "thank you"
  },
  {
    "poster": {
      "poster_name": "Taylor Hunt",
      "poster_handle": "taylorhunt"
    },
    "time_stamp": "2016-12-07 12:06:27",
    "text": "is it possible to view the underlying template code for the built-in modules, like the image slider?"
  },
  {
    "poster": {
      "poster_name": "Taylor Hunt",
      "poster_handle": "taylorhunt"
    },
    "time_stamp": "2016-12-07 12:15:07",
    "text": "like, if I wanted to extend it somehow"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2016-12-07 12:18:00",
    "text": "I've taken some JS to kncock out some classes"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2016-12-07 12:18:09",
    "text": "to take an image slider and create a logo row"
  },
  {
    "poster": {
      "poster_name": "Taylor Hunt",
      "poster_handle": "taylorhunt"
    },
    "time_stamp": "2016-12-07 12:19:12",
    "text": "I guess that'll do"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2016-12-07 12:19:16",
    "text": "if ($('body').hasClass('hs-content-id-4461693827')) {\n    $('.hs_cos_flex-slider.flex-slider-main.slider-mode-slider').each(function () {\n        $(this).find('div').removeClass('hs_cos_flex-slider flex-slider-main slider-mode-slider');\n        $(this).find('ul').removeClass('hs_cos_flex-slides hs_cos_flex-slides-main').wrapAll('&lt;div class=\"container static-image-container\"&gt;&lt;/div&gt;');;\n        $(this).find('li').removeClass(\"hs_cos_flex-slide-main\");\n    });\n}"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2016-12-07 12:19:34",
    "text": "by removing some classes from it I can turn it into a row for logos"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2016-12-07 12:19:35",
    "text": "like on this page"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2016-12-07 12:20:01",
    "text": "<https://www.marketingevolution.com/customers>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2016-12-07 12:20:09",
    "text": "as you can see with those logos at the bottom"
  },
  {
    "poster": {
      "poster_name": "Taylor Hunt",
      "poster_handle": "taylorhunt"
    },
    "time_stamp": "2016-12-07 12:20:25",
    "text": "the use-case is populating slides automatically from a HubDB"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2016-12-07 12:20:25",
    "text": "i've even gone and setup some other stuff using js/jquery to make them constanly circle"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2016-12-07 12:20:43",
    "text": "gotcha"
  },
  {
    "poster": {
      "poster_name": "Taylor Hunt",
      "poster_handle": "taylorhunt"
    },
    "time_stamp": "2016-12-07 12:34:10",
    "text": "if I wanted to grab the most recent row from a HubDB, would `{% for row in hubdb_table_rows(420107, '&amp;orderBy=created_at&amp;limit=1') %}` work?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2016-12-07 12:36:06",
    "text": "i think that should"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2016-12-07 12:36:09",
    "text": "it looks right anyways"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2016-12-07 12:36:24",
    "text": "i dont have a project open at the moment to check though"
  },
  {
    "poster": {
      "poster_name": "Taylor Hunt",
      "poster_handle": "taylorhunt"
    },
    "time_stamp": "2016-12-07 12:39:13",
    "text": "the tricky part is `created_at` is documented as a row property, but `orderBy=` looks like it orders by columns"
  },
  {
    "poster": {
      "poster_name": "Taylor Hunt",
      "poster_handle": "taylorhunt"
    },
    "time_stamp": "2016-12-07 12:39:51",
    "text": "unless `created_at` is an internal column, I don't see a documented way of doing it other than iterating over the whole shebang and comparing with HubL"
  },
  {
    "poster": {
      "poster_name": "Taylor Hunt",
      "poster_handle": "taylorhunt"
    },
    "time_stamp": "2016-12-07 12:39:59",
    "text": "which seems wasteful"
  },
  null,
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2016-12-07 14:48:59",
    "text": "you can orderBy hs_created_at"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2016-12-07 15:50:18",
    "text": "Does anyone know if its possible to make the truncation symbols linked&gt; For example, using `{{ html_text|truncatehtml(28, '..' , false) }}` can you make the *...* linkable?"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2016-12-07 15:53:41",
    "text": "Got it"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2016-12-07 15:53:52",
    "text": "```\n {% set truncate_text = \"&lt;a href='{{widget.page_url}}'&gt;...&lt;/a&gt;\" %}\n        &lt;p&gt;{{ product_summary|truncatehtml(200, '{{truncate_text}}' , false) }}&lt;/p&gt;\n```"
  }
]