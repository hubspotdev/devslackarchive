[
  {
    "poster": {
      "poster_name": "Maximilian Holzer",
      "poster_handle": "maximilian.holzer"
    },
    "time_stamp": "2024-04-18 01:08:32",
    "text": "Nice ty for the info <@U04C0NVUQ7Q>"
  },
  {
    "poster": {
      "poster_name": "Antoine Ravet",
      "poster_handle": "aravet"
    },
    "time_stamp": "2024-04-18 08:00:09",
    "text": "Do you guys know the authentication methods used by HubSpot for Webhooks as a trigger in Workflows ? Thanks\nI want to connect Dataverse API and i need the authentication method between : HttpHeader, WebhookKey, HttpQueryString"
  },
  {
    "poster": {
      "poster_name": "Euler Gonzalez",
      "poster_handle": "euler"
    },
    "time_stamp": "2024-04-18 11:17:45",
    "text": "Hi everyone,\nI apologize for jumping in on an older conversation, but it's the only one I found related to this topic. I hope it's alright if I join the discussion now.\nI'm fairly new to using custom code in workflows, and I'm encountering errors saying \"too many requests\" and \"custom code wasn't able to execute, but will retry soon.\"\nIs there a way to control the number of calls my custom code makes to prevent these errors? I've tried implementing delays, but it seems I'm not effectively managing the workflow execution flow."
  },
  {
    "poster": {
      "poster_name": "Ace Hedger",
      "poster_handle": "ace"
    },
    "time_stamp": "2024-04-18 13:43:46",
    "edited": {
      "time_stamp": "2024-04-18 13:45:10"
    },
    "text": "It would be so nice if HubSpot had a queue for when a workflow was run too many times at once. That way, you could check the progress, and it would make sure that they each still went through.",
    "reply_count": 6,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-04-19 10:40:04"
      },
      {
        "time_stamp": "2024-05-07 09:50:32"
      },
      {
        "time_stamp": "2024-05-07 10:46:19"
      },
      {
        "time_stamp": "2024-05-07 10:46:29"
      },
      {
        "time_stamp": "2024-05-07 12:15:27"
      },
      {
        "time_stamp": "2024-07-30 05:08:14"
      }
    ]
  }
]