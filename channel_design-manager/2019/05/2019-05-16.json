[
  {
    "text": "When you choose your group you should see an area for wrapping html. Just make sure to have {{ html }} in the block for it to work",
    "time_stamp": "2019-05-16 05:22:36"
  },
  {
    "poster": {
      "poster_name": "Steven Hambleton",
      "poster_handle": "steven994"
    },
    "time_stamp": "2019-05-16 05:43:52",
    "text": "Is this for web only? I don't see this option if I'm creating an email template. Wasn't sure if I missed something?"
  },
  {
    "poster": {
      "poster_name": "Steven Hambleton",
      "poster_handle": "steven994"
    },
    "time_stamp": "2019-05-16 05:44:01",
    "text": "Oh and hello Rem!"
  },
  {
    "poster": {
      "poster_name": "Steven Hambleton",
      "poster_handle": "steven994"
    },
    "time_stamp": "2019-05-16 05:45:10",
    "text": "I was hoping I could `{% extends %}` a drag and drop template with a partial but that doesn't work either."
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-05-16 16:27:41",
    "text": "so I used the `pprint` filter on the `{{standard_header_includes}}` and through some digging I found that the `{{ head_css() }}` function is what places things like your stylesheets when you do a `require_css()` and more. My question is that this also loads in some unneeded CSS when you are using coded templates. For example, it loads in styling for comments which means when you want to override them, you have to do an `!important` in your css. Are there any params or things you can add to this to have it not add in certain css files? I have already tried adding a filter to this function like `replace` and nothing happens"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-05-16 16:31:43",
    "edited": {
      "time_stamp": "2019-05-16 17:03:39"
    },
    "text": "figured it out, when breaking apart the `standard_header_includes` you can remove the `head_css()` function which will remove the added style sheets then simply link your stylesheets via the Blog Settings Template area and it should be a work around. _Note: Naturally when doing this workaround, you have then have to go in and assign all the other items like Canonicals, Metas, social metas, and the like to HubL vars_"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-05-16 20:06:37",
    "text": "Another update, you can loop through the `{{standard_header_includes}}` and then use the `replace()` function on the variable to remove the `{{ head_css() }}` item.\n```\n  {% for item  in standard_header_includes%}\n  {{item|replace('{{ head_css() }}','')}}\n  {%endfor%}\n```\nAgain, this is for when doing custom coded templates where you aren't using the HubSpot scaffolding and just need to remove the additional CSS that is added to items like the Blog Posts Page where they load in comment styling by default."
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-05-16 20:10:31",
    "text": "Is there a way to get a list of all the files that `{{ head_css() }}` loads in the header includes? So far I only know that it loads in the following:\n```\nBlog Post Pages:\n&lt;link rel=\"stylesheet\" href=\"/hs/hsstatic/AsyncSupport/static-1.43/sass/comments_listing_asset.css\"&gt;\n```",
    "reply_count": 27,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-05-16 20:20:28"
      },
      {
        "time_stamp": "2019-05-16 20:20:47"
      },
      {
        "time_stamp": "2019-05-16 20:21:00"
      },
      {
        "time_stamp": "2019-05-16 20:21:37"
      },
      {
        "time_stamp": "2019-05-16 20:22:14"
      },
      {
        "time_stamp": "2019-05-17 09:09:59"
      },
      {
        "time_stamp": "2019-05-17 09:10:30"
      },
      {
        "time_stamp": "2019-05-17 09:11:24"
      },
      {
        "time_stamp": "2019-05-17 09:11:45"
      },
      {
        "time_stamp": "2019-05-17 09:13:02"
      },
      {
        "time_stamp": "2019-05-17 09:13:12"
      },
      {
        "time_stamp": "2019-05-17 09:13:33"
      },
      {
        "time_stamp": "2019-05-17 09:14:08"
      },
      {
        "time_stamp": "2019-05-17 09:16:56"
      },
      {
        "time_stamp": "2019-05-17 09:17:26"
      },
      {
        "time_stamp": "2019-05-17 09:18:12"
      },
      {
        "time_stamp": "2019-05-17 09:18:35"
      },
      {
        "time_stamp": "2019-05-17 09:22:17"
      },
      {
        "time_stamp": "2019-05-17 09:22:52"
      },
      {
        "time_stamp": "2019-05-17 09:24:19"
      },
      {
        "time_stamp": "2019-05-17 09:24:44"
      },
      {
        "time_stamp": "2019-05-17 09:24:47"
      },
      {
        "time_stamp": "2019-05-17 09:25:12"
      },
      {
        "time_stamp": "2019-05-17 09:25:12"
      },
      {
        "time_stamp": "2019-05-17 09:25:28"
      },
      {
        "time_stamp": "2019-05-17 09:25:38"
      },
      {
        "time_stamp": "2019-05-17 09:25:53"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-16 20:20:28",
    "text": "Try pretty printing the function itself"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-05-16 20:20:47",
    "text": "I did, it just returns a comment"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-05-16 20:21:00",
    "text": "Nothing useful"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-16 20:21:37",
    "text": "Did you try outputting the function on a blank html partial?"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-05-16 20:22:14",
    "text": "Not yet, I'm going to use a test portal tomorrow and do it. I called it quits for the night."
  }
]