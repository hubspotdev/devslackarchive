[
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-05-15 16:39:22",
    "text": "anyone have experience with `array.sort()` ??\n```locations.sort(function(a, b) {\n  return parseFloat(a[10]) - parseFloat(b[10])\n})```\nmy numbers are 2.9916177624864906, 3.6544043050539567, 3.7361683404743804, 3.94318734327439, 4.953258844687962, 4.406044067873795 and then this WEIRD THING AT THE END `0.4811803890531033`"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-05-15 16:39:52",
    "edited": {
      "time_stamp": "2020-05-15 16:40:21"
    },
    "text": "Anyone have any idea why the actual lowest number is being placed last in this `array.sort()` ??? It is ordering all of them properly except my number that is between 0 and 1 ....?"
  },
  {
    "text": "",
    "time_stamp": "2020-05-15 16:46:33"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-05-15 16:52:08",
    "text": "So I change that number that is 0.4... to 4.111 and it still places it in the same spot so I am just crazy"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-05-15 16:54:59",
    "text": "I'm going to go ahead and convert these to integers and just inline styling to order them using flexbox for a work around, but I'm really confused why that item isn't ordering properly"
  }
]