[
  {
    "poster": {
      "poster_name": "mathes waran",
      "poster_handle": "matheskrishna"
    },
    "time_stamp": "2023-02-15 08:41:39",
    "text": "HI @channel\n\nI have a use-case like,  When the page loads, I am fetching the data through a GET API call, and store in a variable. Now, in my variable, I have JSON data.  Now how could I process the JSON data in HUBL.? Like I need to loop in cards, and accordion components.\n\nTIA",
    "reply_count": 30,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-02-15 08:41:55"
      },
      {
        "time_stamp": "2023-02-15 08:43:00"
      },
      {
        "time_stamp": "2023-02-15 08:43:13"
      },
      {
        "time_stamp": "2023-02-15 08:43:23"
      },
      {
        "time_stamp": "2023-02-15 08:43:27"
      },
      {
        "time_stamp": "2023-02-15 08:43:39"
      },
      {
        "time_stamp": "2023-02-15 08:43:40"
      },
      {
        "time_stamp": "2023-02-15 08:43:47"
      },
      {
        "time_stamp": "2023-02-15 08:44:08"
      },
      {
        "time_stamp": "2023-02-15 08:45:01"
      },
      {
        "time_stamp": "2023-02-15 08:46:23"
      },
      {
        "time_stamp": "2023-02-15 08:46:59"
      },
      {
        "time_stamp": "2023-02-15 08:49:45"
      },
      {
        "time_stamp": "2023-02-15 08:50:17"
      },
      {
        "time_stamp": "2023-02-15 08:50:49"
      },
      {
        "time_stamp": "2023-02-15 08:51:05"
      },
      {
        "time_stamp": "2023-02-15 08:51:14"
      },
      {
        "time_stamp": "2023-02-15 08:51:21"
      },
      {
        "time_stamp": "2023-02-15 08:51:28"
      },
      {
        "time_stamp": "2023-02-15 08:51:51"
      },
      {
        "time_stamp": "2023-02-15 08:52:21"
      },
      {
        "time_stamp": "2023-02-15 08:52:39"
      },
      {
        "time_stamp": "2023-02-15 08:53:00"
      },
      {
        "time_stamp": "2023-02-15 08:53:08"
      },
      {
        "time_stamp": "2023-02-15 08:53:17"
      },
      {
        "time_stamp": "2023-02-15 08:53:43"
      },
      {
        "time_stamp": "2023-02-15 08:58:55"
      },
      {
        "time_stamp": "2023-02-15 11:00:03"
      },
      {
        "time_stamp": "2023-02-15 20:52:53"
      },
      {
        "time_stamp": "2023-02-16 07:07:02"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 08:41:55",
    "text": "<https://HubSpotdev.slack.com/archives/CFPRTEGTX/p1676475681295749>"
  },
  {
    "poster": {
      "poster_name": "mathes waran",
      "poster_handle": "matheskrishna"
    },
    "time_stamp": "2023-02-15 08:43:00",
    "text": "its the link for same message"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 08:43:13",
    "text": "it from the other channel"
  },
  {
    "poster": {
      "poster_name": "mathes waran",
      "poster_handle": "matheskrishna"
    },
    "time_stamp": "2023-02-15 08:43:23",
    "text": "Yeah i just posted it"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 08:43:27",
    "text": "just in case multiple people try and answer your question"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 08:43:39",
    "text": "that way people don't waste time answering questions that have an answer"
  },
  {
    "poster": {
      "poster_name": "mathes waran",
      "poster_handle": "matheskrishna"
    },
    "time_stamp": "2023-02-15 08:43:40",
    "text": "Should i delete.?"
  },
  {
    "poster": {
      "poster_name": "mathes waran",
      "poster_handle": "matheskrishna"
    },
    "time_stamp": "2023-02-15 08:43:47",
    "text": "sure, got it"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 08:44:08",
    "text": "Best way to do it is to share the same message with another channel"
  },
  {
    "poster": {
      "poster_name": "mathes waran",
      "poster_handle": "matheskrishna"
    },
    "time_stamp": "2023-02-15 08:45:01",
    "text": "<@U01QVR44MEY>, Thanks anyway, btwn do you have any idea for my query.?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 08:46:23",
    "text": "Sure it's pretty easy to process JSON data in HubL, how are you getting the data though?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 08:46:59",
    "text": "You can't really fetch data (from an api) with HubL but you could fetch the data put it in a HubDB and then process that data"
  },
  {
    "poster": {
      "poster_name": "mathes waran",
      "poster_handle": "matheskrishna"
    },
    "time_stamp": "2023-02-15 08:49:45",
    "edited": {
      "time_stamp": "2023-02-15 08:49:53"
    },
    "text": "I am having data only on certain API endpoints since it's dynamic. so I am pulling data from that endpoint using a GET call and stored in the js variable.  Now I need to use in HUBL. <@U01QVR44MEY>"
  },
  {
    "poster": {
      "poster_name": "mathes waran",
      "poster_handle": "matheskrishna"
    },
    "time_stamp": "2023-02-15 08:50:17",
    "text": "Is there any way to store the json data like using set variable.?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 08:50:49",
    "text": "Well not really, because HubSpot renders HubL on the server side, and your GET call is running on the client side"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 08:51:05",
    "text": "Which endpoint are you trying to use? is it a HubSpot one?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 08:51:14",
    "text": "there's possibly a HubL function for the same thing"
  },
  {
    "poster": {
      "poster_name": "mathes waran",
      "poster_handle": "matheskrishna"
    },
    "time_stamp": "2023-02-15 08:51:21",
    "text": "No, its another one.."
  },
  {
    "poster": {
      "poster_name": "mathes waran",
      "poster_handle": "matheskrishna"
    },
    "time_stamp": "2023-02-15 08:51:28",
    "text": "not a HubSpot API"
  },
  {
    "poster": {
      "poster_name": "mathes waran",
      "poster_handle": "matheskrishna"
    },
    "time_stamp": "2023-02-15 08:51:51",
    "edited": {
      "time_stamp": "2023-02-15 08:51:57"
    },
    "text": "there's possibly a HubL function for the same thing..\n\n&gt;&gt;  Could you tell more.?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 08:52:21",
    "text": "Yeah so like for HubSpot object apis you can use the crm_objects function in HubL to pull in that data instead of using the apis"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 08:52:39",
    "text": "but because you're not using a HubSpot api it's going to be pretty much impossible"
  },
  {
    "poster": {
      "poster_name": "mathes waran",
      "poster_handle": "matheskrishna"
    },
    "time_stamp": "2023-02-15 08:53:00",
    "text": "Oh okay, then in this what is the best solution to implement.?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 08:53:08",
    "text": "pretty much the only thing you could do is pass the api response in the url as a query parameter and then pull that in with hubl"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 08:53:17",
    "text": "I honestly wouldn't do this with HubL"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 08:53:43",
    "text": "if you could explain exactly what you're trying to build that would help"
  },
  {
    "poster": {
      "poster_name": "mathes waran",
      "poster_handle": "matheskrishna"
    },
    "time_stamp": "2023-02-15 08:58:55",
    "text": "I am having some JSON data in one of the external API calls,  and am storing this data in the js variable n the script side. Now I want to loop the data in certain components like accordion"
  },
  {
    "text": "Love some quick help as I feel there is a simple answer to this but I just struggle each time I'm trying to include a `for_loop` or `conditional` within a `variable`.\n\nI'm basically trying to create a module where multiple tags can be selected with a repeater field.  What am I doing wrong?  <@U01QVR44MEY> this is kinda like INCEPTION we we cracked a few months back.\n\n`{% set blog_posts = blog_recent_tag_posts(<http://module.start.blog|module.start.blog>, [ {% for item in module.start.tag %} \"{{ item }}\", {% endfor %} ],  module.start.num_posts ) %}`",
    "time_stamp": "2023-02-15 08:59:50",
    "edited": {
      "time_stamp": "2023-02-15 09:01:36"
    },
    "reply_count": 74,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-02-15 09:18:06"
      },
      {
        "time_stamp": "2023-02-15 09:18:47"
      },
      {
        "time_stamp": "2023-02-15 09:20:38"
      },
      {
        "time_stamp": "2023-02-15 09:21:08"
      },
      {
        "time_stamp": "2023-02-15 09:23:11"
      },
      {
        "time_stamp": "2023-02-15 09:23:34"
      },
      {
        "time_stamp": "2023-02-15 09:24:51"
      },
      {
        "time_stamp": "2023-02-15 09:27:12"
      },
      {
        "time_stamp": "2023-02-15 09:49:52"
      },
      {
        "time_stamp": "2023-02-15 09:51:53"
      },
      {
        "time_stamp": "2023-02-15 09:52:00"
      },
      {
        "time_stamp": "2023-02-15 09:52:02"
      },
      {
        "time_stamp": "2023-02-15 09:52:09"
      },
      {
        "time_stamp": "2023-02-15 09:52:31"
      },
      {
        "time_stamp": "2023-02-15 09:52:33"
      },
      {
        "time_stamp": "2023-02-15 09:52:41"
      },
      {
        "time_stamp": "2023-02-15 09:53:16"
      },
      {
        "time_stamp": "2023-02-15 09:53:26"
      },
      {
        "time_stamp": "2023-02-15 09:54:01"
      },
      {
        "time_stamp": "2023-02-15 09:54:50"
      },
      {
        "time_stamp": "2023-02-15 09:55:33"
      },
      {
        "time_stamp": "2023-02-15 09:55:36"
      },
      {
        "time_stamp": "2023-02-15 09:56:23"
      },
      {
        "time_stamp": "2023-02-15 09:56:36"
      },
      {
        "time_stamp": "2023-02-15 09:56:54"
      },
      {
        "time_stamp": "2023-02-15 09:56:59"
      },
      {
        "time_stamp": "2023-02-15 09:57:19"
      },
      {
        "time_stamp": "2023-02-15 09:57:28"
      },
      {
        "time_stamp": "2023-02-15 09:57:30"
      },
      {
        "time_stamp": "2023-02-15 09:58:29"
      },
      {
        "time_stamp": "2023-02-15 09:59:19"
      },
      {
        "time_stamp": "2023-02-15 09:59:49"
      },
      {
        "time_stamp": "2023-02-15 09:59:58"
      },
      {
        "time_stamp": "2023-02-15 10:01:36"
      },
      {
        "time_stamp": "2023-02-15 10:02:01"
      },
      {
        "time_stamp": "2023-02-15 10:02:24"
      },
      {
        "time_stamp": "2023-02-15 10:02:35"
      },
      {
        "time_stamp": "2023-02-15 10:02:35"
      },
      {
        "time_stamp": "2023-02-15 10:02:53"
      },
      {
        "time_stamp": "2023-02-15 10:03:12"
      },
      {
        "time_stamp": "2023-02-15 10:03:19"
      },
      {
        "time_stamp": "2023-02-15 10:03:24"
      },
      {
        "time_stamp": "2023-02-15 10:04:24"
      },
      {
        "time_stamp": "2023-02-15 10:04:52"
      },
      {
        "time_stamp": "2023-02-15 10:05:00"
      },
      {
        "time_stamp": "2023-02-15 10:05:02"
      },
      {
        "time_stamp": "2023-02-15 10:05:07"
      },
      {
        "time_stamp": "2023-02-15 10:08:02"
      },
      {
        "time_stamp": "2023-02-15 10:10:52"
      },
      {
        "time_stamp": "2023-02-15 10:11:21"
      },
      {
        "time_stamp": "2023-02-15 10:11:30"
      },
      {
        "time_stamp": "2023-02-15 10:11:38"
      },
      {
        "time_stamp": "2023-02-15 10:11:41"
      },
      {
        "time_stamp": "2023-02-15 10:11:52"
      },
      {
        "time_stamp": "2023-02-15 10:12:00"
      },
      {
        "time_stamp": "2023-02-15 10:12:09"
      },
      {
        "time_stamp": "2023-02-15 10:12:22"
      },
      {
        "time_stamp": "2023-02-15 10:12:28"
      },
      {
        "time_stamp": "2023-02-15 10:12:44"
      },
      {
        "time_stamp": "2023-02-15 10:12:49"
      },
      {
        "time_stamp": "2023-02-15 10:13:15"
      },
      {
        "time_stamp": "2023-02-15 10:13:28"
      },
      {
        "time_stamp": "2023-02-15 10:13:48"
      },
      {
        "time_stamp": "2023-02-15 10:13:54"
      },
      {
        "time_stamp": "2023-02-15 10:14:01"
      },
      {
        "time_stamp": "2023-02-15 10:14:15"
      },
      {
        "time_stamp": "2023-02-15 10:15:07"
      },
      {
        "time_stamp": "2023-02-15 10:15:16"
      },
      {
        "time_stamp": "2023-02-15 10:15:18"
      },
      {
        "time_stamp": "2023-02-15 10:15:24"
      },
      {
        "time_stamp": "2023-02-15 10:16:20"
      },
      {
        "time_stamp": "2023-02-15 10:19:04"
      },
      {
        "time_stamp": "2023-02-15 10:19:23"
      },
      {
        "time_stamp": "2023-02-15 10:19:44"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 09:18:06",
    "text": "I did really like the INCEPTION thing we build but really I think this is a little out of my league. roping in <@U25PYL3Q8>"
  },
  {
    "time_stamp": "2023-02-15 09:18:47",
    "text": "I need to call a friend"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2023-02-15 09:20:38",
    "text": "Thanks for looping him in <@U01QVR44MEY>.  There has got to be some way to include this."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 09:21:08",
    "text": "I definitely think there is but I don't really understand the problem"
  },
  {
    "text": "<@U01QVR44MEY> basically there is a parsing error.  This is because the `for loop` contains a  `{%`",
    "time_stamp": "2023-02-15 09:23:11"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 09:23:34",
    "edited": {
      "time_stamp": "2023-02-15 09:23:45"
    },
    "text": "can you just use escape_jinjava?"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2023-02-15 09:24:51",
    "text": "Looking at this in the documentation now. Not familar with escape_jinjava"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2023-02-15 09:27:12",
    "text": "I don't think that that will do the trick but I'm going to look for another filter that might."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 09:49:52",
    "text": "let me know if you find one"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2023-02-15 09:51:53",
    "text": "I just submitted a HubSpot support ticket because I can't crack it."
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2023-02-15 09:52:00",
    "text": "I'll let you know if they have an answer."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 09:52:02",
    "text": "hi"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2023-02-15 09:52:09",
    "text": "Yo!"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2023-02-15 09:52:31",
    "text": "<https://www.loom.com/share/1efb9b2ef1ba418389bee231ebef4091>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 09:52:33",
    "text": "I’m trying to undersatnd here"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 09:52:41",
    "text": "beautifyl"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 09:53:16",
    "text": "<@UA5DFM7CK> you don't use stage manager? :exploding_head:"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 09:53:26",
    "text": "I turned it off"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2023-02-15 09:54:01",
    "text": "<@U01QVR44MEY> stage manager??"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 09:54:50",
    "text": "Such a nice tool because I have 10 windows open at a time"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 09:55:33",
    "text": "when managing like 10 clients at a time the web browsers still go clunky"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 09:55:36",
    "text": "and tryign to rbing them in"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2023-02-15 09:56:23",
    "text": "<@U01QVR44MEY> Ahhhhh... Yeah, I tried it but had to turn it off. Wasn't working with my flow. Plus, I have a huge ass wide monitor so I'm good. :rolling_on_the_floor_laughing:"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 09:56:36",
    "text": "```{% set tag_array = [] %}\n\n{% for item in module.start.tag %}\n  {% do tag_array.append(item) %}\n{% endfor %}\n\n\n\n{% set blog_posts = blog_recent_tag_posts(<http://module.start.blog|module.start.blog>, tag_array,  module.start.num_posts ) %}```"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 09:56:54",
    "text": "kevin — I think this should do what you are looking to do"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 09:56:59",
    "edited": {
      "time_stamp": "2023-02-15 09:57:04"
    },
    "text": "pun intended lol"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 09:57:19",
    "text": "we set up a `tag_array` array"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2023-02-15 09:57:28",
    "text": "Beautiful! Let me try this out."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 09:57:30",
    "text": "and then loop through your module items, appending the data to the array"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 09:58:29",
    "edited": {
      "time_stamp": "2023-02-15 09:58:32"
    },
    "text": "The for loop might be off, depending if that “item” is the text you need or if you need a different property"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2023-02-15 09:59:19",
    "text": "it's definitely doing something!!  Making progress.  Let me print the tag_array to be sure."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 09:59:49",
    "text": "might be like item.label or item.slug"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 09:59:58",
    "text": "not excatly sure what is inside the module there"
  },
  {
    "text": "Awesome! This is working.",
    "time_stamp": "2023-02-15 10:01:36"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 10:02:01",
    "text": "loops are terrible without the do, append"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 10:02:24",
    "text": "the old way of looping and assinging stuff was just the wrong way to set this stuff up in teh early documentation"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2023-02-15 10:02:35",
    "text": "That's a simple print of the array.  If I needed \" \" to wrap each tag how would I include that? Maybe it doesn't matter but I'm going by the documentation"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 10:02:35",
    "text": "I love pushing stuff to an array like hubdb queries"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 10:02:53",
    "text": "I don’t think you need to, but if you do need to"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 10:03:12",
    "text": "`{% do tag_array.append('\"'~item~'\"') %}`"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2023-02-15 10:03:19",
    "text": "Sweet!"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 10:03:24",
    "text": "that should surround it"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2023-02-15 10:04:24",
    "text": "Yep! That did the trick.  Thanks so much for saving the day and causing me a little less hair to turn gray"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 10:04:52",
    "text": "well mine already greyded from this a year or two ago"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 10:05:00",
    "text": "so I’ll be glad to pass it along so yours dont"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 10:05:02",
    "text": "lol"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2023-02-15 10:05:07",
    "text": "LOL! You and me both."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 10:08:02",
    "text": "I think I had about 4 total gray hairs when I started HubSpot development, 9 years later I just grow my hair out in hopes that it looks more black because camoflauge"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2023-02-15 10:10:52",
    "text": "Good on you! I've decided to just start wearing cowboy looking hats. :face_with_cowboy_hat:\n(when in texas...)"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 10:11:21",
    "text": "I have a hat with a hot dog emoji on it"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2023-02-15 10:11:30",
    "text": "you win"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 10:11:38",
    "text": "cowboy hats could be next stage for me"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 10:11:41",
    "text": "wiht hot dog emojis"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 10:11:52",
    "text": "well now I know what I want for my birthday"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2023-02-15 10:12:00",
    "text": "I fully support this."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 10:12:09",
    "text": "jessica just said “i could make that happen”"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 10:12:22",
    "text": "When is your birthday nick I think the community should buy it"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 10:12:28",
    "text": "LOL"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 10:12:44",
    "text": "Don't say your age, don't expose yourself like that"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 10:12:49",
    "text": "lol"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 10:13:15",
    "edited": {
      "time_stamp": "2023-02-15 10:13:19"
    },
    "text": "If we meet up before I go to bonnaroo — you would see me right before my 43rd birthday"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 10:13:28",
    "text": "you could crown me lol"
  },
  {
    "time_stamp": "2023-02-15 10:13:48",
    "text": "crowning"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 10:13:54",
    "text": "done deal"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2023-02-15 10:14:01",
    "text": "Hahahahahaha!!!! That was good Carter"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 10:14:15",
    "edited": {
      "time_stamp": "2023-02-15 10:14:50"
    },
    "text": "it's fitting for Nick, lol"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 10:15:07",
    "text": "now I have to find a place for that gif on my website"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 10:15:16",
    "text": "YES!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 10:15:18",
    "text": "I love it"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 10:15:24",
    "text": "why are you giving me more work"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 10:16:20",
    "text": "\"The HubSpot team personally gave me the crown of best HubSpot user, here's the ceremony\""
  },
  {
    "text": "I think we have a wiener!",
    "time_stamp": "2023-02-15 10:19:04"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2023-02-15 10:19:23",
    "text": "John Dutton doesn't have anything on you!"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-15 10:19:44",
    "text": "hahahahahhahahaha"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-15 11:00:03",
    "text": "Yeah currently not super possible to pass that data into HubL you would either have to build it all out in normal HTML or just create a hubdb table for this data, or pass the data through the url"
  },
  {
    "poster": {
      "poster_name": "mathes waran",
      "poster_handle": "matheskrishna"
    },
    "time_stamp": "2023-02-15 20:52:53",
    "text": "Thanks for the ideas <@U01QVR44MEY>"
  }
]