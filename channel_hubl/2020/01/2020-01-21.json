[
  {
    "poster": {
      "poster_name": "Furqan Asghar",
      "poster_handle": "mfa213"
    },
    "time_stamp": "2020-01-21 04:39:38",
    "text": "how do i extract value from this list [{id=8, name='ml19', order=7}, {id=12, name='ml20', order=11}] such that name = ml20"
  },
  {
    "poster": {
      "poster_name": "Julie Costales",
      "poster_handle": "julie609"
    },
    "time_stamp": "2020-01-21 06:06:29",
    "text": "Hi All, would like to ask if smart rules are available within custom modules? If yes, could you share the hubl syntax for it, especially in the rich text field. I’ve read that widget_block is already deprecated and use the module_block instead. But I’ve tried using both syntax in a custom modules but nothing works, smart rules seems not working. Maybe I missed something or didn’t correctly do. :disappointed:"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-21 12:59:01",
    "text": "you can access all of that info using hubl code.. if you want to see what is available on each one, you could do `{{ contact|pprint }}` and that is similar to a var_dump or console.log()"
  },
  {
    "poster": {
      "poster_name": "Chris Abplanalp",
      "poster_handle": "cabplanalp"
    },
    "time_stamp": "2020-01-21 13:26:25",
    "text": "Is there a way to {{request.referrer}} but to parse out if it came from a specific domain so it is more like a wildcard to cover any sub-pages, I have this returning the correct where it came from: console.log(“site referrer ” + ‘{{request.referrer}}’); but how do I globalize site.referrer to return just the request.referrer domain only"
  },
  {
    "poster": {
      "poster_name": "Chris Abplanalp",
      "poster_handle": "cabplanalp"
    },
    "time_stamp": "2020-01-21 13:39:26",
    "text": "maybe no hubl for that, can just use JS:\n```var refererDomain = document.referrer.split('/')[2];\n  console.log(\"refererDomain \" + refererDomain);```",
    "reply_count": 5,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2020-01-21 13:42:02"
      },
      {
        "time_stamp": "2020-01-21 13:42:22"
      },
      {
        "time_stamp": "2020-01-21 15:35:07"
      },
      {
        "time_stamp": "2020-01-21 15:37:42"
      },
      {
        "time_stamp": "2020-01-21 15:38:04"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2020-01-21 13:42:02",
    "edited": {
      "time_stamp": "2020-01-21 13:42:19"
    },
    "text": "If you are ok with just JS then you could do something like\n```const refUrl = new URL(document.referrer)\nconst refDomain = refUrl.hostname```"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2020-01-21 13:42:22",
    "text": "<https://developer.mozilla.org/en-US/docs/Web/API/URL>"
  },
  {
    "poster": {
      "poster_name": "Johnny Rodriguez",
      "poster_handle": "juarodriguez"
    },
    "time_stamp": "2020-01-21 13:53:59",
    "text": "Is there a way to write a condition to determine if a user is on a mobile device? Trying to write something like this: {% if is_mobile %} Run Script {% else %} Do NOT Run Script {% endif %}",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2020-01-21 13:54:52"
      },
      {
        "time_stamp": "2020-01-22 02:07:10"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Tim Loden",
      "poster_handle": "tim.loden"
    },
    "time_stamp": "2020-01-21 13:54:52",
    "text": "Maybe use this: <https://community.HubSpot.com/t5/CMS-Development/Detect-mobile-from-hubl/td-p/210218>"
  },
  {
    "poster": {
      "poster_name": "Cory Dymond",
      "poster_handle": "cory218"
    },
    "time_stamp": "2020-01-21 15:05:46",
    "text": "It's a UX issue. The display is wide, so a lot of blogs makes sense on desktop. When it goes down to mobile, the design doesn't really allow them to stay small, so we want to go from like 30 posts to about 5. It's drastic. Far more drastic than I've ever seen, but design calls for it."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-21 15:06:51",
    "text": "could you do a read more button on mobile after the 5, and they can contine to use that until the pagination shows up?"
  },
  {
    "poster": {
      "poster_name": "Cory Dymond",
      "poster_handle": "cory218"
    },
    "time_stamp": "2020-01-21 15:07:54",
    "text": "I offered that, but it defeats their purpose, which is to keep the scroll light."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-21 15:09:32",
    "text": "seems odd. people on mobile can scroll for hours."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-21 15:09:36",
    "text": "facebook"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-21 15:09:38",
    "text": "instagram"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-21 15:09:40",
    "text": "reddit"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-21 15:09:46",
    "text": "you just scroll. all day."
  },
  {
    "poster": {
      "poster_name": "Chris Abplanalp",
      "poster_handle": "cabplanalp"
    },
    "time_stamp": "2020-01-21 15:35:07",
    "text": "<@UFBNA9K9A> so just to confirm there is not HubL way to get the hostname of a referral?"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2020-01-21 15:37:42",
    "text": "There probably is actually. I was just saying if you wanted it in JS you could do it that way. If I look for a way to do in HubL you could probably use the `| split` filter to get what you want"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2020-01-21 15:38:04",
    "edited": {
      "time_stamp": "2020-01-21 15:38:09"
    },
    "text": "I just know JS better so that was top of mind for a ready made solution for you. I’m not sure what the final solution would look like in HubL"
  }
]