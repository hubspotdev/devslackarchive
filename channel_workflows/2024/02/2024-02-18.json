[
  {
    "poster": {
      "poster_name": "DAVID CHO",
      "poster_handle": "wlsgh7463"
    },
    "time_stamp": "2024-02-18 03:32:44",
    "text": "Hello.\n\nI am developing a public app at HubSpot.\n\nWhen installing an app using Install URL (OAuth), API communication works normally with the actual developed app.\n\nHowever, if you call the public app URL through the workflow, it will not be called properly.\nThe following error occurs:\n\"Action failed because the connected app took too long to respond, but will retry soon An error occurred\"\n\nRecently, I used to use Google Cloud's load balancer for the https certificate, but I replaced it with an ngnix certificate.\nWhen the SSL function was implemented with Google Cloud's load balancer, it worked normally.\nThe SSL certificate purchased this time is “Sectigo SSL Certificate”.\n\nI wonder if the call may not be possible due to the SSL certificate."
  },
  {
    "poster": {
      "poster_name": "Andrew Smeallie",
      "poster_handle": "andrew431"
    },
    "time_stamp": "2024-02-18 04:16:55",
    "text": "<@U04KLTWMCSH> - if you elaborate on the context of what you are looking to do that might unlock some alternative answers.\n\nIs this becoming an issue as you bulk enroll a bunch of MANY:ONE records?\n\nAnd for \"synchronizing\" - what does that ideally look like? Controlling how many records process within a certain period of time to slow down the system intentionally? Or something else?"
  },
  {
    "poster": {
      "poster_name": "Magnus Foldager",
      "poster_handle": "magnus"
    },
    "time_stamp": "2024-02-18 06:51:15",
    "edited": {
      "time_stamp": "2024-02-18 06:51:26"
    },
    "text": "Might be a silly question - can the `callback()` function in NodeJS workflow actions be called multiple times and add different data points along the way?",
    "reply_count": 3,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2024-02-19 10:07:00"
      },
      {
        "time_stamp": "2024-02-20 06:23:53"
      },
      {
        "time_stamp": "2024-02-20 08:02:20"
      }
    ]
  }
]