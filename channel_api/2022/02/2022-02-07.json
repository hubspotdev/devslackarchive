[
  {
    "poster": {
      "poster_name": "Christopher Chiha",
      "poster_handle": "christopher051"
    },
    "time_stamp": "2022-02-07 03:20:33",
    "text": "Hello,\n\nI am currently ppulating my Hubdb table using API. I am able to create a new row using the below API, however when i try to pass multiple rows at once i get an error :\n\"status\": \"error\",\n\"message\": \"Invalid input JSON on line 2, column 11: Cannot deserialize value of type `java.util.LinkedHashMap&lt;java.lang.String,com.HubSpot.hubdb.model.utils.Variant&gt;` from Array value (token `JsonToken.START_ARRAY`)\",\n\nPOST <https://api.hubapi.com/cms/v3/hubdb/tables/5294922/rows?hapikey={{api_key}}>\n{\n \"values\": {\n   \"email\": \"<mailto:APITEST@huspy.com|APITEST@huspy.com>\",\n   \"name\": \"APITEST\",\n   \"lastupdated\": \"06/02/2022\"}\n    }\n\n\nWould appreciate some advice."
  },
  {
    "poster": {
      "poster_name": "jai",
      "poster_handle": "jai"
    },
    "time_stamp": "2022-02-07 03:37:36",
    "text": "Hi all, any idea?"
  },
  {
    "poster": {
      "poster_name": "Rohan Sootarsing",
      "poster_handle": "rohans"
    },
    "time_stamp": "2022-02-07 11:08:45",
    "text": "<@U26BLKGE4> the main aim is to then be able to report on the types of person downloading a particular resource"
  },
  {
    "poster": {
      "poster_name": "pChausseC",
      "poster_handle": "pccossio"
    },
    "time_stamp": "2022-02-07 14:13:01",
    "text": "Hi all. I need to handle request with a body, in the context of a webhook action in a workflow and I’m having problems validating X-HubSpot-signature-v3 on the webhook receiver. I can’t for the life of me get the same hash as the one coming from HubSpot.\nNodejs express app, using crypto for hashing and timesafe equal and utf8.js for encoding.  Please let me know what I could be doing wrong!\nHeres the function:\n\n```const crypto = require(\"crypto\");\nconst utf8 = require(\"utf8\");\nconst CLIENT_SECRET = process.env.CLIENT_SECRET;\nconst signatureValidator = function (req, res, next) {\n  const reqHash = req.get(\"X-HubSpot-Signature-v3\");\n  if (!reqHash) {\n    console.log(\"missing signature\");\n    res.status(401).send(\"Missing signature\");\n    return;\n  }\n  if (\n    req.get(\"X-HubSpot-Request-Timestamp\") &lt;\n    Date.now() - 5 * 60 * 1000 /* 5 min in ms*/\n  ) {\n    console.log(\"timestamp issue\");\n    res.status(401).send(\"Signature invalid\");\n    return;\n  }\n  var sourceString = \"\";\n  var fullUrl = \"<https://app.domain.com>\" + req.originalUrl;\n  sourceString +=\n    req.method +\n    fullUrl +\n    JSON.stringify(req.body) +\n    req.get(\"X-HubSpot-Request-Timestamp\");\n  sourceString = utf8.encode(sourceString);\n\n  const builtHash = crypto\n    .createHmac(\"sha256\", CLIENT_SECRET)\n    .update(sourceString)\n    .digest(\"base64\");\n\n  const isEqual = crypto.timingSafeEqual(\n    Buffer.from(builtHash),\n    Buffer.from(reqHash)\n  );\n  if (!isEqual) {\n    console.log({ issue: \"hash compare\", builtHash, reqHash });\n    res.status(401).send(\"Signature invalid\");\n    return;\n  }\n  next();\n};```\n",
    "reply_count": 11,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2022-02-22 08:01:35"
      },
      {
        "time_stamp": "2022-02-22 08:02:47"
      },
      {
        "time_stamp": "2022-02-22 08:54:53"
      },
      {
        "time_stamp": "2022-02-22 08:55:57"
      },
      {
        "time_stamp": "2022-02-22 08:56:31"
      },
      {
        "time_stamp": "2022-02-22 08:58:07"
      },
      {
        "time_stamp": "2022-02-22 09:00:21"
      },
      {
        "time_stamp": "2022-02-22 09:15:03"
      },
      {
        "time_stamp": "2022-02-22 09:46:57"
      },
      {
        "time_stamp": "2022-02-22 10:04:42"
      },
      {
        "time_stamp": "2022-02-22 12:41:27"
      }
    ]
  }
]