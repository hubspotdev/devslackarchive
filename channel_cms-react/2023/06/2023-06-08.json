[
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 05:40:43",
    "text": "is there a recommended way to add a json-ld script? do I add it as a component? is there a popular library that people use?",
    "reply_count": 12,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-06-08 08:35:55"
      },
      {
        "time_stamp": "2023-06-08 08:36:10"
      },
      {
        "time_stamp": "2023-06-08 08:36:29"
      },
      {
        "time_stamp": "2023-06-08 08:36:34"
      },
      {
        "time_stamp": "2023-06-08 08:36:44"
      },
      {
        "time_stamp": "2023-06-08 08:37:06"
      },
      {
        "time_stamp": "2023-06-08 08:38:02"
      },
      {
        "time_stamp": "2023-06-08 08:38:23"
      },
      {
        "time_stamp": "2023-06-08 08:38:43"
      },
      {
        "time_stamp": "2023-06-08 08:39:42"
      },
      {
        "time_stamp": "2023-06-08 08:41:35"
      },
      {
        "time_stamp": "2023-06-08 08:44:57"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 07:48:30",
    "text": "any ideas on how to make sure pages created based on a url param get included in the sitemap?",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-06-08 07:57:14"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 07:57:14",
    "text": "would using custom objects as a source (dynamic pages) potentially work? seems like the url would be an issue"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 08:35:55",
    "text": "would this be to put structured metadata in the `&lt;head&gt;`?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 08:36:10",
    "text": "yea"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 08:36:29",
    "text": "so far, I added it as a regular component that returns a script (inside &lt;body&gt;)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 08:36:34",
    "text": "and google is picking it up"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 08:36:44",
    "text": "so not sure if I really need it in the &lt;head&gt; but that would be ideal I think"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 08:37:06",
    "text": "yeah we don’t currently have a great way to get it into the head as part of the server render from react"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 08:38:02",
    "text": "so you’d need for now to rely on the rest of the CMS to get it in the head of a page"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 08:38:23",
    "text": "that's a bit tricky but I understand"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 08:38:43",
    "text": "tricky because the data is pulled/processed on the react side"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 08:39:42",
    "text": "hmm ok. yeah our current react support is just for modules/partials and so the output is pretty scoped to HTML subsets within the body representing those modules/partials"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 08:41:35",
    "text": "in the future i think we’d like to add APIs to control bigger parts of the page and/or add snippets to the head from a module"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 08:41:35",
    "text": "I've set some old Island modules that I worked on to `clientOnly=\"true\"` but I don't remember why that might have been necessary. Is there a guaranteed way to test removing that without breaking in production?",
    "reply_count": 61,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-06-08 08:42:25"
      },
      {
        "time_stamp": "2023-06-08 08:43:00"
      },
      {
        "time_stamp": "2023-06-08 08:43:17"
      },
      {
        "time_stamp": "2023-06-08 08:43:26"
      },
      {
        "time_stamp": "2023-06-08 08:44:00"
      },
      {
        "time_stamp": "2023-06-08 08:46:04"
      },
      {
        "time_stamp": "2023-06-08 08:47:28"
      },
      {
        "time_stamp": "2023-06-08 08:47:40"
      },
      {
        "time_stamp": "2023-06-08 08:47:56"
      },
      {
        "time_stamp": "2023-06-08 08:47:58"
      },
      {
        "time_stamp": "2023-06-08 08:48:22"
      },
      {
        "time_stamp": "2023-06-08 08:48:40"
      },
      {
        "time_stamp": "2023-06-08 08:48:50"
      },
      {
        "time_stamp": "2023-06-08 08:51:31"
      },
      {
        "time_stamp": "2023-06-08 08:55:05"
      },
      {
        "time_stamp": "2023-06-08 08:55:17"
      },
      {
        "time_stamp": "2023-06-08 08:55:18"
      },
      {
        "time_stamp": "2023-06-08 08:55:32"
      },
      {
        "time_stamp": "2023-06-08 08:57:30"
      },
      {
        "time_stamp": "2023-06-08 08:57:36"
      },
      {
        "time_stamp": "2023-06-08 08:57:56"
      },
      {
        "time_stamp": "2023-06-08 08:59:45"
      },
      {
        "time_stamp": "2023-06-08 09:00:31"
      },
      {
        "time_stamp": "2023-06-08 09:01:09"
      },
      {
        "time_stamp": "2023-06-08 09:02:02"
      },
      {
        "time_stamp": "2023-06-08 09:02:04"
      },
      {
        "time_stamp": "2023-06-08 09:04:55"
      },
      {
        "time_stamp": "2023-06-08 09:23:24"
      },
      {
        "time_stamp": "2023-06-08 09:23:43"
      },
      {
        "time_stamp": "2023-06-08 09:25:39"
      },
      {
        "time_stamp": "2023-06-08 09:26:05"
      },
      {
        "time_stamp": "2023-06-08 09:26:38"
      },
      {
        "time_stamp": "2023-06-08 09:26:46"
      },
      {
        "time_stamp": "2023-06-08 09:26:46"
      },
      {
        "time_stamp": "2023-06-08 09:27:05"
      },
      {
        "time_stamp": "2023-06-08 09:27:26"
      },
      {
        "time_stamp": "2023-06-08 09:29:11"
      },
      {
        "time_stamp": "2023-06-08 09:29:16"
      },
      {
        "time_stamp": "2023-06-08 09:29:26"
      },
      {
        "time_stamp": "2023-06-08 09:29:35"
      },
      {
        "time_stamp": "2023-06-08 09:29:41"
      },
      {
        "time_stamp": "2023-06-08 09:30:32"
      },
      {
        "time_stamp": "2023-06-08 09:30:57"
      },
      {
        "time_stamp": "2023-06-08 09:31:20"
      },
      {
        "time_stamp": "2023-06-08 09:31:28"
      },
      {
        "time_stamp": "2023-06-08 09:31:33"
      },
      {
        "time_stamp": "2023-06-08 09:31:51"
      },
      {
        "time_stamp": "2023-06-08 09:32:17"
      },
      {
        "time_stamp": "2023-06-08 09:32:30"
      },
      {
        "time_stamp": "2023-06-08 10:23:04"
      },
      {
        "time_stamp": "2023-06-08 10:23:19"
      },
      {
        "time_stamp": "2023-06-08 10:23:30"
      },
      {
        "time_stamp": "2023-06-08 10:24:21"
      },
      {
        "time_stamp": "2023-06-08 10:25:39"
      },
      {
        "time_stamp": "2023-06-08 10:25:44"
      },
      {
        "time_stamp": "2023-06-08 10:26:35"
      },
      {
        "time_stamp": "2023-06-08 10:28:32"
      },
      {
        "time_stamp": "2023-06-08 10:36:29"
      },
      {
        "time_stamp": "2023-06-08 10:37:24"
      },
      {
        "time_stamp": "2023-06-08 10:37:40"
      },
      {
        "time_stamp": "2023-06-08 10:37:46"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 08:42:25",
    "text": "i’d recommend starting testing with the dev server if possible"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 08:43:00",
    "text": "dev side shows no issues/errors/warnings"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 08:43:17",
    "text": "oh, wait, it does show a warning"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 08:43:26",
    "text": "let me double check 0.6.8 version"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 08:44:00",
    "text": "i wouldn’t expect a warning unless you were doing something like accessing the `window` on render, i.e. some code that can’t be run in a server context"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 08:44:57",
    "text": "yea, that would be great"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 08:46:04",
    "text": "even with 0.6.8 I am getting:\n```Warning: Prop `id` did not match. Server: \"react-select-5-live-region\" Client: \"react-select-2-live-region\"```\n"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 08:47:28",
    "text": "hmm ok my guess is that wouldn’t manifest in a big problem on prod but should be fixable still"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 08:47:40",
    "text": "what project / component is this so i can take a look?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 08:47:56",
    "text": "it's \"greenhouse-project\""
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 08:47:58",
    "text": "jobBoard"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 08:48:22",
    "text": "I haven't deployed recently so the live version still has clientOnly=true"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 08:48:40",
    "text": ":+1: thats fine yeah just wanted to see the rest of the code"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 08:48:50",
    "text": "awesome, I appreciate the help"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 08:51:31",
    "text": "and JFYI, I am using a browser API on job pages so those have to be client only (probably)"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 08:55:05",
    "text": "could you try passing `instanceId={useId()}` to all your `Select` components?"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 08:55:17",
    "text": "<https://github.com/JedWatson/react-select/issues/5459#issuecomment-1574185707> this is the same issue i think"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 08:55:18",
    "text": "sure, one sec"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 08:55:32",
    "text": "`useId` coming from `react`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 08:57:30",
    "text": "no difference"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 08:57:36",
    "text": "same warning"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 08:57:56",
    "text": "wait wait wait"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 08:59:45",
    "text": "different warning:\n```react_devtools_backend_compact.js:2367 Warning: Prop `className` did not match. Server: \" css-1fdsijx-ValueContainer\" Client: \" css-art2ul-ValueContainer2\"```"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 09:00:31",
    "edited": {
      "time_stamp": "2023-06-08 09:00:39"
    },
    "text": "hmm, and this is with 0.6.8 of cms-components/cms-dev-server?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 09:01:09",
    "text": "yea, confirmed in package lock"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 09:02:02",
    "text": "maybe it's react-select version?\n```\"react-select\": \"5.7.0\",```"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 09:02:04",
    "text": "I can update"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 09:04:55",
    "text": ")update to 5.7.3 didn't help)"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 09:23:24",
    "text": "could you try replacing the `useId()` with something semantic to each select? like `department-select` , `experience-select`, etc"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 09:23:43",
    "text": "one sec"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 09:25:39",
    "text": "no change"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 09:26:05",
    "text": "does the error include the new instanceIds?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 09:26:38",
    "text": "nope"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 09:26:46",
    "text": "```react_devtools_backend_compact.js:2367 Warning: Prop `className` did not match. Server: \" css-1fdsijx-ValueContainer\" Client: \" css-art2ul-ValueContainer2\"```\n"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 09:26:46",
    "text": "interesting ok thats good i think?"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 09:27:05",
    "text": "so the IDs in the middle stayed the same from before?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 09:27:26",
    "text": "yea"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 09:29:11",
    "text": "do you happen to be using safari?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 09:29:16",
    "text": "no"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 09:29:26",
    "text": "chrome"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 09:29:35",
    "text": ":+1: tracking down some react-select issue history"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 09:29:41",
    "text": "and some seem to have safari specific issues"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 09:30:32",
    "text": "ok unfortunately it looks like <https://github.com/JedWatson/react-select/issues/3590> is what you’re seeing and there’s no current solution"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 09:30:57",
    "text": "so i think for `react-select` you’ll need `clientOnly={true}` which is the equivalent of what people suggest in that issue"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 09:31:20",
    "text": "somewhere in `react-select` they generate IDs for those class names that isn’t SSR friendly"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 09:31:28",
    "text": "ok, yea, that's no big deal I guess"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 09:31:33",
    "text": "thanks for taking a look"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 09:31:51",
    "text": ":+1: sorry we couldn’t get something to work"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 09:32:17",
    "text": "might be worth adding a comment next to the `clientOnly` explaining the reason for future you in case something changes in the future :sweat_smile:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 09:32:30",
    "text": "ha, great idea"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 10:23:04",
    "text": "apparently, that className warning only shows up on dev"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 10:23:19",
    "text": "interesting"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 10:23:30",
    "text": "can you link the deployed page?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 10:24:21",
    "text": "<https://flatiron.com/careers/open-positions-test>"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 10:25:39",
    "text": "this is a duplicate page of a production page"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 10:25:44",
    "text": "safe to update the real one?"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 10:26:35",
    "text": "looks like yes, i’m fairly surprised it works"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 10:28:32",
    "text": "a wins a win"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 10:36:29",
    "text": "does removing hydrate on load — load any sooner?"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 10:37:24",
    "text": "No that’s the earliest one - the only thing earlier than that is the initial server render output "
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 10:37:40",
    "text": "The default value is on load"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 10:37:46",
    "text": "gotcha"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 10:48:22",
    "edited": {
      "time_stamp": "2023-06-08 10:57:14"
    },
    "text": "trying to understand my options for getting data server-side that I can load into a js_partial (or maybe inside of a js_module?)\n• use HubL and then pass data into a js_partial \n• GraphQL\n• ???",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-06-08 15:01:47"
      },
      {
        "time_stamp": "2023-06-08 15:05:49"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 10:48:49",
    "text": "can I make a fetch outside of the island then load data into the island that will ultimately be server rendered?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 10:49:37",
    "edited": {
      "time_stamp": "2023-06-08 10:58:25"
    },
    "text": "would it be crazy to add a serverless function, save fetched data into HubDB, and then load that data via ~HubL~ graphQL in a ~js_partial~ js_module?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 10:50:40",
    "text": "just to be clear, my goal is to load a page with rendered results when Google tries to index"
  },
  {
    "text": "Hi guys! in creating a fields(ModuleField), how I can make a FieldGroup to have a repeater options? (like the image below):",
    "time_stamp": "2023-06-08 12:27:56",
    "reply_count": 9,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-06-08 14:59:21"
      },
      {
        "time_stamp": "2023-06-08 15:00:03"
      },
      {
        "time_stamp": "2023-06-08 15:01:04"
      },
      {
        "time_stamp": "2023-06-09 07:01:27"
      },
      {
        "time_stamp": "2023-06-09 09:10:29"
      },
      {
        "time_stamp": "2023-06-09 09:14:27"
      },
      {
        "time_stamp": "2023-06-09 09:14:40"
      },
      {
        "time_stamp": "2023-06-09 09:16:06"
      },
      {
        "time_stamp": "2023-06-09 09:16:07"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 14:59:21",
    "text": "you can use the `occurrence` settings here on a `FieldGroup`: <https://github.com/HubSpot/cms-js-building-block-examples/blob/main/docs/field-types/modules.md#basefield>"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 15:00:03",
    "edited": {
      "time_stamp": "2023-06-08 15:00:08"
    },
    "text": "sorry the docs there get broken up by the types being shared - if you use typescript in your editor with `moduleResolution` set to `node16` in your `tsconfig.json` you can get automatic validation/suggestions"
  },
  {
    "poster": {
      "poster_name": "Jhon",
      "poster_handle": "michael.bolima"
    },
    "time_stamp": "2023-06-08 15:01:04",
    "text": "ow got it. thank you <@U04DVL5T2TE>!"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-08 15:01:47",
    "text": "right now those are the two only options i think. we’re working on getting hubl data passed into modules as well. we’re looking at various ways to support fetching data on the server from within a react component in the near future"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-08 15:05:49",
    "text": "fetching on the server from a react component would be perfect I think"
  }
]