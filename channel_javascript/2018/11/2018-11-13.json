[
  null,
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-13 13:54:59",
    "text": "Any idea why this would be throwing an “Uncaught SyntaxError: Invalid regular expression: Invalid Group”?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-13 13:55:02",
    "text": "`var reg_ex_load = new RegExp( queryKey + '=' + '(.*)(\\?|$)' );`"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-13 14:01:19",
    "text": "It has something to do with the `\\?`"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-11-13 14:01:27",
    "text": "What is the Value of queryKey?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-13 14:01:37",
    "text": "it’s a string"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-13 14:01:42",
    "text": "“mixquery”"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-13 14:02:12",
    "text": "It’s sort of working if I change `\\?` to `\\\\?`"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-11-13 14:02:25",
    "text": "so it woul dbe RegEx('SOMEKEY=(.*)(\\?|$));"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-13 14:02:36",
    "text": "Yep!"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-13 14:03:10",
    "text": "sorry wish I could help here. everytime i see a regex string I think to myself “I feel like I’m doing encryption for the NSA”"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-13 14:03:14",
    "text": "mixquery=(.*)(\\?|$) is what comes through"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-11-13 14:05:11",
    "text": "tried using this? <https://regex101.com/>"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-13 14:05:28",
    "text": "looks like I have to double escape that question mark then figure out why it isn’t working there."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-13 14:05:38",
    "text": "I’ve been using <http://regexr.com|regexr.com>"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-11-13 14:06:02",
    "text": "are you trying to match the string?&gt;"
  },
  {
    "text": "",
    "time_stamp": "2018-11-13 14:06:35"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-11-13 14:07:04",
    "text": "<https://regex101.com/r/d14q7L/1>"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-11-13 14:08:01",
    "text": "what are you comparing it to?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-13 14:08:22",
    "text": "I’m basically trying to stop the captured string if it hits a question mark, barring that it matches to the end of the line"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-13 14:09:00",
    "text": "So I’m matching it to a url like this:"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-13 14:09:33",
    "text": "url?mixquery=category-b|blue"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-13 14:09:37",
    "text": "url?mixquery=category-b|blue?something"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-13 14:09:59",
    "text": "or that"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-13 14:10:25",
    "text": "And it should capture “category-b|blue”"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-11-13 14:19:32",
    "text": "drop this in console."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-11-13 14:19:48",
    "text": "`var url = window.location.href.split('?')`"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-11-13 14:19:55",
    "text": "`url[1]`"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-13 14:20:16",
    "text": "And I can just use my variable in there too"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-11-13 14:21:19",
    "text": "I have used this as well;"
  },
  {
    "text": "",
    "time_stamp": "2018-11-13 14:21:29"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-11-13 14:21:49",
    "text": "`var foo = getParameterByName('mixquery');`"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-11-13 14:23:23",
    "text": "hope that gets you further"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-13 14:23:39",
    "text": "I’ll give it a shot! Thanks so much Chad"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-13 15:18:08",
    "text": "```\nvar uri = window.location.href;\nvar reg_ex_load = new RegExp( queryKey + '=' + '(.*)\\\\?|' + queryKey + '=' +'(.*)$' );\nvar reg_ex_query = new RegExp( queryKey + '.*' );\n\nvar loadFilter;\nvar loadMe = 'all';\n\nif(reg_ex_load.test(uri)){\n    loadFilter = uri.match(reg_ex_load);\n    for(i=0;i &lt; loadFilter.length;i++){\n        if(!reg_ex_query.test(loadFilter[i]) &amp;&amp; loadFilter[i] !== undefined){\n            var loadMe = '.' + loadFilter[i].replace('|','.'); \n        }\n    }\n}```"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-13 15:18:19",
    "text": "That’s what I ended up using if anyone was curious"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-13 15:20:43",
    "text": "That basically takes a query string from the URL and passes it into a resource filtration function to set its starting state."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-13 15:22:11",
    "edited": {
      "time_stamp": "2018-11-13 15:25:05"
    },
    "text": "Embarassingly basic jquery question - I have 2 elements directly next to eachother.\n\nButton A and Div B\n\nif Div B is empty I want to `.remove()` it AND Button A\n\nWhat I’ve currently tried:\n\n``` $(\".development-details--inner\").each(function(){\n            var devbtn = $(this);\n            \n            if(!$.trim(devbtn.closest(\".accordion-content\").html())){\n                devbtn.closest(\".accordion-content\").remove();\n                $(this).remove();\n            }\n        }); ```\n\n```&lt;button class=\"development-details-link development-details--inner collapsed accordion-link text-human-dark\" aria-expanded=\"false\"&gt;\n       Community Engagement\n      &lt;/button&gt;\n&lt;div class=\"accordion-content\"&gt;\n            &lt;/div&gt;\n```\nelement A being `.development-details--inner` button, element B being `.accordion-content` div",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-11-13 15:56:02"
      },
      {
        "time_stamp": "2018-11-13 16:35:16"
      }
    ]
  },
  null,
  null,
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-13 15:56:02",
    "text": "answered it myself. should anyone want to know the answer ``` $(\".development-details--inner\").each(function(){\nvar devbtn = $(this);\nvar next = $(this).next(\".accordion-content\");\nconsole.log( next);\nvar nextIsEmpty = !$.trim(next.html());\nconsole.log(nextIsEmpty);\nif(nextIsEmpty){\nconsole.log(\"found an empty\");\ndevbtn.remove();\nnext.remove();\n} else{console.log(\"not empty\");\n\n}\n}) ```"
  },
  null,
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-13 16:35:16",
    "text": ":jon-m:"
  },
  null,
  null
]