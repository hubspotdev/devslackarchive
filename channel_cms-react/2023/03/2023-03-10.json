[
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 08:51:38",
    "text": "where is a good place to fetch data so that I can pass it into my island? I'm having some trouble"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 08:52:04",
    "text": "if I try to run useEffect or return something else before the data is available it never re-renders (which probably makes sense)",
    "reply_count": 45,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-03-10 08:53:44"
      },
      {
        "time_stamp": "2023-03-10 08:54:17"
      },
      {
        "time_stamp": "2023-03-10 08:54:43"
      },
      {
        "time_stamp": "2023-03-10 08:54:57"
      },
      {
        "time_stamp": "2023-03-10 08:55:19"
      },
      {
        "time_stamp": "2023-03-10 08:55:31"
      },
      {
        "time_stamp": "2023-03-10 08:56:01"
      },
      {
        "time_stamp": "2023-03-10 08:56:07"
      },
      {
        "time_stamp": "2023-03-10 08:57:03"
      },
      {
        "time_stamp": "2023-03-10 08:57:49"
      },
      {
        "time_stamp": "2023-03-10 08:58:02"
      },
      {
        "time_stamp": "2023-03-10 09:00:40"
      },
      {
        "time_stamp": "2023-03-10 09:01:31"
      },
      {
        "time_stamp": "2023-03-10 09:02:17"
      },
      {
        "time_stamp": "2023-03-10 09:02:30"
      },
      {
        "time_stamp": "2023-03-10 09:03:00"
      },
      {
        "time_stamp": "2023-03-10 09:03:05"
      },
      {
        "time_stamp": "2023-03-10 09:05:33"
      },
      {
        "time_stamp": "2023-03-10 09:06:25"
      },
      {
        "time_stamp": "2023-03-10 09:10:05"
      },
      {
        "time_stamp": "2023-03-10 09:11:08"
      },
      {
        "time_stamp": "2023-03-10 09:12:11"
      },
      {
        "time_stamp": "2023-03-10 09:12:33"
      },
      {
        "time_stamp": "2023-03-10 09:12:44"
      },
      {
        "time_stamp": "2023-03-10 09:16:28"
      },
      {
        "time_stamp": "2023-03-10 09:19:02"
      },
      {
        "time_stamp": "2023-03-10 09:20:01"
      },
      {
        "time_stamp": "2023-03-10 09:20:56"
      },
      {
        "time_stamp": "2023-03-10 09:21:21"
      },
      {
        "time_stamp": "2023-03-10 09:21:57"
      },
      {
        "time_stamp": "2023-03-10 09:22:06"
      },
      {
        "time_stamp": "2023-03-10 09:23:13"
      },
      {
        "time_stamp": "2023-03-10 09:23:39"
      },
      {
        "time_stamp": "2023-03-10 09:23:51"
      },
      {
        "time_stamp": "2023-03-10 09:24:17"
      },
      {
        "time_stamp": "2023-03-10 09:25:15"
      },
      {
        "time_stamp": "2023-03-10 09:25:25"
      },
      {
        "time_stamp": "2023-03-10 09:25:45"
      },
      {
        "time_stamp": "2023-03-10 09:27:16"
      },
      {
        "time_stamp": "2023-03-10 09:29:40"
      },
      {
        "time_stamp": "2023-03-10 09:38:02"
      },
      {
        "time_stamp": "2023-03-10 09:38:57"
      },
      {
        "time_stamp": "2023-03-10 09:41:29"
      },
      {
        "time_stamp": "2023-03-10 09:42:24"
      },
      {
        "time_stamp": "2023-03-10 09:43:40"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-03-10 08:53:44",
    "text": "What is the thing that triggers a new fetch, clicking on some search box, filter, or pagination link in on the page?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 08:54:17",
    "text": "a new fetch is never triggered, I have all of the data before the component renders (in theory)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 08:54:43",
    "text": "like, I have the data, but I can't figure out a way to pass it in, I just updated to a js_partial which I think might be necessary to pass in data from the template"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 08:54:57",
    "text": "but at this point I'm just trying things..."
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-03-10 08:55:19",
    "text": "Is this something  where you have the data available in HubL?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 08:55:31",
    "text": "no, I have to fetch for it at least once"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 08:56:01",
    "text": "I'm technically refactoring at this point, I had it working from within the island"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 08:56:07",
    "text": "but I don't necessarily want to do the fetch there"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-03-10 08:57:03",
    "text": "If the fetch is happening on the browser it _has_ to happen in an island (from prior conversation you were working around the lack of real fetching in JS on the server side with a client-side only island?)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 08:57:49",
    "text": "yea, this is that same situation, I haven't set it to client_side only yet"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 08:58:02",
    "text": "I'm poking at things to see how they work more or less but got stuck"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-03-10 09:00:40",
    "text": "Ok. You could also make it not client only and have a condition like “don’t fetch until after this component is hydrated on the client”. And that boils down to:\n• Calling `useAfterIslandHydration` and saving that as a variable (`afterHydration`?)\n• Having `useEffect`’s callback have a condition that only tries to trigger the fetch if `afterHyration` is true\n• Making sure the `useEffect` dependency array (second argument) includes `afterHydration` "
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-03-10 09:01:31",
    "edited": {
      "time_stamp": "2023-03-10 09:01:42"
    },
    "text": "I think we could/should make a convenience API like `useClientEffect` that does some of that for you (so you don’t need to get &amp; check `afterHydration` yourself)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 09:02:17",
    "text": "yea, I was kind of hoping to not make it client side so I can try that"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 09:02:30",
    "text": "but even if it is client side, I have to run the fetch in the island component?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 09:03:00",
    "text": "I thought I could run it in the Component module"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 09:03:05",
    "text": "and then pass it into the island"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-03-10 09:05:33",
    "edited": {
      "time_stamp": "2023-03-10 09:05:42"
    },
    "text": "For now, yes. Technically there are ways you could get our server side rendering/execution infra to make an external network request, but there are a lot of subtleties, gaps, and non-obvious ways to get things wrong or not have things work like you’d expect. So I/we are very hesitant to suggest folx go down that path yet… because we have yet to “make it good/useful/reasonable” yet"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 09:06:25",
    "text": "yea, makes sense, I'm holding on by a thread and want to make sure I can at least have a working solution for now"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-03-10 09:10:05",
    "text": "Question (with the caveat that I know this would likely better &amp; easier if you could simply fetch data in a JS module or partial and pass it to an island)…\n\nIs there a specific need/pain that moving the fetch out of the island is solving for you now? Like a code organization thing? A  data needs to be used in more places thing? Something else?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 09:11:08",
    "text": "it was intended as a code organization thing, I only fetch the data once so I figured I should pass it in as a prop and be done with it"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 09:12:11",
    "text": "I added this btw:\n```const afterHydration = useAfterIslandHydration();```\nand in my useEffect I added it as a condition"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 09:12:33",
    "text": "I log the data when it exists and it happens to log twice"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 09:12:44",
    "text": "I don't have strict mode enabled...or do I"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-03-10 09:16:28",
    "text": "Hm… there is more to this. And it starts to get into things like how do you know a request is already in progress, how do you show that progress in your rendered elements, which leads to using `&lt;Suspense&gt;`, reading from a “resource” that throws a promise if the request isn’t finished, and other nitty gritty details that we really shouldn’t make you have to worry about in most cases. Note, you don’t _have_ to go down that path, but when you do it is really powerful…."
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-03-10 09:19:02",
    "text": "For now you could keep track of a single variable `let requestTriggered = false` outside of your island component that you set `requestTriggered = true` after the fetch is called the first time. That is a bit simple, but might be good enough for now"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-03-10 09:20:01",
    "text": "(i.e. this is not component state but more like a basic ~global~  variable defined at the “top” level of a file/module)"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-03-10 09:20:56",
    "text": "(React state could work too, but there is some subtlety there… I’d have to mess a bit more to be more confident about my recommendation)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 09:21:21",
    "text": "and then use that value to prevent a double fetch?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-03-10 09:21:57",
    "text": "Yes. And to know if you should render a spinner/loading UI (in that case setting react state for “fetchInProgress” would be better)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 09:22:06",
    "text": "also, it looks like I might have to make it clientside only anyway, I am getting this warning for a `react-select`  component that I'm importing:\n```Warning: Prop `id` did not match. Server: \"react-select-270-live-region\" Client: \"react-select-2-live-region\"```\n"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-03-10 09:23:13",
    "text": "Got it. We have some in progress thoughts on how we can fix the useId problem and just make react IDs (and library uses of them) “just work” :crossed_fingers:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 09:23:39",
    "text": "definitely looking forward to that — client side only will be fine for now"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 09:23:51",
    "text": "it's waaaay better than doing this any other way already"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-03-10 09:24:17",
    "text": ":musical_score: :ear: :joy_cat:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 09:25:15",
    "text": "thanks again for your help, hopefully I can piece the rest of this thing together"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 09:25:25",
    "text": "we have a hard deadline of March 20th"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 09:25:45",
    "text": "in case you know of anything cool happening between now and then (and I should update packages or something)"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-03-10 09:27:16",
    "text": "Got it, we’ll keep that in mind. And please keep on asking these questions. Glad to help :saluting_face:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 09:29:40",
    "text": "when you say add `requestTriggered` outside of the island component, do you mean way outside? like attach it to the window? seems like scope is going to be an issue"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-03-10 09:38:02",
    "text": "I was suggesting something like this:\n\n```let requestTriggered = false;\n\nfunction MyIsland({props}) {\n  useEffect(() =&gt; {\n    if (something) {\n      requestTriggered = true;\n      makeRequest();\n    }\n  }, [something])\n  return /* ... */;\n}```\n"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-03-10 09:38:57",
    "edited": {
      "time_stamp": "2023-03-10 09:39:03"
    },
    "text": "(which assumes that only one of those components is on the page, you don’t need `requestTriggered` as a condition to change what react elements you return, etc)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 09:41:29",
    "text": "that works, thanks"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 09:42:24",
    "text": "actually..hmm...."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 09:43:40",
    "text": "yea, that works, had to rethink that a bit"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 11:17:31",
    "text": "Is the best way to load a font to inherit everywhere? If I know my page will have the right font-family set",
    "reply_count": 8,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-03-10 12:14:42"
      },
      {
        "time_stamp": "2023-03-10 12:16:14"
      },
      {
        "time_stamp": "2023-03-10 12:16:37"
      },
      {
        "time_stamp": "2023-03-10 12:17:00"
      },
      {
        "time_stamp": "2023-03-10 12:17:08"
      },
      {
        "time_stamp": "2023-03-10 12:21:04"
      },
      {
        "time_stamp": "2023-03-10 12:21:49"
      },
      {
        "time_stamp": "2023-03-10 12:22:43"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 11:17:38",
    "text": "in a js_module"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-03-10 12:14:42",
    "edited": {
      "time_stamp": "2023-03-10 12:15:16"
    },
    "text": "I feel like this is somewhat of a general CSS style/preference. You can certainly assign styles either directly or via the cascade to elements being rendered in js_module or js_partial."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 12:16:14",
    "text": "ok, so whatever I normally do should be fine, thanks"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 12:16:37",
    "text": "I'm also using tailwind which add some uncertainty about how this might work"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 12:17:00",
    "text": "I guess because the build process is limited to just the \"project\" I can't use the same tailwind setup"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 12:17:08",
    "text": "but can probably import the same config or something along those lines"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-03-10 12:21:04",
    "text": "From earlier feedback around this, we are figuring out if we can have things like CSS “exported from” a cms-assets project, so other HubL files can directly reference and pull them in. No specific timeline/certainty yet though."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 12:21:49",
    "text": "interesting"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-03-10 12:22:43",
    "text": "I think tailwind should be ok for my case, even running tailwind twice would only load a small subset of classes"
  }
]