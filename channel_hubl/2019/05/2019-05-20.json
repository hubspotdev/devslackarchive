[
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2019-05-20 12:11:50",
    "text": "how would one use the resize_image_url function on this? `{% linked_image \"feature_1_image\" label=\"Feature 1 Image\", alt=\"Feature 1 Image\", src=\"image_url.jpg\", width=\"120\", style=\"margin-bottom: 15px;\" %}`",
    "reply_count": 14,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-05-20 12:12:51"
      },
      {
        "time_stamp": "2019-05-20 12:13:57"
      },
      {
        "time_stamp": "2019-05-20 12:15:14"
      },
      {
        "time_stamp": "2019-05-20 12:15:33"
      },
      {
        "time_stamp": "2019-05-20 12:15:45"
      },
      {
        "time_stamp": "2019-05-20 12:15:52"
      },
      {
        "time_stamp": "2019-05-20 12:15:53"
      },
      {
        "time_stamp": "2019-05-20 12:16:46"
      },
      {
        "time_stamp": "2019-05-20 12:17:08"
      },
      {
        "time_stamp": "2019-05-20 12:17:41"
      },
      {
        "time_stamp": "2019-05-20 12:17:59"
      },
      {
        "time_stamp": "2019-05-20 12:18:15"
      },
      {
        "time_stamp": "2019-05-20 12:18:22"
      },
      {
        "time_stamp": "2019-05-20 12:22:06"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 12:12:51",
    "text": "that will already output an image with the width set to 120"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 12:13:57",
    "text": "so it should automatically handle it.\n\nIf you’re pulling out the image out of that function instead you would add export_to_template_context=true and you would manually generate the html and pass that src through the resize_image_url function"
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2019-05-20 12:15:14",
    "text": "so this code is in an email template. the problem i'm having is that the email renders properly in all email clients. the image displays at 120px wide. however, in certain email clients when an email gets forwarded, the image renders at the size the client specifies in the image module."
  },
  {
    "text": "",
    "time_stamp": "2019-05-20 12:15:33"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 12:15:45",
    "text": "don’t even bother trying to fix “forwarded” emails"
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2019-05-20 12:15:52",
    "text": "hahaha. right!?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 12:15:53",
    "text": "it’s a completely unwinnable war"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 12:16:46",
    "edited": {
      "time_stamp": "2019-05-20 12:17:10"
    },
    "text": "every email client alters forwarded emails, both when sending the forward, and when receiving a forward.\n\nIt’s literally pointless to even attempt to correct it, because the code WILL get mangled horrifically and there’s almost nothing you can do to improve it"
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2019-05-20 12:17:08",
    "text": "so even if i utilize the resize_image_url function, do you think this battle is worthless? i'm not even sure that's the root issue...just troubleshooting at this point."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 12:17:41",
    "text": "if the issue only happens when the email gets forwarded, odds are that it’s not your code, it’s what the email clients do to it"
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2019-05-20 12:17:59",
    "text": "i'll relay that info. thanks, Jon."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 12:18:15",
    "text": "no problem, sorry email clients suck in that regard"
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2019-05-20 12:18:22",
    "text": "in many regards"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 12:22:06",
    "text": "yea to help you with relaying it.\n\nin order to accomodate perfect forwarding, you would have to know which email client was being forwarded from, and which was receiving, even then, you likely have no actual method using css or HTML of preventing it from mangling the code in a non-breaking fashion."
  },
  {
    "poster": {
      "poster_name": "Adrian C. Black",
      "poster_handle": "adriancblack"
    },
    "time_stamp": "2019-05-20 12:54:25",
    "text": "i know you can exclude domain stylesheet when you create a drag and drop template … how do i do this with a coded template?",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-05-20 12:55:58"
      },
      {
        "time_stamp": "2019-05-20 12:59:48"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Adrian C. Black",
      "poster_handle": "adriancblack"
    },
    "time_stamp": "2019-05-20 12:54:30",
    "text": "anybody? :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 12:55:58",
    "text": "good question, thought it would do that by default, but maybe not"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-20 12:57:08",
    "text": "a global stylesheet?"
  },
  {
    "text": "those 2 are global … but on drag and drop templates you can choose to exclude them … how do i exclude them when i build a coded template?",
    "time_stamp": "2019-05-20 12:58:36"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 12:58:40",
    "edited": {
      "time_stamp": "2019-05-20 12:58:54"
    },
    "text": ":point_up_2::skin-tone-2: he’s talking about when you go to page settings, and where you can add domain level stylsheets"
  },
  {
    "poster": {
      "poster_name": "Adrian C. Black",
      "poster_handle": "adriancblack"
    },
    "time_stamp": "2019-05-20 12:59:48",
    "text": "nope … all the previous “crap” is there :disappointed:"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-20 13:00:34",
    "edited": {
      "time_stamp": "2019-05-20 13:00:43"
    },
    "text": "you can use the `|replace('STLESHEETLLINKTAGHERE','')`",
    "reply_count": 51,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2019-05-20 13:02:41"
      },
      {
        "time_stamp": "2019-05-20 13:02:55"
      },
      {
        "time_stamp": "2019-05-20 13:03:10"
      },
      {
        "time_stamp": "2019-05-20 13:04:24"
      },
      {
        "time_stamp": "2019-05-20 13:04:37"
      },
      {
        "time_stamp": "2019-05-20 13:05:04"
      },
      {
        "time_stamp": "2019-05-20 13:05:17"
      },
      {
        "time_stamp": "2019-05-20 13:05:21"
      },
      {
        "time_stamp": "2019-05-20 13:05:29"
      },
      {
        "time_stamp": "2019-05-20 13:05:43"
      },
      {
        "time_stamp": "2019-05-20 13:05:54"
      },
      {
        "time_stamp": "2019-05-20 13:06:11"
      },
      {
        "time_stamp": "2019-05-20 13:12:25"
      },
      {
        "time_stamp": "2019-05-20 13:12:47"
      },
      {
        "time_stamp": "2019-05-20 13:12:52"
      },
      {
        "time_stamp": "2019-05-20 13:13:18"
      },
      {
        "time_stamp": "2019-05-20 13:13:23"
      },
      {
        "time_stamp": "2019-05-20 13:13:40"
      },
      {
        "time_stamp": "2019-05-20 13:14:06"
      },
      {
        "time_stamp": "2019-05-20 13:14:45"
      },
      {
        "time_stamp": "2019-05-20 13:18:36"
      },
      {
        "time_stamp": "2019-05-20 13:19:07"
      },
      {
        "time_stamp": "2019-05-20 13:19:16"
      },
      {
        "time_stamp": "2019-05-20 13:19:21"
      },
      {
        "time_stamp": "2019-05-20 13:19:48"
      },
      {
        "time_stamp": "2019-05-20 13:20:47"
      },
      {
        "time_stamp": "2019-05-20 13:21:03"
      },
      {
        "time_stamp": "2019-05-20 13:21:26"
      },
      {
        "time_stamp": "2019-05-20 13:21:58"
      },
      {
        "time_stamp": "2019-05-20 13:22:01"
      },
      {
        "time_stamp": "2019-05-20 13:22:38"
      },
      {
        "time_stamp": "2019-05-20 13:23:00"
      },
      {
        "time_stamp": "2019-05-20 13:23:07"
      },
      {
        "time_stamp": "2019-05-20 13:23:18"
      },
      {
        "time_stamp": "2019-05-20 13:25:01"
      },
      {
        "time_stamp": "2019-05-20 13:25:17"
      },
      {
        "time_stamp": "2019-05-20 13:27:45"
      },
      {
        "time_stamp": "2019-05-20 14:08:54"
      },
      {
        "time_stamp": "2019-05-20 14:09:05"
      },
      {
        "time_stamp": "2019-05-20 14:09:16"
      },
      {
        "time_stamp": "2019-05-20 14:55:05"
      },
      {
        "time_stamp": "2019-05-20 14:55:18"
      },
      {
        "time_stamp": "2019-05-20 14:55:33"
      },
      {
        "time_stamp": "2019-05-20 14:55:51"
      },
      {
        "time_stamp": "2019-05-20 14:56:03"
      },
      {
        "time_stamp": "2019-05-20 14:56:24"
      },
      {
        "time_stamp": "2019-05-20 14:56:35"
      },
      {
        "time_stamp": "2019-05-20 14:57:00"
      },
      {
        "time_stamp": "2019-05-20 14:57:38"
      },
      {
        "time_stamp": "2019-05-20 14:58:11"
      },
      {
        "time_stamp": "2019-05-20 15:56:41"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 13:02:41",
    "text": "if you go this route i’d advise leaving a comment explaining it so you or someone after you when looking at it doesn’t go “What is up with these hacks?”"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-20 13:02:55",
    "text": "yeah"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-20 13:03:10",
    "text": "this is why you shouldt add many things to the global settings"
  },
  {
    "poster": {
      "poster_name": "Adrian C. Black",
      "poster_handle": "adriancblack"
    },
    "time_stamp": "2019-05-20 13:04:24",
    "text": "this is what standard header includes spits out"
  },
  {
    "poster": {
      "poster_name": "Adrian C. Black",
      "poster_handle": "adriancblack"
    },
    "time_stamp": "2019-05-20 13:04:37",
    "text": "``` String: &lt;script src=\"/hs/hsstatic/jquery-libs/static-1.1/jquery/jquery-1.7.1.js\"&gt;&lt;/script&gt; &lt;script&gt;hsjQuery = window['jQuery'];&lt;/script&gt; &lt;link href=\"/hs/hsstatic/content_shared_assets/static-1.4091/css/public_common.css\" rel=\"stylesheet\" &gt; &lt;meta property=\"og:description\" content=\"\"&gt; &lt;meta property=\"og:title\" content=\"\"&gt; &lt;meta name=\"twitter:description\" content=\"\"&gt; &lt;meta name=\"twitter:title\" content=\"\"&gt; {{ head_css() }} {{ head_js() }} {{ js_integration_head() }} {{ js_integration_body_start() }} &lt;link rel=\"canonical\" href=\"<http://info.visionhealth.co.uk/7dea362b-3fac-3e00-956a-4952a3d4f474>\" /&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt; &lt;link href=\"<https://fonts.googleapis.com/css?family=Montserrat>\" rel=\"stylesheet\"&gt; &lt;script type='text/javascript'&gt; window.__lo_site_id = 115062; (function() { var wa = document.createElement('script'); wa.type = 'text/javascript'; wa.async = true; wa.src = '<https://d10lpsik1i8c69.cloudfront.net/w.js>'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(wa, s); })(); &lt;/script&gt; &lt;meta name=\"google-site-verification\" content=\"Bp15pYsTPOh-eJUjBNG6ZEoj9FPyQDsD81oHIeIjSsk\"&gt; &lt;meta property=\"og:url\" content=\"<http://info.visionhealth.co.uk/7dea362b-3fac-3e00-956a-4952a3d4f474>\"/&gt; &lt;script&gt;var hsVars = { app_hs_base_url: '<https://app.HubSpot.com>' };&lt;/script&gt; &lt;meta name=\"twitter:card\" content=\"summary\"&gt; &lt;meta http-equiv=\"content-language\" content=\"en-us\" /&gt; {{ include_default_custom_css(content.include_default_custom_css, template_meta.include_default_custom_css, domain_settings.include_default_custom_css) }} {{ include_attached_css(content_group.attached_stylesheets or domain_settings.attached_stylesheets, content.enable_domain_stylesheets, template_meta.enable_domain_stylesheets, domain_settings.enable_domain_stylesheets) }} {{ include_attached_css(template_meta.attached_stylesheets, content.enable_layout_stylesheets) }} {{ include_attached_css(content.attached_stylesheets) }} {{ require_attached_js(template_meta.attached_js) }} ```"
  },
  {
    "poster": {
      "poster_name": "Adrian C. Black",
      "poster_handle": "adriancblack"
    },
    "time_stamp": "2019-05-20 13:05:04",
    "text": "i see a domain_settings.enable_domain_stylesheets function/snippet in there"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 13:05:17",
    "text": "`{ include_attached_css(template_meta.attached_stylesheets, content.enable_layout_stylesheets) }}`"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 13:05:21",
    "text": "that’s the culprit"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-20 13:05:29",
    "text": "yep"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 13:05:43",
    "text": "i have a feeling it wont work but you can try doing a |replace on the whole function"
  },
  {
    "poster": {
      "poster_name": "Adrian C. Black",
      "poster_handle": "adriancblack"
    },
    "time_stamp": "2019-05-20 13:05:54",
    "text": "so is there a filter"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 13:06:11",
    "text": "that’s what |replace is for"
  },
  {
    "poster": {
      "poster_name": "Adrian C. Black",
      "poster_handle": "adriancblack"
    },
    "time_stamp": "2019-05-20 13:12:25",
    "text": "the filter doesn’t work"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 13:12:47",
    "text": "k then you probably have to do it on the actual output"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 13:12:52",
    "text": "figured that’d be the case"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 13:13:18",
    "text": "so you’ll have to do exactly as :chad2:  suggested replace the whole tag"
  },
  {
    "poster": {
      "poster_name": "Adrian C. Black",
      "poster_handle": "adriancblack"
    },
    "time_stamp": "2019-05-20 13:13:23",
    "text": "```    {{ standard_header_includes|replace(\"{{ include_default_custom_css(content.include_default_custom_css, template_meta.include_default_custom_css, domain_settings.include_default_custom_css) }} {{ include_attached_css(content_group.attached_stylesheets or domain_settings.attached_stylesheets, content.enable_domain_stylesheets, template_meta.enable_domain_stylesheets, domain_settings.enable_domain_stylesheets) }} {{ include_attached_css(template_meta.attached_stylesheets, content.enable_layout_stylesheets) }} {{ include_attached_css(content.attached_stylesheets) }} {{ require_attached_js(template_meta.attached_js) }}\",\"\")|pprint }}\n```"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-20 13:13:40",
    "text": "the compiled tag"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-20 13:14:06",
    "text": "i.e. `&lt;link href\"\" rel=\"stylesheet....\"`"
  },
  {
    "poster": {
      "poster_name": "Adrian C. Black",
      "poster_handle": "adriancblack"
    },
    "time_stamp": "2019-05-20 13:14:45",
    "text": "i don’t get it :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Adrian C. Black",
      "poster_handle": "adriancblack"
    },
    "time_stamp": "2019-05-20 13:18:36",
    "text": "what do you mean do it on the output … javascript?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 13:19:07",
    "text": "no. you |replace the output, not the hubl"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 13:19:16",
    "text": "the link tags are the output of that function"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-20 13:19:21",
    "text": ":point_up_2::skin-tone-5:"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-20 13:19:48",
    "text": "find the output link tag and add that to your replace filter"
  },
  {
    "poster": {
      "poster_name": "Adrian C. Black",
      "poster_handle": "adriancblack"
    },
    "time_stamp": "2019-05-20 13:20:47",
    "text": "this ```&lt;link rel=\"stylesheet\" href=\"//cdn2.HubSpot.net/hub/2538107/hub_generated/template_assets/1544241673106/custom/page/styles/style_manager_base_vision.min.css\"&gt;```"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 13:21:03",
    "text": "yes\\"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-20 13:21:26",
    "text": "looks right to me"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-20 13:21:58",
    "text": "i feel like a city public worker leaning on my shovel handle telling another worker how to dig a hole!"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-20 13:22:01",
    "text": ":slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Adrian C. Black",
      "poster_handle": "adriancblack"
    },
    "time_stamp": "2019-05-20 13:22:38",
    "text": "```{{ standard_header_includes|replace('&lt;link rel=\"stylesheet\" href=\"//cdn2.HubSpot.net/hub/2538107/hub_generated/template_assets/1544241673106/custom/page/styles/style_manager_base_vision.min.css\"&gt;','')}}```"
  },
  {
    "poster": {
      "poster_name": "Adrian C. Black",
      "poster_handle": "adriancblack"
    },
    "time_stamp": "2019-05-20 13:23:00",
    "text": "if that’s what you mean it doesn’t work"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-20 13:23:07",
    "text": "herm"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 13:23:18",
    "text": ":disappointed:"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-20 13:25:01",
    "text": "moving the css file to template level may be your only way to do this."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-20 13:25:17",
    "text": "thereby not adding it where you do not want it"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 13:27:45",
    "text": "possible lazier option.\n\nhave a hubl var get set in all of your new templates before the header includes.\n\nmove your stylesheet link to be in the domain &lt;head&gt; within a `{% unless previously_mentioned_var %}`"
  },
  {
    "poster": {
      "poster_name": "Adrian C. Black",
      "poster_handle": "adriancblack"
    },
    "time_stamp": "2019-05-20 14:08:54",
    "text": "it’s like this aparently"
  },
  {
    "poster": {
      "poster_name": "Adrian C. Black",
      "poster_handle": "adriancblack"
    },
    "time_stamp": "2019-05-20 14:09:05",
    "text": "```{{ standard_header_includes|cut('{{ include_attached_css(content_group.attached_stylesheets or domain_settings.attached_stylesheets, content.enable_domain_stylesheets, template_meta.enable_domain_stylesheets, domain_settings.enable_domain_stylesheets) }}') }}```"
  },
  {
    "poster": {
      "poster_name": "Adrian C. Black",
      "poster_handle": "adriancblack"
    },
    "time_stamp": "2019-05-20 14:09:16",
    "text": "|cut(……"
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2019-05-20 14:55:05",
    "text": "in that same vein, is there a way to omit the Site header HTML and Site footer HTML that's added globally? (Settings &gt; Website &gt; Pages &gt; Templates)"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 14:55:18",
    "text": "no."
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2019-05-20 14:55:33",
    "text": "well damn the man."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 14:55:51",
    "text": "not really, and not in a safe way. there are hacks you can do like using this cut method to manually cut each thing out"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 14:56:03",
    "text": "but you might shoot yourself in the foot"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-20 14:56:24",
    "text": "kinda like shooting yourself in the foot with a shot gun"
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2019-05-20 14:56:35",
    "text": "that doesn't sound like much fun"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-20 14:57:00",
    "text": "or death by a thousand cuts. take your pick"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 14:57:38",
    "edited": {
      "time_stamp": "2019-05-20 14:57:51"
    },
    "text": ":dagger_knife::sprocky:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-20 14:58:11",
    "text": "Sprocky is way more intimidating with a dagger"
  },
  {
    "poster": {
      "poster_name": "Adrian C. Black",
      "poster_handle": "adriancblack"
    },
    "time_stamp": "2019-05-20 15:56:41",
    "text": "ob by being in kings landing last week :wink:"
  }
]