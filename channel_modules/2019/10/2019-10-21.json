[
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-10-21 12:20:45",
    "text": "Ok, question on bringing in modules into a coded template locally."
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-10-21 12:21:19",
    "text": "I would before just right click the module in the DM and copy snippet, giving me a randomly generated module ID"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-10-21 12:21:39",
    "text": "whats the syntax to do this locally?"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-10-21 12:21:53",
    "text": "eg:"
  },
  {
    "text": "",
    "time_stamp": "2019-10-21 12:22:23"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-10-21 12:22:30",
    "text": "would give this:"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-10-21 12:22:40",
    "text": "```{% module \"module_156641099930836\" path=\"/markup/modules_from_blocks/label_tab\", label=\"label_tab\" %}```"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-10-21 12:24:06",
    "text": "do we even still need that `module_xxxxxxx`",
    "reply_count": 24,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2019-10-21 12:25:14"
      },
      {
        "time_stamp": "2019-10-21 12:25:38"
      },
      {
        "time_stamp": "2019-10-21 12:25:43"
      },
      {
        "time_stamp": "2019-10-21 12:26:52"
      },
      {
        "time_stamp": "2019-10-21 12:27:26"
      },
      {
        "time_stamp": "2019-10-21 12:27:40"
      },
      {
        "time_stamp": "2019-10-21 12:27:41"
      },
      {
        "time_stamp": "2019-10-21 12:27:46"
      },
      {
        "time_stamp": "2019-10-21 12:30:57"
      },
      {
        "time_stamp": "2019-10-21 12:33:29"
      },
      {
        "time_stamp": "2019-10-21 12:45:40"
      },
      {
        "time_stamp": "2019-10-21 12:45:43"
      },
      {
        "time_stamp": "2019-10-21 12:58:17"
      },
      {
        "time_stamp": "2019-10-21 13:08:27"
      },
      {
        "time_stamp": "2019-10-21 13:09:21"
      },
      {
        "time_stamp": "2019-10-21 13:09:42"
      },
      {
        "time_stamp": "2019-10-21 13:10:30"
      },
      {
        "time_stamp": "2019-10-21 13:42:38"
      },
      {
        "time_stamp": "2019-10-21 13:43:14"
      },
      {
        "time_stamp": "2019-10-21 13:44:06"
      },
      {
        "time_stamp": "2019-10-21 13:44:17"
      },
      {
        "time_stamp": "2019-10-21 15:08:45"
      },
      {
        "time_stamp": "2019-10-21 15:35:33"
      },
      {
        "time_stamp": "2019-10-21 16:32:13"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-10-21 12:25:14",
    "text": "I believe so.... do you use VS code? I made a snippet to do this"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-10-21 12:25:38",
    "edited": {
      "time_stamp": "2019-10-21 12:25:51"
    },
    "text": "aw dope, thats what I am looking for. yeah, the cli errors with no id"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-10-21 12:25:43",
    "text": "```{\n\t\"hsModule\": {\n\t  \"prefix\": [\n\t\t\"hsModule\"\n\t  ],\n\t  \"body\": [\n\t\t\"{% module \\\"module_$CURRENT_YEAR$CURRENT_MONTH$CURRENT_DATE$CURRENT_HOUR$CURRENT_MINUTE$CURRENT_SECOND\\\" path=\\\"/_polaris/modules/${4:moduleName}\\\" %}\",\n\t  ],\n\t  \"description\": \"Choice-Type Field\"\n\t},\n\t\"hsField--choice\": {\n\t  \"prefix\": [\n\t\t\"hsField--choice\"\n\t  ],\n\t  \"body\": [\n\t\t\"{\",\n\t\t\"\\\"name\\\" : \\\"${1:fieldName}\\\",\",\n\t\t\"\\\"label\\\" : \\\"${2:Field Label}\\\",\",\n\t\t\"\\\"sortable\\\" : false,\",\n\t\t\"\\\"required\\\" : false,\",\n\t\t\"\\\"locked\\\" : false,\",\n\t\t\"\\\"display\\\" : \\\"${3|select,radio|}\\\",\",\n\t\t\"\\\"choices\\\" : [[\\\"${4:choice1}\\\",\\\"${4:choice1}\\\"],[\\\"${5:choice2}\\\",\\\"${5:choice2}\\\"],[\\\"${6:choice3}\\\",\\\"${6:choice3}\\\"]],\",\n\t\t\"\\\"type\\\" : \\\"choice\\\",\",\n\t\t\"\\\"default\\\" : \\\"${4:choice1}\\\"\",\n\t\t\"}\"\n\t  ],\n\t  \"description\": \"Choice-Type Field\"\n\t}\n  }```"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-10-21 12:26:52",
    "text": "so type `hsModule` and fill out the rest... and you can edit so it matches your file path convention"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-10-21 12:27:26",
    "text": "it uses the current time to generate that random number"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-10-21 12:27:40",
    "text": "is this how I would implement the snippet?"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-10-21 12:27:41",
    "text": "<https://stackoverflow.com/questions/29995863/how-to-add-custom-code-snippets-in-vscode>"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-10-21 12:27:46",
    "text": "never done it before"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-10-21 12:30:57",
    "edited": {
      "time_stamp": "2019-10-21 12:31:12"
    },
    "text": "there are many snippets included with Will Spiro's HubSpot VS Code extension too, but I don't think the module include is in there.  But I think he has all the different types of fields for when you're editing the fields.json files."
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-10-21 12:33:29",
    "text": "Ah, gotcha. I knew about <@U6W3H6YN8>’s extension, but hadn't really used it yet. I think I got it figured. Thanks man!"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-10-21 12:45:40",
    "text": "You could include it and do a pull request."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-10-21 12:45:43",
    "edited": {
      "time_stamp": "2019-10-21 12:45:47"
    },
    "text": "he’d appreciate that"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-10-21 12:58:17",
    "text": "yeah, this thing is dope. throw it in there!"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-10-21 13:08:27",
    "text": "Hmm, don't have much time today, but taking a quick glance at the source files it looks like the extensions are dynamically generated by a python script pulling the extension data from a HubSpot api... so I think it would need to be added to the api?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-10-21 13:09:21",
    "text": "hmm"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-10-21 13:09:42",
    "text": "i know others have added functionality so im sure its possible"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-10-21 13:10:30",
    "text": "oo, maybe found something"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2019-10-21 13:42:38",
    "edited": {
      "time_stamp": "2019-10-21 13:42:42"
    },
    "text": "The module`tag` actually is in there, but it is not very helpful in this state: <https://github.com/williamspiro/HubL-Language-Extension/blob/master/snippets/auto_gen/hubl_tags.json#L300-L305>"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2019-10-21 13:43:14",
    "edited": {
      "time_stamp": "2019-10-21 13:43:31"
    },
    "text": "Everything in auto_gen is generated from an API, but you can add manual snippets here: <https://github.com/williamspiro/HubL-Language-Extension/tree/master/snippets/man_gen>"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2019-10-21 13:44:06",
    "edited": {
      "time_stamp": "2019-10-21 13:44:11"
    },
    "text": "And then you can tell the auto_gen snippets generator script to skip certain HubL here: <https://github.com/williamspiro/HubL-Language-Extension/blob/master/hubl_snippets_gen.py#L5>\n\nSo if you wanted to manually define `module` tag you could skip it in the auto gen"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2019-10-21 13:44:17",
    "text": "But any and all contributions are welcome :smile_cat:"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-10-21 15:08:45",
    "text": "Yes, just discovered that manual section but had to jump into a meeting!"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2019-10-21 15:35:33",
    "edited": {
      "time_stamp": "2019-10-21 15:44:14"
    },
    "text": "<@UEC65BQV8> to answer your question, this is required, and we refer to it as the \"unique module identifier\". It is essentially what separates one instance of a given module from another within the context of a template. It also allows developers to mindfully support template swaps - we will match those unique instance ids when swapping templates.\n\nIt can be whatever you want it to be. Using nice names does make it easier to read as well as the future potential for templates swap being easier."
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-10-21 16:32:13",
    "text": "Thanks <@U6W3H6YN8> I remember the challenge of them being unique within a template otherwise the data just gets duplicated"
  }
]