[
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2025-01-26 11:58:06",
    "text": "<@UG7S8J18D> one very specific thing that React enables that is very useful for both developers and designers is it offers the ability to think of designs even further in the style of atomic design. With HubL we had most of the atomic design pieces except atoms and to an extent molecules. Basically think of buttons, and basic groups of elements that get repeated across a site.\n\nIn HubL themes if you want to share those elements across modules you have to use a hacky import trick at best or at worst you repeat your code. In the modules or have to separate your js and css for those pieces to the template level or use require statements in your modules. \n\nReact is designed all around creating these component abstractions and you can go as deep or as light as you want with it.\n\nOne recurring requested feature for HubSpot was the ability to place modules inside of other modules, to solve for those atoms and molecule reuse type problems. Based on the way HubSpot built modules to work enabling that system has significant challenges. From handling module fields to avoiding the UI for editors becoming exponentially more cumbersome, to performance.\n\nReact however is already a working system that allows those smaller level components.\n\nAdditionally designers love it for it's translation of design concepts to UI/code. Reusing components in a design system, enabling typography, colors, background patterns, image treatments, typography control, taking the abstract design elements and translating them to a way of building in code that brings the designer and developer closer.  Tools like storybook offer great ways for devs designers and the end users to speak in common language about the components etc."
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2025-01-26 12:06:32",
    "text": "Thanks Jon. For explaining that"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2025-01-26 12:09:11",
    "text": ":yougotitdude:  i wrote this post that may add some detail here and also give you a good start on the path of learning react. It's specifically written for HubSpot Content Hub developers."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2025-01-26 12:09:14",
    "text": "<https://developers.HubSpot.com/blog/intro-to-react-for-HubSpot-developers|https://developers.HubSpot.com/blog/intro-to-react-for-HubSpot-developers>"
  },
  {
    "poster": {
      "poster_name": "Teun Rutten",
      "poster_handle": "teun"
    },
    "time_stamp": "2025-01-26 12:10:31",
    "text": "What about macros <@U7SL518D6>? With a good setup, that will allow an atomic design approach"
  },
  {
    "poster": {
      "poster_name": "Anton Bujanowski - Level 36",
      "poster_handle": "info748"
    },
    "time_stamp": "2025-01-26 12:11:31",
    "text": "Yes! I think educating people in writing better themes with atomic approach would be a huge benefit"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2025-01-26 12:11:49",
    "text": "Thats the hacky import method i referred to.\n\nIt functions but has some performance drawbacks in comparison. As well as can result in needing to save files in an order"
  },
  {
    "poster": {
      "poster_name": "Anton Bujanowski - Level 36",
      "poster_handle": "info748"
    },
    "time_stamp": "2025-01-26 12:12:16",
    "text": "Happy to show my setup with everyone who'd like to see it. Super atomic and flexible to every possible usecase"
  },
  {
    "poster": {
      "poster_name": "Anton Bujanowski - Level 36",
      "poster_handle": "info748"
    },
    "time_stamp": "2025-01-26 12:12:25",
    "text": ":slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Teun Rutten",
      "poster_handle": "teun"
    },
    "time_stamp": "2025-01-26 12:12:30",
    "text": "We are waiting for the Serverside rendering to mature a bit before making the switch, but I love the idea that we can do everything with JavaScript."
  },
  {
    "poster": {
      "poster_name": "Teun Rutten",
      "poster_handle": "teun"
    },
    "time_stamp": "2025-01-26 12:12:58",
    "text": "Especially now I'm teaching our team CRM cards, the learning curve for CMS React will be an easy one"
  },
  {
    "poster": {
      "poster_name": "Teun Rutten",
      "poster_handle": "teun"
    },
    "time_stamp": "2025-01-26 12:15:05",
    "text": "UI Extensions &gt; JavaScript (React)\nIntegrations &gt; JavaScript (NodeJS)\nCoded actions &gt; JavaScript (NodeJS)\nCMS &gt; JavaScript (React)"
  },
  {
    "poster": {
      "poster_name": "Teun Rutten",
      "poster_handle": "teun"
    },
    "time_stamp": "2025-01-26 12:15:32",
    "edited": {
      "time_stamp": "2025-01-26 12:16:09"
    },
    "text": "Or TypeScript, because I think that is supported everywhere except coded actions?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2025-01-26 12:18:16",
    "text": "Yeah as Teun noted there is something powerful about using 1 language for frontend and backend work. It's less to learn.\n\nI will admit React itself isnt my personal fave way of doing components. I much prefer Vue and web components + Lit but react is better than not having any component system."
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2025-01-26 13:17:40",
    "text": "TS support is pretty darn big and amazingly helpful when working with HS react themes and projects. No guessing on what props are available as opposed to hubl where you need to memorize them or have docs open. \n\nSever side and client side fetching of data is also a big win. \n\nAs others have noted — react themes enable for really any kind of atomic design approach using JS vs macros. CSS  in JS solutions mean you can easily couple styles with your components and have ample tree shaking so you know all your CSS is meaningful. \n\nIt’s only going to get better! \n\nI hear the argument for sticking with what we are used to. However, this is a really good time to get started with react. Easy enough to start with just building a single module and getting your feet wet. But you really start to see the gains when you use it in a theme. \n\nPostcss processing also allows for all kinds fun ways to boost productivity and write dry portable code. \n\nReact has native security features too like auto escaping rendered content mitigate XSS attacks. Less you need to be overly concerned about when building sites! "
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2025-01-26 13:40:42",
    "text": ":doge: old dog is gonna have to learn some new tricks. I am slow to 'react'. :grin:"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2025-01-26 13:45:59",
    "text": "im not an expert by any means, but i've been using projects and cms react for a while so feel free to reach out if you have any q's"
  }
]