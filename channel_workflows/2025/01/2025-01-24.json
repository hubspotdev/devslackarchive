[
  {
    "poster": {
      "poster_name": "Kevin Lefevre",
      "poster_handle": "kevin.lefevre"
    },
    "time_stamp": "2025-01-24 01:17:22",
    "text": "Hi all :wave:\n\nI would like to manually enroll lots of objects (eg: `Deals`) to a given `Workflow` which performs HS `API` calls (2 per enrollment).\nAs I have approximately 18000 objects to enroll, this will lead to many `429` errors and cause lots of _*retries with exponential backoff*_ leading to consume many calls from to global daily API quota.\n\nHow can I minimize the 429 / retry effect of the Workflow ?\n\nDo you have any tips ? (salt variable, random sleep, native workflow action for this...)\n\nThank you for your help :pray:",
    "reply_count": 5,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2025-01-27 00:29:12"
      },
      {
        "time_stamp": "2025-01-27 01:00:26"
      },
      {
        "time_stamp": "2025-01-27 01:00:27"
      },
      {
        "time_stamp": "2025-02-01 02:30:04"
      },
      {
        "time_stamp": "2025-02-03 02:00:33"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Chuck Patterson",
      "poster_handle": "chuck.patterson"
    },
    "time_stamp": "2025-01-24 09:43:48",
    "text": "Thanks for the advice Noel. The issue here is that I don't want to store this data in HubSpot at all. Is there a way to send an email through HubSpot such that it contains the secrets that I want to send via email and the email formatting/templates that we set up on HubSpot without storing those secrets in HubSpot somehow?"
  },
  {
    "poster": {
      "poster_name": "Noel Williams",
      "poster_handle": "noel.williams"
    },
    "time_stamp": "2025-01-24 09:46:59",
    "text": "yes, you can use customProperties using the single send API. <https://developers.HubSpot.com/docs/guides/api/marketing/emails/single-send-api#customproperties>"
  },
  {
    "poster": {
      "poster_name": "Noel Williams",
      "poster_handle": "noel.williams"
    },
    "time_stamp": "2025-01-24 09:53:21",
    "text": "to clarify, you would use a custom code action to fetch the value from your application and then send the email with the single send API using the value as a customProperty."
  },
  {
    "text": "In the \"Create associations\" workflow action, I was going to use the record ID of a deal to match on for setting association between a ticket and deal. However, in the options for properties, only text field properties can be used to match on. since the Record ID is a number property, it's not an option. As a work around, I had to create a \"Deal ID\" single line text property and a workflow that copies the ID to this field when a Deal is created in order to match for associations.",
    "time_stamp": "2025-01-24 10:08:09"
  },
  {
    "poster": {
      "poster_name": "Noel Williams",
      "poster_handle": "noel.williams"
    },
    "time_stamp": "2025-01-24 10:12:55",
    "text": "I know I could easily use a custom code action to do the associations. However, I try to avoid using code if possible as it limits who can manage the workflow. I try to use default actions where possible to allow \"non-coders\" to manage."
  },
  {
    "poster": {
      "poster_name": "Josh Hanson",
      "poster_handle": "jhanson"
    },
    "time_stamp": "2025-01-24 15:35:53",
    "text": "Hello. Is anyone else having trouble with this? When `contacts` interact with our client's chatbot and give their email, HubSpot merges them with the existing contact and unenrolls them from any workflows they are in. Our client has numerous contacts in timed or annual workflows and it has really been messing things up. Even if we have the button clicked to allow them to re-enroll, they are enrolled from the beginning of the workflow. Are your clients not asking for emails in chatbots? Are there other solutions?",
    "reply_count": 6,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2025-01-28 06:20:00"
      },
      {
        "time_stamp": "2025-01-28 08:00:25"
      },
      {
        "time_stamp": "2025-01-28 08:10:02"
      },
      {
        "time_stamp": "2025-01-28 08:13:59"
      },
      {
        "time_stamp": "2025-01-28 08:18:21"
      },
      {
        "time_stamp": "2025-01-28 08:21:37"
      }
    ]
  }
]