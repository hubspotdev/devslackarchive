[
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 08:34:34",
    "text": "I'm getting errors like `Uncaught Error: Hydration failed because the initial UI does not match what was rendered on the server.` and `Warning: Prop style did not match. Server:` . I don't really need hydration"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 08:34:49",
    "text": "but I do need state / interactivity"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 08:35:01",
    "text": "so do I move my code out of an island and into \"modules\""
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 08:35:02",
    "text": "?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 08:37:53",
    "text": "So with React (and _most_ JS server-rendered frameworks) you can only get state or interactivity with hydration. The hydration part is when all of the event listeners and client code that creates state are set up.\n\nAnd no you do not need to move code out of an island. Going more into this in a :thread:…",
    "reply_count": 66,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-01-06 08:39:06"
      },
      {
        "time_stamp": "2023-01-06 08:39:12"
      },
      {
        "time_stamp": "2023-01-06 08:39:46"
      },
      {
        "time_stamp": "2023-01-06 08:39:57"
      },
      {
        "time_stamp": "2023-01-06 08:41:07"
      },
      {
        "time_stamp": "2023-01-06 08:41:18"
      },
      {
        "time_stamp": "2023-01-06 08:42:15"
      },
      {
        "time_stamp": "2023-01-06 08:42:25"
      },
      {
        "time_stamp": "2023-01-06 08:42:53"
      },
      {
        "time_stamp": "2023-01-06 08:44:36"
      },
      {
        "time_stamp": "2023-01-06 08:44:49"
      },
      {
        "time_stamp": "2023-01-06 08:45:05"
      },
      {
        "time_stamp": "2023-01-06 08:45:49"
      },
      {
        "time_stamp": "2023-01-06 08:46:36"
      },
      {
        "time_stamp": "2023-01-06 08:47:13"
      },
      {
        "time_stamp": "2023-01-06 08:50:26"
      },
      {
        "time_stamp": "2023-01-06 08:50:57"
      },
      {
        "time_stamp": "2023-01-06 08:51:38"
      },
      {
        "time_stamp": "2023-01-06 08:51:52"
      },
      {
        "time_stamp": "2023-01-06 08:55:32"
      },
      {
        "time_stamp": "2023-01-06 08:56:50"
      },
      {
        "time_stamp": "2023-01-06 08:57:55"
      },
      {
        "time_stamp": "2023-01-06 08:58:03"
      },
      {
        "time_stamp": "2023-01-06 09:11:49"
      },
      {
        "time_stamp": "2023-01-06 09:11:56"
      },
      {
        "time_stamp": "2023-01-06 09:12:32"
      },
      {
        "time_stamp": "2023-01-06 09:13:18"
      },
      {
        "time_stamp": "2023-01-06 09:17:58"
      },
      {
        "time_stamp": "2023-01-06 09:18:37"
      },
      {
        "time_stamp": "2023-01-06 09:19:20"
      },
      {
        "time_stamp": "2023-01-06 09:19:44"
      },
      {
        "time_stamp": "2023-01-06 09:19:53"
      },
      {
        "time_stamp": "2023-01-06 09:19:59"
      },
      {
        "time_stamp": "2023-01-06 09:20:04"
      },
      {
        "time_stamp": "2023-01-06 09:20:19"
      },
      {
        "time_stamp": "2023-01-06 09:26:23"
      },
      {
        "time_stamp": "2023-01-06 09:28:02"
      },
      {
        "time_stamp": "2023-01-06 09:30:34"
      },
      {
        "time_stamp": "2023-01-06 09:30:35"
      },
      {
        "time_stamp": "2023-01-06 09:30:39"
      },
      {
        "time_stamp": "2023-01-06 09:33:00"
      },
      {
        "time_stamp": "2023-01-06 09:33:26"
      },
      {
        "time_stamp": "2023-01-06 09:33:32"
      },
      {
        "time_stamp": "2023-01-06 09:34:18"
      },
      {
        "time_stamp": "2023-01-06 09:39:07"
      },
      {
        "time_stamp": "2023-01-06 09:39:09"
      },
      {
        "time_stamp": "2023-01-06 09:39:38"
      },
      {
        "time_stamp": "2023-01-06 09:40:12"
      },
      {
        "time_stamp": "2023-01-06 09:40:20"
      },
      {
        "time_stamp": "2023-01-06 09:41:40"
      },
      {
        "time_stamp": "2023-01-06 09:42:39"
      },
      {
        "time_stamp": "2023-01-06 09:42:44"
      },
      {
        "time_stamp": "2023-01-06 09:44:58"
      },
      {
        "time_stamp": "2023-01-06 09:47:00"
      },
      {
        "time_stamp": "2023-01-06 09:49:21"
      },
      {
        "time_stamp": "2023-01-06 09:50:13"
      },
      {
        "time_stamp": "2023-01-06 09:51:19"
      },
      {
        "time_stamp": "2023-01-06 09:51:32"
      },
      {
        "time_stamp": "2023-01-06 09:55:00"
      },
      {
        "time_stamp": "2023-01-06 09:58:25"
      },
      {
        "time_stamp": "2023-01-06 09:58:49"
      },
      {
        "time_stamp": "2023-01-06 09:59:02"
      },
      {
        "time_stamp": "2023-01-06 09:59:05"
      },
      {
        "time_stamp": "2023-01-06 09:59:13"
      },
      {
        "time_stamp": "2023-01-06 09:59:40"
      },
      {
        "time_stamp": "2023-01-06 10:00:29"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 08:39:06",
    "text": "You mind sharing a snippet of the code you have in your island that is rendering this style property differently in the browser?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 08:39:12",
    "edited": {
      "time_stamp": "2023-01-06 08:40:05"
    },
    "text": "I suspect this is a case where you’ll need to use our `const afterHydration = useAfterIslandHydration()` hook… and I suspect we left that out or didn’t talk much about it in our beta doc"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 08:39:46",
    "text": "yea, I'll share in just one sec. But also, I had `hydrateOn=Load`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 08:39:57",
    "text": "I switched it to none which seems to work"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 08:41:07",
    "text": "```function ColorBox({ color }) {\n  return (\n    &lt;div style={{ backgroundColor: color.hex, color: '#fff' }}&gt;\n      {color.value}\n    &lt;/div&gt;\n  );\n}```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 08:41:18",
    "text": "those boxes are generated randomly"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 08:42:15",
    "text": "Ah, random.. so the server and browser renders are probably generating a different random color :thinking_face: …"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 08:42:25",
    "text": "yea, probably"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 08:42:53",
    "text": "and they'll be different each time / interactively re-generated"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 08:44:36",
    "text": "Do the number of `ColorBox`es rendered change due to some interaction?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 08:44:49",
    "text": "Like does the server render 2 boxes and then a click on the client adds another box?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 08:45:05",
    "text": "potentially but right now it generates a static number of them"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 08:45:49",
    "text": "in the end it will probably be more like how you described, where it keeps generating more of them"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 08:46:36",
    "text": "Ok with a static number, I think the way to go about it is have the random color generation logic live outside of the island. So the random color (or list of random colors?) would get passed into the island as a React prop. Which mean our island framework will “save” those colors for you and make sure the server and browser have the same ones."
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 08:47:13",
    "text": "(Will come back to thoughts on doing this dynamically after getting ^ to work/make sense)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 08:50:26",
    "text": "not 100% sure how to do that but trying stuff now"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 08:50:57",
    "text": "I used a setup similar to the TodoList example"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 08:51:38",
    "text": "Let me see if I can make a quick example on my side that does something like this…"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 08:51:52",
    "text": "I see how to do it now, it wasn't working because I still had hydrateOn set to \"none\""
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 08:55:32",
    "text": "can I pass full Components as props or no?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 08:56:50",
    "text": "No you can’t pass Components or functions as props to an island. Under the covers all of the props passed to an island are serialized (with `JSON.stringify(…)` ) so they can be passed to the browser… that is what ends up in the `window.__islands` global in the browser"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 08:57:55",
    "text": "alright, and just to confirm, I have to use the island if I want to have interaction?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 08:58:03",
    "text": "Yes"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:11:49",
    "text": "alright, so now I'm passing in the values I need to generate"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:11:56",
    "text": "which works / no errors"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:12:32",
    "text": "1. thank you\n2. so....if I want to regenerate those values..."
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 09:13:18",
    "text": "I totally didn’t run or test this code, but maybe this sketch can help give you an idea of one way to have a dynamic number of boxes (and new ones in the browser make their own random color): <https://gist.github.com/timmfin/ffc4cac824e97daa27914ac89ba014ab>"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 09:17:58",
    "text": "(BTW, thanks for going through and asking these questions. Definitely clear that we should start adding documentation and examples for islands. I.e. far more than just the simplest case)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:18:37",
    "text": "definitely happy to help / appreciate the support"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:19:20",
    "text": "trying to learn React + the specific HubSpot requirements makes this all a bit trickier"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:19:44",
    "text": "from what I gather, the island doesn't care what happens after initial load"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:19:53",
    "text": "I can do whatever I want I think..."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:19:59",
    "text": "after loading in those initial colors"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 09:20:04",
    "text": "Yup"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 09:20:19",
    "text": "Post-hydration the client side island code is in “full control”"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 09:26:23",
    "text": "FYI (I might be getting ahead of things but figured I should mention)… In some cases you will need code like `import { useAfterIslandHydration } from '@HubSpot/cms-components'; … const afterHydration = useAfterIslandHydration(); if (afterHydration) /* change some value … */` to write specific logic that:\n• Does not happen in the server render\n• _And_ doesn’t happen in that first hydration render (make sure the first hydration exactly matches the server output)\nA good example of that is if you have some UI inside an island that rendered the current time. The server would render ‘11:23:30’, the first hydration render would also render ‘11:23:30’, and then some timer and state logic would update that timestamp every second).\n\n(Though another approach would be to never render the timestamp on the server and only have a placeholder element there. And then when `afterHydration` is true the island code would start rendering the time instead of that placeholder)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:28:02",
    "text": "I'm going to brain that right after..."
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 09:30:34",
    "text": "And yeah, I freely admit learning React _and_ react server stuff _AND_ HubSpot specific react &amp; island APIs is a lot. Not only do we need to help walk folx through that, but I wonder if it is a good idea for us to say something like… “when you start, maybe”\n• “don’t worry about server rendering too much and put everything in one big island”\n• or “don’t worry about interactivity yet and get comfortable with server rendering first”\n(Eager to listen to feedback like yours to see if a path like that would be useful to start)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:30:35",
    "text": "so far, I'm using the props I pass into the island as the default state in useState"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:30:39",
    "text": "which seems to work / is awesome"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:33:00",
    "text": "I'll think about potentially \"when you start\" directions. I duplicated \"TodoList\" as an example and based everything off of that"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:33:26",
    "text": "if there were more examples that each focused on one thing and then added interactivity (for example)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:33:32",
    "text": "that would be extremely helpful"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 09:34:18",
    "text": "Yeah, that is a great idea. Like a walkthrough going through making something with islands, state, interactivity, etc… starting from scratch and building bit by bit"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:39:07",
    "text": "everything + more works"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:39:09",
    "text": "this is insanely cool"
  },
  {
    "text": "",
    "time_stamp": "2023-01-06 09:39:38"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:40:12",
    "text": "btw, will I potentially run into problems when I try to password protect the page or setup SSO"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:40:20",
    "text": "or that won't matter because it's on the page level?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 09:41:40",
    "edited": {
      "time_stamp": "2023-01-06 09:41:49"
    },
    "text": "Yeah, I don’t think that should impact your JS components at all. At least until if/when you need to pass along info about the specific logged in user/contact to your JS components."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:42:39",
    "text": "yea, i'll need to pass in something that identifies them so that I can grab specific content from HubDB"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:42:44",
    "text": "maybe"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 09:44:58",
    "text": "With where things are right now, you would be doing the “grab from hubdb” inside the hubl template (or a hubl custom module) and then passing that hubdb row data to your JS component (i.e. via a parameter to `{% js_partial path=\"…\" hubdbRow={rowData} %}`)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:47:00",
    "text": "can I pass stuff to `{% js_module %}` in the same way?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 09:49:21",
    "edited": {
      "time_stamp": "2023-01-06 09:51:31"
    },
    "text": "Not really, ~unless you create some module field “hubdbRow” to send the template data through (and never touch that field in the page?~ :grimacing: ~). Because the only way to get data into a JS module at the moment is through fields~\n\nWe’ve gone back and forth on this and need to come up with a better solution."
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 09:50:13",
    "text": "Actually, at the moment I don’t think that workaround would even work."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:51:19",
    "text": "I was planning on requesting the data using a serverless function"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:51:32",
    "text": "but I need something to identify the user"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 09:55:00",
    "text": "Yes, we definitely need to give you a way to pass hubl data into the JS component that renders the module. We will work on this soon.\n\nFar from ideal, but I think the only way to use js rendering jit this case right now would be through a JS partial. So if you needed a module with fields you could have regular HubL module with fields, that gets at the hubdb data, which renders a JS partial (passing along any module field values and hubdb data)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:58:25",
    "text": "interesting...I might not be describing it right because that sounds more complex than I need (I think)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:58:49",
    "text": "in general, I can do something like useEffect -&gt; fetch -&gt; get data from HubDB via a serverless function right?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 09:59:02",
    "text": "inside of the React island"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 09:59:05",
    "text": "Oh, yes"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 09:59:13",
    "text": "But…"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 09:59:40",
    "text": "the fetch will not work on the server"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 10:00:29",
    "edited": {
      "time_stamp": "2023-01-06 10:00:41"
    },
    "text": "Both because we don’t have server data fetching in JS components working on our side yet… and because `useEffect` does nothing on the server"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-06 13:21:35",
    "text": "has anyone tried to setup Tailwind yet? I'm not sure if we have enough access to Vite but maybe...",
    "reply_count": 28,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-01-06 13:29:09"
      },
      {
        "time_stamp": "2023-01-09 14:07:52"
      },
      {
        "time_stamp": "2023-01-11 06:04:59"
      },
      {
        "time_stamp": "2023-01-11 06:12:23"
      },
      {
        "time_stamp": "2023-01-11 06:14:53"
      },
      {
        "time_stamp": "2023-01-11 06:15:08"
      },
      {
        "time_stamp": "2023-01-11 06:15:39"
      },
      {
        "time_stamp": "2023-01-11 06:17:02"
      },
      {
        "time_stamp": "2023-01-11 06:17:29"
      },
      {
        "time_stamp": "2023-01-11 06:52:41"
      },
      {
        "time_stamp": "2023-01-11 06:52:46"
      },
      {
        "time_stamp": "2023-01-11 07:13:33"
      },
      {
        "time_stamp": "2023-01-11 07:14:01"
      },
      {
        "time_stamp": "2023-01-11 07:18:11"
      },
      {
        "time_stamp": "2023-01-11 07:20:15"
      },
      {
        "time_stamp": "2023-01-11 07:32:14"
      },
      {
        "time_stamp": "2023-01-11 07:35:41"
      },
      {
        "time_stamp": "2023-01-11 07:39:01"
      },
      {
        "time_stamp": "2023-01-11 07:39:41"
      },
      {
        "time_stamp": "2023-01-11 07:47:27"
      },
      {
        "time_stamp": "2023-01-11 07:47:38"
      },
      {
        "time_stamp": "2023-01-11 07:51:15"
      },
      {
        "time_stamp": "2023-01-11 07:55:43"
      },
      {
        "time_stamp": "2023-01-11 07:55:56"
      },
      {
        "time_stamp": "2023-01-11 07:56:19"
      },
      {
        "time_stamp": "2023-01-11 07:57:10"
      },
      {
        "time_stamp": "2023-01-11 07:57:29"
      },
      {
        "time_stamp": "2023-01-11 08:13:14"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-06 13:29:09",
    "text": "I don’t know a lot about tailwind, but looking at <https://tailwindcss.com/docs/guides/vite> I don’t see any custom Vite configuration needed.\n\nSo when we start allowing you to add your own third party deps to be used in the build, I believe things will work. (And you could try to see if following these steps work locally… but things will certainly fail during the `hs project upload` build because `tailwindcss` will not be installed the build environment)"
  }
]