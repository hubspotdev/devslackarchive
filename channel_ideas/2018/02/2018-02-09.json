[
  {
    "poster": {
      "poster_name": "Tram Dao",
      "poster_handle": "tdao"
    },
    "time_stamp": "2018-02-09 08:44:07",
    "edited": {
      "time_stamp": "2018-02-09 08:45:53"
    },
    "text": "Hey all, I’m a product designer @ HubSpot. We’re exploring the possibility of exposing the source code for drag and drop templates. Would anyone here find that useful?"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2018-02-09 08:47:12",
    "text": "I'm always interested in learning as much as possible about how HubSpot works, so I'd say yes.",
    "reply_count": 5,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-02-09 08:51:47"
      },
      {
        "time_stamp": "2018-02-09 09:01:10"
      },
      {
        "time_stamp": "2018-02-09 09:03:00"
      },
      {
        "time_stamp": "2018-02-09 09:26:25"
      },
      {
        "time_stamp": "2018-02-09 09:27:41"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-02-09 08:47:19",
    "text": "Agreed",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-02-09 08:53:14"
      },
      {
        "time_stamp": "2018-02-09 09:36:53"
      },
      {
        "time_stamp": "2018-02-09 11:56:50"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-02-09 08:48:43",
    "text": "I'm with the other guys here, having more information is generally better for us.\n\ncan't we expose the source code ourselves for those drag and drop templates though by converting one to a coded template?",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-02-09 08:52:53"
      },
      {
        "time_stamp": "2018-02-09 09:08:34"
      },
      {
        "time_stamp": "2018-02-09 11:57:33"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-02-09 08:50:10",
    "text": "We would love that. Now hoe much are we talking?  I imagine being able to change css frameworks or not use a framework at all.",
    "reply_count": 4,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2018-02-09 08:55:13"
      },
      {
        "time_stamp": "2018-02-09 09:08:49"
      },
      {
        "time_stamp": "2018-02-09 09:08:58"
      },
      {
        "time_stamp": "2018-02-09 09:10:19"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Tram Dao",
      "poster_handle": "tdao"
    },
    "time_stamp": "2018-02-09 08:51:47",
    "text": "Great, can you tell me more about how you might use that to learn more about how HubSpot works?"
  },
  {
    "poster": {
      "poster_name": "Tram Dao",
      "poster_handle": "tdao"
    },
    "time_stamp": "2018-02-09 08:52:53",
    "text": "You’re right that you could expose the code by cloning the template to HTML. We’re also thinking of potentially allowing you to see it without having to clone the template"
  },
  {
    "poster": {
      "poster_name": "Tram Dao",
      "poster_handle": "tdao"
    },
    "time_stamp": "2018-02-09 08:53:14",
    "text": "Can you tell me more about how you might use the source code?"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2018-02-09 08:53:36",
    "text": "would this include being able to change things in the standard_header_includes? that would be nice",
    "reply_count": 9,
    "reply_users_count": 6,
    "replies": [
      {
        "time_stamp": "2018-02-09 08:56:28"
      },
      {
        "time_stamp": "2018-02-09 09:01:02"
      },
      {
        "time_stamp": "2018-02-09 09:02:00"
      },
      {
        "time_stamp": "2018-02-09 09:03:23"
      },
      {
        "time_stamp": "2018-02-09 09:03:44"
      },
      {
        "time_stamp": "2018-02-09 09:05:53"
      },
      {
        "time_stamp": "2018-02-09 12:04:17"
      },
      {
        "time_stamp": "2023-07-15 15:23:49"
      },
      {
        "time_stamp": "2023-11-30 09:56:35"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Tram Dao",
      "poster_handle": "tdao"
    },
    "time_stamp": "2018-02-09 08:55:13",
    "text": "That’s interesting Chad. Are you envisioning editing in the source code as well as the drag and drop UI?"
  },
  {
    "poster": {
      "poster_name": "Tram Dao",
      "poster_handle": "tdao"
    },
    "time_stamp": "2018-02-09 08:56:28",
    "text": "Hey Stefan! Can you tell me more about how/why you would want to change things in the header?"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2018-02-09 09:01:02",
    "edited": {
      "time_stamp": "2018-02-09 09:01:58"
    },
    "text": "being able to use (or not use) jQuery and using the latest version, changing the css in layout.css so we can roll our own grid or remove it completely. I typically use coded templates because of these reasons."
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2018-02-09 09:01:10",
    "text": "If you're just talking about exposing the same code that is visible when you export a template to file, then I guess there isn't really any additional value added.  Either way though, it would be nice from a design perspective to be able to see and understand what will be outputted to the browser from the drag and drop interface."
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-02-09 09:02:00",
    "text": "When we create coded templates we often overwrite certain elements like the title, meta tags, and og tags (some basic things that we want to include in pages)"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2018-02-09 09:03:00",
    "text": "I was just hoping that there might be something more on offer here that would give me some deeper insights."
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-02-09 09:03:23",
    "text": "Perhaps a good first step would be just seeing exactly what is included in the standard_header_includes and where all of that information is drawn / compiled from"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-02-09 09:03:44",
    "text": "Or in the rendered HTML having a comment that shows where it starts and ends in hsDebug mode?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-02-09 09:05:53",
    "text": "Here here"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-02-09 09:08:34",
    "text": "My thought - doing this may cause developers to apply styling to HubSpots generated html more resulting in lower quality sites that could break later should you guys need to change anything. What would be helpful to it though is seeing any variables and functions you guys are using under the hood as there are a lot of undocumented ones. "
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-02-09 09:08:49",
    "text": "being able to create a template in html and being able to add a element tag myself and maybe a wrapper `{{tag name='NAME HERE'}}`"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-02-09 09:08:58",
    "text": "to the element or wrapper"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-02-09 09:10:19",
    "text": "I kinda second chads idea. Ive wanted to update the grid HS uses forever but have to use overrides or custom classes to do what i need"
  },
  {
    "text": "<@U7HH7NQKY>",
    "time_stamp": "2018-02-09 09:11:59"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-02-09 09:12:39",
    "text": "the modules could be dragged around within the wrapper added to or removed."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-02-09 09:12:50",
    "text": "but the template is built in html"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-02-09 09:17:12",
    "text": "just me thinking out-loud.. OR using a flex column and getting rid of the extra wrapping html."
  },
  {
    "poster": {
      "poster_name": "Tram Dao",
      "poster_handle": "tdao"
    },
    "time_stamp": "2018-02-09 09:26:25",
    "text": "Got it, thanks for the input Ian"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2018-02-09 09:27:41",
    "text": "My pleasure!"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-02-09 09:36:53",
    "text": "I found some interesting code when i first converted a drag and drop to an coded file. So it'd be cool to see if there was anything else you did in the source code that wasnt shown when coverting to coded template."
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-02-09 09:38:43",
    "text": "As a side note, I'd like to have deeper documentation into some other things you can do with HubL. As some of us have mentioned, you can make use of some Jinja things (like .append) but there is also some other deeper not publicly known functions that i am sure are available in HS, just not documented.",
    "reply_count": 5,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2018-02-09 09:40:17"
      },
      {
        "time_stamp": "2018-02-09 09:41:35"
      },
      {
        "time_stamp": "2018-02-09 11:11:31"
      },
      {
        "time_stamp": "2018-02-11 19:14:03"
      },
      {
        "time_stamp": "2018-02-11 19:14:41"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-02-09 09:40:17",
    "text": "Conspiracy theory? They're hiding things from us! I do think that things are being released as they have been through the gauntlet of testing to decide if they will become a part of \"official\" documentation (I imagine this is because once it's official it's incredibly hard to backtrack without running the risk of breaking live sites)"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-02-09 09:40:29",
    "text": "That and in the author profile have custom fields we can use (like maybe 3 additional custom fields)"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-02-09 09:41:35",
    "text": "agreed, i'm sure alot of it is testing stuff. I'd love to help test functions to try and break them lol"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-02-09 09:50:06",
    "text": "another quick idea:\nIn the developer info there is a spot under `template_meta` labelled `content_tags`. This currently doesnt have any info in it (both listing and post views). Would it be possible to grab the list of tags from the `HS Editor &gt; Settings` area and place them in there?\n\nThis would give us a way to access all the tags available for a blog without us having to use an API to get them."
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-02-09 09:51:39",
    "text": "Either that or placing that information under the `blog` area in the developer info. Something like `blog.content_tags`"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-02-09 11:11:31",
    "text": "since HubL is based on jinja, you should be able to use a lot of jinja functions"
  },
  {
    "poster": {
      "poster_name": "Tram Dao",
      "poster_handle": "tdao"
    },
    "time_stamp": "2018-02-09 11:56:50",
    "text": "Yeah, I can totally see how seeing the under the hood of a template could be helpful"
  },
  {
    "poster": {
      "poster_name": "Tram Dao",
      "poster_handle": "tdao"
    },
    "time_stamp": "2018-02-09 11:57:33",
    "text": "Interesting, I can definitely see how it could be useful for discovering new variables and functions here"
  },
  {
    "poster": {
      "poster_name": "Tram Dao",
      "poster_handle": "tdao"
    },
    "time_stamp": "2018-02-09 12:04:17",
    "text": "Thanks for all the feedback. I can definitely look into ways to surface what’s in the standard_header_includes more clearly as well"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-02-09 14:43:12",
    "edited": {
      "time_stamp": "2018-02-09 14:47:03"
    },
    "text": "I’ve requested this many many times, and will continue to do so until it gets added.\n\nOn HS forms I would really love it if the field wrapper(the .hs-form-field) also had a class that designated it’s field type. example I would love it if it said something like class=“hs_industry_dropdown field hs-form-field *hs-dropdown-field*” or hs-select-field. something to that effect\n\nUse case - every single select box we ever put on a site we customize it’s appearance, and that requires putting an :after on the field’s wrapper. The only way I have to target select fields right now is by the field name class which means any time a marketer wants a new dropdown they have to tell me, and i have to update my code. It really kinda sucks.\n\nI could add JS to automatically add the class - but then I have the problem of not knowing when HS’s JS has finished popping the form in.\n\nThis would also be great for other field types like checkboxes and radio buttons.",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-03-02 05:59:50"
      },
      {
        "time_stamp": "2018-03-02 07:19:27"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-02-09 18:36:58",
    "text": "Have you tried targeting the wrapper then using input[type=&lt;type&gt;] { css here }? <@U7SL518D6> "
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-02-09 18:37:44",
    "edited": {
      "time_stamp": "2018-02-09 18:38:54"
    },
    "text": "yes that’s what I’m doing now - I need to target the wrapper though, not the input field\n\nFor example if you want to style a select field, and you need to re-add the down arrow on the right hand side, you have to do it using an after. Select boxes can’t have an after, so you have to put the after on the wrapper of the field."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-02-09 18:39:55",
    "text": "when you style a select field you use -webkit-appearance:none; appearance:none; which removes the arrow"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-02-09 18:45:42",
    "text": "here’s an example - inspect the select field, you’ll see the arrow isn’t actually part of the select element, it’s the wrapper <https://www.streamcreative.com/contact-us>"
  }
]