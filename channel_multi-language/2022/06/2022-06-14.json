[
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2022-06-14 07:56:50",
    "text": "I feel like hubdb filter views – like google spreadsheet filters or even hs contact filters – would fix this. Users could choose the language columns as a filter view"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2022-06-14 07:57:41",
    "text": "It would also alleviate the poor editing experience with 30 column hubdb’s"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-06-14 08:01:56",
    "text": "The issue is really how do you associate one row in English the other row in German. Sounds like a foreign id thing to me with maybe a “new table” interface similar to what you get when you do a multi lang page or lang variant on a module. "
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2022-06-14 08:06:17",
    "text": "I’d go the “language columns for every string” route. Detect the page lang and serve up the correct strings. But that could clutter up a table real fast. Maybe the new table route fits better with the amount of strings"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-06-14 08:37:58",
    "text": "What do you mean “language column for every string”? Like a single row that has all of the language columns for a dynamic page? I feel like that would be an insanely large table."
  }
]