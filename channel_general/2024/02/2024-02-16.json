[
  {
    "poster": {
      "poster_name": "Anthony Perez",
      "poster_handle": "anthony249"
    },
    "time_stamp": "2024-02-16 01:21:32",
    "text": "<@U029WCYHMDL> is yours not reachable at all or does it just not load any assets? for me i am developing using the CLI and after like 3 reloads my site just gets a bunch of 429 errors"
  },
  {
    "poster": {
      "poster_name": "Federico Mozzo",
      "poster_handle": "federico.mozzo"
    },
    "time_stamp": "2024-02-16 02:09:05",
    "text": "it's still there, but they did their best to hide that as much as possible, to find it now you need to:\n• Click the question mark icon in the header\n• Write whatever you want in the search bar (it doesn't matter what) and press enter\n• A \"Contact us\" dropdown will appear at the bottom of search results, click it to expand\n• You'll find the \"Chat to the team\" button here"
  },
  {
    "text": "Does anyone else find the HubSpot SEO tool too sensitive?\nI’ve hacked the HubSpot CTA’s to improve the loading time (you put the cta inside a textarea tag then load them yourself through JS manipulating them appropriately before adding them too the page and a mutation observer)\nI’ve done this to the point google lighthouse is giving me 100! and yet the HubSpot seo too is telling me to reduce the blocking time, google tells me I have a blocking time of 0ms! not sure how I can improve on that.\n\nThis SEO tool is bad enough that it makes clients think that their SEO is really negatively affected, but to tell clients that their speedy 100% sites are still slow.\n\nGoogle lighthouse still has things to fix but mostly these are to do with HubSpot js assets not caching etc.\nNothing I can do much about",
    "time_stamp": "2024-02-16 02:26:22",
    "reply_count": 49,
    "reply_users_count": 5,
    "replies": [
      {
        "time_stamp": "2024-02-16 02:50:10"
      },
      {
        "time_stamp": "2024-02-16 03:11:30"
      },
      {
        "time_stamp": "2024-02-16 03:21:51"
      },
      {
        "time_stamp": "2024-02-16 03:27:19"
      },
      {
        "time_stamp": "2024-02-16 03:28:02"
      },
      {
        "time_stamp": "2024-02-16 03:28:28"
      },
      {
        "time_stamp": "2024-02-16 03:31:41"
      },
      {
        "time_stamp": "2024-02-16 03:32:38"
      },
      {
        "time_stamp": "2024-02-16 03:33:01"
      },
      {
        "time_stamp": "2024-02-16 03:33:16"
      },
      {
        "time_stamp": "2024-02-16 03:34:38"
      },
      {
        "time_stamp": "2024-02-16 03:38:01"
      },
      {
        "time_stamp": "2024-02-16 03:40:46"
      },
      {
        "time_stamp": "2024-02-16 03:45:19"
      },
      {
        "time_stamp": "2024-02-16 03:47:09"
      },
      {
        "time_stamp": "2024-02-16 03:47:59"
      },
      {
        "time_stamp": "2024-02-16 03:49:59"
      },
      {
        "time_stamp": "2024-02-16 05:18:50"
      },
      {
        "time_stamp": "2024-02-16 05:31:05"
      },
      {
        "time_stamp": "2024-02-16 06:08:04"
      },
      {
        "time_stamp": "2024-02-16 06:08:21"
      },
      {
        "time_stamp": "2024-02-16 06:18:53"
      },
      {
        "time_stamp": "2024-02-16 06:20:01"
      },
      {
        "time_stamp": "2024-02-16 06:20:28"
      },
      {
        "time_stamp": "2024-02-16 06:21:30"
      },
      {
        "time_stamp": "2024-02-16 06:23:40"
      },
      {
        "time_stamp": "2024-02-27 04:34:39"
      },
      {
        "time_stamp": "2024-02-27 04:43:01"
      },
      {
        "time_stamp": "2024-02-27 04:49:08"
      },
      {
        "time_stamp": "2024-02-27 04:49:13"
      },
      {
        "time_stamp": "2024-02-27 04:50:27"
      },
      {
        "time_stamp": "2024-02-27 04:51:05"
      },
      {
        "time_stamp": "2024-02-27 04:52:35"
      },
      {
        "time_stamp": "2024-02-27 04:52:46"
      },
      {
        "time_stamp": "2024-02-27 04:53:27"
      },
      {
        "time_stamp": "2024-02-27 04:53:59"
      },
      {
        "time_stamp": "2024-02-27 04:54:42"
      },
      {
        "time_stamp": "2024-02-27 04:56:00"
      },
      {
        "time_stamp": "2024-02-27 04:56:02"
      },
      {
        "time_stamp": "2024-02-27 04:56:35"
      },
      {
        "time_stamp": "2024-02-27 04:56:59"
      },
      {
        "time_stamp": "2024-02-27 04:58:14"
      },
      {
        "time_stamp": "2024-02-27 04:59:30"
      },
      {
        "time_stamp": "2024-02-27 05:10:32"
      },
      {
        "time_stamp": "2024-02-27 05:25:23"
      },
      {
        "time_stamp": "2024-02-27 05:55:08"
      },
      {
        "time_stamp": "2024-02-27 05:59:00"
      },
      {
        "time_stamp": "2024-02-27 06:12:40"
      },
      {
        "time_stamp": "2024-02-27 06:18:07"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2024-02-16 02:50:10",
    "text": "Also wrote a handy script to convert all HubSpot added fontawesome icons to iconify icons, (iconify is a much more performant way of loading icons on your site)"
  },
  {
    "poster": {
      "poster_name": "Rushik vaghasia",
      "poster_handle": "rushikvaghasiya21"
    },
    "time_stamp": "2024-02-16 03:11:30",
    "text": "<@UDJV5B73R> Are you using textarea tag to predefined the minimum height of CTA to reduce the layout shifting correct?"
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2024-02-16 03:21:51",
    "edited": {
      "time_stamp": "2024-02-16 03:26:32"
    },
    "text": "Nope, So if you use the textarea tag, it encodes all the html e.g. (&lt;span…)\nThis stops browsers from running loading the current.js and stupid images of plain text (I use CSS to style CTAs in my theme so recommend to use plain text in CTAs)\n\nThen I use the mutation observer in a script in the head so each time a cta is added to page (as the html loads) it gets the contents of the textarea strips out the image, get’s the alt text from the image (which is the CTA text) put’s that alt text into the CTA, that then shows on the page with all the correct styling in the initial page load, it also runs the CTA script but for some reason it takes a while from the script running and the CTA being added to the page."
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2024-02-16 03:27:19",
    "edited": {
      "time_stamp": "2024-02-16 03:27:31"
    },
    "text": "The images were also hosted on some platform that doesn’t use html 2.0 so that was also flagging it google lighthouse"
  },
  {
    "poster": {
      "poster_name": "Rushik vaghasia",
      "poster_handle": "rushikvaghasiya21"
    },
    "time_stamp": "2024-02-16 03:28:02",
    "text": "Interesting, Thank you for this,\nI am going to try it today, :smiley:\n\nThanks again!"
  },
  {
    "poster": {
      "poster_name": "Rushik vaghasia",
      "poster_handle": "rushikvaghasiya21"
    },
    "time_stamp": "2024-02-16 03:28:28",
    "text": "<@UDJV5B73R> How do you handle external scripts like GA, GTAG?"
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2024-02-16 03:31:41",
    "text": "To be fair I think the new CTA’s are a bit better and don’t have the silly images,\nNow they added the embeded html options\nStill feel like they should add a super simple version as 99% of CTAs are just a text button so literally just need:\nText\nLink\nWithout all the convoluted  options"
  },
  {
    "text": "I gave up trying to solve all that",
    "time_stamp": "2024-02-16 03:32:38"
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2024-02-16 03:33:01",
    "text": "Just use the standard HubSpot include"
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2024-02-16 03:33:16",
    "text": "website -&gt; pages -&gt; integrations"
  },
  {
    "poster": {
      "poster_name": "Rushik vaghasia",
      "poster_handle": "rushikvaghasiya21"
    },
    "time_stamp": "2024-02-16 03:34:38",
    "text": "Cool,\n\nThank you! :heart:"
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2024-02-16 03:38:01",
    "edited": {
      "time_stamp": "2024-02-16 03:38:22"
    },
    "text": "I also highly recommend this site for guides for best practises far better than any of google or HubSpot’s explanations!\n<https://pagespeedchecklist.com/>\n\nAgain difficult to implement in HubSpot but you can do some of it"
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2024-02-16 03:40:46",
    "text": "also has the best explanation of async and defer\n<https://pagespeedchecklist.com/async-and-defer>\nI’m pretty sure it’s described incorrectly in even some main stream places"
  },
  {
    "poster": {
      "poster_name": "Rushik vaghasia",
      "poster_handle": "rushikvaghasiya21"
    },
    "time_stamp": "2024-02-16 03:45:19",
    "text": "But if we use this website -&gt; pages -&gt; integrations ,then there is no way we can do defer parsing, correct?"
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2024-02-16 03:47:09",
    "text": "correct, you can probably do something better in the Site header HTML,\nI just know that HubSpot integrates the tracking with the cookie banner, and I can’t be bothered to try and set that up manually"
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2024-02-16 03:47:59",
    "text": "and since i’m getting 100 for performance i’m gonna not touch it :sweat_smile:"
  },
  {
    "poster": {
      "poster_name": "Rushik vaghasia",
      "poster_handle": "rushikvaghasiya21"
    },
    "time_stamp": "2024-02-16 03:49:59",
    "text": "Yes :face_with_hand_over_mouth:"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2024-02-16 05:18:50",
    "text": "<@UDJV5B73R> FYI the new CTA tool has an embedded HTML option. Which has very little to no impact on CWV"
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2024-02-16 05:31:05",
    "text": "<https://HubSpotdev.slack.com/archives/C22PU4LV8/p1708079501043149?thread_ts=1708075582.304509&amp;cid=C22PU4LV8>"
  },
  {
    "text": "yeah, thats why Im saying that. The new embeded html version is just a link and text and thats it",
    "time_stamp": "2024-02-16 06:08:04"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2024-02-16 06:08:21",
    "text": "then it can be styled with the theme"
  },
  {
    "text": "Yeah that’s what I said, still overly complicated, you have to choose the scary to clients custom html version.\nFirst option when you create a cta should be something like “Theme Styled Button” with no further options than what you screenshot\nAt the moment you get a million templates\nThen have to click start from scratch\nThen click advanced options and\nThen click embedded html\nBefore you can finally create your super simple button (99% of CTAs our clients use)",
    "time_stamp": "2024-02-16 06:18:53"
  },
  {
    "text": "Also theres some random brackets in there",
    "time_stamp": "2024-02-16 06:20:01"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2024-02-16 06:20:28",
    "text": "I mean sure, its not perfect. But it works :sweat_smile:"
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2024-02-16 06:21:30",
    "edited": {
      "time_stamp": "2024-02-16 06:21:42"
    },
    "text": "I also know at somepoint we should migrate legacy CTAs but the tool’s in beta and we’ve got a lot of clients, much easier to add a script to the page that fixes the legacy CTAs"
  },
  {
    "poster": {
      "poster_name": "Scott Marion",
      "poster_handle": "scott943"
    },
    "time_stamp": "2024-02-16 06:23:40",
    "text": "very interesting discussion!  Thanks!"
  },
  {
    "poster": {
      "poster_name": "Jennifer Nixon",
      "poster_handle": "jnixon"
    },
    "time_stamp": "2024-02-16 08:00:13",
    "text": "Perhaps his video is a better option for his theme and not all themes"
  },
  {
    "poster": {
      "poster_name": "Evan Hessler",
      "poster_handle": "evan568"
    },
    "time_stamp": "2024-02-16 09:00:05",
    "text": "Thank you!"
  },
  {
    "subtype": "bot_message",
    "text": ":sparkles:Slack Tips and Best Practices:sparkles:\n\nTo get the most out the HubSpot Developer Slack, follow these best practices:\n\n• Will your post/question potentially help more than one person? Ask in a public channel instead of 1:1 DMs to help as many folks as possible. \n• Thread all replies to keep topics organized and searchable\n• Thread followup questions/comments to your original post\n• Don't post the same question in multiple channels. If you must, link to your original question in new channels.\nMore <https://slack.com/blog/collaboration/etiquette-tips-in-slack|great tips here>. Thanks for making the HubSpot Developer Slack easier to use for everyone!",
    "username": "Slack Best Practices",
    "time_stamp": "2024-02-16 12:05:04",
    "edited": {
      "time_stamp": "2024-02-16 12:05:07"
    }
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-02-16 13:24:29",
    "text": "Absolutely, I can help with webhook validation in Node.js. To validate a webhook signature, you need to compute the signature on your end using the same method that the webhook provider uses, typically some form of HMAC. For HubSpot specifically, here’s a common way how the validation is done:\n1. Take the client secret you have from HubSpot.\n2. Concatenate the client secret with the request body as it's received in the raw JSON format.\n3. Compute a SHA-256 hash of the concatenated string.\n4. Compare the result with the signature in the 'X-HubSpot-Signature' header from the incoming webhook.\nHere's a brief example of how this might look in a Node.js application:\n\n```const crypto = require('crypto');\n\nfunction validateHubSpotSignature(clientSecret, requestBody, hubSpotSignature) {\n  const hash = crypto.createHash('sha256');\n  hash.update(clientSecret + requestBody); // requestBody should be raw JSON string as received.\n  const calculatedSignature = hash.digest('hex');\n\n  return calculatedSignature === hubSpotSignature;\n}\n\n// Express.js example of extracting the necessary items\n<http://app.post|app.post>('/webhook', express.raw({type: 'application/json'}), (req, res) =&gt; {\n  const clientSecret = 'your-HubSpot-client-secret';\n  const hubSpotSignature = req.headers['x-HubSpot-signature'];\n  const requestBody = req.body.toString(); // Convert the raw buffer to a string.\n\n  if (validateHubSpotSignature(clientSecret, requestBody, hubSpotSignature)) {\n    console.log('Valid Signature');\n    // Process the webhook...\n  } else {\n    console.log('Invalid Signature');\n    // Respond with an error or ignore...\n  }\n\n  res.status(200).send('Webhook received');\n});```\nMake sure that:\n• You're using the raw body and not a parsed version. Middleware like `body-parser` might parse it before you can access the raw body, which could lead to a different signature.\n• The `clientSecret` is correct and is the one provided by HubSpot.\n• You're comparing the computed hash with the correct header signature (`x-HubSpot-signature`).\n"
  }
]