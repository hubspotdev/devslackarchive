[
  {
    "poster": {
      "poster_name": "Yamine  Moussaoui",
      "poster_handle": "yamine"
    },
    "time_stamp": "2023-03-31 01:47:07",
    "text": "hello  everyone,  someone would have a link to the official api doc of the custom code functions in the workflow part of HubSpot, thanks",
    "reply_count": 3,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-03-31 06:07:54"
      },
      {
        "time_stamp": "2023-03-31 06:29:13"
      },
      {
        "time_stamp": "2023-03-31 07:07:15"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Ayaz Madhiya",
      "poster_handle": "madhiya.ayaz"
    },
    "time_stamp": "2023-03-31 05:25:43",
    "text": "Do you know any documentation for field mapping? <@U01QVR44MEY>"
  },
  {
    "poster": {
      "poster_name": "Matt Louden",
      "poster_handle": "matt562"
    },
    "time_stamp": "2023-03-31 06:07:54",
    "text": "Here is the link to the API. There isn't specific documentation for just the custom code workflows. I did include a link to some use cases though that might help whatever you are trying to do. Hope this helps.\n<https://developers.HubSpot.com/docs/api/overview>\n<https://www.HubSpot.com/programmable-automation-use-cases>"
  },
  {
    "poster": {
      "poster_name": "Matt Louden",
      "poster_handle": "matt562"
    },
    "time_stamp": "2023-03-31 06:19:02",
    "text": "I am working on a client's server and attempting to ping this URL:\n<https://api.HubSpot.com/crm/v3/objects/contacts/{email_goes_here}?idProperty=EMAIL>\nI keep getting a 400 error even if the contact exists in the client's portal. So my question is.... why is this happening? I am only trying to retrieve the user's HubSpot ID using their email but it seems the API isn't responding as it should. It works correctly if I ping <https://api.HubSpot.com/crm/v3/objects/contacts/> so it makes me wonder if the API has limitations when retrieving a user by email. <@U01QVR44MEY> what do you think?",
    "reply_count": 11,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-03-31 07:07:52"
      },
      {
        "time_stamp": "2023-03-31 07:14:14"
      },
      {
        "time_stamp": "2023-03-31 07:14:33"
      },
      {
        "time_stamp": "2023-03-31 07:17:16"
      },
      {
        "time_stamp": "2023-03-31 07:25:52"
      },
      {
        "time_stamp": "2023-03-31 07:35:05"
      },
      {
        "time_stamp": "2023-03-31 07:35:27"
      },
      {
        "time_stamp": "2023-03-31 07:38:34"
      },
      {
        "time_stamp": "2023-03-31 08:06:31"
      },
      {
        "time_stamp": "2023-03-31 08:06:45"
      },
      {
        "time_stamp": "2023-03-31 08:06:51"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Yamine  Moussaoui",
      "poster_handle": "yamine"
    },
    "time_stamp": "2023-03-31 06:29:13",
    "text": "thanks for the help"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-31 07:03:44",
    "text": "Currently there isn't a build in field mapping tool in HubSpot"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-31 07:04:17",
    "text": "aside from data sync tool that only HubSpot can build apps with"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-31 07:07:15",
    "text": "Here's the actual docs: <https://developers.HubSpot.com/docs/api/workflows/custom-code-actions>"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-31 07:07:52",
    "text": "Are you using a GET request? also you might want to make EMAIL email instead"
  },
  {
    "poster": {
      "poster_name": "Matt Louden",
      "poster_handle": "matt562"
    },
    "time_stamp": "2023-03-31 07:14:14",
    "text": "Hey <@U01QVR44MEY>. I am making a GET request using axios. Also I did try using email parameter as lowercase as well. Still not working tho. I tried uppercase too to see if it made a difference."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-31 07:14:33",
    "edited": {
      "time_stamp": "2023-03-31 07:15:41"
    },
    "text": "can you share your code?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-31 07:17:16",
    "text": "This is the code for axios that I just ran and tested:\n```const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  url: '<https://api.hubapi.com/crm/v3/objects/contacts/nerds@gmail.com?idProperty=email>',\n  headers: { \n    'Authorization': 'Bearer pat-na1-xxxxxxx'\n  }\n};\n\naxios.request(config)\n.then((response) =&gt; {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) =&gt; {\n  console.log(error);\n});```"
  },
  {
    "poster": {
      "poster_name": "Yamine  Moussaoui",
      "poster_handle": "yamine"
    },
    "time_stamp": "2023-03-31 07:19:53",
    "text": "in my post man I want to be able to, Retrieve contacts associated with housing, and see what it gives me.\n\nThe url looks like this: <https://api.hubapi.com/crm-associations/v1/associations/${associatedVid}/HubSpot_DEFINED/3?limit=100&amp;offset=0&amp;includeDeletes=false>.\n\nin my body I have this answer : {\n    \"results\": [],\n    \"hasMore\": false,\n    \"offset\": 0\n}\n\nwhile concretely the exemple on which I work has well contacts associated with the housing\n\nthank you for your possible help",
    "reply_count": 11,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-03-31 07:37:55"
      },
      {
        "time_stamp": "2023-03-31 07:58:51"
      },
      {
        "time_stamp": "2023-03-31 07:59:22"
      },
      {
        "time_stamp": "2023-03-31 07:59:41"
      },
      {
        "time_stamp": "2023-03-31 07:59:51"
      },
      {
        "time_stamp": "2023-03-31 08:01:31"
      },
      {
        "time_stamp": "2023-03-31 08:02:01"
      },
      {
        "time_stamp": "2023-03-31 08:02:03"
      },
      {
        "time_stamp": "2023-03-31 08:02:45"
      },
      {
        "time_stamp": "2023-03-31 08:03:43"
      },
      {
        "time_stamp": "2023-03-31 14:02:20"
      }
    ]
  },
  {
    "text": "```axios.get('<https://api.HubSpot.com/crm/v3/objects/contacts/>' + $email + '?idProperty=EMAIL', {\n  headers: {\n      'Authorization': 'Bearer XXXXX',\n      'content-type': 'application/json'\n    }\n  }).then(response =&gt; {\n console.log(JSON.stringify(response.data));\n  }).catch(error =&gt; {\n    console.log(error);\n  });```\nI had something similar to that. I am going to retry today but yesterday I wasn't having much luck.",
    "time_stamp": "2023-03-31 07:25:52"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-31 07:35:05",
    "text": "Honestly I think you were should be working fine, but do you want to just try my request just to double check"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-31 07:35:27",
    "text": "another option is you could use the search endpoint to fine the contacts but that's really not the best"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-31 07:37:55",
    "text": "is housing a custom object or a deal?"
  },
  {
    "poster": {
      "poster_name": "Matt Louden",
      "poster_handle": "matt562"
    },
    "time_stamp": "2023-03-31 07:38:34",
    "text": "Yes I am definitely going to try your request code. Thanks for that. I also tried to use the HubSpot api node package as well but still ran into same problems. The search API was another option I thought about but I too didn't think it was a good option."
  },
  {
    "poster": {
      "poster_name": "Yamine  Moussaoui",
      "poster_handle": "yamine"
    },
    "time_stamp": "2023-03-31 07:58:51",
    "text": "housing is a custom object"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-31 07:59:22",
    "text": "Well the code you're running is trying to use a deal to pull associated contacts"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-31 07:59:41",
    "text": "what's the typeid for housing?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-31 07:59:51",
    "text": "it should be a 2-XXXXX number"
  },
  {
    "poster": {
      "poster_name": "Yamine  Moussaoui",
      "poster_handle": "yamine"
    },
    "time_stamp": "2023-03-31 08:01:31",
    "text": "ah, could you refer me to a link for this kind of endpoint please"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-31 08:02:01",
    "text": "Well first thing is you'll want to use the v4 endpoint instead of the v1 one"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-31 08:02:03",
    "text": "<https://developers.HubSpot.com/docs/api/crm/associations>"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-31 08:02:45",
    "text": "```/crm/v4/objects/{objectType}/{objectId}/associations/0-1```\nThis will be the endpoint you'll want to use. you'll need to put in the type id and object id"
  },
  {
    "poster": {
      "poster_name": "Yamine  Moussaoui",
      "poster_handle": "yamine"
    },
    "time_stamp": "2023-03-31 08:03:43",
    "text": "perfect, thanks for the help"
  },
  {
    "poster": {
      "poster_name": "Matt Louden",
      "poster_handle": "matt562"
    },
    "time_stamp": "2023-03-31 08:06:31",
    "text": "Axios request works btw. Thanks for that. Very odd get doesn't work. I've used get with other APIs so I'm not sure whats going on there."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-31 08:06:45",
    "text": "Oh sick"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-31 08:06:51",
    "text": "yeah that is strange"
  },
  {
    "subtype": "thread_broadcast",
    "time_stamp": "2023-03-31 12:02:40",
    "edited": {
      "time_stamp": "2023-03-31 12:05:19"
    },
    "text": "<@U01QVR44MEY> is there a way to loop automatically through all pages? or you put subsequents  `if (response.paging.next.after) { /*call the api again*/}`  over and over again?"
  },
  {
    "text": "Sure you can use this endpoint:",
    "time_stamp": "2023-03-31 12:30:10"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-31 12:30:21",
    "text": "and do paging just like crm objects"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "lchausse"
    },
    "time_stamp": "2023-03-31 12:31:11",
    "text": "heumm... I meant pages of results"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "lchausse"
    },
    "time_stamp": "2023-03-31 12:31:13",
    "text": "not cms pages"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "lchausse"
    },
    "time_stamp": "2023-03-31 12:39:41",
    "edited": {
      "time_stamp": "2023-03-31 12:41:11"
    },
    "text": "What i meant is search through a list of crm objects (endpoint GET*`/crm/v3/objects/{objectType}`*)\n\nIs the best way to chain if statements like this to cover the number of expected results:\n```  const projectsPage1 = await listProjectRecord(objectType, limit, after, properties, archived)\n\n  //check if there is a page 2\n  if (projectsPage1.paging.next.after) {\n    var after = projectsPage1.paging.next.after;\n    const projectsPage2 = await listProjectRecord(objectType, limit, after, properties, archived)\n    console.log(\"There is a page 2\")\n    //check if there is a page 3\n    if (projectsPage2.paging.next.after) {\n      var after = projectsPage2.paging.next.after;\n      const projectsPage3 = await listProjectRecord(objectType, limit, after, properties, archived)\n      console.log(\"There is a page 3\")\n      \n    }\n    else {\n      var allProjects = [...projectsPage1.results, ...projectsPage2.results];\n      console.log(\"There is no page 3\")\n    }\n  }  \n  else {\n    var allProjects = projectsPage1.results\n    console.log(\"There is no page 2\")\n  }```\n or is there a more scalable way of doing this that wouldn't assume the number of result pages\n\nBecause in my code above, if someday I have more than 300 records, this would no longer work. So I need to add more if statements to be sure to future proof the solution.\n\nI hope there is some way of looping it automatically"
  },
  {
    "poster": {
      "poster_name": "Schuyler Maclay",
      "poster_handle": "smaclay"
    },
    "time_stamp": "2023-03-31 13:16:45",
    "text": "you can do a while loop, `while (hasMore)`  and then after the call set hasMore `if (projectsPage.paging.next.after) hasMore = false`"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "lchausse"
    },
    "time_stamp": "2023-03-31 14:01:45",
    "text": "<@U034X9K26MD> brilliant. This is exactly what I needed!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-31 14:02:20",
    "text": "for sure"
  },
  {
    "poster": {
      "poster_name": "Schuyler Maclay",
      "poster_handle": "smaclay"
    },
    "time_stamp": "2023-03-31 14:03:50",
    "text": "I had an error in that psuedo code,  should be `if (!projectsPage.paging.next.after) hasMore = false`  but I think you get the general idea"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "lchausse"
    },
    "time_stamp": "2023-03-31 14:05:14",
    "edited": {
      "time_stamp": "2023-03-31 14:05:35"
    },
    "text": "Yes! I just needed you to point me in that while loop direction"
  }
]