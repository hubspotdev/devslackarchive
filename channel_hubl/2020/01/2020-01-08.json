[
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2020-01-08 08:31:47",
    "text": "Cool!"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2020-01-08 08:32:02",
    "text": "and your company is in Vancouver?"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2020-01-08 08:39:09",
    "text": "Head office is in Vancouver, but we have a similarly sized office in Toronto"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2020-01-08 09:00:54",
    "text": "ok great"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2020-01-08 09:01:09",
    "text": "do you have a big team using HubSpot?"
  },
  {
    "poster": {
      "poster_name": "Diego Valle",
      "poster_handle": "dvalle"
    },
    "time_stamp": "2020-01-08 09:05:58",
    "text": "Hi, anyone know how I can remove these comments in my template.\n```&lt;!-- start coded_template: id:24127276121 path:Plantillas/Micrositios/BV - Bi-Vienda/BV - Micrositio - Ajax.html --&gt;\n&lt;!-- end coded_template: id:24127276121 path:Plantillas/Micrositios/BV - Bi-Vienda/BV - Micrositio - Ajax.html --&gt;```\n",
    "reply_count": 56,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2020-01-08 09:09:38"
      },
      {
        "time_stamp": "2020-01-08 09:12:34"
      },
      {
        "time_stamp": "2020-01-08 09:59:38"
      },
      {
        "time_stamp": "2020-01-08 10:13:36"
      },
      {
        "time_stamp": "2020-01-08 12:45:08"
      },
      {
        "time_stamp": "2020-01-08 13:20:29"
      },
      {
        "time_stamp": "2020-01-08 13:22:24"
      },
      {
        "time_stamp": "2020-01-08 13:22:56"
      },
      {
        "time_stamp": "2020-01-08 13:23:10"
      },
      {
        "time_stamp": "2020-01-08 13:23:13"
      },
      {
        "time_stamp": "2020-01-08 13:23:42"
      },
      {
        "time_stamp": "2020-01-08 13:23:58"
      },
      {
        "time_stamp": "2020-01-08 13:28:28"
      },
      {
        "time_stamp": "2020-01-08 13:29:08"
      },
      {
        "time_stamp": "2020-01-08 13:29:13"
      },
      {
        "time_stamp": "2020-01-08 13:29:48"
      },
      {
        "time_stamp": "2020-01-08 13:30:45"
      },
      {
        "time_stamp": "2020-01-08 13:31:24"
      },
      {
        "time_stamp": "2020-01-08 13:34:07"
      },
      {
        "time_stamp": "2020-01-08 13:34:08"
      },
      {
        "time_stamp": "2020-01-08 13:34:41"
      },
      {
        "time_stamp": "2020-01-08 13:35:07"
      },
      {
        "time_stamp": "2020-01-08 13:42:35"
      },
      {
        "time_stamp": "2020-01-08 13:43:12"
      },
      {
        "time_stamp": "2020-01-08 13:43:28"
      },
      {
        "time_stamp": "2020-01-08 13:43:43"
      },
      {
        "time_stamp": "2020-01-08 13:43:47"
      },
      {
        "time_stamp": "2020-01-08 13:44:02"
      },
      {
        "time_stamp": "2020-01-08 13:44:21"
      },
      {
        "time_stamp": "2020-01-08 13:45:00"
      },
      {
        "time_stamp": "2020-01-08 13:45:08"
      },
      {
        "time_stamp": "2020-01-08 13:45:23"
      },
      {
        "time_stamp": "2020-01-08 13:45:26"
      },
      {
        "time_stamp": "2020-01-08 13:45:37"
      },
      {
        "time_stamp": "2020-01-08 13:46:48"
      },
      {
        "time_stamp": "2020-01-08 13:48:03"
      },
      {
        "time_stamp": "2020-01-08 13:48:12"
      },
      {
        "time_stamp": "2020-01-08 13:48:26"
      },
      {
        "time_stamp": "2020-01-08 13:48:30"
      },
      {
        "time_stamp": "2020-01-08 13:49:40"
      },
      {
        "time_stamp": "2020-01-08 13:50:11"
      },
      {
        "time_stamp": "2020-01-08 13:50:35"
      },
      {
        "time_stamp": "2020-01-08 13:51:04"
      },
      {
        "time_stamp": "2020-01-08 13:51:13"
      },
      {
        "time_stamp": "2020-01-08 13:51:23"
      },
      {
        "time_stamp": "2020-01-08 13:51:30"
      },
      {
        "time_stamp": "2020-01-08 13:51:34"
      },
      {
        "time_stamp": "2020-01-08 13:51:36"
      },
      {
        "time_stamp": "2020-01-08 13:51:38"
      },
      {
        "time_stamp": "2020-01-08 13:51:39"
      },
      {
        "time_stamp": "2020-01-08 13:52:01"
      },
      {
        "time_stamp": "2020-01-08 13:52:21"
      },
      {
        "time_stamp": "2020-01-08 13:56:43"
      },
      {
        "time_stamp": "2020-01-08 14:11:09"
      },
      {
        "time_stamp": "2020-01-08 14:11:17"
      },
      {
        "time_stamp": "2020-01-08 14:19:29"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2020-01-08 09:06:33",
    "text": "Unfortunately no.  I built the company site in HubSpot while I was at an agency and then they ended up hiring me in house.  It’s only me working with HubSpot here"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2020-01-08 09:07:39",
    "text": "as a developer or at all? the marketing, service or sales teams don't use HS?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 09:09:38",
    "text": "nope, its pretty much in there. why do you want to remove it?"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2020-01-08 09:12:29",
    "text": "ah. yes, just as a developer.  Our marketing team uses HubSpot a lot.  Sales/Service are working with SalesForce.  We’re actually just using HubSpot as CMS only right now do to legacy Marketing Automation tools"
  },
  {
    "poster": {
      "poster_name": "Diego Valle",
      "poster_handle": "dvalle"
    },
    "time_stamp": "2020-01-08 09:12:34",
    "text": "Because I need print json in a page, to make request with ajax"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2020-01-08 09:19:12",
    "text": "ok I understand"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2020-01-08 09:26:37",
    "text": "I do a lot of work with marketing, service and sales hub so If you think your team want to leverage these tools in the future do not hesitate to ping me ;)"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 09:59:38",
    "text": "Inside your ajax call, just send the data to a div you already have created..."
  },
  {
    "text": "Yes, I know how to print the information, but I need to get the results of the page that I create in HubSpot",
    "time_stamp": "2020-01-08 10:13:36"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2020-01-08 12:45:08",
    "text": "try regexing out html comments via hubl?"
  },
  {
    "poster": {
      "poster_name": "Chris Abplanalp",
      "poster_handle": "cabplanalp"
    },
    "time_stamp": "2020-01-08 12:59:21",
    "text": "I am looking for a way to request the primary domain, vs if I have sub-domains, I have different footers based on primary domain and sub-domains is there a way to just request the primary domain with HubL:\n\n```{% set domain = request.domain %}\n{% if domain ==  <http://mycompany.com|mycompany.com> %}```",
    "reply_count": 9,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2020-01-08 13:28:41"
      },
      {
        "time_stamp": "2020-01-08 14:45:14"
      },
      {
        "time_stamp": "2020-01-08 14:47:57"
      },
      {
        "time_stamp": "2020-01-08 14:56:27"
      },
      {
        "time_stamp": "2020-01-08 15:01:32"
      },
      {
        "time_stamp": "2020-01-08 15:02:00"
      },
      {
        "time_stamp": "2020-01-08 15:03:49"
      },
      {
        "time_stamp": "2020-01-08 15:25:57"
      },
      {
        "time_stamp": "2020-01-08 15:26:03"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Chris Abplanalp",
      "poster_handle": "cabplanalp"
    },
    "time_stamp": "2020-01-08 13:00:42",
    "text": "Instead of writing the direct domain"
  },
  {
    "text": "Yes, I try to remove all comments, but don't work",
    "time_stamp": "2020-01-08 13:20:29"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:22:24",
    "text": "WELL... What I think I would do is I would edit your file you are calling in and add some delimiters to it around the json"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:22:56",
    "text": "like :::{jsoncontenthere}:::"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:23:10",
    "text": "and then spilt the response by :::"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:23:13",
    "text": "then take that section"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:23:42",
    "text": "what kinda data is in teh json file, and why is it saved as a template?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:23:58",
    "text": "Might be better to save it as an actual file in the file manager so it doesn't add those comment lines"
  },
  {
    "poster": {
      "poster_name": "Diego Valle",
      "poster_handle": "dvalle"
    },
    "time_stamp": "2020-01-08 13:28:28",
    "text": "I can't move these json to file, because I make a query 2 tables of HubDB (Join) and result is the json"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:28:41",
    "text": "`{{ content.resolved_domain }}`"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:29:08",
    "text": "How are you generating the json?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:29:13",
    "text": "live in a file?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:29:48",
    "text": "I feel like however you are doing whatever you are doing, you are making it more complicated then it needs to be"
  },
  {
    "text": "",
    "time_stamp": "2020-01-08 13:30:45"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:31:24",
    "text": "are you ajaxing into that page so that you can get the result of an HubDb query?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:34:07",
    "text": "There is some official documentation somewhere but I can't seem to find it"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:34:08",
    "text": "<https://www.bluleadz.com/blog/how-to-load-multiple-hubdb-tables-same-time>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:34:41",
    "text": "<@U38EZFVFE> wrote this article a while back and should help you do what you are trying to do..if I think I understand correctly."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:35:07",
    "text": "you should just directly hit the hubdb calls vs creating a page to query."
  },
  {
    "poster": {
      "poster_name": "Diego Valle",
      "poster_handle": "dvalle"
    },
    "time_stamp": "2020-01-08 13:42:35",
    "text": "Yes, I know how to make multiple calls to hubdb, but I have table depends of other to make searches, the performance is best make the searches with hubl"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:43:12",
    "text": "Then you are going to have to setup your template differently...."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-01-08 13:43:28",
    "text": "why not output the json into the page iteself?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-01-08 13:43:43",
    "text": "is it that much data?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:43:47",
    "text": "thats what he is doing, but he is getting &lt;---- start of template files stuff ----&gt;"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-01-08 13:44:02",
    "edited": {
      "time_stamp": "2020-01-08 13:44:07"
    },
    "text": "no.. into the page that is using the json"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-01-08 13:44:21",
    "text": "not trying to create a json file"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:45:00",
    "text": "in the actual page vs a different page?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-01-08 13:45:08",
    "text": "yep"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:45:23",
    "text": "I'm guessing it has to do with his request params"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-01-08 13:45:26",
    "edited": {
      "time_stamp": "2020-01-08 13:45:48"
    },
    "text": "output it into an object on the page"
  },
  {
    "text": "The reason to make a json is to make a filters of products",
    "time_stamp": "2020-01-08 13:45:37"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-01-08 13:46:48",
    "text": "```var object = [\n  // hubl here\n]```"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:48:03",
    "text": "```{% require_js %}\n&lt;script&gt;\n  var allSchoolData = [\n    {% for row in hubdb_table_rows(module.college_list_table, 'limit=6000') %}\n    \"{{ row.school|trim }}::Sallie Mae:{{ row.sallie_mae &amp;&amp; row.sallie_mae != '0' ? row.sallie_mae : false }},Commonbond:{{ row.commonbond &amp;&amp; row.commonbond != '0' ? row.commonbond : false }},CollegeAve:{{ row.casl &amp;&amp; row.casl != '0' ? row.casl : false }},LendKey:{{ row.lendkey &amp;&amp; row.lendkey != '0' ? row.lendkey : false }},Ascent:{{ row.ascent &amp;&amp; row.ascent != '0' ? row.ascent : false }},Citizens:{{ row.citizens &amp;&amp; row.citizens != '0' ? row.citizens : false }}\"{% if !loop.last %},{% endif %}\n    {% endfor %}\n  ]\n  window.school = ''\n  console.log(allSchoolData)\n&lt;/script&gt;\n{% end_require_js %}```"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-01-08 13:48:12",
    "text": "just letting you know. if its a lot of data your time to first bite will be high"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:48:26",
    "text": "It only appreas to be a few items"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-01-08 13:48:30",
    "text": "ok"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:49:40",
    "text": "<@UHGJ1MN14> that is me making a call to a hubdb table from my html/hubl  window.  I then create a javasript object/array called `allSchoolData` that pretty much creates that array for the content I need"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-01-08 13:50:11",
    "edited": {
      "time_stamp": "2020-01-08 13:50:21"
    },
    "text": "yep… then you can do everything in js just like you want."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-01-08 13:50:35",
    "text": "looping over the object you created using hubl"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:51:04",
    "text": "```var school = $('.psl-widget--school span').text().toLowerCase()\n          let lenderResult = allSchoolData.filter(function(item) {\n            return item.toLowerCase().indexOf(school) &gt; -1\n          })```"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:51:13",
    "text": "then I just filter the result and return what matches"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-01-08 13:51:23",
    "text": "or you can filter :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:51:30",
    "text": "I'm not sure what your exact manipulation of the json is, but it's whatever at your point."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-01-08 13:51:34",
    "text": "or map…"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:51:36",
    "text": "I hope this helps you think of a different way"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:51:38",
    "text": "or reduce"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:51:39",
    "text": "lol"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:52:01",
    "text": "although if you are creating a json object, you shold likely do `Object.keys(....`"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 13:52:21",
    "text": "I'm gonna be on calls for the next hour ish but I'll try to help out if I can"
  },
  {
    "poster": {
      "poster_name": "Diego Valle",
      "poster_handle": "dvalle"
    },
    "time_stamp": "2020-01-08 13:56:43",
    "text": "I have 50 brands and each have 5 products for the moment.\nI can search by price and currency to products (only table products) or I can search by location, price and currency (table products and brands).\n\nThat is to mouch to jquery"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 14:11:09",
    "text": "can you like paste your code for both files that you are working on so I can understand the whole scope of what you are trying to do?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 14:11:17",
    "text": "or send a live link"
  },
  {
    "text": "thes is the code\n*Line 15*: search brands if exist filters:\n• Departamento\n• Municipio\n• Zona\n• Estatus\nZona depend of Municipio and Municipio depend Departamento\n*Line 66*: search to products whit filters:\n• Price\n• Moneda\n• Habitaciones\n• Estatus\n• ID Brands (only if previously searched filter)",
    "time_stamp": "2020-01-08 14:19:29",
    "edited": {
      "time_stamp": "2020-01-08 14:50:02"
    }
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2020-01-08 14:41:56",
    "edited": {
      "time_stamp": "2020-01-08 14:42:23"
    },
    "text": "I have a custom module which pulls in a table and uses `groupby` for a select field. But for the `.grouper` I’m trying to extract the name used with in the `select`, but I cant seem to figure out the right syntax. Any ideas?\n\n `{% for levelGroup in levels|groupby('priority') %}`\n           `{{ levelGroup.grouper }}`\n              `&lt;!-- Doesn't work, gives me {id=1, name='high'...}--&gt;` \n              `...`",
    "reply_count": 9,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2020-01-08 14:43:46"
      },
      {
        "time_stamp": "2020-01-08 14:44:15"
      },
      {
        "time_stamp": "2020-01-08 14:45:30"
      },
      {
        "time_stamp": "2020-01-08 14:48:48"
      },
      {
        "time_stamp": "2020-01-08 14:52:00"
      },
      {
        "time_stamp": "2020-01-08 14:53:58"
      },
      {
        "time_stamp": "2020-01-08 15:06:58"
      },
      {
        "time_stamp": "2020-01-08 15:08:34"
      },
      {
        "time_stamp": "2020-01-08 15:45:44"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2020-01-08 14:43:46",
    "text": "I think it is because the value of a select field is an object"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2020-01-08 14:44:15",
    "text": "Does `levels|groupby('priority.name')` work?"
  },
  {
    "poster": {
      "poster_name": "Chris Abplanalp",
      "poster_handle": "cabplanalp"
    },
    "time_stamp": "2020-01-08 14:45:14",
    "text": "<@U25PYL3Q8> thank you for this HubL var, curious if I wanted to load a different footer between multiple sub-domains, how would one accomplish that without hardcoding the domain in the {% if %} statement, how would one set the {{content.resolved_domain}} to the primary default domain of the portal, I have different language translations for my footer but trying to load them in without hardcoding the domain value into the template partial code, any thoughts"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2020-01-08 14:45:30",
    "text": "I tried that, but the `levelGroup.grouper` returns `null`"
  },
  {
    "text": "Also I am even trying to indicate the sub-domain of test portal that HS provides but I am getting errors when trying to reference the .<http://hs-sites.com|hs-sites.com> domains:",
    "time_stamp": "2020-01-08 14:47:57"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2020-01-08 14:48:48",
    "text": "I can probably fix that"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2020-01-08 14:52:00",
    "text": "Only if its a faily easy fix, def dont want to complicate anything over there"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2020-01-08 14:53:58",
    "text": "If you have a github account, can you throw up an issue in <https://github.com/HubSpot/jinjava>"
  },
  {
    "poster": {
      "poster_name": "Chris Abplanalp",
      "poster_handle": "cabplanalp"
    },
    "time_stamp": "2020-01-08 14:56:27",
    "text": "<@U25PYL3Q8>, sorry forgot the quotes, for the domain, but still curious on how not to hard code those values"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 15:01:32",
    "text": "Are you familiar how you would do it in another programing language?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 15:02:00",
    "text": "Im not exactly sure what you are trying to do without hardcoding the domain value"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 15:03:49",
    "text": "```{% if content.domain is string_containing \".es\" %}```\n"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2020-01-08 15:06:58",
    "text": "Thanks! Just summitted it :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2020-01-08 15:08:34",
    "text": "Also if you (or anyone else) wants to contribute to the open-source repo, this line <https://github.com/HubSpot/jinjava/blob/master/src/main/java/com/HubSpot/jinjava/lib/filter/GroupByFilter.java#L61> needs to be replaced with <https://github.com/HubSpot/jinjava/blob/master/src/main/java/com/HubSpot/jinjava/lib/filter/SelectAttrFilter.java#L81>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 15:25:57",
    "text": "`{% if content.resolved_domain is string_containing 'blog' %}`"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-08 15:26:03",
    "text": "should be able to do stuff like that"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2020-01-08 15:45:44",
    "text": "I’ll fix it tomorrow if someone else doesn’t get to it first"
  }
]