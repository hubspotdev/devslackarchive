[
  {
    "poster": {
      "poster_name": "Mike Thomas",
      "poster_handle": "mike542"
    },
    "time_stamp": "2023-06-30 04:42:37",
    "edited": {
      "time_stamp": "2023-06-30 08:15:35"
    },
    "text": "Thank you for the considered and in-depth response <@UCY83QS6Q>!\n\nThe repo and docs I’ve been looking at were: <https://github.com/HubSpot/cms-js-building-block-examples>\n\nI would think that “barrier to entry” would be a concern for you. I can’t say for certain, but in my experience when hiring developers and I utter the words “HubSpot” the more experienced among the candidates tend to decide it’s not for them - but that’s usually because tools like React have previously been precluded and they don’t like their toys taken away. This should help matters in the long term.\n\nFor me/us, I’m perfectly happy to make the investment, as long as I can see it solves some knotty HubSpot problems, and doesn’t just equate to a longer lead-time for less/same functionality. That’s where the examples as they stand leave me wondering why we’d do this, and what the cost impact would be. I think without any Internal API or external API calling ability, I’d probably hold off on it until a v2.\n\nI think having the Hello World example bake in a Repeater is a neat idea. It would be a good leg up for those new to React.\n\nWould you be allowing for secrets storage/external API requests outside of Enterprise plans, or is that ultimately the junction point with Serverless Functions?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-30 07:08:56",
    "text": "<@UCY83QS6Q> have you heard of \"shadcdn\"? trying it now — it's an interesting way to load components. Also, during setup you create a components.json file which looks like it could potentially remap some file locations and create a config for us to use:\n```{\n  \"$schema\": \"<https://ui.shadcn.com/schema.json>\",\n  \"style\": \"default\",\n  \"rsc\": true,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\",\n    \"css\": \"app/globals.css\",\n    \"baseColor\": \"slate\",\n    \"cssVariables\": true\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\"\n  }\n}```\n",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-06-30 07:35:30"
      },
      {
        "time_stamp": "2023-06-30 07:39:48"
      },
      {
        "time_stamp": "2023-06-30 07:40:11"
      },
      {
        "time_stamp": "2023-06-30 07:40:12"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-06-30 07:19:56",
    "text": "Got it, I think the key part I’m hearing here is “and doesn’t just equate to a longer lead-time for less/same functionality”. And it is a fair point that right now these new React tools mostly only allow you to do the same things you’ve done before with a different language and framework.\n\nWhile I’d hope that being able to share JS components across the server and client via Islands (and have access to the whole npm &amp; React ecosystem of packages on the server) is a significant leg up allowing you to more easily write and maintain more performant interactive pages… I still see and understand your point.\n\nEven though I can’t make product commitments, especially around what features are in what tiers, I will say that the team working on this very much wants to enable data fetching to HubSpot and external APIs from server-rendered JS components (including secrets). There are some challenges there to make sure we can do that performantly &amp; cost-effectively, but that’s on us to figure out. :thinking_hard:\n\nSo please stay tuned! I’m hopeful that I can bring you some good news in the near-ish future and am very much looking forward to more of your feedback. :HubSpotheart:"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-06-30 07:35:30",
    "text": "Not quite. From digging into the source there it looks like shadcn/ui uses components.json as the input to a CLI init command to build a tailwind.config.js file. And I think that init command also takes `aliases` and uses that to “bake in” the import paths you’d prefer for these components. In other words, this shadcdn stuff is a one time “install” thing rathe than a “affect every build” thing.\n\nSo in the end it doesn’t change much, you (currently) are still limited by not being able to add to the Vite config to change the imports you can use in your source.\n\n(But again, hearing the feedback. It would be great if we could find a way to allow you to set some of the Vite config like aliases for your own convenience. Our concern is that we are wary of allowing arbitrary Vite config and plugins that could break how Island work, etc. We’ll see what we can do :+1:)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-30 07:39:48",
    "text": "ok, thanks for the info. It's honestly not that big of a deal despite me bringing it up all the time :laughing:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-30 07:40:11",
    "text": "I can do everything I actually need to do"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-06-30 07:40:12",
    "text": "We gotta make you happy Andrey! :wink:"
  },
  {
    "poster": {
      "poster_name": "Mike Thomas",
      "poster_handle": "mike542"
    },
    "time_stamp": "2023-06-30 08:24:11",
    "text": "Whole NPM would be neat in Custom Code and Serverless. Recently working with Shopify + HubSpot would have benefited from that.\n\nI will stay tuned. Thanks for your input."
  },
  {
    "poster": {
      "poster_name": "Charles Boamah",
      "poster_handle": "cboamah"
    },
    "time_stamp": "2023-06-30 12:11:03",
    "text": ""
  }
]