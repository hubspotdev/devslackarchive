[
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2019-03-13 03:20:57",
    "text": "If you do need to get a better pagespeed score e.g. if you need to show the client, i recommend imageOptim on macos you just drag and drop your images in and it losslessly compresses them in the same format, It does jpg’s nice and fast but png’s can take a little longer"
  },
  {
    "poster": {
      "poster_name": "Scott Brown",
      "poster_handle": "scott.brown"
    },
    "time_stamp": "2019-03-13 05:22:27",
    "text": "Does anyone know how to replace a featured blog post once a blog tag is clicked? Thanks",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-03-13 06:07:24"
      },
      {
        "time_stamp": "2019-03-13 06:08:41"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-03-13 06:07:24",
    "text": "Hard to say without seeing your code, but you can have separate markup on the tag template"
  },
  {
    "poster": {
      "poster_name": "Scott Brown",
      "poster_handle": "scott.brown"
    },
    "time_stamp": "2019-03-13 06:08:41",
    "text": "So its not my code, but here is what is being used -\n\n&lt;div class=“featured-post”&gt;\n{% set rec_posts = blog_recent_posts(‘default’, 1) %}\n  {% for rec_post in rec_posts %}\n    &lt;div class=“item”&gt;\n      &lt;div class=“post-title”&gt;\n        &lt;h2&gt;&lt;a href=“{{ rec_post.absolute_url }}“&gt;{{ rec_post.name|truncate(50,true,’...’) }}&lt;/a&gt;&lt;/h2&gt;\n      &lt;/div&gt;\n\n      &lt;div class=“post-date”&gt;Posted on {{ rec_post.publish_date_local_time|datetimeformat(‘MMM dd YYYY’)  }} | By &lt;a class=“author-link” href=“<https://www.geoteric.com/blog/author/{{> rec_post.blog_post_author.slug }}“&gt;{{ rec_post.blog_post_author.display_name }}&lt;/a&gt;&lt;/div&gt;\n\n      &lt;a class=“hs-featured-image-link” href=“{{rec_post.absolute_url}}” title=“”&gt;\n        &lt;div class=“post-image” style=“background:url(‘{{ rec_post.featured_image }}‘)no-repeat;“&gt;&lt;/div&gt;\n      &lt;/a&gt;\n\n      &lt;div class=“custom-post-summary”&gt;\n        &lt;p&gt;{{ rec_post.post_summary|striptags|truncate(300,true,‘...’) }}&lt;/p&gt;\n      &lt;/div&gt;\n\n      &lt;div class=“read-more-link”&gt;\n      \t&lt;div class=“btn”&gt;&lt;a href=“{{ rec_post.absolute_url }}“&gt;Read more&lt;/a&gt;&lt;/div&gt;\n      &lt;/div&gt;\n\n    &lt;/div&gt;\n\n  {% endfor %}\n&lt;/div&gt;"
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2019-03-13 06:52:03",
    "text": "How do you organize or write your page level CSS stylesheet? Choose the heart that best fits your workflow\n\n:heart: Compile scss locally and upload to HubSpot via FTP\n:blue_heart: Write everything in one stylesheet in the Design Manager IDE\n:green_heart: Use includes to write css partials that are merged into one main stylesheet\n:yellow_heart: Something else",
    "reply_count": 56,
    "reply_users_count": 5,
    "replies": [
      {
        "time_stamp": "2019-03-13 06:57:56"
      },
      {
        "time_stamp": "2019-03-13 07:01:10"
      },
      {
        "time_stamp": "2019-03-13 07:02:49"
      },
      {
        "time_stamp": "2019-03-13 07:03:02"
      },
      {
        "time_stamp": "2019-03-13 07:04:24"
      },
      {
        "time_stamp": "2019-03-13 07:04:41"
      },
      {
        "time_stamp": "2019-03-13 07:05:22"
      },
      {
        "time_stamp": "2019-03-13 07:07:11"
      },
      {
        "time_stamp": "2019-03-13 07:07:56"
      },
      {
        "time_stamp": "2019-03-13 07:09:32"
      },
      {
        "time_stamp": "2019-03-13 07:10:04"
      },
      {
        "time_stamp": "2019-03-13 07:10:15"
      },
      {
        "time_stamp": "2019-03-13 07:10:17"
      },
      {
        "time_stamp": "2019-03-13 07:11:06"
      },
      {
        "time_stamp": "2019-03-13 07:11:18"
      },
      {
        "time_stamp": "2019-03-13 07:11:26"
      },
      {
        "time_stamp": "2019-03-13 07:11:49"
      },
      {
        "time_stamp": "2019-03-13 07:11:51"
      },
      {
        "time_stamp": "2019-03-13 07:11:58"
      },
      {
        "time_stamp": "2019-03-13 07:12:13"
      },
      {
        "time_stamp": "2019-03-13 07:12:19"
      },
      {
        "time_stamp": "2019-03-13 07:26:14"
      },
      {
        "time_stamp": "2019-03-13 07:27:40"
      },
      {
        "time_stamp": "2019-03-13 07:28:05"
      },
      {
        "time_stamp": "2019-03-13 07:31:21"
      },
      {
        "time_stamp": "2019-03-13 07:31:24"
      },
      {
        "time_stamp": "2019-03-13 07:31:34"
      },
      {
        "time_stamp": "2019-03-13 07:33:09"
      },
      {
        "time_stamp": "2019-03-13 07:34:06"
      },
      {
        "time_stamp": "2019-03-13 07:36:00"
      },
      {
        "time_stamp": "2019-03-13 07:37:12"
      },
      {
        "time_stamp": "2019-03-13 07:38:41"
      },
      {
        "time_stamp": "2019-03-13 07:39:33"
      },
      {
        "time_stamp": "2019-03-13 07:39:48"
      },
      {
        "time_stamp": "2019-03-13 07:40:32"
      },
      {
        "time_stamp": "2019-03-13 07:52:57"
      },
      {
        "time_stamp": "2019-03-13 07:54:47"
      },
      {
        "time_stamp": "2019-03-13 07:56:55"
      },
      {
        "time_stamp": "2019-03-13 07:57:35"
      },
      {
        "time_stamp": "2019-03-13 07:57:49"
      },
      {
        "time_stamp": "2019-03-13 07:58:27"
      },
      {
        "time_stamp": "2019-03-13 07:58:58"
      },
      {
        "time_stamp": "2019-03-13 07:59:13"
      },
      {
        "time_stamp": "2019-03-13 07:59:21"
      },
      {
        "time_stamp": "2019-03-13 08:00:18"
      },
      {
        "time_stamp": "2019-03-13 08:01:47"
      },
      {
        "time_stamp": "2019-03-13 08:02:01"
      },
      {
        "time_stamp": "2019-03-13 08:02:06"
      },
      {
        "time_stamp": "2019-03-13 08:02:13"
      },
      {
        "time_stamp": "2019-03-13 08:02:14"
      },
      {
        "time_stamp": "2019-03-13 08:02:16"
      },
      {
        "time_stamp": "2019-03-13 08:02:40"
      },
      {
        "time_stamp": "2019-03-13 08:02:43"
      },
      {
        "time_stamp": "2019-03-13 08:05:11"
      },
      {
        "time_stamp": "2019-03-13 08:25:06"
      },
      {
        "time_stamp": "2019-03-13 09:09:48"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2019-03-13 06:57:56",
    "text": "scss 4 lyfe"
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2019-03-13 07:01:10",
    "text": "Thanks Bradley. I really like it too but have two reservations. Do you use a package to auto upload on save?\n\nAlso, after I build everything a client or dev without scss knowledge will want to make updates and so that could cause challenges of outdated styles or things getting overwritten. How do label your combined stylesheet to prevent someone adding new styles to it?"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2019-03-13 07:02:49",
    "edited": {
      "time_stamp": "2019-03-13 07:03:38"
    },
    "text": "We use gulp to auto save it and upload it manually, just copy the compiled code into the IDE (take 3 seconds)\n\nOur clients never touch the CSS file and all our dev now how to use scss so we dont have that issues"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 07:03:02",
    "text": "I use HubL in my css to mimic most scss functionality. the benefits being, I don’t need to have the local source files anywhere, I work on too many sites to be dealing with that.\nThe only functionality of scss I can’t reproduce with HubL is the nesting functionality"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 07:04:24",
    "text": "and I build modules site agnostically (if you want more detail on that,  <https://designers.HubSpot.com/blog/developer-day-2018-videos>\nThe first video I give a presentation on it)"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2019-03-13 07:04:41",
    "text": "We also sync everything to GitLab, so we can download the source file anywhere"
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2019-03-13 07:05:22",
    "text": "Hi Jon. I have been considering the same thing (merging, variables, macros, functions) the only missing part I see is using autoprefixer but I was going to write styles and then paste into <https://autoprefixer.github.io/> before publishing"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 07:07:11",
    "text": "we sync our framework with a git repository, but we don’t store every client’s stuff that way, too tedious, and automating it can be painful when you have a lot of sites.\n\n<@UG7S8J18D> I use autoprefixer online a lot. I also used to build my modules in codepen before pulling them into HubSpot - still do for the complex ones. That way I can use scss babel etc. for the bulk of the build then just integrate the hubl"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 07:07:56",
    "text": "the codepen workflow is still a pretty great way to do it, kinda mixes the best of both worlds"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2019-03-13 07:09:32",
    "edited": {
      "time_stamp": "2019-03-13 07:09:43"
    },
    "text": "I also use autoprefixer online. Great tool"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 07:10:04",
    "text": "agreed, so glad someone put the time in to put it up"
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2019-03-13 07:10:15",
    "text": "Thanks Jon. Cool idea using codepen. I didn't realize it had autoprefixer support <https://blog.codepen.io/2014/03/28/new-feature-autoprefixer/>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 07:10:17",
    "text": "autoprefixer in general is flippin’ amazing"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 07:11:06",
    "text": "Yea CodePen lets you use almost all the most popular build tools you want to use and then you just paste over your compiled code when done building there."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 07:11:18",
    "text": "can even use things like Haml and pug"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 07:11:26",
    "text": "oh and my fave it has emmet built in"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 07:11:49",
    "text": "The day I found out about emmet, that was a good day."
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2019-03-13 07:11:51",
    "text": "oooo emmet"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2019-03-13 07:11:58",
    "text": "love the sh**"
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2019-03-13 07:12:13",
    "text": "emmet is cool <https://vignette.wikia.nocookie.net/thelegomovie/images/e/e2/IMG_6390.JPG/revision/latest?cb=20180823200141>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 07:12:19",
    "text": "hahah"
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2019-03-13 07:26:14",
    "text": "<@U7SL518D6> I just watched part of your talk. So you have 0 styles a part of your custom modules and then create a module_customizations.css that is included into your main stylesheet. is that right?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 07:27:40",
    "text": "only sort of.\n\nMy modules have only enough css to create like a skeleton version of the module. A good base to start from that works great for any site."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 07:28:05",
    "text": "then my module customizations css file holds all of the styling of those modules that is specific to the site I’m working on."
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2019-03-13 07:31:21",
    "edited": {
      "time_stamp": "2019-03-13 07:31:35"
    },
    "text": "interesting. We use boostrap 4 for our sites, so our modules use the columns for basic styles. Then any specific styles we put in the modules."
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2019-03-13 07:31:24",
    "text": "very cool - I learned a lot here thanks"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 07:31:34",
    "text": ":thumbsup:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 07:33:09",
    "text": "so bradley related - the way I would tackle what you’re talking about is I would make a stripped out version of bootstrap 4, that has only the classes you’re actually using in bootstrap(the grid or whatever else you’re using) then make that be it’s own CSS file, make it live site-agnostically. link it to all of the custom modules."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 07:34:06",
    "text": "then if you use the same grid in the website itself, include it as a linked file in the templates, preventing the file from loading multiple times"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 07:36:00",
    "text": "While my company hasn’t yet submitted any of our modules to the marketplace, because of the way we build our modules, we could submit them all right now without needing to modify them, because they are all self contained this way. and are site agnostic"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2019-03-13 07:37:12",
    "text": "Yeah exactly. Our whole site is base off a style sheet (which includes boostrap 4) we make for each client. Which we compile from scss to get all the clients colors fonts etc."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 07:38:41",
    "text": "We used to work in a similar fashion but we use HubL for all the vars, extends, loops, logic, etc in our css."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 07:39:33",
    "text": "makes it faster to jump into a project and make changes, as the build process happens on HubSpot’s end not our local machines"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2019-03-13 07:39:48",
    "text": "Yeah, last place I worked did it like that. Works well"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2019-03-13 07:40:32",
    "text": "Don't have to have a specific environment set up on your computer"
  },
  {
    "poster": {
      "poster_name": "Guido Porcaro",
      "poster_handle": "guido.porcaro"
    },
    "time_stamp": "2019-03-13 07:52:57",
    "text": "Personally, I compile scss locally and upload to hbs via api"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 07:54:47",
    "text": "<@UFH0PPMEW> how do you handle HubL errors when doing that or do you completely abandon HubL alltogether when editing locally"
  },
  {
    "poster": {
      "poster_name": "Guido Porcaro",
      "poster_handle": "guido.porcaro"
    },
    "time_stamp": "2019-03-13 07:56:55",
    "text": "Well, actually for scss i use browserstack for proxing the pages I need to edit and replace the page file with the locally ones and then when all the edits are done i compile and push via api"
  },
  {
    "poster": {
      "poster_name": "Guido Porcaro",
      "poster_handle": "guido.porcaro"
    },
    "time_stamp": "2019-03-13 07:57:35",
    "text": "for the templates/modules of hubl i write them locally without handle the errors, and push them via api, and only when they are online i check for errors or something else :smile:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 07:57:49",
    "text": "I see."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 07:58:27",
    "text": "that browser stack setup sounds complicated, wouldn’t even know where to begin to set that up"
  },
  {
    "poster": {
      "poster_name": "Guido Porcaro",
      "poster_handle": "guido.porcaro"
    },
    "time_stamp": "2019-03-13 07:58:58",
    "text": "well depens"
  },
  {
    "poster": {
      "poster_name": "Guido Porcaro",
      "poster_handle": "guido.porcaro"
    },
    "time_stamp": "2019-03-13 07:59:13",
    "text": "if you will also use webpack for the js it’s a bit complicated"
  },
  {
    "poster": {
      "poster_name": "Guido Porcaro",
      "poster_handle": "guido.porcaro"
    },
    "time_stamp": "2019-03-13 07:59:21",
    "text": "without webpack is “easy”"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 08:00:18",
    "text": "do you have to do anything special to get that set up working when you start working on a new HS site?"
  },
  {
    "poster": {
      "poster_name": "Guido Porcaro",
      "poster_handle": "guido.porcaro"
    },
    "time_stamp": "2019-03-13 08:01:47",
    "text": "Actually, where I work, we have only to sites on HubSpot, outsite where I work I don’t use hbs :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Guido Porcaro",
      "poster_handle": "guido.porcaro"
    },
    "time_stamp": "2019-03-13 08:02:01",
    "text": "anyway, i did a little project for the agency where I am"
  },
  {
    "poster": {
      "poster_name": "Guido Porcaro",
      "poster_handle": "guido.porcaro"
    },
    "time_stamp": "2019-03-13 08:02:06",
    "text": "but i can’t share it"
  },
  {
    "poster": {
      "poster_name": "Guido Porcaro",
      "poster_handle": "guido.porcaro"
    },
    "time_stamp": "2019-03-13 08:02:13",
    "text": "anyway, the only thing to change is a JSON"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 08:02:14",
    "text": "I see"
  },
  {
    "poster": {
      "poster_name": "Guido Porcaro",
      "poster_handle": "guido.porcaro"
    },
    "time_stamp": "2019-03-13 08:02:16",
    "text": "with some config"
  },
  {
    "poster": {
      "poster_name": "Guido Porcaro",
      "poster_handle": "guido.porcaro"
    },
    "time_stamp": "2019-03-13 08:02:40",
    "text": "if you need more info about browsersync and a basic setup"
  },
  {
    "poster": {
      "poster_name": "Guido Porcaro",
      "poster_handle": "guido.porcaro"
    },
    "time_stamp": "2019-03-13 08:02:43",
    "text": "write me in private"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 08:05:11",
    "text": "sounds good. I think I’m good on it. it’s the kinda thing where I’m curious about it, but I’m probably not going to change workflows to something like that just yet. My current setup works pretty reliably for how my company operates."
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2019-03-13 08:25:06",
    "edited": {
      "time_stamp": "2019-03-13 08:25:15"
    },
    "text": "If anyone is interested, I created a codepen template you can fork based on Jon's suggested workflow &gt; <https://codepen.io/JacobLett/pen/jJYqJx>"
  },
  {
    "poster": {
      "poster_name": "Victoria Gumaer",
      "poster_handle": "vgumaer"
    },
    "time_stamp": "2019-03-13 08:52:13",
    "text": ":wave: Anyone coming into Cambridge for Partner Day that wants to meet up with Jeff and I? :smile:",
    "reply_count": 6,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-03-13 09:12:09"
      },
      {
        "time_stamp": "2019-03-13 10:25:14"
      },
      {
        "time_stamp": "2019-03-15 07:12:44"
      },
      {
        "time_stamp": "2019-03-15 07:13:34"
      },
      {
        "time_stamp": "2019-03-15 07:18:24"
      },
      {
        "time_stamp": "2019-03-15 07:22:04"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-03-13 09:09:48",
    "text": "because of the need for autoprefixer and the fact that I will never remember what needs to be prefixed by calling a prefix macro in HubSpot, I use gulp scss. For anything marketplace related, I have been prepping to convert those templates to the partial method in HubSpot."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 09:12:09",
    "text": "Partner day at Inbound or is this a different partner day?"
  },
  {
    "poster": {
      "poster_name": "Dar",
      "poster_handle": "daris.shamsi"
    },
    "time_stamp": "2019-03-13 09:26:58",
    "text": "Morning folks - a few questions before I move forward with the HubSpot course"
  },
  {
    "poster": {
      "poster_name": "Dar",
      "poster_handle": "daris.shamsi"
    },
    "time_stamp": "2019-03-13 09:27:07",
    "text": "hoping you can help me before I spin my wheels"
  },
  {
    "poster": {
      "poster_name": "Dar",
      "poster_handle": "daris.shamsi"
    },
    "time_stamp": "2019-03-13 09:29:52",
    "text": "1. I am not a web developer, I know basic HTML, and CSS but no javascript or anything in the programming realm.\n2. My goal is to be able to create landing pages, I am more of a designer and my team needs to be able to create custom landing pages"
  },
  {
    "poster": {
      "poster_name": "Dar",
      "poster_handle": "daris.shamsi"
    },
    "time_stamp": "2019-03-13 09:29:59",
    "text": "Appreciate any answers on this here!"
  },
  {
    "poster": {
      "poster_name": "Dar",
      "poster_handle": "daris.shamsi"
    },
    "time_stamp": "2019-03-13 09:30:03",
    "text": "@channel"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 09:31:54",
    "text": "<@UGXSGKVGD> welcome. so what are your questions?"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-13 10:06:05",
    "text": "<@UGXSGKVGD> if you are simply asking will you be able to work in HS or do you need to know more, you should be fine with just a basic understanding of HTML and CSS when it comes to using simple drag and drop stuff. When you are looking to do more complex things like using HubL, functions, macros, hubdb, and more, it might be better to get a basic understanding of Javascript."
  },
  {
    "poster": {
      "poster_name": "Dar",
      "poster_handle": "daris.shamsi"
    },
    "time_stamp": "2019-03-13 10:11:40",
    "text": "Hey guys - yes so essentially I need to be able to create"
  },
  {
    "poster": {
      "poster_name": "Dar",
      "poster_handle": "daris.shamsi"
    },
    "time_stamp": "2019-03-13 10:11:50",
    "text": "landing pages from the ground up, unless you think creating drag and drop is easier"
  },
  {
    "poster": {
      "poster_name": "Dar",
      "poster_handle": "daris.shamsi"
    },
    "time_stamp": "2019-03-13 10:12:09",
    "text": "I don't think I need anything super complex but my colleagues are insistent that I learn HubL"
  },
  {
    "poster": {
      "poster_name": "Dar",
      "poster_handle": "daris.shamsi"
    },
    "time_stamp": "2019-03-13 10:12:15",
    "text": "but I don't even know javascript"
  },
  {
    "poster": {
      "poster_name": "Dar",
      "poster_handle": "daris.shamsi"
    },
    "time_stamp": "2019-03-13 10:12:16",
    "text": "lol"
  },
  {
    "poster": {
      "poster_name": "Finn Ruijter",
      "poster_handle": "finn.ruijter"
    },
    "time_stamp": "2019-03-13 10:13:39",
    "text": "Haha, well. If you ever have questions about JS, CSS or HTML: don't hesitate to send me a message!"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 10:13:43",
    "text": "<@UGXSGKVGD> HubL is pretty much a must if you’re going to be building templates, as AJ said a basic HTML and CSS understanding will get you fairly far"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-03-13 10:21:07",
    "text": "Hubl syntax is also generally easier to read/understand than Javascript too"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 10:22:22",
    "edited": {
      "time_stamp": "2019-03-13 10:24:20"
    },
    "text": "been running into this scenario a lot and want to know how you guys are handling it.\nBuilding a staff listing page - each staff member has a detail page.\n\nWe usually build this using a blog, and the listing of team members is a custom module.\n\nClients like to be able to use the page editor to edit the listing of staff. (doing things like grouping staff by category and whatnot)\n\nSo we build a normal page, with the custom module in it for the listing view, and use the post detail view for the detail pages.\n\nThen we use a redirect from the blog’s listing path to the Page being used as a “listing page”.\n\nProblem with this method is that you end up with a listing page slug different than your pseudo listing page. and all the detail pages have the real blog listing page’s slug. so a user could manually erase part of the slug. yes they get redirected, but it doesn’t look as professional either, having the different root slug.\n\nWe have another method we haven’t used for this but are considering it, where we still have the blog listing screen and a normal page, with the modules on it, but we use a coded template for the blog listing screen to litterally suck the normal page, into the blog listing page and display that instead. (that has potential caching problems so we’re not excited about that way)"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-03-13 10:24:00",
    "text": "I know that usability for a marketer is a bit of an issue, but this really does sound like the perfect use case for HUBDB dynamic pages"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-03-13 10:24:18",
    "text": "That use case is mostly what I use it for"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-13 10:24:34",
    "text": "HubDB all the way for me. The one thing HS is missing is a form based editor for HubDB tables.",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-03-13 10:25:06"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-03-13 10:25:06",
    "text": "I've been trying to build one, but I keep running into time/knowledge limitations"
  },
  {
    "poster": {
      "poster_name": "Victoria Gumaer",
      "poster_handle": "vgumaer"
    },
    "time_stamp": "2019-03-13 10:25:14",
    "text": "Inbound :smile:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 10:25:17",
    "text": "I would agree normally, but the editing experience and the loss of some really useful abilities that come from blogs is why we usually don’t use HubDB for team pages"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-13 10:26:28",
    "text": "So the Act2 theme has a flexible listing page that is pretty cool when used with HubDB: <https://neambo.hs-sites.com/act2-flexible-listing>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 10:26:37",
    "text": "for example we take advantage of topics in blogs, allowing us to do some powerful stuff regarding sorting and grouping employees. even built a related staff feature before(not related as in family lol)"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-13 10:27:04",
    "edited": {
      "time_stamp": "2019-03-13 10:27:25"
    },
    "text": "we used that as a base and then switched out the content to use HubDB instead of modules. This gave the ability for sorting and pagination (all using metafizzy's isotope) <https://isotope.metafizzy.co/>",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-03-13 10:28:19"
      },
      {
        "time_stamp": "2019-03-13 10:29:12"
      },
      {
        "time_stamp": "2019-03-13 10:30:02"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-03-13 10:27:47",
    "text": "We replicate the topics functionality using multiple tables and foreign ids"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 10:28:19",
    "text": "every time I see sorting functionality like that and how Vue does it, my mind is always freaking blown."
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-03-13 10:28:40",
    "text": "I think this is really a caught between a rock and a hard place situation.  There's lots of pitfalls with both approaches, I guess the question is which method has the least?"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-13 10:29:12",
    "text": "Yea, it took me a good min or two to figure out how all the JS was done to make it work when we shifted it around but it works pretty good for the clients needs. I need to learn Vue more"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 10:30:02",
    "text": "Vue will change your life lol.\n\nYou’ll be like “This is how web dev is supposed to be.”"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-13 10:30:19",
    "text": "for us, since the client already had the theme, it was easier for us to piggyback off that and use what was there instead of creating it with HubDB from scratch. (also less costly for them as hours in their retainer were low)"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 12:52:48",
    "text": "feel a lil dumb asking this as I should know it",
    "reply_count": 7,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-03-13 13:07:25"
      },
      {
        "time_stamp": "2019-03-13 13:07:37"
      },
      {
        "time_stamp": "2019-03-13 13:10:37"
      },
      {
        "time_stamp": "2019-03-13 13:13:26"
      },
      {
        "time_stamp": "2019-03-13 13:14:02"
      },
      {
        "time_stamp": "2019-03-13 13:14:21"
      },
      {
        "time_stamp": "2019-03-15 07:32:08"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 12:53:09",
    "text": "is there a field that allows multi-select for custom modules? or do I need to go hog wild making booleans"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 12:55:42",
    "text": "looks like amazingly there isn’t a field for this."
  },
  {
    "poster": {
      "poster_name": "Lindsey Newman",
      "poster_handle": "lindseyn"
    },
    "time_stamp": "2019-03-13 12:57:08",
    "text": "yeah i don't think there is, i've seen it pop up a few times in HubSpot ideas but never implemented"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-03-13 13:07:25",
    "text": "When you say multi select do you mean a select box with multiple selects?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-03-13 13:07:37",
    "text": "as a module field?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 13:10:37",
    "text": "basically, visually it could take many different looks interface wise, maybe\n<https://harvesthq.github.io/chosen/>\nstyle\nI mean they already have fields that look like this"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-03-13 13:13:26",
    "text": "yeah.. it just means the the value would be output into a list"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 13:14:02",
    "text": "correct"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 13:14:21",
    "text": "which does make sense for it to be it’s own field type because of that to prevent confusion"
  },
  {
    "poster": {
      "poster_name": "Melissa Smith",
      "poster_handle": "msmith"
    },
    "time_stamp": "2019-03-13 13:36:40",
    "text": "quick confirmation.. subscription preference page, unsubscribe backup pages and subscriptions update confirmation page are just global. you can’t change those based on domain correct?",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-03-13 13:56:41"
      },
      {
        "time_stamp": "2019-03-13 13:56:53"
      },
      {
        "time_stamp": "2019-03-13 14:51:49"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2019-03-13 13:48:31",
    "edited": {
      "time_stamp": "2019-03-13 13:50:00"
    },
    "text": "[email templates] Is there a way to create a CTA button without an image? In outlook the images are blocked so the CTA is not seen. <https://drive.google.com/file/d/1_-OvnYkIOhFDllxd77CLZZNqUZxq72ZB/view>",
    "reply_count": 5,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-03-13 14:02:59"
      },
      {
        "time_stamp": "2019-03-13 14:08:48"
      },
      {
        "time_stamp": "2019-03-13 14:10:00"
      },
      {
        "time_stamp": "2019-03-13 14:10:17"
      },
      {
        "time_stamp": "2019-03-13 14:10:55"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2019-03-13 13:56:41",
    "text": "Do you have multiple domains in one account?"
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2019-03-13 13:56:53",
    "text": "<https://knowledge.HubSpot.com/articles/kcs_article/email/how-do-i-customize-my-email-opt-out-page>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 14:02:59",
    "text": "I doubt you can use the actual HS CTA in such a way, but there is a way to code buttons in email, it’s just not how HubSpot implements them.\n\n<https://buttons.cm/>"
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2019-03-13 14:08:48",
    "text": "Thanks Jon. I guess I will just have to educate the content editors not to use the cta in emails. I can then create a custom module to add a button table below the rich text."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 14:10:00",
    "text": "well, if the content people are good about specifiing alt text or the cta auto does alt text for  CTAs not implemented using the image setting then it should be completely fine"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 14:10:17",
    "text": "as it would show as a broken image but with an alt text link."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-13 14:10:55",
    "text": "yea not ideal, but it will make the marketers happier they don’t have to jump through hoops."
  },
  {
    "poster": {
      "poster_name": "Melissa Smith",
      "poster_handle": "msmith"
    },
    "time_stamp": "2019-03-13 14:51:49",
    "text": "we will. but i dont see an option to change the domain in system settings"
  }
]