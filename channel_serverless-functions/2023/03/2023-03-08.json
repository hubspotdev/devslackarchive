[
  {
    "poster": {
      "poster_name": "Dustin Perolio",
      "poster_handle": "dustin.perolio"
    },
    "time_stamp": "2023-03-08 17:47:14",
    "edited": {
      "time_stamp": "2023-03-08 17:49:33"
    },
    "text": "sigh. Can someone tell me what I am doing wrong? Due to limitations with HubSpot’s serverless functions, I ended up setting up a serverless function on Netlify instead, but now I’m trying to proxy the response threw a HubSpot serverless function, and even that’s not working…  It again works on localhost with `hs functions server` but when deployed it’s resulting in a 500 server error.\n```const axios = require('axios');\n\nexports.main = async (context, sendResponse) =&gt; {\n    await axios.get('[url]', { responseType: 'arraybuffer' })\n      .then(response =&gt; {\n        const buffer = Buffer.from(response.data, 'binary');\n        sendResponse({\n          body: buffer,\n          statusCode: 200,\n          headers: {\n            'content-type': 'application/pdf',\n            'content-disposition': 'attachment; filename=test.pdf',\n          }\n        });\n      });\n};```",
    "reply_count": 41,
    "reply_users_count": 5,
    "replies": [
      {
        "time_stamp": "2023-03-08 17:58:18"
      },
      {
        "time_stamp": "2023-03-08 17:58:31"
      },
      {
        "time_stamp": "2023-03-08 18:16:28"
      },
      {
        "time_stamp": "2023-03-08 18:17:28"
      },
      {
        "time_stamp": "2023-03-08 20:50:57"
      },
      {
        "time_stamp": "2023-03-09 00:00:11"
      },
      {
        "time_stamp": "2023-03-09 00:17:53"
      },
      {
        "time_stamp": "2023-03-09 11:07:10"
      },
      {
        "time_stamp": "2023-03-09 11:09:23"
      },
      {
        "time_stamp": "2023-03-09 12:03:17"
      },
      {
        "time_stamp": "2023-03-09 12:05:09"
      },
      {
        "time_stamp": "2023-03-09 12:08:29"
      },
      {
        "time_stamp": "2023-03-09 12:08:36"
      },
      {
        "time_stamp": "2023-03-09 12:08:39"
      },
      {
        "time_stamp": "2023-03-09 19:11:11"
      },
      {
        "time_stamp": "2023-03-09 19:22:52"
      },
      {
        "time_stamp": "2024-02-23 12:15:34"
      },
      {
        "time_stamp": "2024-02-23 12:16:30"
      },
      {
        "time_stamp": "2024-02-23 12:17:57"
      },
      {
        "time_stamp": "2024-02-23 12:34:21"
      },
      {
        "time_stamp": "2024-02-23 12:35:59"
      },
      {
        "time_stamp": "2024-02-23 12:37:00"
      },
      {
        "time_stamp": "2024-02-23 12:37:38"
      },
      {
        "time_stamp": "2024-02-23 12:39:54"
      },
      {
        "time_stamp": "2024-02-23 12:42:54"
      },
      {
        "time_stamp": "2024-02-23 12:43:30"
      },
      {
        "time_stamp": "2024-02-23 12:43:38"
      },
      {
        "time_stamp": "2024-02-23 12:45:00"
      },
      {
        "time_stamp": "2024-02-23 12:45:20"
      },
      {
        "time_stamp": "2024-02-23 12:45:27"
      },
      {
        "time_stamp": "2024-02-23 12:46:41"
      },
      {
        "time_stamp": "2024-02-23 12:46:57"
      },
      {
        "time_stamp": "2024-02-23 12:47:47"
      },
      {
        "time_stamp": "2024-02-23 12:47:51"
      },
      {
        "time_stamp": "2024-02-23 12:48:04"
      },
      {
        "time_stamp": "2024-02-23 12:48:08"
      },
      {
        "time_stamp": "2024-02-23 12:48:14"
      },
      {
        "time_stamp": "2024-02-23 12:49:33"
      },
      {
        "time_stamp": "2024-02-23 12:49:44"
      },
      {
        "time_stamp": "2024-02-23 12:50:06"
      },
      {
        "time_stamp": "2024-02-26 11:36:22"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-08 17:58:18",
    "text": "do you have the server error from hs logs?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-08 17:58:31",
    "text": "Might be similar to the thing <@U0336QCR2FQ> was having the other day: <https://HubSpotdev.slack.com/archives/C011F74BKQW/p1678216354339699>"
  },
  {
    "text": "&gt; do you have the server error from hs logs?\nNo, sadly.",
    "time_stamp": "2023-03-08 18:16:28"
  },
  {
    "text": "And this is all I’m seeing when I visit the endpoint.",
    "time_stamp": "2023-03-08 18:17:28",
    "edited": {
      "time_stamp": "2023-03-08 18:17:49"
    }
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-08 20:50:57",
    "text": "That's interesting, success but a server error on the frontend"
  },
  {
    "text": "The success is because the serverless function is returning `statusCode: 200` in all cases.\nWrap it in try/catch, and display the correct statusCode based on the response.\nThis is the best way you can start debugging what’s going wrong.\nAlso, you can often see more information about the error, in the private app’s log in your portal.",
    "time_stamp": "2023-03-09 00:00:11"
  },
  {
    "poster": {
      "poster_name": "Matias Vad",
      "poster_handle": "matias618"
    },
    "time_stamp": "2023-03-09 00:17:53",
    "text": "And just for context, which limitations are you seeing in HubSpot?\nIt seems that you’re trying to save a response as a file, through the Files API.\nI had issues with this, and also went down the Buffer road with no luck.\nMy issue was constantly having the “binary” wrong, or trying to base64 encode things, which was overcomplicating it all.\n\nIn my search I found this thread: <https://HubSpotdev.slack.com/archives/C011F74BKQW/p1633354264067300>\n\nAnd it led me trying some different things with `FormData` (which is available in serverless functions, no build step required).\n\nWhat I got working was POSTing my `file` information and body as JSON to a “saveToFile” endpoint I created, then in that endpoint use `FormData` to append the file, its name, the `folderId` and the different `fileOptions` and it finally started working.\n\nError handling is not the cleanest, but it returns the responses and errors back up the line, which is then handled by my function hitting this endpoint.\n\nI hope this will help you a bit, I know how much a real - working - code sample helps (also for future searchers).\n\n```// saveToFile endpoint\nconst axios = require(\"axios\");\nconst FormData = require(\"form-data\");\n\nexports.main = (context) =&gt; {\n  saveToFile(context)\n    .then((response) =&gt; {\n      return response;\n    })\n    .catch((error) =&gt; {\n      return error;\n    });\n};\n\nasync function saveToFile(data) {\n  try {\n    const fileEndpoint = \"<https://api.hubapi.com/files/v3/files>\";\n    const form = new FormData();\n\n    const fileOptions = {\n      access: \"PUBLIC_NOT_INDEXABLE\",\n      overwrite: true,\n      duplicateValidationStrategy: \"NONE\",\n      duplicateValidationScope: \"ENTIRE_PORTAL\",\n    };\n\n    form.append(\"file\", data.body.file, `${data.body.fileName}`);\n    form.append(\"folderId\", \"12345678\"); // Use the folder ID of the folder you want to save the file to\n    form.append(\"options\", JSON.stringify(fileOptions));\n\n    await axios(fileEndpoint, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${process.env.TOKEN}`,\n        ...form.getHeaders(),\n      },\n      data: form,\n    })\n      .then((response) =&gt; {\n        return response;\n      })\n      .then((error) =&gt; {\n        return error;\n      });\n  } catch (error) {\n    return error;\n  }\n}```\n"
  }
]