[
  {
    "poster": {
      "poster_name": "Erik Rorstrom",
      "poster_handle": "erik.rorstrom"
    },
    "time_stamp": "2020-02-20 02:41:55",
    "text": "<@UEKMY50SU> the default values i use are the ones generated from the vcode package. Its also unclear which link-field is throwing the error."
  },
  {
    "poster": {
      "poster_name": "Brian Krainer",
      "poster_handle": "bkrainer"
    },
    "time_stamp": "2020-02-20 07:06:44",
    "text": "i just tested using the vs code plugin and was able to upload a link field without any issues. Could you DM me your `fields.json` file? I can also look into improving the error messaging for field errors like this"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 10:47:06",
    "text": "What are you guys using to code in SCSS instead of CSS when developing locally? Gulp? Grunt? Something new that came out 6 days ago?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 10:53:01",
    "text": "also, can I `watch` for changes and use something like gulp at the same time…"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2020-02-20 10:57:08",
    "text": "<@UDHT6N5SM> totally. I used to use Gulp, but I have been migrating to NPM scripts. With that you can run all your prepocessing on css, js and even img optimizations concurrently with all the HubSpot local dev tooling."
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2020-02-20 10:57:42",
    "edited": {
      "time_stamp": "2020-02-20 10:57:51"
    },
    "text": "<https://www.freecodecamp.org/news/why-i-left-gulp-and-grunt-for-npm-scripts-3d6853dd22b8/>"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 10:58:21",
    "text": "thanks <@UEC65BQV8> Reading now"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 10:59:13",
    "text": "what’s the experience like for running both, what do you type in console? do you run 2 consoles?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 11:00:17",
    "edited": {
      "time_stamp": "2020-02-20 11:00:30"
    },
    "text": "not specifically what you type, but is it like `npx hs watch &amp;&amp; run scripts`  kind of thing"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 11:56:07",
    "text": "for the benefit of everyone <@UEC65BQV8> had the answer. You can run multiple npm scripts concurrently"
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2020-02-20 12:00:29",
    "text": "how do you do that? npm run watch &amp;&amp; npx hs watch [x] [y] ?"
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2020-02-20 12:00:40",
    "text": "or another method"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 12:01:08",
    "text": "you add it to scripts in the package.json file"
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2020-02-20 12:01:21",
    "text": "gotcha"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 12:02:04",
    "text": "`concurrently` has meaning as a command in there (just learned this today)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 12:02:13",
    "text": "I’ll post an example once I get this working"
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2020-02-20 12:03:01",
    "text": "awesome thanks"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 13:48:57",
    "text": "I generally have it setup now but there are a lot of interesting consequences I didn’t consider"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 13:49:08",
    "text": "for example, using {{ theme.typography.h1_font.size.value }} hubl variables"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 13:49:39",
    "text": "and I’m pretty sure partials in scss can only compile to a non-partial so i can’t just match them up"
  },
  {
    "poster": {
      "poster_name": "Gregory Cornelius",
      "poster_handle": "gcornelius"
    },
    "time_stamp": "2020-02-20 13:49:49",
    "text": "for folks that might be interested in using webpack for this sort of stuff, we did create <https://www.npmjs.com/package/@HubSpot/webpack-cms-plugins>",
    "reply_count": 10,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2020-02-20 13:53:00"
      },
      {
        "time_stamp": "2020-02-20 13:53:13"
      },
      {
        "time_stamp": "2020-02-20 13:54:03"
      },
      {
        "time_stamp": "2020-02-20 13:54:48"
      },
      {
        "time_stamp": "2020-02-20 13:55:11"
      },
      {
        "time_stamp": "2020-02-20 13:55:28"
      },
      {
        "time_stamp": "2020-02-20 13:55:39"
      },
      {
        "time_stamp": "2020-02-20 13:56:28"
      },
      {
        "time_stamp": "2020-02-20 13:56:59"
      },
      {
        "time_stamp": "2020-02-20 13:57:20"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 13:49:50",
    "text": "partial being anything with `_` in front of it"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 13:50:32",
    "text": "<@U22VBL87M> Now you tell me :grin:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 13:53:00",
    "text": "Not sure this solves the problem of being able to use hubl variables in scss or copying over scss files to partial css files so that they can be combined. But maybe I am overthinking it…"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 13:53:13",
    "text": "or underthinking it…"
  },
  {
    "poster": {
      "poster_name": "Gregory Cornelius",
      "poster_handle": "gcornelius"
    },
    "time_stamp": "2020-02-20 13:54:03",
    "text": "you’re correct that it doesn’t provide a solution for generating css+hubl from sass"
  },
  {
    "poster": {
      "poster_name": "Gregory Cornelius",
      "poster_handle": "gcornelius"
    },
    "time_stamp": "2020-02-20 13:54:48",
    "text": "that is something that we’ll need to chew on"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 13:55:11",
    "text": "I’m currently checking to see if compiled scss can leave hubl tags alone"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 13:55:28",
    "text": "and then combine them into one file at the css level like the default setup"
  },
  {
    "poster": {
      "poster_name": "Gregory Cornelius",
      "poster_handle": "gcornelius"
    },
    "time_stamp": "2020-02-20 13:55:39",
    "text": "unfortunately i don’t think so. iirc, `node-sass` will not compile the sass"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 13:56:28",
    "edited": {
      "time_stamp": "2020-02-20 13:56:43"
    },
    "text": "I just watched your dev session video from 2019 btw. Awesome stuff, thanks for all the hard work and progress"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 13:56:59",
    "text": "just put name to face"
  },
  {
    "poster": {
      "poster_name": "Gregory Cornelius",
      "poster_handle": "gcornelius"
    },
    "time_stamp": "2020-02-20 13:57:20",
    "text": ":+1:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 14:16:23",
    "text": "<@UDEASNWEB> So at this point, it sounds like SCSS isn’t worth it if you can’t use HUBL"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 14:16:52",
    "text": "but just in case you are still interested, here’s the relevant update to package.json (an example your file structure might be different)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 14:17:11",
    "text": "```\"scripts\": {\n    \"watch\": \"hs watch src style-guide\",\n    \"fetch\": \"hs fetch style-guide src\",\n    \"scss\": \"node-sass --watch dev-src/scss -o src/css\",\n    \"dev\": \"concurrently \\\"npm run scss\\\" \\\"npm run watch\\\"\"\n  },```\nextra dependencies:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 14:17:16",
    "text": "```    \"concurrently\": \"^5.1.0\",\n    \"node-sass\": \"^4.13.1\"```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 14:17:54",
    "text": "there’s probably a balance of where I actually want to use HUBL in css"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-02-20 14:17:58",
    "text": "so still might help"
  }
]