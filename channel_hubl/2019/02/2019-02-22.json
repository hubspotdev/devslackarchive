[
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-02-22 05:43:32",
    "edited": {
      "time_stamp": "2019-02-22 08:01:18"
    },
    "text": "is there any way to do a `soft`import of a file?\nLike no warnings if doesn't exist (and its not copied to another portal, neither attached if is in a marketplace product)?\n\nI tried with the jinja way but seems like is not implemented here:\n`{% import \"/path/to/file\" ignore missing %}`\n<@U26B530N6> <@U6GNQ7JBU>?",
    "reply_count": 5,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-02-22 07:20:55"
      },
      {
        "time_stamp": "2019-02-22 07:32:06"
      },
      {
        "time_stamp": "2019-02-22 07:37:51"
      },
      {
        "time_stamp": "2019-02-22 07:49:17"
      },
      {
        "time_stamp": "2019-02-22 07:56:46"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-02-22 07:20:55",
    "text": "cc <@U6W3H6YN8> for thoughts"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2019-02-22 07:32:06",
    "edited": {
      "time_stamp": "2019-02-22 07:34:03"
    },
    "text": "<@U7ADCU3BM> when would you want to only _maybe_ have some data imported if the file exists?\n\nIf you are building a template, don't you definitively want to know if a referenced file is available, to make sure it can be used in your templating? Otherwise, your template might not function as you have built it if data is missing.\n\nJust want to make sure I understand the use case"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-02-22 07:37:51",
    "edited": {
      "time_stamp": "2019-02-22 07:47:07"
    },
    "text": "well, in this particular case is to overwrite (or not) some internal/global variables that I already setup on a different file. I feel it as necessary for marketplace use, otherwise the client will be overwritten on future updates, right?\n\nFor me it has sense to split the file on two and \"duplicate\" it for some main reasons:\n- Avoid the client/non dev mess up the whole thing.\n- Keep it more cleaned and organised. (this will help the non tech guy to avoid any need to read the whole file)\n- already mentioned marketplace future updates"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2019-02-22 07:49:17",
    "text": "Thank you for explaining the use case!"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2019-02-22 07:56:46",
    "edited": {
      "time_stamp": "2019-02-22 07:57:45"
    },
    "text": "Looks like we actually currently just treat bad imports this way anyways in reality.\n\nIf you import a bad `{% import 'catsanddogs.html' %}` we just throw a warning, and nothing is imported, rather than it being fatal"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-22 08:39:13",
    "text": "going to experimenting with smart content in emails. wanted to know - have any of you found a way to do smart content effectively through HubL in emails? for example if contact is in x list memebership display this block, if contact is in other list membership display other thing.\n\nI basically want to avoid jamming whole modules essentially into rich text fields"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-22 08:39:51",
    "edited": {
      "time_stamp": "2019-02-22 08:40:39"
    },
    "text": "I have ideas to pull it off, I just want to see what others have done, I’ve heard about some limitations to what can be done there."
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-02-22 08:44:27",
    "text": "<@U7SL518D6> The order of operations in email doesn’t allow for this.  Contact tokens get filled in last. Meaning any HubL logic executes on `null` values."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-22 08:45:01",
    "text": "okay, how about HubL placed inside of rich text fields?"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-02-22 08:45:30",
    "text": "I haven’t tried that specifically but my guess is follows the same pattern"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-02-22 08:46:04",
    "text": "The only case where this isn’t true is the `email_each` function that works in Deal workflows (originally intended for abandon cart emails)"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-02-22 10:52:16",
    "text": "Any one have documentation on `script_embed`",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-02-22 11:05:41"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-22 11:05:41",
    "text": "<@U6W3H6YN8>"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-02-22 11:13:34",
    "text": "`resize_img_url` is loading large images for me… anyone else? For example, the output url from that function on this particular image is:\n`<https://cdn2.HubSpot.net/hub/3023500/hubfs/Product%20Images/product_drivable-grass-growing.jpg?width=600&amp;name=product_drivable-grass-growing.jpg>`\nYet if you go to that image it is still huge in filesize and width (way larger than 600px)"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-22 11:23:30",
    "text": "I have seen that happen before, but usually only for a short period of time - like when you initially upload an image - and it’s among the first times the image has been accessed with one of those URLs"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-22 11:23:42",
    "text": "has the image been up for awhile?"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-02-22 11:28:11",
    "text": "yeah, but I just implemented the resize function. But it is also happening with a few other images as well that have been up and resized"
  }
]