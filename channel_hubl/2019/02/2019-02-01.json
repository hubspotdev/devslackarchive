[
  {
    "poster": {
      "poster_name": "KJ",
      "poster_handle": "karlon"
    },
    "time_stamp": "2019-02-01 02:14:23",
    "text": "Hi Community,\n\nBeen testing but wanting to confirm. When sending an RSS email and adding an rss feed url in HS, is there any hubl that can be added to pull in the author image? Could not find any for it being added to an email but not sure if someone knows of another way"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-02-01 04:12:28",
    "edited": {
      "time_stamp": "2019-02-01 04:14:31"
    },
    "text": "<@U6GNQ7JBU> or <@U22PWJ41G> do you know if `string_startingwith` is accepted on `selectattr` ? I am having some hard time to make it works. I just got the error `string_startingwith test requires an argument` but I already added :thinking_face:",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-02-01 06:31:44"
      },
      {
        "time_stamp": "2019-02-01 06:51:08"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-02-01 06:31:44",
    "text": "Can you post the exact syntax you are using?"
  },
  {
    "text": "Is this the correct markup to sort blog posts in reverse order? Most dated posts first, most recent bottom.",
    "time_stamp": "2019-02-01 06:49:11",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-02-01 07:11:28"
      },
      {
        "time_stamp": "2019-02-01 07:44:12"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-02-01 06:51:08",
    "text": "{% set var = array|selectattr(\"prop\", \"string_startingwith\", val ) %}"
  },
  {
    "poster": {
      "poster_name": "James Cutler",
      "poster_handle": "jcutler"
    },
    "time_stamp": "2019-02-01 07:11:28",
    "text": "I can't recall whether sorting by date puts the oldest item first or last. But with your current markup, `|sort(False, False, 'name')`, is sorting by the `name` attribute, so I'd expect the posts to be sorted alphabetically by name.\nSince the `blog_recent_posts()` function already sorts by publish date, I'd just use the `|reverse` filter to reverse the sort if the default sort order isn't what you want."
  },
  {
    "poster": {
      "poster_name": "Chandler Ives",
      "poster_handle": "cives"
    },
    "time_stamp": "2019-02-01 07:44:12",
    "text": "Thanks!"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-01 08:34:45",
    "text": "should be a super simple question here but can’t find it in the hubl docs nor jinja docs.\n\nAnyone know the easy way to format a number so it has commas\n\nexample: `12000` to `12,000`\n\nI know i could make a macro, and use the split function, loop through and inject commas that way. Just seems like a lot of work for something so simple",
    "reply_count": 17,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-02-01 08:37:54"
      },
      {
        "time_stamp": "2019-02-01 08:38:25"
      },
      {
        "time_stamp": "2019-02-01 08:38:40"
      },
      {
        "time_stamp": "2019-02-01 08:39:41"
      },
      {
        "time_stamp": "2019-02-01 08:40:47"
      },
      {
        "time_stamp": "2019-02-01 08:40:56"
      },
      {
        "time_stamp": "2019-02-01 08:40:59"
      },
      {
        "time_stamp": "2019-02-01 08:49:49"
      },
      {
        "time_stamp": "2019-02-01 08:52:17"
      },
      {
        "time_stamp": "2019-02-05 10:18:15"
      },
      {
        "time_stamp": "2019-02-05 10:23:34"
      },
      {
        "time_stamp": "2019-02-05 10:23:43"
      },
      {
        "time_stamp": "2019-02-05 10:25:13"
      },
      {
        "time_stamp": "2019-02-05 10:53:02"
      },
      {
        "time_stamp": "2019-02-05 10:53:18"
      },
      {
        "time_stamp": "2019-02-05 11:27:52"
      },
      {
        "time_stamp": "2019-02-05 11:28:02"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-02-01 08:37:54",
    "text": "You will want to use `\"%,d\"` format"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-02-01 08:38:25",
    "text": "So something like `\"%,d\"|format(number)` should theoretically work"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-01 08:38:40",
    "text": "I’ll give this a shot"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-01 08:39:41",
    "text": "doesn’t seem to work"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-02-01 08:40:47",
    "text": "I am guessing that is because the FormatFilter is a basic filter <https://github.com/HubSpot/jinjava/blob/master/src/main/java/com/HubSpot/jinjava/lib/filter/FormatFilter.java#L21>"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-02-01 08:40:56",
    "text": "I bet if I make this an advanced filter it will work"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-02-01 08:40:59",
    "text": "Let me try that"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-02-01 08:49:49",
    "text": "<https://github.com/HubSpot/jinjava/pull/279>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-01 08:52:17",
    "edited": {
      "time_stamp": "2019-02-01 08:52:26"
    },
    "text": "I’ll tell the client to be patient on the formatting so I can use this when it goes live :joy:"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-02-01 13:02:20",
    "text": "Is there a way to return the URL of a blog from its ID with out `/all` at the end?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-02-01 13:02:49",
    "text": "I’ve dug around in the documentation and can’t seem to find an answer besides maybe stripping the last four characters off of the URL"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-02-01 13:08:08",
    "text": "I just did it like this `{{ blog_all_posts_url(module.left_column_blog)|cut('/all') }}` for the curious"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-02-01 13:08:39",
    "text": "I wouldn’t use that on your blog about alligators though"
  },
  {
    "time_stamp": "2019-02-01 13:08:43",
    "text": ""
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-01 13:09:54",
    "text": "i only blog about alligators, though"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-02-01 13:10:28",
    "text": "I’m a gavial man myself"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-02-01 13:11:22",
    "text": "Big fan of all extant crocodilians though."
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-01 13:12:08",
    "text": "fancy"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-01 13:13:12",
    "text": "gharial"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-01 13:13:21",
    "text": "critically endangered"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-02-01 13:18:44",
    "text": "Their supply is low so the demand is super high."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-02-01 13:19:23",
    "text": "I’m sitting on a big pile of them, going to wait a little bit to sell them off. Hoping that the gavial bubble doesn’t burst."
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-01 14:00:12",
    "text": "So `page_by_id(item.choose_a_page_or_post).featured_image` and `{{blog_post_by_id(card.choose_a_page).featured_image }}` both return a warning of `Cannot resolve property 'featured_image' in ''` but they still work in pulling the images in. Anyway to figure out how to grab alt text for this?"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-01 14:33:23",
    "text": "Actually, i dont think we could grab the alt text on these as the alt text isnt set in the file manager for images sooooo nevermind that, but i am still curious on what the warning for not resolving even though it clearly works"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2019-02-01 14:45:24",
    "text": "Is `item.choose_a_page_or_post` blank by default?"
  }
]