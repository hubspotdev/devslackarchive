[
  {
    "poster": {
      "poster_name": "KJ",
      "poster_handle": "karlon"
    },
    "time_stamp": "2019-08-12 06:21:17",
    "text": "@thanks for the input gentlemen. I tried using Zapier but not really seeing how I can map a dropdown select property from Vtiger to a dropdown field in HubSpot. Any of you did this property mapping before?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-08-12 07:44:24",
    "text": "hey kids!  if you didnt know already: <https://HubSpotdev.slack.com/archives/CCGU4R4ER/p1565481066092300>",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-08-12 07:45:56"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-08-12 07:45:17",
    "text": "dev meetup at inbound this year!  agenda has been updated.  it will be livestreamed and there will be recordings if you cant make it"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-08-12 07:45:51",
    "text": "if you have thoughts, questions or concerns, come on in.  <#CCGU4R4ER|extend> the water is fine :slightly_smiling_face:"
  },
  {
    "subtype": "thread_broadcast",
    "time_stamp": "2019-08-12 07:45:56",
    "edited": {
      "time_stamp": "2019-08-12 07:46:31"
    },
    "text": "sign up quick if you want to come in person because space is limited and we’re quickly approaching our limit. Attendees will receive a free community Inbound Pass."
  },
  {
    "poster": {
      "poster_name": "Ryan Jewell",
      "poster_handle": "ryanjewell"
    },
    "time_stamp": "2019-08-12 08:58:04",
    "text": "Where is the Client ID located?",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-08-12 08:59:11"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-08-12 08:59:11",
    "text": "as in the clients portal number?"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2019-08-12 10:43:53",
    "text": "Any JS-Jedi folks in here that can help me out?\n\nI’m included a JS script in a custom module for the purpose of using a background video in a given row.  The problem is that when multiple modules on a single page use a video BG and this script runs, only the last module on the page loops correctly. The modules above play correctly but stop after the first video is played.\n\nIs there a way to give this script some sort of unique ID so that the last line: playNextVideo() knows the correct line to loop through?  I’m not even sure if that’s the right question… :thinking_face:\n\n```  {% if module.row_settings.bg_type == 'video' %}  \n    window.__next_video = 0;\n\n  function playNextVideo() {\n      if (window.__next_video === $('#hs_cos_wrapper_{{ name }} video').length) {\n        window.__next_video = 0;\n      }\n      playVideoAtIndex(window.__next_video);\n      window.__next_video++;\n    }\n\n    function playVideoAtIndex(index) {\n      $('#hs_cos_wrapper_{{ name }} video').each(function(i, video) {\n        var $vid = $(video);\n        var vid = $vid[0];\n        $vid.off('ended');\n        $vid.fadeOut('0');\n        if (index === i) {\n          vid.load();\n          vid.play();\n          $vid.fadeIn('0');\n          $vid.on('ended', playNextVideo);\n        }\n      });\n    }\n\nplayNextVideo();  \n{% endif %}```",
    "reply_count": 20,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-08-12 11:04:57"
      },
      {
        "time_stamp": "2019-08-12 11:05:44"
      },
      {
        "time_stamp": "2019-08-12 11:05:59"
      },
      {
        "time_stamp": "2019-08-12 11:07:51"
      },
      {
        "time_stamp": "2019-08-12 11:11:02"
      },
      {
        "time_stamp": "2019-08-12 11:11:58"
      },
      {
        "time_stamp": "2019-08-12 11:14:15"
      },
      {
        "time_stamp": "2019-08-12 11:14:37"
      },
      {
        "time_stamp": "2019-08-12 11:15:52"
      },
      {
        "time_stamp": "2019-08-12 11:19:23"
      },
      {
        "time_stamp": "2019-08-12 11:19:59"
      },
      {
        "time_stamp": "2019-08-12 11:20:44"
      },
      {
        "time_stamp": "2019-08-12 11:21:51"
      },
      {
        "time_stamp": "2019-08-12 11:22:16"
      },
      {
        "time_stamp": "2019-08-12 11:22:24"
      },
      {
        "time_stamp": "2019-08-12 11:24:50"
      },
      {
        "time_stamp": "2019-08-12 11:25:15"
      },
      {
        "time_stamp": "2019-08-12 11:29:58"
      },
      {
        "time_stamp": "2019-08-12 11:30:12"
      },
      {
        "time_stamp": "2019-08-12 11:30:47"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-12 10:56:23",
    "edited": {
      "time_stamp": "2019-08-12 10:57:18"
    },
    "text": "`function playNextVideo{{ module.videoURL|md5 }}()`"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-12 10:57:31",
    "text": "`module.videoURL` should the be the HUBL for the video URL"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-12 10:57:37",
    "text": "that is one way."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-12 10:57:42",
    "text": "also you are using an ID."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-12 10:58:01",
    "text": "since there are many on the page they will all use the same `{{ name }}`"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-12 10:58:27",
    "text": "but you can use one function to run all instances of the bg video"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2019-08-12 11:00:01",
    "text": "Thanks so much for weighing in <@U38EZFVFE>!  Let me see if I can add what you suggested and get this to work."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-12 11:01:17",
    "text": "actually The idea was to rename the functions with a `{{ videourl|md5 }}`"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-12 11:01:34",
    "text": "if that was the issue."
  },
  {
    "text": "The one challenge with that approach is that my videourl is inside a group with repeater option.",
    "time_stamp": "2019-08-12 11:03:51"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-12 11:04:10",
    "text": "ACTUALLY"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-12 11:04:20",
    "text": "this `#hs_cos_wrapper_{{ name }}` is your issue"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-08-12 11:04:57",
    "text": "Hey! One thought would be to use \n```\n$(&lt;module.ID&gt;).each(function(index){ \n  $(this).find('.video').addClass('video-'+index);\n});``` or some variant thereof"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2019-08-12 11:05:44",
    "text": "Thanks <@UDFTHC6PK> - I’ll try this."
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-08-12 11:05:59",
    "text": "Sorry...for the poor formatting... messaging from mobile :sweat_smile:"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-08-12 11:07:51",
    "text": "<@U38EZFVFE>'s input will probably be a bit more helpful however! He knows his stuff."
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2019-08-12 11:08:15",
    "text": "When I remove #hs_cos_wrapper_{{ name }} and only point at &lt;video&gt;, what ends up happening is the video plays in one module then jumps to the next module to play the next video."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-12 11:09:10",
    "text": "intesresting."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-12 11:09:13",
    "text": "i see."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-12 11:11:02",
    "text": "<@UA5DFM7CK> you have a preview?"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2019-08-12 11:11:58",
    "text": "<@U38EZFVFE> sure. This is the page I’m working on.  You’ll notice the video in the middle of the page won’t complete a loop where at the video at the base will act as its supposed to. <https://preview.hs-sites.com/_hcms/preview/template/multi?is_buffered_template_layout=true&amp;portalId=507386&amp;tc_deviceCategory=undefined&amp;template_layout_id=4189069774&amp;updated=1565560763295>"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-12 11:14:15",
    "text": "One think./ change `$('a[data-reveal-id]').live('click', function (event) {` to `$('a[data-reveal-id]').on('click', function (event) {`"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-12 11:14:37",
    "text": "in the reveal-modal.js"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2019-08-12 11:15:52",
    "text": "good catch. Done."
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2019-08-12 11:19:23",
    "text": "<@U38EZFVFE> were you thinking that would have an impact on the video or just something you happened to catch&gt;"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-12 11:19:59",
    "text": "you know what.. try this forst. wrap the whol of this script in `{% require_js %} // script // {% end_require_js %}`"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-12 11:20:44",
    "text": "nevermind it is"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2019-08-12 11:21:51",
    "text": "Yep. It is."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-12 11:22:16",
    "text": "The script is only outputting once per module"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-12 11:22:24",
    "edited": {
      "time_stamp": "2019-08-12 11:22:30"
    },
    "text": "that si why ONLY the last one is working"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-12 11:24:50",
    "text": "wrong. that is the reason why is only doing the last one."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-12 11:25:15",
    "text": "BUT it is the  fact that the functions are canceling each other out"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-12 11:29:58",
    "text": "for all the folks.. we wrapped each set in a self invoking function `(function(){ // code here }())`"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-12 11:30:12",
    "edited": {
      "time_stamp": "2019-08-12 11:30:17"
    },
    "text": "that kept cross contamination at bay"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2019-08-12 11:30:47",
    "text": ":point_up_2: Rockstar! Thank you <@U38EZFVFE>"
  }
]