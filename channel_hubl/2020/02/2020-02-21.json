[
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 03:45:22",
    "text": "Does anyone know how I can get the name of the blog a post came from?",
    "reply_count": 58,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2020-02-21 03:48:59"
      },
      {
        "time_stamp": "2020-02-21 03:50:34"
      },
      {
        "time_stamp": "2020-02-21 03:54:58"
      },
      {
        "time_stamp": "2020-02-21 03:57:33"
      },
      {
        "time_stamp": "2020-02-21 04:02:42"
      },
      {
        "time_stamp": "2020-02-21 04:19:45"
      },
      {
        "time_stamp": "2020-02-21 04:20:41"
      },
      {
        "time_stamp": "2020-02-21 04:32:35"
      },
      {
        "time_stamp": "2020-02-21 05:08:00"
      },
      {
        "time_stamp": "2020-02-21 05:11:09"
      },
      {
        "time_stamp": "2020-02-21 05:11:14"
      },
      {
        "time_stamp": "2020-02-21 05:11:22"
      },
      {
        "time_stamp": "2020-02-21 05:12:08"
      },
      {
        "time_stamp": "2020-02-21 05:14:26"
      },
      {
        "time_stamp": "2020-02-21 05:17:08"
      },
      {
        "time_stamp": "2020-02-21 05:21:13"
      },
      {
        "time_stamp": "2020-02-21 05:21:17"
      },
      {
        "time_stamp": "2020-02-21 05:21:26"
      },
      {
        "time_stamp": "2020-02-21 05:21:27"
      },
      {
        "time_stamp": "2020-02-21 05:21:41"
      },
      {
        "time_stamp": "2020-02-21 05:22:41"
      },
      {
        "time_stamp": "2020-02-21 05:23:20"
      },
      {
        "time_stamp": "2020-02-21 05:23:34"
      },
      {
        "time_stamp": "2020-02-21 05:24:36"
      },
      {
        "time_stamp": "2020-02-21 05:24:46"
      },
      {
        "time_stamp": "2020-02-21 05:24:56"
      },
      {
        "time_stamp": "2020-02-21 05:25:34"
      },
      {
        "time_stamp": "2020-02-21 05:25:47"
      },
      {
        "time_stamp": "2020-02-21 05:26:04"
      },
      {
        "time_stamp": "2020-02-21 05:26:10"
      },
      {
        "time_stamp": "2020-02-21 05:26:45"
      },
      {
        "time_stamp": "2020-02-21 05:27:04"
      },
      {
        "time_stamp": "2020-02-21 05:27:12"
      },
      {
        "time_stamp": "2020-02-21 05:27:15"
      },
      {
        "time_stamp": "2020-02-21 05:27:24"
      },
      {
        "time_stamp": "2020-02-21 05:27:27"
      },
      {
        "time_stamp": "2020-02-21 05:27:37"
      },
      {
        "time_stamp": "2020-02-21 05:29:22"
      },
      {
        "time_stamp": "2020-02-21 05:30:34"
      },
      {
        "time_stamp": "2020-02-21 05:30:55"
      },
      {
        "time_stamp": "2020-02-21 05:31:15"
      },
      {
        "time_stamp": "2020-02-21 05:31:18"
      },
      {
        "time_stamp": "2020-02-21 05:31:25"
      },
      {
        "time_stamp": "2020-02-21 05:32:29"
      },
      {
        "time_stamp": "2020-02-21 05:33:30"
      },
      {
        "time_stamp": "2020-02-21 05:33:34"
      },
      {
        "time_stamp": "2020-02-21 05:33:45"
      },
      {
        "time_stamp": "2020-02-21 05:34:04"
      },
      {
        "time_stamp": "2020-02-21 05:35:11"
      },
      {
        "time_stamp": "2020-02-21 05:35:46"
      },
      {
        "time_stamp": "2020-02-21 05:36:20"
      },
      {
        "time_stamp": "2020-02-21 05:36:44"
      },
      {
        "time_stamp": "2020-02-21 05:37:21"
      },
      {
        "time_stamp": "2020-02-21 05:44:01"
      },
      {
        "time_stamp": "2020-02-21 05:51:46"
      },
      {
        "time_stamp": "2020-02-21 05:52:00"
      },
      {
        "time_stamp": "2020-02-21 06:32:25"
      },
      {
        "time_stamp": "2020-02-24 08:58:48"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 03:47:14",
    "edited": {
      "time_stamp": "2020-02-21 03:58:13"
    },
    "text": "How can we get the id of a file by its url? I want to retrieve the width of a blog post featured image, and to get this, I have to do that:\n`{% set file = file_by_id(123) %}` \n`{{ file.width }}`\nBut I have only the image url (`{{ recent_post.featured_image }}`)."
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 03:48:59",
    "text": "How do you retrieve the blog post?"
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 03:50:34",
    "text": "{% for post in all_posts|sort(True, False, 'publish_date') %}\n\nAll posts being an array of all blog posts on the website"
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 03:54:58",
    "text": "<@UM4EYDDAS>"
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 03:57:33",
    "edited": {
      "time_stamp": "2020-02-21 04:00:32"
    },
    "text": "And how do you fill this array? I think the blog name is in `{{ <http://content.blog|content.blog> }}`"
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 04:02:42",
    "text": "I have it within a module, not a listing page. So I made a field called blog types which has a repeater to be able to select the types of blog you want to show on the page.\n\n`{% for item in module.blog_types %}` \n  `{% for post in blog_recent_posts(item, 9999) %}` \n    `{% do all_posts.append( post ) %}` \n  `{% endfor %}` \n`{% endfor %}`\n\nTo load blogs from all types into 1 array."
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 04:19:45",
    "text": "So the blog id is in `item`? If so, your question is to find the name of a blog from its id. You can do that with:\n```{% set my_blog = blog_by_id(123) %}\n{{ my_blog }}```\nInside `my_blog` you have informations you want (\n`my_blog.absolute_url`, `my_blog.html_title`, etc.)\n\nIn your loop you build a dictionary and not an array, and you store all informations you want (either the blog id, or the title, or anything else you need about the blog) with the posts data. In you dictionary, you have a unique key for each post, and you store in each key an array (for example) with the blog name and the post data.\n\nI don(t know if I am clear :)"
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 04:20:41",
    "text": "My original idea was a dictionary with the key as the blog and an array of the different blogs as the value, however, the dictionary would not allow me to dynamically set key and values of the dictionary so I couldn't just insert into it from my for loop?"
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 04:32:35",
    "edited": {
      "time_stamp": "2020-02-21 05:05:38"
    },
    "text": "I translate Python in Hubl.\n\n`{% set i = 0 %}`\n`{% set data = {} %}`\n`{% for item in module.blog_types %}` \n  `{% for post in blog_recent_posts(item, 9999) %}` \n    `{% set data[i] = [item, post]  %}` \n    `{% set i += 1 %}`\n  `{% endfor %}` \n`{% endfor %}`\n\nFor each post, you have:\n`data[x] = [blog_id, post_data]`\n\nI'm not sure about incrementation, but it should work..."
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 05:08:00",
    "text": "And how do I use for loop with a dictionary?"
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 05:11:09",
    "text": "Maybe this?\n```parent_dict = [{'A':'val1','B':'val2'},{'C':'val3','D':'val4'}]\n{% for dict_item in parent_dict %}\n   {% for key, value in dict_item.items() %}\n      &lt;h1&gt;Key: {{key}}&lt;/h1&gt;\n      &lt;h2&gt;Value: {{value}}&lt;/h2&gt;\n   {% endfor %}\n{% endfor %}```\n"
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 05:11:14",
    "text": "The set i does not work too by the way"
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 05:11:22",
    "text": "Always returns 0"
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 05:12:08",
    "text": "`set i = i + 1` ?"
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 05:14:26",
    "text": "That worked, now the all_posts is showing empty data haha"
  },
  {
    "text": "<@UM4EYDDAS>",
    "time_stamp": "2020-02-21 05:17:08"
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 05:21:13",
    "text": "Replace\n{% set data[i] = [item, post]  %}"
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 05:21:17",
    "text": "With :"
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 05:21:26",
    "text": "{% do data[i] = [item, post]  %}"
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 05:21:27",
    "text": "?"
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 05:21:41",
    "text": "seems to throw an error"
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 05:22:41",
    "text": "Also seems to reset index to zero everytime the item for loop changes"
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 05:23:20",
    "text": "Error with what? \"do data[i]\"?"
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 05:23:34",
    "text": "If so, try:\n```{% do data.update({i: [item, post]}) %}```\n"
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 05:24:36",
    "text": "\"Also seems to reset index to zero everytime the item for loop changes\" -&gt; that's why I use the i..."
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 05:24:46",
    "text": "I renamed i to index"
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 05:24:56",
    "text": "I wasn't using loop.index"
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 05:25:34",
    "text": "index is outside of the loop in my example. It cannot be reset to 0."
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 05:25:47",
    "text": "`{% set i = 0 %}`\n`{% set all_posts = {} %}` \n\n`{% for item in module.blog_types %}` \n  `{% for post in blog_recent_posts(item, 9999) %}` \n    `{% do all_data.update({index: [item, post] }) %}`\n    `{% set i = i + 1 %}`\n  `{% endfor %}` \n`{% endfor %}`"
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 05:26:04",
    "text": "i resets to 0 and I can show you a picture with evidence and all_data.update doesn't work haha"
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 05:26:10",
    "text": "It seems empty still"
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 05:26:45",
    "text": "replace \"index\" with \"i\" or replace \"i\" with \"index\""
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 05:27:04",
    "text": "That's why it doesn't work."
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 05:27:12",
    "text": "Totally forgot to do that, apologies. Will test now"
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 05:27:15",
    "text": "\"i\" is the key..."
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 05:27:24",
    "text": "it's a variable."
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 05:27:27",
    "text": "I know that"
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 05:27:37",
    "text": "ok. :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 05:29:22",
    "text": "Want me to Teamview you and you can quickly get it to work? Should speed up the process a bit so you can see whats actually happening first hand"
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 05:30:34",
    "text": "Look the name you gave to your dictionary: not the same in the loop and in the set..."
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 05:30:55",
    "edited": {
      "time_stamp": "2020-02-21 05:31:07"
    },
    "text": "Use the correct variable..."
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 05:31:15",
    "text": "I know"
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 05:31:18",
    "text": "I just corrected that"
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 05:31:25",
    "text": "Testing now, thats why I deleted because I felt stupid"
  },
  {
    "text": "<@UM4EYDDAS> We're getting somewhere, now its just the key isn't being set as the variable its being set as string in a sense.",
    "time_stamp": "2020-02-21 05:32:29"
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 05:33:30",
    "edited": {
      "time_stamp": "2020-02-21 05:33:43"
    },
    "text": "It works. You can call all_posts[x][1].variable_blog_name now."
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 05:33:34",
    "text": "In a loop"
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 05:33:45",
    "text": "Except theres a lot of blog posts, not just 1"
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 05:34:04",
    "text": "So its not using i (integer), its setting the actual key to \"i\" as a string"
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 05:35:11",
    "text": "Which obviously isn't how it should work haha"
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 05:35:46",
    "text": "So try the first solution I gave you:\n`{% do data[i] = [item, post]  %}`\nI didn't work because the variable error."
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 05:36:20",
    "text": "Instead of update."
  },
  {
    "text": "",
    "time_stamp": "2020-02-21 05:36:44"
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 05:37:21",
    "text": "I already tried set instead of do too and it shows as an empty dictionary"
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 05:44:01",
    "text": "If that makes sense <@UM4EYDDAS>"
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 05:51:46",
    "text": "More difficult:\n```{% set x=data.__setitem__(i, [item, post]) %}```\nDisregard the `x` variable and use the dictionary which is now updated.\n<https://stackoverflow.com/questions/36886650/how-to-add-a-new-entry-into-a-dictionary-object-while-using-jinja2?rq=1>"
  },
  {
    "poster": {
      "poster_name": "Jake Brown",
      "poster_handle": "jake"
    },
    "time_stamp": "2020-02-21 05:52:00",
    "text": "Cheers"
  },
  {
    "poster": {
      "poster_name": "Sylvain Tirreau",
      "poster_handle": "sylvain"
    },
    "time_stamp": "2020-02-21 06:32:25",
    "text": "<@UFNQ623A8> This works for me:\n`{% set rec_posts = blog_recent_posts(module.blog_id, 10) %}`\n`{% set data = [] %}`\n`{% for rec_post in rec_posts %}`\n  `{% do data.append([module.blog_id, rec_post]) %}`  \n`{% endfor %}`\n`{{ data }}`"
  },
  {
    "poster": {
      "poster_name": "Trey",
      "poster_handle": "trey185"
    },
    "time_stamp": "2020-02-21 09:39:04",
    "text": "<@U22PJPGK0> my profiling is pointing to my custom update_dict workaround as the main bottleneck .  Your PR #403 you submitted i'm sure will run much faster and probably resolve my problems-- do you think Libo will be about to review it soon to get it pushed through?"
  }
]