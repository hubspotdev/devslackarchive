[
  {
    "poster": {
      "poster_name": "Deep Nayak",
      "poster_handle": "deep.nayak"
    },
    "time_stamp": "2025-01-03 02:52:46",
    "text": "Hii,<@U079QHR5345>. <@U06H94JKK1P> is correct. That would be the simple yet effective approach."
  },
  {
    "poster": {
      "poster_name": "Tal Rei",
      "poster_handle": "tal.r"
    },
    "time_stamp": "2025-01-03 02:55:05",
    "text": "Sounds great! I’m looking for the correct code for this, I’m getting error with what chatgpt is offering "
  },
  {
    "poster": {
      "poster_name": "Deep Nayak",
      "poster_handle": "deep.nayak"
    },
    "time_stamp": "2025-01-03 02:56:18",
    "edited": {
      "time_stamp": "2025-01-03 02:57:59"
    },
    "text": "let me prepare it in some time. If I don't reply here. feel free to DM me."
  },
  {
    "poster": {
      "poster_name": "Stacey Thomas",
      "poster_handle": "stacey.thomas"
    },
    "time_stamp": "2025-01-03 03:05:54",
    "text": "If you've not done it already, be sure you enter your secret values with the private app auth token, and that you've mapped out the properties in the relevant section above the code too :slightly_smiling_face: Feel free to send us a screenshot (redacted if needed) of the custom code you're using and im happy to take a look"
  },
  {
    "poster": {
      "poster_name": "Tal Rei",
      "poster_handle": "tal.r"
    },
    "time_stamp": "2025-01-03 03:42:38",
    "text": "import HubSpot\nfrom HubSpot.crm.contacts import ApiException\nimport os\n\nhs_pat = os.environ[\"numbers_tag_count\"]\n\ndef main(event):\n    client = HubSpot.Client.create(access_token=hs_pat)\n    count_values = 0  # Initialize the count\n\n    try:\n        # Fetch the contact properties\n        api_response = client.crm.contacts.basic_api.get_by_id(\n            contact_id=event[\"object\"][\"objectId\"],\n            properties=[\"test_3\"],\n            archived=False\n        )\n\n        # Extract and count the selected values in test_3\n        test_3_values = <http://api_response.to|api_response.to>_dict()[\"properties\"].get(\"test_3\", \"\")\n\n        if test_3_values:\n            count_values = len(test_3_values.split(\";\"))  # Count the number of selected values\n\n    except ApiException as e:\n        print(\"Exception when calling basic_api-&gt;get_by_id: %s\\n\" % e)\n\n    # Return the output data for workflow actions\n    return {\n        \"outputFields\": {\n            \"numbers_tag_count\": count_values\n        }\n    }"
  },
  {
    "text": "",
    "time_stamp": "2025-01-03 03:45:40"
  },
  {
    "poster": {
      "poster_name": "Stacey Thomas",
      "poster_handle": "stacey.thomas"
    },
    "time_stamp": "2025-01-03 03:51:18",
    "text": "Thanks Tal Rei - I'm not used to working in Python so hopefully someone else will be able to help with why this may not be working! I primarily run mine in JS. It does look like it's an error with the authentication though to me"
  }
]