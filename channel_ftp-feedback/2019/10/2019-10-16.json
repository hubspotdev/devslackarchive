[
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-10-16 09:38:03",
    "text": ":point_up: bumping in case anyone knows the timezone for HubSpot FM servers. aws east?",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-10-16 11:27:06"
      },
      {
        "time_stamp": "2019-10-16 11:28:33"
      },
      {
        "time_stamp": "2019-10-16 11:40:37"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-10-16 09:48:11",
    "text": "I've had problems with date discrepancies in FTP as well... I think it stems from the fact that it's not a real file system you're dealing with, it's an API that simulates it. Someone may have found a workaround though?"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-10-16 10:05:55",
    "text": ":shrug: I hope so! I was trying to use gulp-changed (which hashes the files I think ) instead of gulp-newer (which relies on timestamps) but struggling to get it to work with the ftp connection. I am totally open to any workflow that allows me to watcha local asset folder and then uploads the newest version on a change. seems pretty basic. somebody out there has to have a solution"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-10-16 10:53:41",
    "text": "I can tell you that in my gulp build for local dev, that I used gulp-cached to only upload changes that are made while my gulp task is running... not quite the same, but as long as you're diligent about running it while making changes, it gets the job done."
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-10-16 10:56:42",
    "text": "It creates a `sync` folder that gulp-cached populates from updates to the `dist` folder. Then it executes the local-dev commands based on what's added and removed.  You should be able to do something similar with node ftp commands instead of the local-dev."
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-10-16 11:20:13",
    "text": "oo, that is what I am looking for. I will try and get this rollin"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2019-10-16 11:20:19",
    "text": "thanks <@UJQNNKKHN>"
  },
  {
    "time_stamp": "2019-10-16 11:20:59",
    "text": ""
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-10-16 11:23:44",
    "text": "#quailman"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-10-16 11:27:06",
    "text": "As in File manager?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-10-16 11:28:33",
    "text": "It is US-East"
  },
  {
    "time_stamp": "2019-10-16 11:40:37",
    "text": ""
  }
]