[
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-10-17 05:44:46",
    "text": "<https://www.kelp.agency/blog/how-to-enable-cors-ajax-requests-for-any-HubSpot-api>"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-10-17 08:27:13",
    "text": "So i am adding JS that adds classes to form inputs. Problem is looks like HS' forms and their JS load at the end of the document (after all the stuff I enter in) anyone know of a way to accomplish this?",
    "reply_count": 2,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2018-10-17 08:31:36"
      },
      {
        "time_stamp": "2018-10-17 08:31:41"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-10-17 08:28:07",
    "text": "I suppose I can use just the form embed code and do it that way, but I was hoping I could do something with a form module on the page and then load the js after that"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-10-17 08:31:36",
    "text": "I had this issue recently.  The only way i could solve was with the onformready"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-10-17 08:31:41",
    "text": "<https://community.HubSpot.com/t5/Content-Design-Questions/Hubpsot-Form-clearing-check-boxes-when-leveraging-JavaScript/m-p/210497/highlight/false#M8746>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-10-17 08:31:45",
    "text": "can always use a custom module, get the forms ID then load the JS embed code and use a callback",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-10-17 08:45:00"
      },
      {
        "time_stamp": "2018-10-17 08:51:09"
      }
    ]
  },
  null,
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-10-17 08:45:00",
    "text": "Im using a CM but I was using the `form`  selector field for it, might be best to do the ID only portion, Ill try this one"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-10-17 08:50:29",
    "text": "I found a really cool way of dealing with stuff like this"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2018-10-17 08:50:33",
    "text": "<@U2H3TT8F2> have you tried listening for the global form events? <https://developers.HubSpot.com/global-form-events>"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-10-17 08:50:41",
    "text": "<https://hackernoon.com/promise-based-detection-of-element-injection-94bc12e33966>",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-10-17 08:52:58"
      },
      {
        "time_stamp": "2018-10-17 09:35:50"
      },
      {
        "time_stamp": "2018-10-17 09:36:39"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-10-17 08:51:09",
    "text": "pretty certain you can get just the id from the form field in a custom module, think that’s how i’ve done this kinda thing in the past"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-10-17 08:51:31",
    "text": "The API is probably a much better solution but I use that script for a lot of other script generated elements."
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2018-10-17 08:51:57",
    "text": "```window.addEventListener('message', event =&gt; {\n   if(event.data.type === 'hsFormCallback' &amp;&amp; event.data.eventName === 'onFormReady') {\n       console.log(\"Form is ready to manipulate!\");\n   }\n});```"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-10-17 08:52:37",
    "text": "Ill try giving this a shot real quick a see what happens"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-10-17 08:52:58",
    "text": "Might modify some of the chrome extension’s code to use this method of detecting elements (We have to detect elements for the developer menu)"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-10-17 08:53:15",
    "text": "if that works, i am adding that to my bag :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2018-10-17 08:53:43",
    "text": "just be careful, you never know when the form markup might change"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2018-10-17 08:53:59",
    "text": "always safer to build your own form and use the API once you get too custom"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-10-17 08:55:18",
    "text": "That did it! This is for an campaign were doing so its a temporary type form. Def will be looking at doing this differently if we ever do this for a customer/client"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-10-17 08:56:05",
    "text": "<@U7SL518D6> this is part of the <#CCQSQ2C6L|crankshaft> thing as well as Bootstrap 4 has classes for the different form elements so I was trying to add those onto the form fields"
  },
  null,
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-10-17 09:35:50",
    "text": "Oh cool! Yeah I always felt like a jackass using timeouts and intervals."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-10-17 09:36:39",
    "edited": {
      "time_stamp": "2018-10-17 09:37:38"
    },
    "text": "same here. created an issue to update the chrome extension to use this method of detecting the nav menu(used to inject the dev menu into the page). I’m hoping it proves more reliable. I find that it fails to inject the dev menu occasionally still and I want to eliminate that problem."
  },
  null,
  null,
  null,
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-10-17 12:00:13",
    "text": "Hey all Im submitting a form via ajax to HUBSPOt and i am getting a 415 error"
  },
  null,
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-10-17 12:00:36",
    "text": "<@U2H3TT8F2> any insight"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-10-17 12:02:30",
    "text": "none from me, I've never had the issue"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-10-17 12:04:13",
    "text": "<@U38EZFVFE> You need to include content-type in your request"
  },
  null,
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-10-17 12:09:10",
    "text": "<@U6GNQ7JBU> now im getting a 400"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-10-17 12:09:28",
    "text": "Which content-type are you sending?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-10-17 12:09:43",
    "text": "application/json"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-10-17 12:09:57",
    "edited": {
      "time_stamp": "2018-10-17 12:10:02"
    },
    "text": "dataType json"
  },
  null,
  null,
  null,
  null,
  null,
  null
]