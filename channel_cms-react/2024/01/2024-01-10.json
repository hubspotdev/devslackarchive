[
  {
    "subtype": "thread_broadcast",
    "time_stamp": "2024-01-10 07:07:06",
    "text": "Glad to hear that you’re looking into our React modules. I don’t think we have a good document or video that provides exactly what you are looking for, but here are some helpful things:\n• <https://github.HubSpot.com/cms-js-building-block-examples/|Our docs>, particularly the introduction that talks about the hybrid model (incrementally adopt React along HubL) and the benefits React modules bring to HubSpot\n• This <https://youtu.be/chj-_yBN5_c|demo video> though while old, gives you a walkthrough of how React modules and Islands work\n• This <https://developers.HubSpot.com/blog/intro-to-react-for-HubSpot-developers|Intro to React for HubSpot Developers> which is helpful introducing React to those new to it (with some HubSpot and CMS context along the way)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 09:26:50",
    "text": "Is there a way to conditionally render a component based on being in dev vs. production? Would the import for that component be included even if the component isn't rendered?",
    "reply_count": 71,
    "reply_users_count": 5,
    "replies": [
      {
        "time_stamp": "2024-01-10 09:28:48"
      },
      {
        "time_stamp": "2024-01-10 09:51:47"
      },
      {
        "time_stamp": "2024-01-10 09:52:20"
      },
      {
        "time_stamp": "2024-01-10 09:52:57"
      },
      {
        "time_stamp": "2024-01-10 09:53:28"
      },
      {
        "time_stamp": "2024-01-10 09:55:08"
      },
      {
        "time_stamp": "2024-01-10 09:56:00"
      },
      {
        "time_stamp": "2024-01-10 09:56:25"
      },
      {
        "time_stamp": "2024-01-10 09:56:40"
      },
      {
        "time_stamp": "2024-01-10 09:56:46"
      },
      {
        "time_stamp": "2024-01-10 09:56:53"
      },
      {
        "time_stamp": "2024-01-10 09:57:11"
      },
      {
        "time_stamp": "2024-01-10 09:57:45"
      },
      {
        "time_stamp": "2024-01-10 09:57:58"
      },
      {
        "time_stamp": "2024-01-10 09:58:13"
      },
      {
        "time_stamp": "2024-01-10 09:58:31"
      },
      {
        "time_stamp": "2024-01-10 09:59:19"
      },
      {
        "time_stamp": "2024-01-10 09:59:42"
      },
      {
        "time_stamp": "2024-01-10 10:00:14"
      },
      {
        "time_stamp": "2024-01-10 10:00:41"
      },
      {
        "time_stamp": "2024-01-10 10:01:52"
      },
      {
        "time_stamp": "2024-01-10 10:02:25"
      },
      {
        "time_stamp": "2024-01-10 10:02:40"
      },
      {
        "time_stamp": "2024-01-10 10:02:56"
      },
      {
        "time_stamp": "2024-01-10 10:03:45"
      },
      {
        "time_stamp": "2024-01-10 10:03:56"
      },
      {
        "time_stamp": "2024-01-10 10:09:06"
      },
      {
        "time_stamp": "2024-01-10 10:14:07"
      },
      {
        "time_stamp": "2024-01-10 10:15:04"
      },
      {
        "time_stamp": "2024-01-10 10:16:09"
      },
      {
        "time_stamp": "2024-01-10 10:16:16"
      },
      {
        "time_stamp": "2024-01-10 10:16:22"
      },
      {
        "time_stamp": "2024-01-10 10:16:25"
      },
      {
        "time_stamp": "2024-01-10 10:17:04"
      },
      {
        "time_stamp": "2024-01-10 10:17:17"
      },
      {
        "time_stamp": "2024-01-10 10:18:00"
      },
      {
        "time_stamp": "2024-01-10 10:18:38"
      },
      {
        "time_stamp": "2024-01-10 10:19:05"
      },
      {
        "time_stamp": "2024-01-10 10:19:29"
      },
      {
        "time_stamp": "2024-01-10 10:20:30"
      },
      {
        "time_stamp": "2024-01-10 10:20:47"
      },
      {
        "time_stamp": "2024-01-10 10:21:10"
      },
      {
        "time_stamp": "2024-01-10 10:21:46"
      },
      {
        "time_stamp": "2024-01-10 10:21:52"
      },
      {
        "time_stamp": "2024-01-10 10:22:14"
      },
      {
        "time_stamp": "2024-01-10 10:22:30"
      },
      {
        "time_stamp": "2024-01-10 10:22:47"
      },
      {
        "time_stamp": "2024-01-10 10:22:53"
      },
      {
        "time_stamp": "2024-01-10 10:24:03"
      },
      {
        "time_stamp": "2024-01-10 10:24:05"
      },
      {
        "time_stamp": "2024-01-10 10:24:14"
      },
      {
        "time_stamp": "2024-01-10 10:24:21"
      },
      {
        "time_stamp": "2024-01-10 10:25:11"
      },
      {
        "time_stamp": "2024-01-10 10:25:35"
      },
      {
        "time_stamp": "2024-01-10 10:25:47"
      },
      {
        "time_stamp": "2024-01-10 10:31:44"
      },
      {
        "time_stamp": "2024-01-10 10:32:17"
      },
      {
        "time_stamp": "2024-01-10 10:33:28"
      },
      {
        "time_stamp": "2024-01-10 10:33:57"
      },
      {
        "time_stamp": "2024-01-10 10:34:22"
      },
      {
        "time_stamp": "2024-01-10 10:34:37"
      },
      {
        "time_stamp": "2024-01-10 10:35:00"
      },
      {
        "time_stamp": "2024-01-10 10:35:15"
      },
      {
        "time_stamp": "2024-01-10 10:55:47"
      },
      {
        "time_stamp": "2024-01-10 10:57:03"
      },
      {
        "time_stamp": "2024-01-10 10:58:05"
      },
      {
        "time_stamp": "2024-01-10 11:52:38"
      },
      {
        "time_stamp": "2024-01-10 12:33:10"
      },
      {
        "time_stamp": "2024-01-10 12:35:34"
      },
      {
        "time_stamp": "2024-01-10 12:48:02"
      },
      {
        "time_stamp": "2024-05-30 10:49:36"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-10 09:28:48",
    "text": "<https://github.HubSpot.com/cms-js-building-block-examples/reference/cms-components.html#getisdeployed>\n\nYes, the import is included if the component isn’t rendered. But you could use <https://react.dev/reference/react/lazy> with a dynamic import to only include code in dev."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 09:51:47",
    "text": "getting some interesting behavior here...for context I have a \"global\" tailwindCSS styles file that I import into a partial and then load at the top of my template as a js_partial (this part works)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 09:52:20",
    "text": "but for each module, I need to re-import a dev only version of that partial"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 09:52:57",
    "text": "if I lazy load the component that contains those styles it seems to add them even if I don't actually render the component"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 09:53:28",
    "text": "that's probably not the expected behavior but I'm refreshing/re-running to see if maybe something is stuck or cached or something"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 09:55:08",
    "text": "i think CSS will circumvent your logic since it generally isn’t dynamically loaded"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 09:56:00",
    "text": "^ I think what might have happened here is that Vite will \"optimize for re-rendering\" or something along those lines, if I rebuild the styles are lost (because the component isn't rendered)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 09:56:25",
    "text": "so I think I'm all set...not 100% in love with this approach but it seems maintainable for now"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 09:56:40",
    "text": "&gt; if I rebuild the styles are lost (because the component isn’t rendered)\nis this in dev or prod?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 09:56:46",
    "text": "in dev"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 09:56:53",
    "text": "ah ok"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 09:57:11",
    "edited": {
      "time_stamp": "2024-01-10 09:57:26"
    },
    "text": "in dev it may work but im pretty sure the prod build will not care about conditional imports for CSS, and include all CSS that maybe gets imported"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 09:57:45",
    "text": "the import is for a component that imports the css"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 09:57:58",
    "text": "right"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 09:58:13",
    "text": "even so i think it will collect all CSS in the potential tree"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 09:58:31",
    "text": "if it doesnt, let me know because that could be useful for me haha"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 09:59:19",
    "text": "hmm...interesting. I know we've talked about various approaches to importing tailwind before"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 09:59:42",
    "text": "I should probably write a clean blog post describing my current approach to get more feedback"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 10:00:14",
    "text": ":yesyes: ive been doing some digging about potential ways to model sharing CSS between hubl and react components without the browser loading in two copies of the styles"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 10:00:41",
    "text": "tailwind being a key example"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:01:52",
    "text": "I have a minimal example I can share here if that helps at all:\n```import { Island } from \"@HubSpot/cms-components\";\nimport DoubleCta from \"../../DoubleCta.jsx?island\";\nimport { getIsDeployed } from \"@HubSpot/cms-components\";\nimport { lazy } from \"react\";\n\nconst TailwindStyles = lazy(() =&gt; import(\"../../partials/TailwindStyles.jsx\"));\n\nexport const Component = () =&gt; {\n  return (\n    &lt;div id=\"theme-assets\"&gt;\n      {getIsDeployed() ? null : &lt;TailwindStyles /&gt;}\n      &lt;Island module={DoubleCta} /&gt;\n    &lt;/div&gt;\n  );\n};\nexport { fields } from \"./fields.jsx\";\nexport { meta } from \"./meta.js\";```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:02:25",
    "text": "so essentially, you're saying that in production the styles imported inside of the TailwindStyles partial component will still be included even with this kind of setup"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 10:02:40",
    "text": "i think so yes"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 10:02:56",
    "text": "specifically because it’s a CSS dependency"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:03:45",
    "text": "ok, so I guess not worth doing then...hmm"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 10:03:56",
    "text": "confirming now"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 10:09:06",
    "text": "i think i was wrong - digging more into the exact behavior"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:14:07",
    "text": "maybe it makes sense to allow importing tailwindcss into the `<http://hslocal.net:3000/>` local server pages in some way? it's really only an issue while working locally. Once you have the modules on a page they get styles from the \"global\" partial (which is created from all possible react components)"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 10:15:04",
    "text": "&gt; “global” partial (which is created from all possible react components)\ncan you elaborate on this?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:16:09",
    "text": "yea, I have a partial that's only job is to import the tailwindcss file"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:16:16",
    "text": "I use it at the top of my template"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:16:22",
    "text": "```    {% js_partial\n      path=\"@projects/theme-assets-project/app/components/partials/TailwindStyles.jsx\" %}```"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 10:16:25",
    "text": "ah i see"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:17:04",
    "text": "this works great for production (well, it works fine...some more thinking is probably required)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:17:17",
    "edited": {
      "time_stamp": "2024-01-10 10:17:22"
    },
    "text": "but if that could be available while developing any module that's the goal"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 10:18:00",
    "text": "do you like that pattern of basically defining global CSS dependencies for all entry points in the project? or does it make more sense to you to say in each partial ‘this one uses tailwind’ by importing tailwind.css in each, assuming that didn’t result in duplicate styles"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 10:18:38",
    "text": "an upside of the second option there is some modules/partials may not need tailwind and you could have them not bring it in"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:19:05",
    "text": "in my case all components use tailwind so I think the former is ok (and maybe has a cache between pages benefit?)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:19:29",
    "text": "but I definitely would not mind if I had to import tailwind.css into each module individually, but didn't have duplicate \"base\" styles"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 10:20:30",
    "text": "i’d be aiming for the same caching behavior in either case"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:20:47",
    "text": "maybe as my project grows including all potential tailwind styles across all modules would start to matter"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 10:21:10",
    "text": "thats kind of a general tailwind problem right? not sure what the solutions they have around that are"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 10:21:46",
    "text": "i feel like i remember seeing them say something like ‘if this is your bottleneck then you’re doing great’"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 10:21:52",
    "text": "haha"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:22:14",
    "text": "yea, you're right, it's probably not an issue at all and I remember we dug deeper into that before"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:22:30",
    "text": "so it's just the what do I do during dev vs. during production issue"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:22:47",
    "text": "I assume it's not easy to import tailwind.css into the local server?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:22:53",
    "text": "(somehow...lol)"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 10:24:03",
    "text": "for the local dev you’re loading an entry point via the `/module/[ModuleRoute]` path right?"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 10:24:05",
    "text": "not proxying a page?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:24:14",
    "text": "right"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:24:21",
    "text": "yea, it's not a problem when proxying a page"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:25:11",
    "text": "although...that tailwindcss that gets imported into the template is the deployed version no? not necessarily the local equivalent"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:25:35",
    "text": "not 100% sure, it's all in the same \"project\""
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:25:47",
    "text": "so maybe the proxy knows (sorry, some of this is magic to me)"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 10:31:44",
    "text": "right yeah there could be mismatches if you use net new styles"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 10:32:17",
    "text": "well wait i should say there won’t be if you’re using your global partial today"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:33:28",
    "text": "I think in my case it makes sense just to use the proxy during dev (there's really not much a difference in the end)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:33:57",
    "text": "at least while I'm running multiple versions of tailwind (I have a template HubL version and a cms-js-rendering version)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:34:22",
    "text": "and need to wrap code with an id to overwrite and control"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:34:37",
    "text": "but this was a helpful discussion, thanks for helping me think things through"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:35:00",
    "text": "and I'm looking forward to whatever \"best practices\" you come up with (happy to help in any way I can)"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 10:35:15",
    "text": ":+1: thank you! both your preferences and the codesplit component idea helped me a bunch"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:55:47",
    "text": "<@UAYBXDG4U> one quick thing, couldn't I add this to my partial to move css into the head? <https://github.HubSpot.com/cms-js-building-block-examples/reference/cms-components.html#useinlineheadasset>"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 10:57:03",
    "edited": {
      "time_stamp": "2024-01-10 10:57:46"
    },
    "text": "that is directed more at libraries like styled-components where you end up with JSX or a string of your styles when server rendering rather than postcss doing the style generation at  build time"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 10:58:05",
    "text": "gotcha. I'm ready for `useTailwindHeadAsset` whenever you are"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 11:01:07",
    "text": "<@UCY83QS6Q> this does not seem to work:\n```export const meta = {\n    label: \"Double CTA\",\n    categories: ['modules', 'cta'],\n}```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 11:01:22",
    "text": "oh, unless it has to be existing categories maybe..."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 11:01:50",
    "text": "testing that now"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 11:18:51",
    "text": "^ it does in fact work if you use an existing category"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 11:18:54",
    "text": "you just can't create new ones"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 11:26:26",
    "text": "it would be nice to be able to create them but I'm looking into that now...might be missing something"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 11:36:46",
    "text": "is there a way to clear out `cms-js-rendering` modules from the \"All\" section of the editor? It looks like I am still showing some modules that no longer exist and some duplicates that I cannot find"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 11:37:17",
    "text": "seems like once a project is deployed, any associated modules will exist forever",
    "reply_count": 14,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-01-10 12:37:09"
      },
      {
        "time_stamp": "2024-01-10 12:38:15"
      },
      {
        "time_stamp": "2024-01-10 12:39:28"
      },
      {
        "time_stamp": "2024-01-10 14:04:18"
      },
      {
        "time_stamp": "2024-01-10 14:05:07"
      },
      {
        "time_stamp": "2024-01-10 14:15:04"
      },
      {
        "time_stamp": "2024-01-10 14:16:50"
      },
      {
        "time_stamp": "2024-01-10 14:17:37"
      },
      {
        "time_stamp": "2024-01-10 14:18:40"
      },
      {
        "time_stamp": "2024-01-10 14:19:43"
      },
      {
        "time_stamp": "2024-01-10 14:20:03"
      },
      {
        "time_stamp": "2024-01-10 14:21:36"
      },
      {
        "time_stamp": "2024-01-10 14:22:12"
      },
      {
        "time_stamp": "2024-01-10 14:23:09"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 11:40:44",
    "text": "^ they can't be created in any case. no biggie!"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-10 11:42:03",
    "text": "Yeah, from ^^^ doc:\n\n&gt; These categories are pre-defined and cannot be customized.\n(I didn’t realize that was the case either until re-reading)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 11:42:43",
    "text": "probably makes sense so that it never gets out of hand. all good!"
  },
  {
    "poster": {
      "poster_name": "Chris Stone",
      "poster_handle": "chris.stone603"
    },
    "time_stamp": "2024-01-10 11:52:38",
    "edited": {
      "time_stamp": "2024-01-10 12:03:11"
    },
    "text": "fwiw, I do like the idea of the second option too. I've started using js building blocks for portions of some pages/sites (using tailwind), but the rest of our content/pages don't use it.  I'm currently importing tailwind's css at the partial or module level within a project, rather than in the template as a result.\n\nI've used Andrey's approach with a dedicated partial for tailwind imports when needed at the template level\n\nre:<https://HubSpotdev.slack.com/archives/C04AY1H2204/p1704907080635129?thread_ts=1704904010.932189&cid=C04AY1H2204>"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 12:33:10",
    "edited": {
      "time_stamp": "2024-01-10 12:33:31"
    },
    "text": "thank you! so to confirm you would like to continue importing at the  module level or you’d rather just set it and forget it one time for the whole project"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-10 12:35:34",
    "text": "also curious if your thoughts change in a world where the react modules/partials being in the same theme with a shared tailwind build"
  },
  {
    "subtype": "thread_broadcast",
    "time_stamp": "2024-01-10 12:37:09",
    "text": "I think this something we’ve missed and certainly need to think how to solve. Modules that you can never remove (especially accidental/temporary/etc ones) is pretty annoying :grimacing:"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-10 12:38:15",
    "text": "Of course we don’t want to make it too easy to delete modules that might be used by long forgotten pages, but still there really should be _some_ mechanism to get rid of unneeded deployed modules/partials."
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-10 12:39:28",
    "text": "Though hm, I don’t know if we have tried using `is_available_for_new_content: false` in a React module’s meta object… that might work."
  },
  {
    "poster": {
      "poster_name": "Chris Stone",
      "poster_handle": "chris.stone603"
    },
    "time_stamp": "2024-01-10 12:48:02",
    "edited": {
      "time_stamp": "2024-01-10 12:48:23"
    },
    "text": "Yes I'd like to continue importing at the module level (assuming the styles aren't duplicated). The flexibility is useful as not all of our projects (or even modules within a project) use tailwind today. This is helping me introduce js rendered modules in our existing codebases, and gives flexibility for teammates to use a different approach.\n\nIf the whole project was using tailwind (which I would prefer), I love the idea of set and forget."
  },
  {
    "poster": {
      "poster_name": "Chiedu Agborh",
      "poster_handle": "chiedu.agborh"
    },
    "time_stamp": "2024-01-10 13:55:11",
    "edited": {
      "time_stamp": "2024-01-10 13:55:44"
    },
    "text": "Hi I'm trying to use <https://www.npmjs.com/package/react-player|ReactPlayer> with <https://github.HubSpot.com/cms-js-building-block-examples/reference/js-modules.html#module-fields|HubSpot - JS Building Blocks>, when trying to render the video component, it throws an error\n\n`island-runtime.mjs:1 TypeError: Failed to fetch dynamically imported module:`\n\nCan anyone shed some light if possible. Thanks"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 14:04:18",
    "text": "is there any way to do a manual reset of the project or something along those lines to have a fresh start? I started pretty early when this was in beta and would love a fresh start (without losing a few key modules that are live)\n\nI can definitely try  `is_available_for_new_content` but I think in some cases the folder/files no longer exist on my end."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 14:05:07",
    "text": "maybe I can move everything into a new project, republish my live pages, and then delete the old projects?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-10 14:15:04",
    "text": "I’m not entirely sure, but I believe that deleting projects does not really do much (or what you hope/expect in terms of cleaning things up). I suspect that for now you might need to hunt down what old project names and old module names were, put them in a new project, deploy them with `is_available_for_new_content: false` _and then_ you can remove them from your new project and move on"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 14:16:50",
    "text": "alright, I'll give that a shot (will confirm `is_available` works first of course)"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-10 14:17:37",
    "text": "In the meantime, someone internally tried `is_available_for_new_content` and told me that it works."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 14:18:40",
    "text": "ok, great. it also seems unlikely that it's the actual module names that are being referenced (especially because multiple modules with the same name are showing up)"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-10 14:19:43",
    "text": "That is probably more from our old bugs early in the beta with duplicate modules showing up. We might need to do some internal things to fix those"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-10 14:20:03",
    "text": "I still have duplicates in many of my internal test accounts :grimacing:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 14:21:36",
    "text": "can I mark all \"real\" modules in some way and then ask you/someone to do an internal hack to remove? I guess it's not that critical...but it would be so great to have a relatively clean start"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-10 14:22:12",
    "text": "Yup, probably doable"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-10 14:23:09",
    "text": "ok, definitely no rush, I'll message you at some point in the future after marking. not going to hold you to anything of course"
  },
  {
    "poster": {
      "poster_name": "Scott Brown",
      "poster_handle": "scott.brown523"
    },
    "time_stamp": "2024-01-11 00:33:49",
    "text": "Is there a way to turn off the layout tab in the page editor?",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-01-11 07:10:35"
      },
      {
        "time_stamp": "2024-01-11 07:25:05"
      }
    ]
  }
]