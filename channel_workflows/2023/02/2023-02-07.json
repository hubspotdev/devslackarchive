[
  {
    "poster": {
      "poster_name": "Adam Berggren",
      "poster_handle": "adam.berggren"
    },
    "time_stamp": "2023-02-07 06:35:19",
    "text": "Hey all. Is there any way to exclude logging of meetings in the CRM that is sent to a specific company or contacts? Or is there any way to set a meeting type value to all meeting that are associated with a specific account? The issue I have is that my client has subsidiaries that exists as companies in the CRM. So all internal meetings with them that are logged in HubSpot, witch messes the meeting reports up. Its easy to get the never log for emails but I want the same function for meetings. Anyone with an idea? Seems to be impossible to automate activity property values through workflows. Happy for any input! :slightly_smiling_face:",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-02-07 13:09:12"
      },
      {
        "time_stamp": "2023-02-08 05:27:58"
      },
      {
        "time_stamp": "2023-02-08 05:28:05"
      },
      {
        "time_stamp": "2023-02-09 07:38:19"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Alex Woodbridge",
      "poster_handle": "alex.woodbridge"
    },
    "time_stamp": "2023-02-07 07:25:13",
    "text": "This worked a treat, thanks"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-07 08:13:41",
    "text": "Of course"
  },
  {
    "poster": {
      "poster_name": "Alex Woodbridge",
      "poster_handle": "alex.woodbridge"
    },
    "time_stamp": "2023-02-07 11:30:14",
    "text": "Hey all,\n\nOn of my developers inadvertently updated the `firstname`  and `lastname` fields for 600 contacts to blank via the API - is there a workflow/ custom code automation that would revert this change rather than having to go though 1 by 1 and manually updating the data?\n\nthanks\nAlex",
    "reply_count": 22,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-02-07 11:32:08"
      },
      {
        "time_stamp": "2023-02-07 11:32:17"
      },
      {
        "time_stamp": "2023-02-07 11:32:50"
      },
      {
        "time_stamp": "2023-02-07 11:33:04"
      },
      {
        "time_stamp": "2023-02-07 11:33:26"
      },
      {
        "time_stamp": "2023-02-07 11:33:34"
      },
      {
        "time_stamp": "2023-02-07 11:45:17"
      },
      {
        "time_stamp": "2023-02-07 11:45:21"
      },
      {
        "time_stamp": "2023-02-07 11:45:54"
      },
      {
        "time_stamp": "2023-02-07 11:46:02"
      },
      {
        "time_stamp": "2023-02-07 11:46:10"
      },
      {
        "time_stamp": "2023-02-07 11:46:17"
      },
      {
        "time_stamp": "2023-02-07 11:46:33"
      },
      {
        "time_stamp": "2023-02-07 11:58:40"
      },
      {
        "time_stamp": "2023-02-07 11:59:58"
      },
      {
        "time_stamp": "2023-02-07 12:00:18"
      },
      {
        "time_stamp": "2023-02-07 12:00:48"
      },
      {
        "time_stamp": "2023-02-07 12:01:29"
      },
      {
        "time_stamp": "2023-02-07 12:01:49"
      },
      {
        "time_stamp": "2023-02-07 12:02:00"
      },
      {
        "time_stamp": "2023-02-07 12:02:20"
      },
      {
        "time_stamp": "2023-02-07 12:05:47"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-07 11:32:08",
    "text": "You could build a little workflow that does this"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-07 11:32:17",
    "text": "triggers would be: firstname and lastname are blank"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-07 11:32:50",
    "text": "first step is a custom coded action, calls the contacts endpoint using the email address to get the firstname and lastname properties history, then output that data"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-07 11:33:04",
    "edited": {
      "time_stamp": "2023-02-07 11:33:14"
    },
    "text": "copy the properties to the firstname and lastname fields using the copy property action"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-07 11:33:26",
    "text": "Let me get you the code for this real quick, fun project"
  },
  {
    "poster": {
      "poster_name": "Alex Woodbridge",
      "poster_handle": "alex.woodbridge"
    },
    "time_stamp": "2023-02-07 11:33:34",
    "text": "Nice, thank you"
  },
  {
    "text": "",
    "time_stamp": "2023-02-07 11:45:17"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-07 11:45:21",
    "text": "<@U04512YU6GH>"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-07 11:45:54",
    "text": "custom code:\n```var axios = require('axios');\nexports.main = async (event, callback) =&gt; {\n\n    var config = {\n        method: 'get',\n        url: '<https://api.hubapi.com/crm/v3/objects/contacts/>' + event.fields.email + '?propertiesWithHistory=firstname%2Clastname&amp;idProperty=email',\n        headers: {\n            'Authorization': 'Bearer xxxxxxx'\n        }\n    };\n\n    axios(config)\n        .then(function(response) {\n            console.log(JSON.stringify(response.data));\n            var firstname = \"\";\n            var lastname = \"\";\n            for (let i = 0; i &lt; response.data.propertiesWithHistory.firstname.length; i++) {\n                if (response.data.propertiesWithHistory.firstname[i].value !== \"\") {\n                    firstname = response.data.propertiesWithHistory.firstname[i].value\n                    break\n                }\n            }\n            for (let i = 0; i &lt; response.data.propertiesWithHistory.lastname.length; i++) {\n                if (response.data.propertiesWithHistory.lastname[i].value !== \"\") {\n                    lastname = response.data.propertiesWithHistory.lastname[i].value\n                    break\n                }\n            }\n            callback({\n                outputFields: {\n                    firstname: firstname,\n                    lastname: lastname\n                }\n            });\n        })\n        .catch(function(error) {\n            console.log(error);\n        });\n}```\n"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-07 11:46:02",
    "text": "replace xxxxx with your key"
  },
  {
    "text": "",
    "time_stamp": "2023-02-07 11:46:10"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-07 11:46:17",
    "text": ":arrow_up:  input"
  },
  {
    "text": "Output:",
    "time_stamp": "2023-02-07 11:46:33"
  },
  {
    "poster": {
      "poster_name": "Alex Woodbridge",
      "poster_handle": "alex.woodbridge"
    },
    "time_stamp": "2023-02-07 11:58:40",
    "text": "Nice! this worked a treat"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-07 11:59:58",
    "text": "Perfect!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-07 12:00:18",
    "text": "didn't run a test and coded it live so didn't really know if it would work"
  },
  {
    "poster": {
      "poster_name": "Alex Woodbridge",
      "poster_handle": "alex.woodbridge"
    },
    "time_stamp": "2023-02-07 12:00:48",
    "text": "Well it passed my tests - I am just checking in my sandbox"
  },
  {
    "poster": {
      "poster_name": "Alex Woodbridge",
      "poster_handle": "alex.woodbridge"
    },
    "time_stamp": "2023-02-07 12:01:29",
    "text": "It worked a charm"
  },
  {
    "text": "",
    "time_stamp": "2023-02-07 12:01:49"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-07 12:02:00",
    "text": "Perfect"
  },
  {
    "poster": {
      "poster_name": "Alex Woodbridge",
      "poster_handle": "alex.woodbridge"
    },
    "time_stamp": "2023-02-07 12:02:20",
    "text": "Thanks for the assist :+1:"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-07 12:05:47",
    "text": "of course"
  },
  {
    "poster": {
      "poster_name": "Logan Armstrong",
      "poster_handle": "logan565"
    },
    "time_stamp": "2023-02-07 13:09:12",
    "text": "Not a workflow solution, but we've solved for this by creating a master 'Reporting Exclusion' list, and keep it updated with any domains that we don't want included in reporting. Then on any applicable reports we filter out by list membership (i.e, not a member of the Reporting Exclusion list)"
  }
]