[
  null,
  null,
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-11-20 07:34:26",
    "text": "I have a blog feed being generated with `blog_recent_posts`. I want to add in a couple CTAs after certain points in the loop. Currently. doing `{% if loop.index== 7 %} // code here` replaces whatever post would normally be in that spot, should there be something else im doing to avoid that?",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-11-20 07:50:16"
      },
      {
        "time_stamp": "2018-11-20 08:03:27"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-11-20 07:50:16",
    "text": "Loop index seems like the best approach here"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-20 07:50:21",
    "text": "You could run your normal code then add the CTA after it"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-20 07:51:49",
    "text": "So you have a div that appears with your blog title, featured image, date etc. for every loop. On that seventh loop add that code in again then add a sibling div for the CTA.",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-11-20 08:09:30"
      },
      {
        "time_stamp": "2018-11-20 08:54:51"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-11-20 08:03:27",
    "edited": {
      "time_stamp": "2018-11-20 08:03:57"
    },
    "text": "<@U6GNQ7JBU> But is that the intended behavior? I know in a normal blog listing page using the Loop index places the thing *after*. In this case, it does a replace of whats in that spot"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-11-20 08:09:30",
    "edited": {
      "time_stamp": "2018-11-20 08:15:23"
    },
    "text": "This seemed to work, alittle annoying to have to add in that code again, but, I guess thats just the way it is :shrug:"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-11-20 08:47:59",
    "text": ":thumbsup_all:"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-20 08:54:51",
    "text": "Yeah kind of a pain, you could always jam it in there with JS but that isn’t the cleanest solution either."
  },
  null,
  {
    "poster": {
      "poster_name": "Johan Vantomme",
      "poster_handle": "johanvt"
    },
    "time_stamp": "2018-11-20 10:34:07",
    "text": "BUG-REPORT\nThe call of a contact variable in a HubSpot email has changed\n{{ personalization_token(“contact.HubSpot_contact_record”, “”) }} == link to the contact page in HubSpot\nif you add this variable in an a href the quotes got scrambled and the link is not working anymore, its empty\nchanging ” to ' or vice versa does not help\nyou need to use old way to call the variable\na href=“{{ contact.HubSpot_contact_record }}”"
  },
  null,
  null,
  null,
  {
    "poster": {
      "poster_name": "Russell Benzing",
      "poster_handle": "rbenzing"
    },
    "time_stamp": "2018-11-20 15:35:45",
    "text": "Hey guys I have 2 fields with 24 hour times in them and I want to convert them to 12 hr is there an easier filter for this? I am using \"{% set start_time = dynamic_page_hubdb_row.start_time|unixtimestamp|datetimeformat('%H:%I') %}\" but it isnt working...",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-11-20 15:48:51"
      },
      {
        "time_stamp": "2018-11-20 16:01:57"
      },
      {
        "time_stamp": "2018-11-20 16:05:54"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-11-20 15:48:51",
    "text": "Remove the `unixtimestamp` part perhaps"
  },
  {
    "poster": {
      "poster_name": "Russell Benzing",
      "poster_handle": "rbenzing"
    },
    "time_stamp": "2018-11-20 16:01:57",
    "text": "yeah i tried that too still didnt work for somereason"
  },
  {
    "poster": {
      "poster_name": "Lewis Robinson",
      "poster_handle": "lewisvrobinson"
    },
    "time_stamp": "2018-11-20 16:05:38",
    "text": "hey everyone, is it possible to use personalisation tokens for field values in an email template built using custom modules?"
  },
  {
    "poster": {
      "poster_name": "Russell Benzing",
      "poster_handle": "rbenzing"
    },
    "time_stamp": "2018-11-20 16:05:54",
    "text": "the field value is just \"16:00\" would i need the date?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-11-20 16:06:48",
    "text": "You should be able to. Personalization is nothing more than hubl tags"
  },
  {
    "poster": {
      "poster_name": "Lewis Robinson",
      "poster_handle": "lewisvrobinson"
    },
    "time_stamp": "2018-11-20 16:25:41",
    "text": "seems to work using the `rich text` field type on the module, but not with the `text` field type. Is that the only way to get a personalisation token into a custom module without hard coding it in?",
    "reply_count": 5,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-11-20 16:33:21"
      },
      {
        "time_stamp": "2018-11-20 16:36:41"
      },
      {
        "time_stamp": "2018-11-20 16:37:38"
      },
      {
        "time_stamp": "2018-11-20 16:38:12"
      },
      {
        "time_stamp": "2018-11-20 17:16:58"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-20 16:33:21",
    "text": "well there’s a really convoluted complicated way where you could make it so you could put a certain text string in any field type and  replace that text with the hubl value. so you could essentially make hubl vars output in fields that wouldn’t normally accept it. (requires a custom module)"
  },
  {
    "poster": {
      "poster_name": "Lewis Robinson",
      "poster_handle": "lewisvrobinson"
    },
    "time_stamp": "2018-11-20 16:36:41",
    "text": "well color me intrigued… how would I do something like that? I’m already using custom modules for for everything possible"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-20 16:37:38",
    "text": "when you’re outputting the field use `|replace(\"text string\",YOURVAR)`"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-20 16:38:12",
    "text": "I don’t often have a reason to do this but when I do ^^"
  },
  {
    "poster": {
      "poster_name": "Lewis Robinson",
      "poster_handle": "lewisvrobinson"
    },
    "time_stamp": "2018-11-20 17:16:58",
    "text": "I might give that a whirl. Thanks!"
  },
  null
]