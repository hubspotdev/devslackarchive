[
  {
    "poster": {
      "poster_name": "Antonio Quadrado",
      "poster_handle": "antonio122"
    },
    "time_stamp": "2022-07-12 03:49:45",
    "edited": {
      "time_stamp": "2022-07-12 03:57:09"
    },
    "text": "Hi guys, quick question: how can I know how to call certain endpoints through node's HubSpot client? I can get the contacts from `HubSpotClient.crm.contacts.getAll()`  as exemplified in the docs but if I want to call <https://legacydocs.HubSpot.com/docs/methods/lists/add_contact_to_list|this> endpoint through the client I have no reference on how to do the call that I can find.\n\nEdit: seems that I had missed <https://github.com/HubSpot/HubSpot-api-nodejs#not-wrapped-endpoints|this> bit."
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2022-07-12 03:51:42",
    "text": "Ignore i’d just set up my headers array wrong\n```$headers = array(\n\t\t\"Content-Type: application/json;\n\t\tAuthorization: Bearer $token;\n\t\tContent-Length: \".strlen($postData)\n\t);```"
  },
  {
    "poster": {
      "poster_name": "Erik Pettersson",
      "poster_handle": "erik529"
    },
    "time_stamp": "2022-07-12 04:03:44",
    "edited": {
      "time_stamp": "2022-07-12 04:07:17"
    },
    "text": "I'm not really sure you can associate notes with deals, as I haven't played much with the engagement parts. From reading here: <https://developers.HubSpot.com/docs/api/crm/notes#associate-notes-with-records>, it seems that it should work. Just send deal as the type and the ID, and find the name of the association type in the Association API as described there."
  },
  {
    "poster": {
      "poster_name": "Evgeniia S",
      "poster_handle": "codechef730"
    },
    "time_stamp": "2022-07-12 04:54:25",
    "text": "Thank you, I will try"
  },
  {
    "text": "Hi guys, can we get the status of who is active on HubSpot by the api?",
    "time_stamp": "2022-07-12 08:10:27",
    "edited": {
      "time_stamp": "2022-07-12 08:11:14"
    },
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2022-07-12 08:50:28"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-07-12 08:50:28",
    "text": "To my knowledge there isn't an API for that yet, you could use this api <https://developers.HubSpot.com/docs/api/settings/account-information-api>\nand see if the user is logged in and when they logged in."
  },
  {
    "poster": {
      "poster_name": "Taras Lavreniuk",
      "poster_handle": "lavrik1997"
    },
    "time_stamp": "2022-07-12 10:41:47",
    "text": "Hello everyone :wave:\nDoes someone know is there a way to revert an import via api call somehow? There is a way to cancel an active (ongoing) import (see <https://developers.HubSpot.com/docs/api/crm/imports|here>), but I’m looking rather for revert the one that already done.\nWould appreciate any help :blush:\nThanks a lot :awthanks:"
  },
  {
    "poster": {
      "poster_name": "Lukas Schwab",
      "poster_handle": "lukas"
    },
    "time_stamp": "2022-07-12 11:37:42",
    "text": "Howdy! I just wrapped up a big HubSpot project at Sequin, and celebrated by publishing a blog post about the HubSpot API: <https://blog.sequin.io/what-to-do-without-HubSpot-webhooks/>\n\nSpecifically:\n• Limitations to HubSpot’s Webhooks API (dynamic property lists, custom objects, etc).\n• Limitations to the Workflow work-around (recommended in all the HubSpot forum posts on this topic).\n• A breakdown of Sequin’s cursor-based solution.\nHope this can save you the difficulty we went through, and feel free to ping me if you have feedback or questions about my work! Sequin’s product can now live-replicate your HubSpot data into a Postgres database, where you don’t have to grapple with API limitations to use it."
  },
  {
    "poster": {
      "poster_name": "Álisson Silva",
      "poster_handle": "alissonavlis96"
    },
    "time_stamp": "2022-07-12 12:36:00",
    "text": "Hello everyone, I',m developint an aplication which can get all contacts and deala from my client's HubSpot and save then to a local database, my problem is, while I can get all contacts without problems, my deals paging loop is always getting an 401 error when my access token expires, the thing is, I have developed a refresh token system that works, and I am handling this exact exception on my get contacts ans get deals loop, but, while the solution works with the contacts loop perfectly, the same solution is not workinf with the deals loop, does anyone have any idea what the cause for thus may be? i can give more details ir necessary",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2022-07-13 19:19:59"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Dylan Kapustka",
      "poster_handle": "dylan.kapustka"
    },
    "time_stamp": "2022-07-12 18:39:47",
    "edited": {
      "time_stamp": "2022-07-12 18:56:47"
    },
    "text": "Hi, I am currently using HubSpot for our companies database and wondering what changes will need to be made when the new API protocol comes out in November. Will I need to rewrite all of my Node.js logic for the new API call format? or is it just something as simple as changing the api key to token format",
    "reply_count": 24,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2022-07-14 12:41:37"
      },
      {
        "time_stamp": "2022-07-14 12:42:51"
      },
      {
        "time_stamp": "2022-07-14 12:42:56"
      },
      {
        "time_stamp": "2022-07-14 13:00:40"
      },
      {
        "time_stamp": "2022-07-14 13:01:04"
      },
      {
        "time_stamp": "2022-07-14 13:05:12"
      },
      {
        "time_stamp": "2022-07-14 13:05:17"
      },
      {
        "time_stamp": "2022-07-14 13:05:30"
      },
      {
        "time_stamp": "2022-07-14 13:05:39"
      },
      {
        "time_stamp": "2022-07-14 13:05:53"
      },
      {
        "time_stamp": "2022-07-14 13:06:00"
      },
      {
        "time_stamp": "2022-07-14 13:06:21"
      },
      {
        "time_stamp": "2022-07-14 13:06:33"
      },
      {
        "time_stamp": "2022-07-14 13:07:05"
      },
      {
        "time_stamp": "2022-07-14 13:07:14"
      },
      {
        "time_stamp": "2022-07-14 13:07:25"
      },
      {
        "time_stamp": "2022-07-14 13:07:30"
      },
      {
        "time_stamp": "2022-07-14 13:07:45"
      },
      {
        "time_stamp": "2022-07-14 13:07:57"
      },
      {
        "time_stamp": "2022-07-14 13:08:05"
      },
      {
        "time_stamp": "2022-07-14 13:08:34"
      },
      {
        "time_stamp": "2022-07-14 13:08:42"
      },
      {
        "time_stamp": "2022-07-14 13:09:03"
      },
      {
        "time_stamp": "2022-07-14 13:09:32"
      }
    ]
  }
]