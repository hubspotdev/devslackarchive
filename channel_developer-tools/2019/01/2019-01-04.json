[
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  {
    "poster": {
      "poster_name": "Chris Abplanalp",
      "poster_handle": "cabplanalp"
    },
    "time_stamp": "2019-01-04 14:31:39",
    "text": "Do any HS developers know how to get a complete list of all blog posts as elements, we have tried to use the “blog_recent_posts” function but it hits a 200 limit, we are combining blog posts across many blogs so we need way to get past this limit"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-04 14:36:14",
    "text": "there is a hacky way,  but I am certain HS devs wouldn’t want you to use it because it’s probably hard on their servers.\n\nThe best way might be to use the blog api.\n\nOtherwise maybe your content should be done as a HubDB instead, it has a 1000 row limit"
  },
  {
    "poster": {
      "poster_name": "Chris Abplanalp",
      "poster_handle": "cabplanalp"
    },
    "time_stamp": "2019-01-04 14:51:43",
    "text": "yeah we cannot move away from blog posts, we literally just converted away from hubdb because our marketers did not like how the UI/UX of hubdb was"
  },
  {
    "poster": {
      "poster_name": "Chris Abplanalp",
      "poster_handle": "cabplanalp"
    },
    "time_stamp": "2019-01-04 14:52:11",
    "text": "what is ur hacky way?"
  },
  {
    "poster": {
      "poster_name": "Chris Abplanalp",
      "poster_handle": "cabplanalp"
    },
    "time_stamp": "2019-01-04 14:54:39",
    "text": "is there there way to combine functions of pulling all the active blog topics and then pulling all the blog recent posts based on active blogs in a for-loop of some kind that match the topic"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2019-01-04 14:57:03",
    "text": "Pulling all those together will be quite cumbersome and slow. HubDB was designed specifically to solve what sounds like your use case. We’d love to hear more about why it didn’t work out for your team."
  },
  {
    "poster": {
      "poster_name": "Chris Abplanalp",
      "poster_handle": "cabplanalp"
    },
    "time_stamp": "2019-01-04 15:01:00",
    "text": "it was more that the UI on the backend of HubDB, it being all rows like a table inside of nice blog page, we had HubDB working for press releases but those needed a lot of content on the full page, and the hubDB of the text editor was all limiting in what it offers with a WYSIWYG, we decided to move all HubDBs to Blogs also for Blog Topics, Marketing can easily add Topics in the Blog sections which all the user to filter by that topic"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2019-01-04 15:04:10",
    "text": "If your data is mostly content, then that makes sense to use blogs. Why do you need to combine across multiple blogs?"
  },
  {
    "poster": {
      "poster_name": "Chris Abplanalp",
      "poster_handle": "cabplanalp"
    },
    "time_stamp": "2019-01-04 15:22:38",
    "text": "we basically made a Resource Center area, that aggregates all the blogs together between a true blog, then press releases which is a blog, news items that is a blog and then unique items that is a blog as well. Again, they are all blogs and they are all aggregating to a front page and sorting by date, then as you click on each area, it then just displays that blog filtered by that specific blog"
  },
  {
    "poster": {
      "poster_name": "Chris Abplanalp",
      "poster_handle": "cabplanalp"
    },
    "time_stamp": "2019-01-04 15:23:55",
    "text": "and they are then using Blog Topics, which then Marketing can tag different blog posts between all the blogs, which then filters on all the blogs being displayed to display multiple types of blog types based on that topic selected"
  },
  {
    "poster": {
      "poster_name": "Chris Abplanalp",
      "poster_handle": "cabplanalp"
    },
    "time_stamp": "2019-01-04 15:24:53",
    "text": "again the issue is very old blog posts do not display because of the 200 limit, and I have not found a way to actually display all blog posts"
  },
  {
    "poster": {
      "poster_name": "Chris Abplanalp",
      "poster_handle": "cabplanalp"
    },
    "time_stamp": "2019-01-04 15:25:53",
    "text": "I mean having a “blog_posts_recent” is a nice function, but why wouldn’t there be a “all_blog_posts” function as well, seems like it should be something available"
  },
  null,
  null
]