[
  {
    "poster": {
      "poster_name": "Laurence Harney",
      "poster_handle": "lharney"
    },
    "time_stamp": "2023-04-13 02:12:23",
    "text": "I know but I need to automate this. Are you saying it's not possible?"
  },
  {
    "poster": {
      "poster_name": "Bo Høirup Pedersen",
      "poster_handle": "bohoirup"
    },
    "time_stamp": "2023-04-13 02:30:03",
    "text": "<@U01QVR44MEY>\n\nI get the following error when i use that URL\n{\n    \"status\": \"error\",\n    \"message\": \"Unable to infer object type from: companies \",\n    \"correlationId\": \"2345fc22-53b3-47b4-a198-8cab6595c140\"\n}"
  },
  {
    "poster": {
      "poster_name": "Bo Høirup Pedersen",
      "poster_handle": "bohoirup"
    },
    "time_stamp": "2023-04-13 02:35:14",
    "text": "Nevermind, had a space in the end of the string *sorry*"
  },
  {
    "poster": {
      "poster_name": "Idan Ron",
      "poster_handle": "idanron5"
    },
    "time_stamp": "2023-04-13 04:59:38",
    "text": "Hello\n\nI am trying to create a note on a contact from the \"custom code\" module in workflows.\n\nFor some reason, the code seems to be working fine and I also see on the tests that the note has been created, but I can't find the note on the record.\n\n\nWhen I run the same code from external enviroment, not from the custom code module, it works properly and the note is shown.\n\nSomeone knows maybe what can cause this issue?\n\nHere is a video of the problem:\n<https://www.loom.com/share/445711a973104c6ea375ea33b8a4a5c8>",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-11-16 02:30:57"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-13 07:00:57",
    "text": "totally good man, you can also use the associations api directly. but that wouldn't return any of the properties for the deal if you did it that way"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-13 07:02:35",
    "text": "Yep it's 90 days for my portal"
  },
  {
    "poster": {
      "poster_name": "Karthik Kanur Palaniswamy",
      "poster_handle": "karthik.p"
    },
    "time_stamp": "2023-04-13 09:02:14",
    "text": "Hi, Would someone know how to upgrade the legacy Salesforce API's that HubSpot is connected with?",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2024-06-13 08:29:52"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jacob Jennings",
      "poster_handle": "jacob550"
    },
    "time_stamp": "2023-04-13 12:20:11",
    "text": "Does anyone know if there is a way to sort `GET <https://api.hubapi.com/crm/v4/objects/company/{companyId}/associations/{objectType}>` , by default it seems to be sorted by `hs_createdate` in ascending order but I’d like to be able to get them in descending order"
  },
  {
    "text": "<@U01QVR44MEY> another completely different question. Decided to go for the option of creating my own call via the API.\nBut I cannot see the metadata of the engagement. Would you know how I can get this?\nBasically I want to <https://legacydocs.HubSpot.com/docs/methods/engagements/get-all-engagements|see this.> But I see the screenshot.\nUsing the following python code... the `filter_groups` are my parameters which I'm just doing ID = int\n\nI'd like to see the metadata like the\n```durationMilliseconds```\nbut I'm unable to get it :confused:\n```\npublic_object_search_request = PublicObjectSearchRequest( \\\n    filter_groups=filter_groups, properties=[\"hs_object_id\"],limit=1,)\ntry:\n    api_response = client.crm.objects.calls.search_api.do_search(public_object_search_request=public_object_search_request)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling search_api-&gt;do_search: %s\\n\" % e)```",
    "time_stamp": "2023-04-13 12:30:35"
  },
  {
    "poster": {
      "poster_name": "Jack",
      "poster_handle": "jbaumgartel"
    },
    "time_stamp": "2023-04-13 13:03:59",
    "text": "I posted about it yesterday, but want to offer a more succinct demonstration of an issue I found using the API's sample code for python:\n&gt;&gt; &gt;&gt;import HubSpot\n&gt;&gt; &gt;&gt;from HubSpot.crm.objects.notes import SimplePublicObjectInputForCreate, ApiException\n&gt;&gt; &gt;&gt;ModuleNotFoundError: No module named 'HubSpot.crm.objects.notes'\n"
  },
  {
    "poster": {
      "poster_name": "Jack",
      "poster_handle": "jbaumgartel"
    },
    "time_stamp": "2023-04-13 13:04:37",
    "text": "Those first two lines taken straight from the sample code, and they return with error"
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-04-13 13:25:07",
    "text": "I’m saying you should be able to structure the document the same as a UI imports and use them in the API import."
  },
  {
    "poster": {
      "poster_name": "Hannah Seligson - Developer Advocate",
      "poster_handle": "hseligson"
    },
    "time_stamp": "2023-04-13 14:10:52",
    "text": "Hi ya’ll! I reached out internally to have those code examples looked at and perhaps remove the Associations within the batch endpoint code examples. Sorry for the inconvenience, and thank you for bringing it to our attention!"
  },
  {
    "text": "Is there a way to get the record ID's for the meeting attendees. NOT the associated contacts? We never log internal people's emails or meetings, but if a meeting is scheduled with someone outside the organization, they still get added as an attendee but not as an associated contact. See below",
    "time_stamp": "2023-04-13 14:18:42"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2023-04-13 14:21:47",
    "text": "how many of y’all use the SDKs?",
    "reply_count": 50,
    "reply_users_count": 5,
    "replies": [
      {
        "time_stamp": "2023-04-13 17:02:17"
      },
      {
        "time_stamp": "2023-04-13 17:02:31"
      },
      {
        "time_stamp": "2023-04-13 17:03:54"
      },
      {
        "time_stamp": "2023-04-13 17:11:59"
      },
      {
        "time_stamp": "2023-04-13 17:13:04"
      },
      {
        "time_stamp": "2023-04-13 17:14:03"
      },
      {
        "time_stamp": "2023-04-13 17:16:04"
      },
      {
        "time_stamp": "2023-04-13 17:18:55"
      },
      {
        "time_stamp": "2023-04-13 17:19:03"
      },
      {
        "time_stamp": "2023-04-13 17:19:05"
      },
      {
        "time_stamp": "2023-04-13 17:19:09"
      },
      {
        "time_stamp": "2023-04-13 17:19:15"
      },
      {
        "time_stamp": "2023-04-13 17:19:18"
      },
      {
        "time_stamp": "2023-04-13 17:19:20"
      },
      {
        "time_stamp": "2023-04-13 17:19:29"
      },
      {
        "time_stamp": "2023-04-13 17:19:58"
      },
      {
        "time_stamp": "2023-04-13 17:20:05"
      },
      {
        "time_stamp": "2023-04-13 17:20:15"
      },
      {
        "time_stamp": "2023-04-13 17:20:29"
      },
      {
        "time_stamp": "2023-04-13 17:20:52"
      },
      {
        "time_stamp": "2023-04-13 17:21:17"
      },
      {
        "time_stamp": "2023-04-13 17:21:28"
      },
      {
        "time_stamp": "2023-04-13 17:21:35"
      },
      {
        "time_stamp": "2023-04-13 17:21:39"
      },
      {
        "time_stamp": "2023-04-13 17:21:42"
      },
      {
        "time_stamp": "2023-04-13 17:21:59"
      },
      {
        "time_stamp": "2023-04-13 17:22:14"
      },
      {
        "time_stamp": "2023-04-13 17:22:24"
      },
      {
        "time_stamp": "2023-04-13 17:22:47"
      },
      {
        "time_stamp": "2023-04-13 17:23:21"
      },
      {
        "time_stamp": "2023-04-13 17:23:42"
      },
      {
        "time_stamp": "2023-04-13 17:23:52"
      },
      {
        "time_stamp": "2023-04-13 17:24:25"
      },
      {
        "time_stamp": "2023-04-13 17:25:28"
      },
      {
        "time_stamp": "2023-04-13 17:25:39"
      },
      {
        "time_stamp": "2023-04-13 17:25:40"
      },
      {
        "time_stamp": "2023-04-13 17:27:14"
      },
      {
        "time_stamp": "2023-04-13 17:27:55"
      },
      {
        "time_stamp": "2023-04-13 17:28:28"
      },
      {
        "time_stamp": "2023-04-13 17:48:28"
      },
      {
        "time_stamp": "2023-04-13 17:56:33"
      },
      {
        "time_stamp": "2023-04-14 06:25:56"
      },
      {
        "time_stamp": "2023-04-14 07:36:02"
      },
      {
        "time_stamp": "2023-04-14 07:37:27"
      },
      {
        "time_stamp": "2023-04-14 07:41:20"
      },
      {
        "time_stamp": "2023-04-14 08:04:26"
      },
      {
        "time_stamp": "2023-04-14 08:05:37"
      },
      {
        "time_stamp": "2023-04-14 08:06:38"
      },
      {
        "time_stamp": "2023-04-14 13:48:28"
      },
      {
        "time_stamp": "2023-04-14 14:40:27"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-04-13 17:02:17",
    "text": "Can we dedicate this thread for reasons why you don't?  \nI am pretty sure I know some of the answers, but the more info you can provide, the better"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-04-13 17:02:31",
    "text": "<@U03REFNRMB3> <@U01QVR44MEY>"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-04-13 17:03:54",
    "text": "And!  I know y'all like to complain.  So do I, but!\nIf you could also add what you would want as well as expect.  I will make sure <@U3T21PDBK> sends a cupcake to you"
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-04-13 17:11:59",
    "text": "One reason was: SDK.v3, it was always out of date.\nAnother reason was the documentation for the SDK was nonexistent.\n\nI haven’t dug into the SDK.v8.\n\nI love cupcakes and reasons to change! :smile:"
  },
  {
    "time_stamp": "2023-04-13 17:13:04",
    "text": "called out"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-04-13 17:14:03",
    "text": "John owes me a lot.  Don't worry. he is good for it"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-13 17:16:04",
    "edited": {
      "time_stamp": "2023-04-13 17:18:16"
    },
    "text": "1. Always out of date\n2. Never know which version of the api it's using (v3/v4)\n3. The method notations just don't make as much sense to me as the endpoint urls\n4. I never know if I'm sending the parameters in correctly and if I forget to send one it all breaks unlike the endpoints\n5. Some endpoints aren't supported so you have to use the api call method which defeats the purpose.\n6. Pretty much community driven for the Ruby and PHP one, (sure there is HubSpot involvement but it's just not continous)\n7. Axios is just my favorite thing ever\n8. I can directly take a postman call and generate the axios code (<@U03REFNRMB3> will attest that this is the greatest) so much faster to do this than convert for the SDK (need to go check the docs to see how to send the parameters, lol)"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-13 17:18:55",
    "text": "Not a big cupcake fan so if you can send a bag of jolly ranchers I would very much appreciate that."
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-04-13 17:19:03",
    "text": "Gross"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-04-13 17:19:05",
    "text": "No"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-13 17:19:09",
    "text": "hater"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-04-13 17:19:15",
    "text": "Yes"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-04-13 17:19:18",
    "text": "Happily"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-13 17:19:20",
    "text": "why?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-04-13 17:19:29",
    "text": "Because your choice in candy is awful"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-13 17:19:58",
    "text": "mike and ikes?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-04-13 17:20:05",
    "text": "Carter"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-04-13 17:20:15",
    "text": "Stop.  This is just embarrassing for you"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-13 17:20:29",
    "text": "those are my go-tos"
  },
  {
    "text": "",
    "time_stamp": "2023-04-13 17:20:52"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-13 17:21:17",
    "text": "last try: water melon sour patch"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-04-13 17:21:28",
    "text": "I can handle that"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-04-13 17:21:35",
    "text": "But still"
  },
  {
    "time_stamp": "2023-04-13 17:21:39",
    "text": "victory"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-04-13 17:21:42",
    "text": "I have lost respect"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-13 17:21:59",
    "text": "we can still be friends though right?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-04-13 17:22:14",
    "text": "Yeah. Come on over here, you big lug"
  },
  {
    "time_stamp": "2023-04-13 17:22:24",
    "text": "hug"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-04-13 17:22:47",
    "text": "<@U3T21PDBK> take care of these two"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-13 17:23:21",
    "text": "And yes I like to complain but honestly I have tried the SDK so many times that I know I'm not just being difficult, I really do just like using the endpoints it's part of my personality at this point"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-04-13 17:23:42",
    "text": "Gotchya"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-04-13 17:23:52",
    "text": "As always, thank you."
  },
  {
    "text": "I think I have like 100 messages telling people not to use the SDK:",
    "time_stamp": "2023-04-13 17:24:25"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-04-13 17:25:28",
    "text": "Only way to improve is to know the flaws.  Any info added here, I can send to the mothership"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-04-13 17:25:39",
    "text": "Not your candy preference"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-13 17:25:40",
    "text": "Love it, appreciate you"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-13 17:27:14",
    "text": "9. GPT has a hell of a hard time with api endpoints (wants to use non existent ones, or v1), so writing all code using the endpoints is job security."
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-04-13 17:27:55",
    "text": "Agree with <@U01QVR44MEY> except about the candy, Direct API and Postman is 1000% faster."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-13 17:28:28",
    "text": "(This is a complain session but there are a lot of great reasons to use the SDK like: you can update all the endpoints with just one package upgrade)"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2023-04-13 17:48:28",
    "text": "I briefly saw reference to documentation somewhere one time. What documentation exists? "
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-04-13 17:56:33",
    "text": "Documentation never matched the source code so I didn't think it was ready for use. \n\nFor example, I saw commits on GitHub but not updated docs and just assumed it wasn't ready"
  },
  {
    "poster": {
      "poster_name": "Gareth Morrison",
      "poster_handle": "gareth744"
    },
    "time_stamp": "2023-04-13 22:37:55",
    "edited": {
      "time_stamp": "2023-04-13 22:38:21"
    },
    "text": "Hi, does anyone know if it’s possible to send the `HubSpotutk` as a parameter in the Contacts API to link the page-tracking data to a created HubSpot contact?"
  },
  {
    "poster": {
      "poster_name": "Nikolas Artadi",
      "poster_handle": "nikolas.artadi"
    },
    "time_stamp": "2023-04-14 00:44:46",
    "text": "Hey everyone! I'm having issues querying the engagements API.\nI want to query all the data inside the metadata section of the engagement call, but when I call a random test call, the only data that I see are these data points:\n`hs_createdate`,`hs_lastmodifieddate`, `hs_object_id`\nHave you had previous experiences filtering with this API and what data points did you use as input in the \"filters\" section?\nIt's coded using python.\nUsing this <https://legacydocs.HubSpot.com/docs/methods/engagements/get-all-engagements|documentation>.\nAnd this is my code:\n```filter_groups = [ \\\n\n        {\n            \"filters\": [\n                {\n                    \"propertyName\": \"hs_call_direction\",\n                    \"operator\": \"EQ\",\n                    \"value\": \"OUTBOUND\",\n                }\n            ]\n        }\n    ] \n\npublic_object_search_request = PublicObjectSearchRequest( \\\n    filter_groups=filter_groups, properties=[\"hs_object_id\"],limit=1,)\ntry:\n    api_response = client.crm.objects.calls.search_api.do_search(public_object_search_request=public_object_search_request)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling search_api-&gt;do_search: %s\\n\" % e)```",
    "reply_count": 37,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-04-14 11:18:40"
      },
      {
        "time_stamp": "2023-04-14 11:23:56"
      },
      {
        "time_stamp": "2023-04-14 11:34:56"
      },
      {
        "time_stamp": "2023-04-17 08:59:11"
      },
      {
        "time_stamp": "2023-04-17 08:59:54"
      },
      {
        "time_stamp": "2023-04-17 09:00:37"
      },
      {
        "time_stamp": "2023-04-17 09:02:10"
      },
      {
        "time_stamp": "2023-04-17 09:17:57"
      },
      {
        "time_stamp": "2023-04-17 09:18:17"
      },
      {
        "time_stamp": "2023-04-17 09:19:13"
      },
      {
        "time_stamp": "2023-04-17 09:21:44"
      },
      {
        "time_stamp": "2023-04-17 09:23:27"
      },
      {
        "time_stamp": "2023-04-17 09:30:22"
      },
      {
        "time_stamp": "2023-04-17 09:30:30"
      },
      {
        "time_stamp": "2023-04-17 09:30:34"
      },
      {
        "time_stamp": "2023-04-17 09:30:48"
      },
      {
        "time_stamp": "2023-04-17 09:30:53"
      },
      {
        "time_stamp": "2023-04-17 09:31:01"
      },
      {
        "time_stamp": "2023-04-17 09:31:11"
      },
      {
        "time_stamp": "2023-04-17 09:31:45"
      },
      {
        "time_stamp": "2023-04-17 09:32:10"
      },
      {
        "time_stamp": "2023-04-17 09:32:18"
      },
      {
        "time_stamp": "2023-04-17 09:33:28"
      },
      {
        "time_stamp": "2023-04-17 09:33:38"
      },
      {
        "time_stamp": "2023-04-17 09:33:52"
      },
      {
        "time_stamp": "2023-04-17 09:34:03"
      },
      {
        "time_stamp": "2023-04-17 09:34:09"
      },
      {
        "time_stamp": "2023-04-17 09:36:10"
      },
      {
        "time_stamp": "2023-04-17 09:37:13"
      },
      {
        "time_stamp": "2023-04-17 09:37:18"
      },
      {
        "time_stamp": "2023-04-17 09:40:58"
      },
      {
        "time_stamp": "2023-04-17 09:41:49"
      },
      {
        "time_stamp": "2023-04-17 10:16:27"
      },
      {
        "time_stamp": "2023-04-17 10:17:11"
      },
      {
        "time_stamp": "2023-04-17 11:32:01"
      },
      {
        "time_stamp": "2023-04-17 12:43:50"
      },
      {
        "time_stamp": "2023-04-17 13:18:52"
      }
    ]
  },
  {
    "text": "Hey , Do you guys have any idea why im not fetching the associations using this code\n\nthankn you",
    "time_stamp": "2023-04-14 00:54:39",
    "reply_count": 2,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-04-14 03:20:44"
      },
      {
        "time_stamp": "2023-04-14 03:21:26"
      }
    ]
  }
]