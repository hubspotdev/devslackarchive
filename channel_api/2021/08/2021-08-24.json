[
  {
    "poster": {
      "poster_name": "Pavan C",
      "poster_handle": "pavan.c"
    },
    "time_stamp": "2021-08-24 05:46:09",
    "text": "Hi All,\n\nwe need to fetch Audit information from HubSpot for data specific events like Contact creation, Deal creation, contact update etc.\n\nWhich API gives this information at this moment please.",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2021-08-25 01:01:36"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Olivier Gilloux",
      "poster_handle": "olivier.gilloux"
    },
    "time_stamp": "2021-08-24 09:25:04",
    "text": "I'm working with API data for marketing emails and have noticed the Content ID of the losing version in an A/B test is different from the winning version and its original version. Has anyone encountered this? How do you correctly group campaigns by Content ID?"
  },
  {
    "poster": {
      "poster_name": "jc",
      "poster_handle": "jhsu"
    },
    "time_stamp": "2021-08-24 10:19:43",
    "text": "Hi can any one help which one do I need for using Associations AP I (<https://developers.HubSpot.com/docs/api/crm/associations>), I checked with the API document, there are two different php download --- composer require HubSpot/api-client and\n<https://github.com/HubSpot/HubSpot-api-php|HubSpot-api-php>, which one do I need? (please note: I am not going to create app). Thanks."
  },
  {
    "poster": {
      "poster_name": "Angel Lozano Jimenez",
      "poster_handle": "alozano.tamu"
    },
    "time_stamp": "2021-08-24 11:06:11",
    "text": "Question that might or might not have an answer but:\n\nI’m trying to submit to a HS form from a non-HS form and I found the following endpoint in the legacy docs (<https://legacydocs.HubSpot.com/docs/methods/forms/submit_form>) but nothing in the newer docs (<http://developers.HubSpot.com|developers.HubSpot.com>). It does not have a deprecated warning anywhere on it, just curious if anyone has insight to this.\n\nIt also follows the old pattern of “name”: “phone”, “value”: “210-xxx-xxxx” format that I know the newer endpoints do not follow. I do not mind this, just clearly an outdated endpoint.\n\nNOTE: It does work, I’ve tested it within my code and it’s successfully creating a submission to my HS form. Just wonder if anyone out there knew more about it.",
    "reply_count": 5,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2021-08-24 15:40:22"
      },
      {
        "time_stamp": "2021-08-25 01:02:16"
      },
      {
        "time_stamp": "2021-08-25 01:02:32"
      },
      {
        "time_stamp": "2021-08-25 01:02:51"
      },
      {
        "time_stamp": "2021-08-25 11:33:06"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Angel Lozano Jimenez",
      "poster_handle": "alozano.tamu"
    },
    "time_stamp": "2021-08-24 11:06:17",
    "text": "THANK YOU!"
  },
  {
    "poster": {
      "poster_name": "jc",
      "poster_handle": "jhsu"
    },
    "time_stamp": "2021-08-24 12:26:36",
    "text": "Hi is there any just help me let sample php api work? THANKS"
  },
  {
    "poster": {
      "poster_name": "John Pena",
      "poster_handle": "john164"
    },
    "time_stamp": "2021-08-24 14:12:47",
    "text": "is there a way to get API rate limits using oauth authentication? the docs seem to be conflicting on this",
    "reply_count": 2,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2021-08-24 14:14:04"
      },
      {
        "time_stamp": "2021-08-24 14:14:23"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "John Pena",
      "poster_handle": "john164"
    },
    "time_stamp": "2021-08-24 14:14:04",
    "text": "<https://developers.HubSpot.com/docs/api/usage-details|this doc> suggests oauth authentication can’t be used to check api rate limits, but then hitting the rate limits api endpoint with oauth authentication yields the error message “Authentication credentials not found. This API supports both API Key and OAuth 2.0 authentication and you can find more details at <https://developers.HubSpot.com/docs/methods/auth/oauth-overview>”"
  },
  {
    "poster": {
      "poster_name": "John Pena",
      "poster_handle": "john164"
    },
    "time_stamp": "2021-08-24 14:14:23",
    "text": "“API supports both” seems to suggest it _can_ be used"
  },
  {
    "poster": {
      "poster_name": "Bernard Chua",
      "poster_handle": "bernard.chua"
    },
    "time_stamp": "2021-08-24 14:53:14",
    "text": "has anyone successfully filtered using `publish_date` for GET /marketing-emails/v1/emails/with-statistics/:email_id? <https://legacydocs.HubSpot.com/docs/methods/cms_email/get-the-statistics-for-a-marketing-email>\n\nThe filters work with the higher level GET calls like getting all marketing emails, but not with this particular call",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2021-08-24 15:36:25"
      },
      {
        "time_stamp": "2021-08-24 15:49:13"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Kevin-C",
      "poster_handle": "kevin285"
    },
    "time_stamp": "2021-08-24 15:36:25",
    "text": "Hey <@U02CEA4GHT3>\nI might be mistaken here but I believe that the provided endpoint gets a specific object by ID, not instances of. Therefore a filter wouldn't be needed as it is a singular object?"
  },
  {
    "poster": {
      "poster_name": "Kevin-C",
      "poster_handle": "kevin285"
    },
    "time_stamp": "2021-08-24 15:40:22",
    "text": "Hey <@U020ERMPW6M> I'm not sure I understand the question?\n\nAre you asking why the body structure is different?\nOr something else?"
  },
  {
    "poster": {
      "poster_name": "Sam Graim",
      "poster_handle": "sam438"
    },
    "time_stamp": "2021-08-24 15:47:23",
    "edited": {
      "time_stamp": "2021-08-24 15:48:31"
    },
    "text": "Hello - I'm trying to use the CRM contact update API with node and I'm getting the following error:\n\n`Required parameter simplePublicObjectInput was null or undefined when calling update.`\n\nThis is my code:\n\n```async function updateHubSpot(id, payload) {\n\tlet data = JSON.parse(payload);\n\tlet ts = Date.now();\n\n\tlet properties = {\n\t\t\"email\": data.EMAIL,\n\t\t\"email_validation_status\": data.COMMENT,\n\t\t\"email_validation_date\": ts\n\t}\n\tlet idProperty = undefined;\n\tlet simplePublicObjectInput = { properties }\n\tconsole.log('Call HubSpot APIs', simplePublicObjectInput)\n\ttry {\n\t\tconst apiResponse = await HubSpotClient.crm.contacts.basicApi.update(id, idProperty, simplePublicObjectInput);\n\t\tconsole.log(JSON.stringify(apiResponse.body, null, 2));\n\t} catch (e) {\n\t\te.message === 'HTTP request failed'\n\t\t\t? console.error(JSON.stringify(e.response, null, 2))\n\t\t\t: console.error(e)\n\t}\n}```\nThe console log seen for `simplePublicObjectInput` in the code results in the following:\n\n```{\n  properties: {\n    email: '<mailto:sam.graim@gmail.com|sam.graim@gmail.com>',\n    email_validation_status: 'valid SafeToSend',\n    email_validation_date: 1629841500143\n  }\n}```\nSo it doesn't appear to be null or undefined.\n\nAny ideas?",
    "reply_count": 9,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2021-08-25 01:04:03"
      },
      {
        "time_stamp": "2021-08-25 01:04:17"
      },
      {
        "time_stamp": "2021-08-25 01:04:30"
      },
      {
        "time_stamp": "2021-08-25 09:20:00"
      },
      {
        "time_stamp": "2021-08-25 09:20:16"
      },
      {
        "time_stamp": "2021-08-25 09:22:57"
      },
      {
        "time_stamp": "2021-08-25 09:23:03"
      },
      {
        "time_stamp": "2021-08-25 09:23:20"
      },
      {
        "time_stamp": "2021-08-25 09:23:37"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Bernard Chua",
      "poster_handle": "bernard.chua"
    },
    "time_stamp": "2021-08-24 15:49:13",
    "text": "hey <@U021JKWA1GB> thanks for replying. it looks like you’re right. Rereading the documentation it does look like filtering isn’t possible on this. Which is weird because on the front end you can get the statistics filtered for dates"
  },
  {
    "poster": {
      "poster_name": "Kevin-C",
      "poster_handle": "kevin285"
    },
    "time_stamp": "2021-08-24 15:50:45",
    "text": "I figured it out, but to be honest I can't recall what the issue was…"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:26:19",
    "text": "<@UFBNA9K9A> <@UD53A9UUR> this one needs help from HQ"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:28:57",
    "text": "need to step through in debugger or add more logging, or use interceptor proxy on the requests to see what went sideways"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:30:39",
    "text": "when I need to find these I usually intercept the loading of UI pages w/ Browser Dev Tools recording, and search in there for the internal HS API returning the payload of the object, and \"steal\" the ID number, but you can also call the APIs for dumping the list of forms and find the one you created\n\nthere is also a way to dump HTML embed code of a given form and that dumped code will contain its ID for \"theft\" for other purposes"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:31:35",
    "text": "I don't rely upon those auto-calced property things like name_of_X or similar, they can be flakey, I look them up using Report Builder Joins or Assoc APIs and they work 100% of the time"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:32:13",
    "text": "Not via standard interface, though I have heard / seen Support can restore stuff when something awful occurs"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:32:49",
    "text": "try to do it in a simple language first to get used to it before trying to add something crazy like R to the mix"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:34:34",
    "text": "highly unlikely, the history is 99% certain going to be maintained by something equivalent to a DB trigger or stored procedure, or a DB model object hook in their code, NOT designed to be tinkered with from outside the storage system\n\nan absolutely horrible hack, which would make all the timestamps wrong, would be repeatedly resetting the property for which history is needed, to its old values, from oldest to newest, to current"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:34:53",
    "text": "need way more detail"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:35:57",
    "text": "you're not parsing their English right"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:36:22",
    "text": "they are saying it's for when the Form you want to submit is not hosted by HubSpot on a landing page for you, and on some random external site"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:36:36",
    "text": "that doesn't mean the same as saying it must be some weird form which doesn't exist in HubSpot"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:36:57",
    "text": "the API does not care where or how it's called as long as you make it happen w/ the right inputs"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:38:01",
    "text": "looks like you have some fun times because of EU GDPR territorial HS instance... that URL isn't the same for us in the US which is probably part of your drama on this"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:38:28",
    "text": "nope, you're hosed, I have to maintain a craptacular lookup table for this in my code and it's 0% fun"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:38:44",
    "text": "but it works that way so that if the UI names of the stages change your stuff doesn't crash"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:39:25",
    "text": "be REAL careful testing this before you run"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:39:41",
    "text": "if it's got bugs you'll ruin your DB and day/week/month"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:40:13",
    "text": "this stuff is all in the normal docs, so make sure to check those first"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:40:50",
    "text": "no separate API, fill in the extra properties in the properties get param"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:42:16",
    "text": "Oleksandr Bazarnov... did I translate it right? (My Cyrillic is not so good) :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:45:02",
    "text": "I think it's a doc mis-parse.\n\n<https://api.hubapi.com/marketing/v3/email/send-statuses/{statusId}> is defined to give sendResult, but not */marketing/v3/transactional/single-email/send .*"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:45:26",
    "text": "refresh token? that's the OAuth way to get a new one usually"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:45:59",
    "text": "that's going to be quite a serious amount of work\n\n<https://developers.HubSpot.com/docs/api/overview>"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:47:03",
    "text": "there's a good chance you could formulate a direct link to get there, but probably near-zero change to get a URL which is a signed URL, only special stuff like the Files endpoints have support for things like that"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:47:33",
    "text": "I have run into this issue before also, I had to not do it via API and come in later via GUI to enable it"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:47:54",
    "text": "You might have some fun w/ browser dev tools intercepting a request that makes a currency property to work around the issue"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:51:28",
    "text": "when getting the 400 you need to try and dump out why it 400'ed\n\nit works flawlessly for me a bazillion times for over a year calling the Files APIs for uploads from Python so I promise it's possible\n\none problem I suspect here is that your HTTP lib is mangling the content of the multipart/form-data\n\nit needs to be specially encoded using a nasty MIME library because it's an ancient ugly RFC\n\n<https://masteringjs.io/tutorials/axios/axios-multi-form-data>\n\nI don't think your code is right"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:52:07",
    "text": "yeah, fetch, update, and post/patch"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:53:34",
    "text": "If it doesn't exist in this file, stuff all over the Internet is going to reject it\n\n<https://publicsuffix.org/list/public_suffix_list.dat>"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:54:04",
    "text": "\"partners\" exists but \"partner\" is bogus"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:54:34",
    "text": "At the risk of being sarcastic, this one must be reported to 127.0.0.1"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:55:47",
    "text": "not allowed to call any hapikey APIs from inside browser, major security flaw to do so, opens your entire HubSpot to being completely compromised over the Internet"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:56:37",
    "text": "they don't really offer stuff like them hosting your dynamic untrusted stuff not made with their CMS, that can be a major source of security drama for HubSpot if they did"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:57:03",
    "text": "just use search, it doesn't care if normal prop or custom"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:58:16",
    "text": "there is a way to get an upgraded limit as a license add-on\n\nbut generally speaking people keep track of this using a distributed counter and exponential backoff based on HTTP headers and looking for the 429s and doing appropriate retries"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:58:31",
    "text": "<https://redis.com/redis-best-practices/basic-rate-limiting/>"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:59:02",
    "text": "in general I would advise taking a step back and thinking about what you are really trying to do here before proceeding into over-engineering things"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-08-25 00:59:53",
    "text": "also there could be some ways to sync stuff to a data warehouse in bulk every so often, that's what I am doing via some cron jobs, then anybody who wants on my team can pick those up from an encrypted storage volume for downstream use"
  }
]