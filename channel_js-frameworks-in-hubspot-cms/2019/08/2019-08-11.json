[
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-08-11 07:20:47",
    "edited": {
      "time_stamp": "2019-08-11 07:21:13"
    },
    "text": "why not add the script to the custom module?"
  },
  {
    "poster": {
      "poster_name": "Jon K. Wheeler",
      "poster_handle": "jon.k.wheeler"
    },
    "time_stamp": "2019-08-11 07:29:55",
    "text": "You could, sure, but that’s not the point of what I was illustrating. Plus, it should load in the head I believe. "
  },
  {
    "poster": {
      "poster_name": "Jon K. Wheeler",
      "poster_handle": "jon.k.wheeler"
    },
    "time_stamp": "2019-08-11 07:34:07",
    "text": "I think if you did that, you’d have a script tag each time you’d output a component. Hmm. "
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-08-11 07:36:26",
    "text": "regarding loading in the head, you can do that in a custom module using require_js, it will automatically handle loading the file only once per page, and only if a module that requires it is on the page.\n\n-----\ncould you elaborate on what about the design manager you feel is inhibiting your ability to work this way?\n\nWeb Components are usable inside of custom modules, and your example is showing one, what further would you like to see?\n\nAnd just for clarity, because I think there may be a misunderstanding of the difference between web components and micro front ends. I want to be sure I understand clearly.\n\nMicro front-ends = Each team working on their part of a site, works silo’d off and works on the back end, database, and front-end. Web components while not required for micro front ends, is a useful tool for making them.\n\n\nWeb Components =\nCustom Elements that can have their own props, attributes, and states. These custom elements can talk to eachother, and they also to some degree prevent outside forces from directly interacting with their innards."
  },
  {
    "poster": {
      "poster_name": "Jon K. Wheeler",
      "poster_handle": "jon.k.wheeler"
    },
    "time_stamp": "2019-08-11 07:50:31",
    "text": "On my phone right now. Sorry for shortness. Basically, I’d never code in the Design Manager. I do for email, but that’s it. Websites, no way. I’ll stick to my IDE. I’d also never marry into HS specific components. I’m hoping to just utilize the CMS part. I think that would be super beneficial. \n\nWho is your talent audience with the Design Manager? I think if you asked 10 engineers, 9 of them would likely not want to code that way. I’m aware of the local dev environment, but that still requires you to conform to HS’s codebase, correct?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-08-11 09:21:29",
    "edited": {
      "time_stamp": "2019-08-11 09:44:29"
    },
    "text": "The way HubSpot works you don’t _have_ to work in the design manager. It’s encouraged because understanding how it works, enables you to do things more efficiently. For example creating fields in custom modules, is kind of a pain to do manually because you’d be sitting there writing out all the json instead of making 2 clicks.\n\n\nThe <#CLJJXGTC0|local-development>  and the FTP enables you to use your preferred IDE. You will still need to go into the actual CMS from time to time like any other platform, especially in regards to content.\n\nBuilding custom modules as simply UI layers ontop of web-components is completely doable, and would achieve what you’re talking about with not marrying in to HS specific components.\n\nThe target audience for the design manager has shifted over time, it used to be more designers, and less developer oriented. Thus the drag n drop editor. The coded file editor however aimed completely at developers. The HS engineers realize that the design manager isn’t a one-size fits all solution and is striving to enable new work-flows that are not specific to HubSpot via the CLI, FTP, and APIs\n\nThat said, there are some things you will have to or want to do that *are* specific to HubSpot.\n\nFor example, minifying your css or js locally isn’t really pointful on HubSpot as HubSpot minifies it regardless. So minifying locally limits you or anyone from easily making changes in the design manager.\n\nAnother example: the way Custom Modules work in HubSpot, if you do something like have js files added at the template level instead of module level, you’re loading that js file all the time even if it never gets used. Where as with modules, the css and js needed for them is only loaded as needed.\n\n-----\n\nRegarding the conforming to HubSpot’s codebase. Every CMS platform has standards, and proper ways of working with them. Not following those best practices usually results in problems of some kind. HubSpot - like Magento and other marketing focused platforms are not open source. So yes you do not have the same freedom to effectively create your own unique fork of HubSpot, and create your own hooks to work with the CMS. I would not expect the HubSpot CMS to go open source."
  }
]