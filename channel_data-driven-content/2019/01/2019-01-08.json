[
  null,
  {
    "poster": {
      "poster_name": "Theresa Weaver",
      "poster_handle": "theresa.weaver"
    },
    "time_stamp": "2019-01-08 05:43:25",
    "text": "this worked beautifully thank you so so much!!!"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-08 07:42:41",
    "text": "no problem!"
  },
  null,
  {
    "poster": {
      "poster_name": "James Cutler",
      "poster_handle": "jcutler"
    },
    "time_stamp": "2019-01-08 08:35:54",
    "text": "Hey <@U795QFHDE>, you can create a custom module with a date picker field in it, and place the module somewhere on the blog post template."
  },
  {
    "poster": {
      "poster_name": "Chandler Ives",
      "poster_handle": "cives"
    },
    "time_stamp": "2019-01-08 08:38:21",
    "text": "I could! Would there then be a way to pass that hubl into a JSON event cal though?"
  },
  {
    "poster": {
      "poster_name": "James Cutler",
      "poster_handle": "jcutler"
    },
    "time_stamp": "2019-01-08 08:41:30",
    "edited": {
      "time_stamp": "2019-01-08 08:41:45"
    },
    "text": "In the JSON of the post (the response to your API call), you should be able to access the value of the date picker field in the `widgets` or `widget_containers` sections. `widgetContainers` might be another one to look in..."
  },
  {
    "poster": {
      "poster_name": "James Cutler",
      "poster_handle": "jcutler"
    },
    "time_stamp": "2019-01-08 08:42:21",
    "text": "Oh wait, this is a HubDB table you're using? Sorry, you mentioned 'events blog' so I was thinking of the blog tool"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-01-08 11:27:24",
    "text": "Having a bit of weirdness with a dynamic page I'm working on.  For some reason, all of the content from my listing view is showing up in individual dynamic pages.",
    "reply_count": 17,
    "reply_users_count": 5,
    "replies": [
      {
        "time_stamp": "2019-01-08 11:43:12"
      },
      {
        "time_stamp": "2019-01-08 11:45:47"
      },
      {
        "time_stamp": "2019-01-08 11:50:36"
      },
      {
        "time_stamp": "2019-01-08 11:51:06"
      },
      {
        "time_stamp": "2019-01-08 11:54:12"
      },
      {
        "time_stamp": "2019-01-08 12:05:43"
      },
      {
        "time_stamp": "2019-01-08 12:06:19"
      },
      {
        "time_stamp": "2019-01-08 12:58:19"
      },
      {
        "time_stamp": "2019-01-08 12:58:53"
      },
      {
        "time_stamp": "2019-01-08 12:59:04"
      },
      {
        "time_stamp": "2019-01-08 13:00:37"
      },
      {
        "time_stamp": "2019-01-08 13:00:59"
      },
      {
        "time_stamp": "2019-01-09 11:39:13"
      },
      {
        "time_stamp": "2019-01-09 11:41:52"
      },
      {
        "time_stamp": "2019-01-09 11:42:46"
      },
      {
        "time_stamp": "2019-01-09 17:41:09"
      },
      {
        "time_stamp": "2019-01-09 17:41:18"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-01-08 11:43:12",
    "text": "Example page?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-01-08 11:45:47",
    "text": "There is a Jinjava bug that is being reverted right now"
  },
  null,
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-01-08 11:50:36",
    "text": "<http://visioncritical-4976390.hs-sites.com/customer-stories?hsDebug=True>"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-01-08 11:51:06",
    "text": "Should be fixed now"
  },
  null,
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-01-08 11:54:12",
    "text": "Awesome.  Thanks <@U6GNQ7JBU> everything's working now"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-08 12:05:43",
    "text": "BAM"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-08 12:06:19",
    "text": "i wish <@U6GNQ7JBU> would say that after he fixes it"
  },
  null,
  null,
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2019-01-08 12:58:19",
    "text": "<@U6GNQ7JBU> didn’t fix this one, But he didn’t break it either :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-08 12:58:53",
    "text": "ah."
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-08 12:59:04",
    "text": "i would still appreciate an occasional BAM"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2019-01-08 13:00:37",
    "text": "the closest emojii we have is :bamboo: . Paging <@U22PKFRU5>"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-08 13:00:59",
    "text": "that just wont do"
  },
  null
]