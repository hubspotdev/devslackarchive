[
  {
    "poster": {
      "poster_name": "Alex Ivan",
      "poster_handle": "alex346"
    },
    "time_stamp": "2021-05-28 01:35:24",
    "text": "<@UQERM7BLY> The client isn't tech savvy so I wanted to give him a simpler way of adding stylized anchors in a rich text (not CTAs) without sending him to the Source Code to add different kinds of attributes to an anchor.\nwith shortcodes he only had to do something like\n```[anchor id=\"anchor-name\" type=\"button | arrow\"]Go to &lt;insert text&gt;[/anchor]```\ninstead of go to source code and add\n```&lt;a href=\"#anchor-name\" class=\"[... x classes]\"&gt;Go to [insert text]&lt;/a&gt;```\n"
  },
  {
    "poster": {
      "poster_name": "Alex Ivan",
      "poster_handle": "alex346"
    },
    "time_stamp": "2021-05-28 01:36:03",
    "text": "I found another way of achieving this, but thanks for your interest"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2021-05-28 01:53:04",
    "text": "What did you go for in the end? :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Alex Ivan",
      "poster_handle": "alex346"
    },
    "time_stamp": "2021-05-28 02:03:18",
    "edited": {
      "time_stamp": "2021-05-28 02:04:17"
    },
    "text": "still with anchors, but I used a custom module to fill my needs. this is mainly for blog posts where I can't give the client the possibility to add custom modules in the page template.\n the solution is something like this:\nCustom module with a repeatable group for each button:\n```[\n   {\n     anchor_id: text,\n     button_name: text,\n     type: choice &lt;button, arrow&gt;,\n     url: text\n   }\n]```\nIn rich text the client can add:\n```[anchor id=\"some-id\"]```\nwhere `some-id` is `anchor_id`.\n\nin the template I replaced in the post body the shortcode with corresponding object based on anchor_id  from custom module. More work for me but this way the client can add buttons wherever inside the rich text."
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2021-05-28 02:04:50",
    "text": "nice. Just as a side note - you can restrict the HTML the client can use in the RICHTEXT"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2021-05-28 02:05:11",
    "text": "theres an attribute you can add called “enabled_features”"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2021-05-28 02:05:27",
    "text": "```{\n  \"name\" : \"description\",\n  \"label\" : \"Description\",\n  \"required\" : false,\n  \"locked\" : false,\n  \"type\" : \"richtext\",\n  \"default\" : null,\n  \"enabled_features\" : [\"bold\",\"link\",\"image\"]\n}```"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2021-05-28 02:06:21",
    "text": "<https://developers.HubSpot.com/docs/cms/building-blocks/module-theme-fields/rich-text-editor>"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2021-05-28 02:07:22",
    "edited": {
      "time_stamp": "2021-05-28 02:07:26"
    },
    "text": "I know this doesn’t fulfil your requirements - but might come in useful :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Alex Ivan",
      "poster_handle": "alex346"
    },
    "time_stamp": "2021-05-28 02:07:50",
    "text": "this isn't practical in the blog posts, but it's a good to know feature, thanks"
  },
  {
    "poster": {
      "poster_name": "Alex Ivan",
      "poster_handle": "alex346"
    },
    "time_stamp": "2021-05-28 02:07:54",
    "edited": {
      "time_stamp": "2021-05-28 02:07:56"
    },
    "text": ":+1:"
  },
  {
    "poster": {
      "poster_name": "Matt Brooking",
      "poster_handle": "matt.brooking"
    },
    "time_stamp": "2021-05-28 03:26:49",
    "text": "hey was just wondering if theres a hubl syntax package for Sublime Text, I dont really like vscode ( heresy I know )",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2021-05-28 05:05:00"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Bhréin Brannick",
      "poster_handle": "bhreinb"
    },
    "time_stamp": "2021-05-28 03:46:46",
    "text": "Yeah the syntax above is meant to be an expression more so than a variable…however when it’s wrapped in a single quote as you suggest that works fine. Thanks for your help again :+1:"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2021-05-28 05:05:00",
    "edited": {
      "time_stamp": "2021-05-28 05:05:09"
    },
    "text": "No, not as far as I’m aware -  but any jinja2 plugins should be able to give you at least basic highlighting"
  },
  {
    "poster": {
      "poster_name": "Urban Sanden",
      "poster_handle": "urban.sanden"
    },
    "time_stamp": "2021-05-28 07:18:32",
    "text": "Hey!\n\nI’d like to accumulate a value inside a loop, have tested with this\n\n```{% set RESULT = 1 %}\n\nLOOP START\n{% set RESULT = RESULT + (item.amount / 12 * item.hs_term_in_months) %}\nLOOP END```\nbut doesn’t seem to work. Any ideas?",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2021-05-28 07:50:51"
      },
      {
        "time_stamp": "2021-05-28 08:12:57"
      },
      {
        "time_stamp": "2021-06-02 02:57:09"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jack Smith",
      "poster_handle": "jasmith"
    },
    "time_stamp": "2021-05-28 07:50:51",
    "text": "See \"Scoping Behavior\" <https://jinja.palletsprojects.com/en/3.0.x/templates/#assignments>\nYou can do this using `namespace(result=1)`"
  },
  {
    "poster": {
      "poster_name": "Urban Sanden",
      "poster_handle": "urban.sanden"
    },
    "time_stamp": "2021-05-28 08:12:57",
    "text": "Ok, thanks!"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-05-28 12:00:43",
    "text": "Hey there <@UU4T3609E>, thank you for reporting!\n\nWe have a fix on it’s way. I’ll report back when it’s on it’s way to production."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-05-28 12:04:06",
    "text": "This fix should be live now :slightly_smiling_face:"
  }
]