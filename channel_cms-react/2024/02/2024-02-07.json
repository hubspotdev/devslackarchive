[
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 06:24:09",
    "text": "any idea if I need to modify the \"standard\" prettier config to accommodate .graphql files? I'm getting:\n```SyntaxError: Syntax Error: Unexpected Name \"export\". (1:1)\n&gt; 1 | export const query = ````\nin `./query.graphql`\n\nseems to work otherwise",
    "reply_count": 17,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2024-02-07 07:15:23"
      },
      {
        "time_stamp": "2024-02-07 07:15:49"
      },
      {
        "time_stamp": "2024-02-07 07:15:59"
      },
      {
        "time_stamp": "2024-02-07 07:16:35"
      },
      {
        "time_stamp": "2024-02-07 07:16:46"
      },
      {
        "time_stamp": "2024-02-07 07:16:58"
      },
      {
        "time_stamp": "2024-02-07 07:17:11"
      },
      {
        "time_stamp": "2024-02-07 07:18:15"
      },
      {
        "time_stamp": "2024-02-07 07:18:18"
      },
      {
        "time_stamp": "2024-02-07 07:18:38"
      },
      {
        "time_stamp": "2024-02-07 07:19:13"
      },
      {
        "time_stamp": "2024-02-07 07:19:57"
      },
      {
        "time_stamp": "2024-02-07 07:37:46"
      },
      {
        "time_stamp": "2024-02-07 07:39:11"
      },
      {
        "time_stamp": "2024-02-07 07:39:50"
      },
      {
        "time_stamp": "2024-02-07 07:40:46"
      },
      {
        "time_stamp": "2024-02-07 07:41:27"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-02-07 07:12:59",
    "text": "you may need to regenerate you personal access token"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 07:13:25",
    "text": "^ yup, all good now. thanks"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-02-07 07:13:39",
    "text": "I see Tim was on last night"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 07:14:26",
    "text": "yea, I'm 100% going to have questions soon but trying to look through what has been discussed here first..."
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-02-07 07:15:23",
    "text": "prettier shouldn't affect the actual running of the package"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-02-07 07:15:49",
    "text": "That seems more like a `type: module` cjs/esm issue"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 07:15:59",
    "text": "yea, sorry, that's a \"prettier output\" log, not an error"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 07:16:35",
    "text": "I might move the query inside of my index.jsx file to see if that helps"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 07:16:46",
    "text": "but I kind of like it as a separate file at the moment and it's not a big deal"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-02-07 07:16:58",
    "text": "Ah, remove the export if it is in a `.graphql` file"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-02-07 07:17:11",
    "edited": {
      "time_stamp": "2024-02-07 07:17:19"
    },
    "text": "You just need the actual query string in that kind of file (no JS syntax)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 07:18:15",
    "text": "does this become an import or...\n```export { query } from \"./query.graphql\";```\n"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-02-07 07:18:18",
    "text": "Ha, whoops :grimacing:"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-02-07 07:18:38",
    "text": "You need a different import then…"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-02-07 07:19:13",
    "text": "(looks like we don’t have an example of that…)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 07:19:57",
    "text": "trying to brain how to structure that...but...it's not going well..."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 07:28:17",
    "text": "If I want to allow graphQL filtering for different tags in a JS Module and control it using fields...do I need to use a serverless function and do the query there? I can imagine using the page url but for a standalone \"module\" that feels wrong...",
    "reply_count": 18,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-02-07 07:29:39"
      },
      {
        "time_stamp": "2024-02-07 07:31:04"
      },
      {
        "time_stamp": "2024-02-07 07:32:07"
      },
      {
        "time_stamp": "2024-02-07 07:32:33"
      },
      {
        "time_stamp": "2024-02-07 07:32:36"
      },
      {
        "time_stamp": "2024-02-07 07:33:15"
      },
      {
        "time_stamp": "2024-02-07 07:33:40"
      },
      {
        "time_stamp": "2024-02-07 07:34:28"
      },
      {
        "time_stamp": "2024-02-07 07:35:03"
      },
      {
        "time_stamp": "2024-02-07 07:35:25"
      },
      {
        "time_stamp": "2024-02-07 07:35:45"
      },
      {
        "time_stamp": "2024-02-07 07:37:43"
      },
      {
        "time_stamp": "2024-02-07 07:42:26"
      },
      {
        "time_stamp": "2024-02-07 07:43:06"
      },
      {
        "time_stamp": "2024-02-07 07:44:05"
      },
      {
        "time_stamp": "2024-02-07 07:45:12"
      },
      {
        "time_stamp": "2024-02-07 07:51:54"
      },
      {
        "time_stamp": "2024-02-07 07:52:20"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-02-07 07:29:39",
    "text": "You can use `module.` like `request.` in dynamic query args: <https://developers.HubSpot.com/docs/cms/data/use-graphql-data-in-your-website-pages#pass-dynamic-context-into-a-query>\n\nSo you can’t run JS logic to mess with module fields, but you can get access to them"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 07:31:04",
    "text": "ok, nice...I'll give that a try now"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 07:32:07",
    "text": "is there a way to log `module` so that I can see the path to my fields? it'll be a textField probably..."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 07:32:33",
    "text": "`module.name_of_text_field`  or `module.fieldValues.name_of_text_field`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 07:32:36",
    "text": "something like that?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-02-07 07:33:15",
    "text": "It would be the same way you access the field value in HubL. So `module.name_of_group.name_of_field` (or just `module.field_name` if there is no group)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 07:33:40",
    "text": "ok, thanks"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 07:34:28",
    "text": "looks like tag is not a filter option in `post_collection`...hmmm"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-02-07 07:35:03",
    "text": "Ah, I believe we need to implement tag support for blog graphql queries :sad-kim:"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-02-07 07:35:25",
    "text": "(the team knows about that limitation, others have asked)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 07:35:45",
    "text": "ok, good to know, that would be extremely helpful/critical for what I am trying to do"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 07:37:43",
    "text": "do you think the temporary solution is to query for x number of recent blog posts, check their tags, and then repeat? seems crazy"
  },
  {
    "subtype": "thread_broadcast",
    "time_stamp": "2024-02-07 07:37:46",
    "text": "You can do `export { default as query } from './queryFileName.graphql?raw';`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 07:39:11",
    "text": "thank you. ^ that works"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 07:39:50",
    "text": "I almost had that! just didn't have the ?raw or any rationale for what I was doing :laughing:"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-02-07 07:40:46",
    "text": "We probably should add a plugin on our side that removes the need for `?raw` (that tells Vite to just get the raw string of the file)…. but we have that long list of other feedback to get too :wink:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 07:41:27",
    "text": "yup, I'd say problem solved :white_check_mark:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 07:42:26",
    "text": "do you have any idea of the priority to add filter by tag support? or a secret timeline...?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 07:43:06",
    "text": ":moneybag: &lt;-- bribe"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-02-07 07:44:05",
    "text": "It’s on the list, but I unfortunately don’t think it is trivial change.  I haven’t chatted with that team directly, but I’d put it in the “probably not too far off but don’t hold your breath” territory :shrug:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 07:45:12",
    "text": "is the workaround to use serverless functions for now?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 07:51:54",
    "text": "the most \"performant\" way seems to use a regular module + HubL to do the query, and then pass it in as props"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 07:52:20",
    "text": "but the temptation to hold my breath for graphql tag filtering is high..."
  },
  {
    "text": "Do we know if platform versioning is going to get fixed for Projects before the end of March when v 2023.1 is being deprecated?\n\nMy biggest concern is that my apps will stop working at the end of March. I have projects in multiple portals that are stuck on v 2023.1, even after updating my hsproject.json. This includes projects I just created last week. I have seen a few threads of other people experiencing the same issue, so I know I am not alone.\n\nEx:\n```// hsproject.json\n{\n  \"name\": \"decision-making-project\",\n  \"srcDir\": \".\",\n  \"platformVersion\": \"2023.2\"\n}\n\n// File tree\n.\n├── decision-making-project\n│   ├── decision-making-app\n│   │   ├── api\n│   │   ├── assets\n│   │   ├── components\n│   │   ├── constants\n│   │   ├── styles\n│   │   ├── utils\n│   │   ├── cms-assets.json\n│   │   ├── jsconfig.json\n│   │   ├── package.json\n│   │   └── vitest.config.js\n│   ├── .hsignore\n│   └── hsproject.json\n├── README.md\n└── package.json```\n",
    "time_stamp": "2024-02-07 08:32:02",
    "reply_count": 21,
    "reply_users_count": 6,
    "replies": [
      {
        "time_stamp": "2024-02-07 08:59:18"
      },
      {
        "time_stamp": "2024-02-07 09:01:06"
      },
      {
        "time_stamp": "2024-02-07 09:11:29"
      },
      {
        "time_stamp": "2024-02-07 09:14:34"
      },
      {
        "time_stamp": "2024-02-07 09:16:44"
      },
      {
        "time_stamp": "2024-02-07 09:32:26"
      },
      {
        "time_stamp": "2024-02-07 09:35:29"
      },
      {
        "time_stamp": "2024-02-07 09:36:06"
      },
      {
        "time_stamp": "2024-02-07 09:36:13"
      },
      {
        "time_stamp": "2024-02-07 15:58:32"
      },
      {
        "time_stamp": "2024-02-07 16:05:12"
      },
      {
        "time_stamp": "2024-02-07 16:32:18"
      },
      {
        "time_stamp": "2024-02-08 12:03:35"
      },
      {
        "time_stamp": "2024-02-08 12:40:51"
      },
      {
        "time_stamp": "2024-02-16 06:24:13"
      },
      {
        "time_stamp": "2024-02-16 06:25:08"
      },
      {
        "time_stamp": "2024-02-16 08:14:40"
      },
      {
        "time_stamp": "2024-02-16 08:17:10"
      },
      {
        "time_stamp": "2024-02-16 08:18:48"
      },
      {
        "time_stamp": "2024-02-20 08:39:31"
      },
      {
        "time_stamp": "2024-02-20 08:47:36"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Roger Brown",
      "poster_handle": "robrown"
    },
    "time_stamp": "2024-02-07 08:59:18",
    "text": "Hi <@U02CALZ1EV9>, can you share the portal id you are using to upload this project? I'll forward to our team to review further"
  },
  {
    "poster": {
      "poster_name": "Colby Schneider",
      "poster_handle": "colbyschneider"
    },
    "time_stamp": "2024-02-07 09:01:06",
    "text": "Sure! Thanks, <@U056ZR8LVJQ>\n\nDev: 20612692\nStaging: 43948364\nProd: 1687417"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 09:11:29",
    "text": "curious to know when this is resolved and/or how to resolve too. I have the same warning but do not have a platformVersion set at all. I'll try setting to\n```\"platformVersion\": \"2023.2\"```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 09:14:34",
    "text": "just in case it's helpful, adding that to `hsproject.json` doesn't do anything"
  },
  {
    "poster": {
      "poster_name": "Roger Brown",
      "poster_handle": "robrown"
    },
    "time_stamp": "2024-02-07 09:16:44",
    "text": "One thing just to verify at the onset, if you could update your CLI to the latest version `npm i -g @HubSpot/cli@latest` and try uploading again"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 09:32:26",
    "edited": {
      "time_stamp": "2024-02-07 09:33:12"
    },
    "text": "no change"
  },
  {
    "poster": {
      "poster_name": "Colby Schneider",
      "poster_handle": "colbyschneider"
    },
    "time_stamp": "2024-02-07 09:35:29",
    "text": "No change for me either."
  },
  {
    "poster": {
      "poster_name": "Roger Brown",
      "poster_handle": "robrown"
    },
    "time_stamp": "2024-02-07 09:36:06",
    "text": "Thanks, we're investigating further"
  },
  {
    "poster": {
      "poster_name": "Colby Schneider",
      "poster_handle": "colbyschneider"
    },
    "time_stamp": "2024-02-07 09:36:13",
    "text": "Much appreciated!"
  },
  {
    "text": "Hi guys,\n\nJust a quick note, it would be good to be able to get the project module / partial path directly from the project UI.\nSimilar to how I would right click on a file in the design manager » Copy path.\n\nI forget the long paths often and am lazy even with copy pasting code :)",
    "time_stamp": "2024-02-07 10:16:27"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2024-02-07 11:23:40",
    "text": "Since updating CMS package, getting local field validation errors; `components/modules/Carousel: 'label' is required but no default is set`. I don't want default values on required fields, I want the editorial UI to validate to editors. How can I disable this particular error?",
    "reply_count": 13,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-02-07 11:26:10"
      },
      {
        "time_stamp": "2024-02-07 11:29:27"
      },
      {
        "time_stamp": "2024-02-07 11:30:37"
      },
      {
        "time_stamp": "2024-02-07 11:30:49"
      },
      {
        "time_stamp": "2024-02-07 11:31:09"
      },
      {
        "time_stamp": "2024-02-07 11:32:03"
      },
      {
        "time_stamp": "2024-02-07 11:33:57"
      },
      {
        "time_stamp": "2024-02-07 11:34:12"
      },
      {
        "time_stamp": "2024-02-07 11:34:50"
      },
      {
        "time_stamp": "2024-02-07 11:35:42"
      },
      {
        "time_stamp": "2024-02-07 11:56:33"
      },
      {
        "time_stamp": "2024-02-07 11:59:56"
      },
      {
        "time_stamp": "2024-02-07 12:22:00"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2024-02-07 11:26:10",
    "text": "Seeing the same behaviour on child fields of repeater, where parent repeater has default value array :disappointed:"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2024-02-07 11:29:27",
    "text": "I know I can configure `vite.config.js`, but is there documentation on how to surpress this particular error, and not ALL errors?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 11:30:37",
    "text": "are you sure that's not referencing the standard BaseField `name` and `label`? those are always required I think. Or do you have something named label?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 11:30:49",
    "text": "can you paste any part of it for reference?"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2024-02-07 11:31:09",
    "text": "I have a field named label"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2024-02-07 11:32:03",
    "text": "```&lt;TextField\n  label=\"Item Label\"\n  name=\"label\"\n  required\n/&gt;```"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 11:33:57",
    "text": "sorry not sure, I guess I always have a default"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 11:34:12",
    "text": "did you try a blank string or empty object?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 11:34:50",
    "text": "^ maybe that would pass this validation but still prevent publishing without a value"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2024-02-07 11:35:42",
    "text": "Ya, trying that"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 11:49:16",
    "text": "if I am manually setting an image in a react component, is there a way to benefit from the HubSpot image optimization / conversion to `webp` ?"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2024-02-07 11:56:33",
    "text": "After fixing some errors, turns out field cannot be named `label`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 11:59:56",
    "text": "ah, good to know ^"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2024-02-07 12:22:00",
    "text": "<@UCY83QS6Q> I see your :ear:. Any way to work around this, or suppress these particular errors?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:23:57",
    "text": "would it be crazy to do a graphql query with a limit of 1000 if each query is under the `max_points` value? is there another limit I should be aware of?",
    "reply_count": 58,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-02-07 14:27:36"
      },
      {
        "time_stamp": "2024-02-07 14:28:07"
      },
      {
        "time_stamp": "2024-02-07 14:28:18"
      },
      {
        "time_stamp": "2024-02-07 14:28:38"
      },
      {
        "time_stamp": "2024-02-07 14:28:39"
      },
      {
        "time_stamp": "2024-02-07 14:28:44"
      },
      {
        "time_stamp": "2024-02-07 14:29:04"
      },
      {
        "time_stamp": "2024-02-07 14:29:13"
      },
      {
        "time_stamp": "2024-02-07 14:29:37"
      },
      {
        "time_stamp": "2024-02-07 14:29:40"
      },
      {
        "time_stamp": "2024-02-07 14:30:21"
      },
      {
        "time_stamp": "2024-02-07 14:31:11"
      },
      {
        "time_stamp": "2024-02-07 14:31:22"
      },
      {
        "time_stamp": "2024-02-07 14:32:11"
      },
      {
        "time_stamp": "2024-02-07 14:32:40"
      },
      {
        "time_stamp": "2024-02-07 14:32:59"
      },
      {
        "time_stamp": "2024-02-07 14:33:13"
      },
      {
        "time_stamp": "2024-02-07 14:33:22"
      },
      {
        "time_stamp": "2024-02-07 14:33:26"
      },
      {
        "time_stamp": "2024-02-07 14:33:54"
      },
      {
        "time_stamp": "2024-02-07 14:34:16"
      },
      {
        "time_stamp": "2024-02-07 14:34:31"
      },
      {
        "time_stamp": "2024-02-07 14:35:43"
      },
      {
        "time_stamp": "2024-02-07 14:36:31"
      },
      {
        "time_stamp": "2024-02-07 14:36:54"
      },
      {
        "time_stamp": "2024-02-07 14:37:04"
      },
      {
        "time_stamp": "2024-02-07 14:39:22"
      },
      {
        "time_stamp": "2024-02-07 14:39:54"
      },
      {
        "time_stamp": "2024-02-07 14:39:59"
      },
      {
        "time_stamp": "2024-02-07 14:40:22"
      },
      {
        "time_stamp": "2024-02-07 14:40:41"
      },
      {
        "time_stamp": "2024-02-07 14:40:55"
      },
      {
        "time_stamp": "2024-02-07 14:41:05"
      },
      {
        "time_stamp": "2024-02-07 14:41:12"
      },
      {
        "time_stamp": "2024-02-07 14:41:20"
      },
      {
        "time_stamp": "2024-02-07 14:43:07"
      },
      {
        "time_stamp": "2024-02-07 14:43:14"
      },
      {
        "time_stamp": "2024-02-07 14:44:00"
      },
      {
        "time_stamp": "2024-02-07 14:44:02"
      },
      {
        "time_stamp": "2024-02-07 14:44:51"
      },
      {
        "time_stamp": "2024-02-07 14:45:29"
      },
      {
        "time_stamp": "2024-02-07 14:46:03"
      },
      {
        "time_stamp": "2024-02-07 14:46:21"
      },
      {
        "time_stamp": "2024-02-07 14:46:23"
      },
      {
        "time_stamp": "2024-02-07 14:46:38"
      },
      {
        "time_stamp": "2024-02-07 14:46:46"
      },
      {
        "time_stamp": "2024-02-07 14:47:03"
      },
      {
        "time_stamp": "2024-02-07 14:47:08"
      },
      {
        "time_stamp": "2024-02-07 14:48:24"
      },
      {
        "time_stamp": "2024-02-07 14:49:01"
      },
      {
        "time_stamp": "2024-02-07 14:50:03"
      },
      {
        "time_stamp": "2024-02-07 14:50:06"
      },
      {
        "time_stamp": "2024-02-07 14:50:11"
      },
      {
        "time_stamp": "2024-02-07 14:50:53"
      },
      {
        "time_stamp": "2024-02-07 14:50:57"
      },
      {
        "time_stamp": "2024-02-07 14:53:57"
      },
      {
        "time_stamp": "2024-02-07 14:54:05"
      },
      {
        "time_stamp": "2024-02-07 14:54:13"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-02-07 14:27:36",
    "text": "I mean, it depends I guess a bit on what you're doing with the 1000 results ... I wouldn't render them all on the page..."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:28:07",
    "text": "I would render a subset of posts that match an array of tag ids"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-02-07 14:28:18",
    "text": "oh I see, you're dealing with the filtering"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:28:38",
    "text": "yea, I think the initial load isn't a big deal, I can grab 10-20 posts and filter by time"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-02-07 14:28:39",
    "text": "yeah, I mean, it's not the most performant, but it's a limitation of our system."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:28:44",
    "text": "but then when I filter by a tag..."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:29:04",
    "text": "I wonder if the \"delay\" would be noticeable"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:29:13",
    "text": "kind of sounds fun to try in any case"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-02-07 14:29:37",
    "text": "This is a blog listing case right?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:29:40",
    "text": "yea"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-02-07 14:30:21",
    "text": "do you know if the page is pre-rendering eligible otherwise?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:31:11",
    "text": "I think it could be, doesn't exist yet. but I would be grabbing the \"latest\" posts using graphql"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:31:22",
    "text": "not sure if because there's a time component it wouldn't pre-render"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-02-07 14:32:11",
    "text": "If you attached a graphql query to the module that's on the page, that should not disqualify it from pre-rendering."
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-02-07 14:32:40",
    "text": "So if all you did was to have a page with this module on it, we would pre-render the page anytime a record in the query changed."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:32:59",
    "text": "nice, that sounds perfect for the initial load"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:33:13",
    "text": "but when I \"filter\" I want it to show live results more or less"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:33:22",
    "text": "and I assume that would be slow? I don't really know"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-02-07 14:33:26",
    "text": "at that point are you hitting a serverless function?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:33:54",
    "text": "I don't think I have to? Can't I pass a query value via a url param back into graphql?"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-02-07 14:34:16",
    "text": "I see."
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-02-07 14:34:31",
    "text": "so a \"filter\" would cause the page to re-render."
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-02-07 14:35:43",
    "text": "yeah that filtered page would not be pre-renderable."
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-02-07 14:36:31",
    "text": "If you did have a serverless function it could stand as a way to do client side filtering."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:36:54",
    "text": "yea, I have access to serverless functions and I think have part of that set up even"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:37:04",
    "text": "I was hoping graphql could make it all \"smoother\" or easier to manage"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:39:22",
    "edited": {
      "time_stamp": "2024-02-07 14:39:43"
    },
    "text": "the goal is:\n• listing page loads with 10 latest posts\n• user selects x number of tags to filter\n    ◦ a. query serverless function and returns 10 filtered results without reload?\n    ◦ b. graphql query based on url param change would reload the page you're saying "
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:39:54",
    "text": "so you're saying \"a\" is the right approach?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:39:59",
    "text": "and don't do b"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-02-07 14:40:22",
    "text": "I would go with a personally."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:40:41",
    "text": "and the initial 10 can be from graphql just as easily"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-02-07 14:40:55",
    "text": "Well, with a you can still use graphql"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:41:05",
    "text": "unless I have to filter by tags, in which case I would have to use HubL and pass in as props"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-02-07 14:41:12",
    "text": "the serverless function can use the collector endpoint"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-02-07 14:41:20",
    "text": "<https://developers.HubSpot.com/docs/cms/data/query-HubSpot-data-using-graphql>"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:43:07",
    "text": "ok, didn't realize that, but still, if I am filtering against tags"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:43:14",
    "text": "seems like the other endpoints are better"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:44:00",
    "text": "`const baseEndpoint = \"<https://api.hubapi.com/cms/v3/blogs/posts>\";`"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-02-07 14:44:02",
    "edited": {
      "time_stamp": "2024-02-07 14:44:15"
    },
    "text": "right, technically you could do the filtering on the serverless function ... but I agree that it seems like it's forced given the straight up \"rest\" APIs allow filtering the way you want."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:44:51",
    "text": "right, if I use the API I don't need to do any kind of manual filtering"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:45:29",
    "text": "I thought I had to be serverless to use the API for some reason but I guess not...for some reason I \"did\" when I did a test version of this project a few months ago"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:46:03",
    "text": "there's a Bearer accessToken being used"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:46:21",
    "text": "so I can't just do it client side in react from what I understand. Sorry for all the questions!"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-02-07 14:46:23",
    "edited": {
      "time_stamp": "2024-02-07 14:46:34"
    },
    "text": "yeah blog API requires oath"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:46:38",
    "text": "ok, cool, so yea, just use the API to filter and return results"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:46:46",
    "text": "which I can load without page reload"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-02-07 14:47:03",
    "text": "yeah, we can't really just allow a public page to query these endpoints."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:47:08",
    "text": "I really need to learn how to comment my code more, I almost have parts of this built I think..."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:48:24",
    "text": "for some reason I'm batch reading tags...what was old me up to..."
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-02-07 14:49:01",
    "text": "\"mind shards\""
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:50:03",
    "text": "thanks for your help and for mostly aligning my thoughts here"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:50:06",
    "text": "I think I can do this..."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:50:11",
    "text": "and might have done it before lol"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:50:53",
    "text": "it's nice to load initial data and have it pre-rendered via graphql though"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:50:57",
    "text": "I like that workflow"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:53:57",
    "text": "it's also nice that graphql will query across all blogs by default"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:54:05",
    "text": "with the API I'm going to have to loop through I think"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 14:54:13",
    "text": "(just thinking out loud now)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 15:05:57",
    "text": "is there a secret \"related posts\" component in the works? I don't remember seeing that in the survey",
    "reply_count": 2,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2024-02-08 09:20:14"
      },
      {
        "time_stamp": "2024-02-08 09:20:48"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Caitlyn Zheng",
      "poster_handle": "cazheng"
    },
    "time_stamp": "2024-02-07 15:58:32",
    "text": ":wave:  Could we do a quick check on  `hs --version` ?"
  },
  {
    "poster": {
      "poster_name": "Colby Schneider",
      "poster_handle": "colbyschneider"
    },
    "time_stamp": "2024-02-07 16:05:12",
    "text": "5.1.3"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-07 16:32:18",
    "text": "5.1.3"
  }
]