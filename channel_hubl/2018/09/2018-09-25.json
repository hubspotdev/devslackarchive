[
  null,
  null,
  null,
  null,
  null,
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2018-09-25 14:53:25",
    "edited": {
      "time_stamp": "2018-09-25 14:53:44"
    },
    "text": "Hey, all. I'm curious on how people stage blogs? My approach has been to create a new blog template and load that template based on IP address or a Contact Property. I then create a \"blog tester\" template and choose that as my template in the blog settings. Something like so:\n```{% if contact.tester or request.remote_ip == 'IP_ADDRESS_HERE' %}\n    {% if is_listing_view %}\n        {% include \"templates/CLIENT/blog_new.html\" %}\n    {% else %}\n        {% include \"templates/CLIENT/blog_old.html\" %}\n    {% endif %}\n{% else %}\n    {% if is_listing_view %}\n        {% include \"templates/CLIENT/blog_new.html\" %}\n    {% else %}\n        {% include \"templates/CLIENT/blog_old.html\" %}\n    {% endif %}\n{% endif %}```\nWith this, if your IP address matches the one defined, you'll see the new template. Otherwise you see the old template. It's a bit hacky, but works alright. Any other ideas on how to accomplish this?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-25 14:56:33",
    "text": "I usually just have the new blog template and just preview it."
  },
  {
    "text": "",
    "time_stamp": "2018-09-25 14:57:41"
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2018-09-25 14:58:42",
    "text": "What if the client wants to proof the whole site before launch? I could send out preview link like above, but its not ideal."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-25 14:58:47",
    "text": "I do the preview route or create a dummy blog. Usually if I’m doing major changes to a blog I have custom fields in the post detail page that I need to be able to set and I need to test both on the listing and detail page for that so Dummy blog is the best route for me most of the time"
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2018-09-25 14:59:58",
    "edited": {
      "time_stamp": "2018-09-25 15:00:11"
    },
    "text": "I should also be clear, they have a current site in HubSpot. Just working on a brand new theme."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-25 15:01:05",
    "text": "your method of checking IP and swapping the templates is one we’ve done but  I would avoid this to avoid messing with the real blog’s data until we’re ready for it to go live. Also it would break caching for the whole blog"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-25 15:01:55",
    "text": "you could instead of using IP use a query parameter and you wouldn’t have that issue",
    "reply_count": 7,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-09-25 15:02:52"
      },
      {
        "time_stamp": "2018-09-25 15:03:16"
      },
      {
        "time_stamp": "2018-09-25 15:03:53"
      },
      {
        "time_stamp": "2018-09-25 15:04:28"
      },
      {
        "time_stamp": "2018-09-25 15:04:40"
      },
      {
        "time_stamp": "2018-09-25 15:08:07"
      },
      {
        "time_stamp": "2018-09-25 15:09:09"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-09-25 15:02:52",
    "text": "Still breaks caching :wink:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-25 15:03:16",
    "text": "Query parameter doesn’t actually. It caches as if it’s a separate page"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-25 15:03:50",
    "text": "Make them type in the Konami code to see the new blog",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-09-25 15:05:03"
      },
      {
        "time_stamp": "2018-09-25 15:05:11"
      },
      {
        "time_stamp": "2018-09-25 15:07:54"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-25 15:03:53",
    "text": "That’s how the cache buster in the extension actually works, and why you have to hit the button every time you want to view the most current version of the page"
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2018-09-25 15:04:01",
    "text": "yes!"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-09-25 15:04:28",
    "text": "But if you use the query string, how would you reference it without using the request.query_dict variable"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-09-25 15:04:40",
    "text": "I was under the impression that every request.&lt;whatever&gt; call broke the caching"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-25 15:05:03",
    "text": "at my last job a colleague and I added a playable contra game if you enter the konami code at <https://www.jerrysfoods.com/>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-25 15:05:11",
    "text": "best easter egg I’ve hidden in a site."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-25 15:07:54",
    "text": "CONTRA!"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-25 15:08:07",
    "text": "The query param ones do not. because it doesn’t need to regenerate the whole page if you don’t have any parameters in your url.\n\nHowever if you use an IP, referrer or other info pulled from the visitor, current time, it litterally cannot be cached because every time you hit that page it has to re-run that code. So HS has a flag they shut off to kill the caching when those are used."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-25 15:09:09",
    "edited": {
      "time_stamp": "2018-09-25 15:11:03"
    },
    "text": "The cloudflare cache treats each query param url as a separate cached page too so\n\n/blog\n/blog?q=1\n/blog?q=2\nAre all cached like separate pages\n\nThat’s the secret to how the cachebuster in the extension works :stuck_out_tongue:"
  },
  null
]