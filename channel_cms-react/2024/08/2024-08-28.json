[
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 05:55:13",
    "text": "When I load my search results with `&amp;hsDebug=True` I get the expected results. Without that I get \"placeholder\" results. I'm not sure if this is some kind of cache thing or something special about search?\n\nI am using:\n```  const url = usePageUrl();\n  const searchParams = new URLSearchParams(url.search);\n  const term = searchParams.get(\"term\") || \"test\";```\nit looks like `searchParams` returns `size: 2` which is strange because sometimes it does seem to work...any ideas?",
    "reply_count": 43,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-08-28 06:39:31"
      },
      {
        "time_stamp": "2024-08-28 06:40:20"
      },
      {
        "time_stamp": "2024-08-28 06:40:30"
      },
      {
        "time_stamp": "2024-08-28 06:40:35"
      },
      {
        "time_stamp": "2024-08-28 06:41:08"
      },
      {
        "time_stamp": "2024-08-28 06:41:30"
      },
      {
        "time_stamp": "2024-08-28 06:42:20"
      },
      {
        "time_stamp": "2024-08-28 06:43:03"
      },
      {
        "time_stamp": "2024-08-28 06:43:06"
      },
      {
        "time_stamp": "2024-08-28 06:49:07"
      },
      {
        "time_stamp": "2024-08-28 06:49:40"
      },
      {
        "time_stamp": "2024-08-28 06:49:52"
      },
      {
        "time_stamp": "2024-08-28 06:49:54"
      },
      {
        "time_stamp": "2024-08-28 06:53:01"
      },
      {
        "time_stamp": "2024-08-28 06:53:54"
      },
      {
        "time_stamp": "2024-08-28 06:53:59"
      },
      {
        "time_stamp": "2024-08-28 06:54:15"
      },
      {
        "time_stamp": "2024-08-28 06:54:29"
      },
      {
        "time_stamp": "2024-08-28 06:54:45"
      },
      {
        "time_stamp": "2024-08-28 06:55:24"
      },
      {
        "time_stamp": "2024-08-28 06:55:53"
      },
      {
        "time_stamp": "2024-08-28 06:57:30"
      },
      {
        "time_stamp": "2024-08-28 06:58:13"
      },
      {
        "time_stamp": "2024-08-28 06:58:47"
      },
      {
        "time_stamp": "2024-08-28 06:59:07"
      },
      {
        "time_stamp": "2024-08-28 07:03:14"
      },
      {
        "time_stamp": "2024-08-28 07:03:16"
      },
      {
        "time_stamp": "2024-08-28 07:03:56"
      },
      {
        "time_stamp": "2024-08-28 07:05:32"
      },
      {
        "time_stamp": "2024-08-28 07:06:20"
      },
      {
        "time_stamp": "2024-08-28 07:06:42"
      },
      {
        "time_stamp": "2024-08-28 07:11:29"
      },
      {
        "time_stamp": "2024-08-28 07:11:38"
      },
      {
        "time_stamp": "2024-08-28 07:12:39"
      },
      {
        "time_stamp": "2024-08-28 07:13:03"
      },
      {
        "time_stamp": "2024-08-28 07:13:18"
      },
      {
        "time_stamp": "2024-08-28 07:13:39"
      },
      {
        "time_stamp": "2024-08-28 07:19:50"
      },
      {
        "time_stamp": "2024-08-28 07:24:01"
      },
      {
        "time_stamp": "2024-08-28 07:33:34"
      },
      {
        "time_stamp": "2024-08-28 07:33:43"
      },
      {
        "time_stamp": "2024-08-28 07:41:59"
      },
      {
        "time_stamp": "2024-08-28 08:41:19"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 06:04:34",
    "text": "in general, it seems like an older version is cached (for example, I can't see new console logs without adding `hsDebug=true`"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-08-28 06:39:31",
    "text": "Hello Andrey - link to page?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 06:40:20",
    "edited": {
      "time_stamp": "2024-08-28 13:00:44"
    },
    "text": "Hey, I think I made some progress: [link removed]"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 06:40:30",
    "text": "I reset the template in HubSpot settings"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 06:40:35",
    "text": "so I do think I have the latest"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 06:41:08",
    "text": "my code becomes a lot more confusing / I have to figure something else out if I can't grab the initial term from the url"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 06:41:30",
    "text": "I think this is a \"still a lot to learn in react\" situation maybe..."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 06:42:20",
    "text": "the \"fix\" that I attempted was to add a useEffect:\n```useEffect(() =&gt; {\n    setSearchQuery(term);\n  }, [term]);```\nbut that doesn't seem to update places where `searchQuery` is passed"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 06:43:03",
    "text": "although, if I run it like this: `<https://flatiron.com/search?term=cancer&amp;hsDebug=true>`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 06:43:06",
    "text": "then it works as expected"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-08-28 06:49:07",
    "text": "This is a result of the page being pre-rendered and thus the request object associated with the initial render does not have query term. By adding the hsDebug flag you are intentionally going around pre-rendering."
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-08-28 06:49:40",
    "text": "`usePageUrl` hook will give you the page url from the original request used to pre-render the page."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 06:49:52",
    "text": "ah, that makes sense"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-08-28 06:49:54",
    "text": "There's a couple of things you can do."
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-08-28 06:53:01",
    "edited": {
      "time_stamp": "2024-08-28 06:53:52"
    },
    "text": "1. Pass `request.query_dict` in a hublDataTemplate thing <-- this will break pre-rendering on the page. However, if the intent is that the server rendered HTML be dynamic to the query, then breaking pre-rendering is what you are wanting to do.\n2. Use `getServerSideProps` and `withUrlAndQuery` wrapper. You can than just pass into `serverSideProps` the query param that is injected. This will not break pre-rendering for the page, though the module itself will be rendered live with each different query param."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 06:53:54",
    "text": "I am passing `request.query_dict.term`:\n```{% set hublData = request.query_dict.term|escape %}```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 06:53:59",
    "text": "although, it's null"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 06:54:15",
    "text": "maybe because of the \"escape\"? I don't remember why I have that"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-08-28 06:54:29",
    "text": "I don't think so."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 06:54:45",
    "text": "I was originally hoping to get the term from that"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 06:55:24",
    "text": "if you look at the returned props in console `hublData` is null"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-08-28 06:55:53",
    "text": "pass `contact.email`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 06:57:30",
    "text": "you mean in hublData right? so make that an object?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 06:58:13",
    "text": "```{% set hublData = {\n    requestTerm: request.query_dict.term|escape,\n    contact: contact.email\n} %}```\njust to confirm"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 06:58:47",
    "text": "k, deploying"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 06:59:07",
    "text": "(btw, slight bummer that system pages cannot be access via proxy)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 07:03:14",
    "text": "is there a recommend way of making sure cache/pre-render is cleared"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 07:03:16",
    "text": "?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 07:03:56",
    "text": "I should probably remove the useEffect too (in theory it won't be necessary)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 07:05:32",
    "text": "with `hsDebug` it still shows the old `hublData` value"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 07:06:20",
    "text": "so I think I need to go into settings, save as another template, and then save again as the same template (&lt;--- this is a weird step)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 07:06:42",
    "edited": {
      "time_stamp": "2024-08-28 07:06:50"
    },
    "text": "I'm going to remove the useEffect, redeploy, and then do that"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 07:11:29",
    "text": "yea, resetting the template now shows the latest version"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 07:11:38",
    "text": "but only using hsDebug"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 07:12:39",
    "text": "any idea why that doesn't seem to be working?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 07:13:03",
    "text": "also, my hublDataTemplate export is \"strange\":\n```export { default as hublDataTemplate } from \"./hubl_data.hubl.html?raw\";```"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 07:13:18",
    "text": "I think I grabbed this from a previous example, because I wanted it in a separate file"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 07:13:39",
    "text": "I'll try the \"regular\" way"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 07:19:50",
    "text": "<@UAYBXDG4U> no luck. Any idea what might be wrong?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 07:24:01",
    "text": "module index:\n```import { Island } from \"@HubSpot/cms-components\";\nimport Module from \"./island.jsx?island\";\n\nexport const Component = (props) =&gt; {\n  return &lt;Island module={Module} {...props} /&gt;;\n};\nexport { fields } from \"./fields.tsx\";\nexport { meta } from \"./meta.js\";\nexport const hublDataTemplate = `\n{% set hublData = {\n    \"requestTerm\": request.query_dict.term|escape,\n    \"contact\": contact.email\n  }\n%}\n````\n"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-08-28 07:33:34",
    "text": "do you have a link to this page"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-08-28 07:33:43",
    "text": "oh wait, i have it"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 07:41:59",
    "text": "would something like setting clientOnly on the module be a good temporary fix?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 08:41:19",
    "text": "I could probably try passing the search term as a `hublParameter` if you think that might work without pre-rendering getting in the way?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 12:22:13",
    "text": "can someone help explain where this is supposed to be imported from?\n`import { withUrlAndQuery } from 'path/to/helpers';`\n\nI thought this would be like `@HubSpot/cms-components` but apparently it's not. Is there a helpers path?",
    "reply_count": 11,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-08-28 12:22:38"
      },
      {
        "time_stamp": "2024-08-28 12:23:41"
      },
      {
        "time_stamp": "2024-08-28 12:23:44"
      },
      {
        "time_stamp": "2024-08-28 12:24:05"
      },
      {
        "time_stamp": "2024-08-28 12:25:40"
      },
      {
        "time_stamp": "2024-08-28 12:26:19"
      },
      {
        "time_stamp": "2024-08-28 12:33:57"
      },
      {
        "time_stamp": "2024-08-28 12:34:35"
      },
      {
        "time_stamp": "2024-08-28 12:34:41"
      },
      {
        "time_stamp": "2024-08-28 12:35:01"
      },
      {
        "time_stamp": "2024-08-28 12:36:55"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-08-28 12:22:38",
    "edited": {
      "time_stamp": "2024-08-28 12:22:43"
    },
    "text": "do you have most recent version of that package?"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-08-28 12:23:41",
    "text": "```import {\n  withUrlAndQuery\n} from '@HubSpot/cms-components';```"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-08-28 12:23:44",
    "text": "should work"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 12:24:05",
    "text": "oh, ok, in the docs it shows `from 'path/to/helpers';` so i thought something special was going on"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 12:25:40",
    "text": "using\n```    \"node_modules/@HubSpot/cms-components\": {\n      \"version\": \"0.14.12\",```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 12:26:19",
    "text": "looks like there are newer versions available"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 12:33:57",
    "text": "I updated to 0.14.16 but `withUrlAndQuery` doesn't seem to be a function / throwing error locally"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-08-28 12:34:35",
    "text": "latest version is 0.16.7"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 12:34:41",
    "text": "whoa"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 12:35:01",
    "text": "I really have been away for too long..."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 12:36:55",
    "text": "^ maybe that's related to hublData not preventing pre-rendering too"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 12:45:51",
    "text": "when I try to deploy after updating cms-components and server, I get this error:\n```/Users/xxx/code/xxx-digital/src-react/theme-assets-project/app/node_modules/@HubSpot/cli/lib/projects.js:690\n        const { status, [statusText.SUBTASK_KEY]: subTaskStatus } = taskStatus;```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 12:47:09",
    "text": "`@HubSpot/cms-components`: `\"version\": \"0.16.7\",`\n`@HubSpot/cms-dev-server`: `\"version\": \"0.15.8\",`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 12:52:22",
    "text": "had to update the CLI of course... :faceplam:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 13:02:05",
    "text": "is the \"official\" way to reset system pages that are stubborn to update to swap the template in settings and save again?",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2024-08-28 13:15:04"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-08-28 13:15:04",
    "text": "this always seems to work but feels like how when a pigeon turns in a circle to get bird seed in random lab experiments"
  }
]