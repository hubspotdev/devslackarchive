[
  null,
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-29 11:02:48",
    "text": "How do you see if a string is in an array?  Has this been asked before?  I tried searching but cannot find it",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2017-11-29 11:04:56"
      },
      {
        "time_stamp": "2017-11-29 11:05:07"
      },
      {
        "time_stamp": "2017-11-29 11:05:26"
      },
      {
        "time_stamp": "2017-11-29 11:05:37"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-29 11:03:29",
    "text": "The only thing I can think of is turning your array into a string and then seeing if the text containing matches"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2017-11-29 11:04:56",
    "text": "{% if 'string' in arrayVariable %} does this not work?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-29 11:04:57",
    "text": "\"in\" ?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-29 11:05:07",
    "text": "yeah thats what it is I just realized it"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-29 11:05:26",
    "text": "thanks I was just typing that in, thank you for confirmation I strugged with that"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2017-11-29 11:05:37",
    "text": "sure thing :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-11-29 13:16:24",
    "text": "Hey Yaâ€™ll"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-11-29 13:16:28",
    "text": "I have a need."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-11-29 13:16:41",
    "text": "I have a blog feed that i am grouping by year."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-11-29 13:17:12",
    "text": "<https://blog.fpainc.com/press>"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-11-29 13:17:32",
    "text": "The probalem is that it is not outputting in the right order."
  },
  {
    "text": "<@U38EZFVFE> uploaded a file: <https://HubSpotdev.slack.com/files/U38EZFVFE/F87B0BNLS/-.html|Untitled>",
    "time_stamp": "2017-11-29 13:19:44"
  },
  {
    "poster": {
      "poster_name": "Reg Desgroseilliers",
      "poster_handle": "reg"
    },
    "time_stamp": "2017-11-29 13:19:58",
    "text": "You want it to be ascending order? right now looks like it's desc"
  },
  {
    "poster": {
      "poster_name": "Reg Desgroseilliers",
      "poster_handle": "reg"
    },
    "time_stamp": "2017-11-29 13:20:29",
    "text": "Try the reverse hubl filter? |reverse"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-11-29 13:20:37",
    "text": "i havent had this issue untill now."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-11-29 13:23:45",
    "text": "adding reverse has the same result only it is the opposite of the current order"
  },
  {
    "poster": {
      "poster_name": "Reg Desgroseilliers",
      "poster_handle": "reg"
    },
    "time_stamp": "2017-11-29 13:33:07",
    "text": ":disappointed: playing around with it now...\\"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-11-29 13:34:06",
    "text": "I appreciate it.. This has got me stumped. This should be outputting in chronological order"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-29 13:41:45",
    "text": "UMM, dont do it date localized"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-29 13:41:49",
    "text": "do it by the timestamp"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-11-29 13:41:57",
    "text": "it wont work."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-11-29 13:42:25",
    "text": "every post has a slightly different time stamp"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-11-29 13:42:39",
    "text": "and you cant filter in the group by filter"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-29 13:42:41",
    "text": "grouping by YEAR"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-29 13:42:48",
    "text": "I see here, i missed that"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-29 13:43:43",
    "text": "what is the order that isn't right?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-29 13:44:15",
    "text": "oh i see here with this link"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-11-29 13:44:32",
    "text": "look at it again."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-11-29 13:44:36",
    "text": "i just put it back"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-29 13:45:18",
    "text": "Well, to be fair if you are reading backwards in time, this makes sense to me"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-29 13:45:36",
    "text": "your years"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-29 13:45:37",
    "text": "okay"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-29 13:45:41",
    "text": "wow this is all messed up"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-11-29 13:45:41",
    "text": "newest always is first ion the default order"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-11-29 13:45:44",
    "text": "by date"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-29 13:46:09",
    "text": "Sounds like you are going to have to create new variables instead of looping and displaying"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-29 13:46:14",
    "text": "then loop through those"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-29 13:46:27",
    "text": "or use JS to move them around"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-29 13:46:33",
    "text": "I have no clue how you get outta that mess"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-29 13:46:39",
    "text": "almost like a bug"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-11-29 13:47:00",
    "text": "yeah that is what im thinking.. i wonder if <@U6TBZ66FN> can shed some light?"
  },
  {
    "poster": {
      "poster_name": "Reg Desgroseilliers",
      "poster_handle": "reg"
    },
    "time_stamp": "2017-11-29 13:48:34",
    "text": "Can't get it to work here either :confused:"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2017-11-29 13:49:33",
    "text": "Is it in the correct order if you don't groupby?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-11-29 13:51:04",
    "text": "yes."
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2017-11-29 13:55:37",
    "text": "Ahh it's a jinjava bug"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2017-11-29 13:55:41",
    "text": "Let me fix"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-11-29 13:56:11",
    "text": "ah.. yeppers that would do it."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-11-29 14:02:27",
    "text": "<@U6GNQ7JBU> You are a saint amongst men."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-11-29 14:04:08",
    "text": "Question, this has nothing to do with the issue. is JinJava the official name for Hubl?"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2017-11-29 14:09:31",
    "text": "Jinjava is the open source implementation of Jinja, written in Java. HubL is Jinjava plus HubSpot-specific functions and tags"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-11-29 14:13:46",
    "text": "Hmm gotcha"
  }
]