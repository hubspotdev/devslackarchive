[
  {
    "poster": {
      "poster_name": "Martin Angeletti",
      "poster_handle": "martin041"
    },
    "time_stamp": "2020-11-04 09:36:43",
    "text": "<@U0149PQC0HK> I stumbled over the same thing, did you find an answer for this?"
  },
  {
    "poster": {
      "poster_name": "Martin Angeletti",
      "poster_handle": "martin041"
    },
    "time_stamp": "2020-11-04 13:33:33",
    "edited": {
      "time_stamp": "2020-11-04 13:34:13"
    },
    "text": "<@U6GNQ7JBU> this doesnt work for me... have you tried it? it's very much needed... can you help me making it work?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2020-11-04 13:34:42",
    "text": "I think it should be `label={{ 'layout for block' ~ loop.index }}`"
  },
  {
    "poster": {
      "poster_name": "Martin Angeletti",
      "poster_handle": "martin041"
    },
    "time_stamp": "2020-11-04 13:35:50",
    "text": "<@U6GNQ7JBU> WWWWWWWWWOOOOW Thank you very much!"
  },
  {
    "poster": {
      "poster_name": "Martin Angeletti",
      "poster_handle": "martin041"
    },
    "time_stamp": "2020-11-04 13:36:05",
    "text": "less gray hair for me from now on"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2020-11-04 14:50:14",
    "text": "I’d like to use a macro to generate an array… is that possible? This is returning a string:\n```{% set newMenuItemArray = thisMacroReturnsAnArray() %}```"
  },
  {
    "poster": {
      "poster_name": "Adam Munns",
      "poster_handle": "hello509"
    },
    "time_stamp": "2020-11-04 14:54:42",
    "text": "what is inside of thisMacroReturnsAnArray ?"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2020-11-04 14:57:02",
    "text": "```{% macro thisMacroReturnsAnArray() %}\n{% set newMenuItemArray = [\"one\",\"two\",\"three\"] %}\n{{ newMenuItemArray }}\n{% endmacro %}```\nThis is essentially what I’m doing now"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2020-11-04 14:58:39",
    "text": "This example is a bit nonsensical, but the idea is I’d like to generate an array within the macro"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2020-11-04 14:58:59",
    "text": "and be able to use that in hubl elsewhere"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2020-11-04 15:00:34",
    "text": "but in the first snippet, newMenuItemArray is returning as a string with the array code in it, instead of as an actual array"
  },
  {
    "poster": {
      "poster_name": "Adam Munns",
      "poster_handle": "hello509"
    },
    "time_stamp": "2020-11-04 15:01:23",
    "text": "could be that the double braces is printing the array and not the macro itself? What happens if you run a string split filter inside the macro?"
  },
  {
    "poster": {
      "poster_name": "Adam Munns",
      "poster_handle": "hello509"
    },
    "time_stamp": "2020-11-04 15:04:11",
    "text": "Is there a reason you can’t do the array logic inside of the macro ?"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2020-11-04 15:04:58",
    "text": "It needs to be recursive, so it has to return the array to itself"
  },
  {
    "poster": {
      "poster_name": "Adam Munns",
      "poster_handle": "hello509"
    },
    "time_stamp": "2020-11-04 15:05:04",
    "text": "bc if you only trying to convert an array then you can just use a filter"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2020-11-04 15:06:32",
    "text": "hmm, that could work"
  },
  {
    "poster": {
      "poster_name": "Adam Munns",
      "poster_handle": "hello509"
    },
    "time_stamp": "2020-11-04 15:07:19",
    "text": "<https://developers.HubSpot.com/docs/cms/hubl/filters#map>"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2020-11-04 15:07:21",
    "text": "what filter would do that though, if it’s an array of objects"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2020-11-04 15:08:47",
    "text": "Oo, that’s a handy filter! I’ll see what I can do with that"
  },
  {
    "poster": {
      "poster_name": "Adam Munns",
      "poster_handle": "hello509"
    },
    "time_stamp": "2020-11-04 15:09:01",
    "text": "depends on what you need done, but I’d start by looking at map or you can use a macro and output it as json then convert it after the macro. Hard to tell without more info on how you’re modifying the array."
  },
  {
    "poster": {
      "poster_name": "Steven Hambleton",
      "poster_handle": "steven994"
    },
    "time_stamp": "2020-11-04 15:09:12",
    "text": "What about quote marks? `label=\"{{ 'layout for block' ~ loop.index }}\"`"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2020-11-04 15:11:46",
    "text": "Great… |map is actually giving me a new idea on how to approach my initial problem, thank you!"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2020-11-04 16:45:14",
    "text": "It’s possible my problem is specific to using advanced menu data, but `|map` didn’t quite work out for what I was doing (though I’m def keeping that in my back pocket—that needs a better example in the docs to show how it can be used on an array of objects, err list of dictionaries).\n\nFor those following along, to return an array from a macro I’m having success by adding `|fromjson` and  `|tojson`  e.g. updating my example above:\n```{% macro thisMacroReturnsAnArray() %}\n  {% set newMenuItemArray = [\"one\",\"two\",\"three\"] %}\n  {{ newMenuItemArray|tojson }}\n{% endmacro %}\n\n{% set newMenuItemArray = thisMacroReturnsAnArray()|fromjson %}```"
  },
  {
    "poster": {
      "poster_name": "Adam Munns",
      "poster_handle": "hello509"
    },
    "time_stamp": "2020-11-04 18:05:32",
    "text": "ah cool! I thought the json approach may work."
  },
  {
    "poster": {
      "poster_name": "Vesa Poikajärvi",
      "poster_handle": "vesa.poikajarvi"
    },
    "time_stamp": "2020-11-04 22:29:31",
    "edited": {
      "time_stamp": "2020-11-04 22:30:40"
    },
    "text": "No, I did what I described above. Macros work fine, just needed to move the JS out of the module and include with `require_js` in the template, and use the same JS in the existing module by adding it to `meta.json` `js_assets`. Now the actual module just calls the same macro the blog template uses."
  }
]