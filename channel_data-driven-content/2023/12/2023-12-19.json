[
  {
    "poster": {
      "poster_name": "Evelynn Ulsh",
      "poster_handle": "evelynn"
    },
    "time_stamp": "2023-12-19 11:47:38",
    "edited": {
      "time_stamp": "2023-12-19 12:32:38"
    },
    "text": "*[EDIT]* This was just a display glitch in the HubDB UI — the HubDB row order _*is*_, in fact, the default sort order.\n\n_Original Text:_\n> Anyone have a better solution for allowing arbitrary reordering of HubDB-driven content than making editors hand-number every entry? That gets unwieldy very quickly when you have more than a dozen entries in your table.\n> \n> The HubDB interface implicitly communicates that dragging rows to rearrange them *should* let you rearrange their output order, but by the default, it actually pushes any rearranged rows to the bottom. It would be great if the sort index shown in the editor UI was passed over as a part of the row metadata, so we could use it as an `orderBy` criteria — or even to sort by manually.",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-12-19 11:49:55"
      },
      {
        "time_stamp": "2023-12-19 11:50:45"
      },
      {
        "time_stamp": "2023-12-19 11:51:54"
      },
      {
        "time_stamp": "2023-12-19 11:52:16"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Gobi Selvaraj",
      "poster_handle": "gselvaraj"
    },
    "time_stamp": "2023-12-19 11:49:55",
    "text": "Do you have an example table? If you rearrange rows in HubDB UI, it should keep that order both in UI and API. If not, likely a bug or something."
  },
  {
    "poster": {
      "poster_name": "Gobi Selvaraj",
      "poster_handle": "gselvaraj"
    },
    "time_stamp": "2023-12-19 11:50:45",
    "text": "Can u record a video / GIF and send it to us?"
  },
  {
    "poster": {
      "poster_name": "Evelynn Ulsh",
      "poster_handle": "evelynn"
    },
    "time_stamp": "2023-12-19 11:51:54",
    "text": "I can DM the table and test page, if you’d like!\n\nI’m calling it into the page via the `hubdb_table_rows` function, and the default sort seems to be by least recently to most recently updated."
  },
  {
    "poster": {
      "poster_name": "Gobi Selvaraj",
      "poster_handle": "gselvaraj"
    },
    "time_stamp": "2023-12-19 11:52:16",
    "text": "sure"
  }
]