[
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2020-12-01 06:51:50",
    "edited": {
      "time_stamp": "2020-12-01 06:54:20"
    },
    "text": "Hey there!\n\nIt would be nice to add subscriptions preferences to HubSpot ERD so we can see how it relates to the contact object.\n\nI just explain the differences between hs_legal_basis property and subscriptions to a colleague and having it mapped in the ERD would have help!\n <https://lucid.app/lucidchart/ea90eecf-e825-4476-b918-d8f6ddb53a81/edit?page=0_0#>\n\nCC <@UFBNA9K9A>"
  },
  {
    "poster": {
      "poster_name": "Chuck Taylor",
      "poster_handle": "chuck"
    },
    "time_stamp": "2020-12-01 07:53:32",
    "text": "Looking for some general advice. I am working on a page that will initially list 10 most recent Blog posts by particular tags. Someone guided me to the `{{ blog_recent_tag_posts }}` . Now, the client wants to create filters for narrowing down what information the user is after. The `API` seems to have means for me to do this, where based on the filter chosen, I can fetch the appropriate posts, and then update the DOM.\n\nI’m curious if I am looking at this the right way, and the API is the way to go? If so, I see quite a bit of information about authorization, and am wondering what sort of strategy I need to use where these calls will originate from our HubSpot website pages and call the api for our content. Am I okay to simply use the `hapikey` parameter to get posts or pages (public content)? I should note, my client does not currently have any backend server-side solutions in place where things like an API key could be hidden.",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2020-12-01 09:00:54"
      },
      {
        "time_stamp": "2020-12-01 09:09:10"
      },
      {
        "time_stamp": "2020-12-01 09:33:41"
      },
      {
        "time_stamp": "2020-12-01 09:37:20"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2020-12-01 09:00:54",
    "text": "You're much better off using HubL instead of the API in this case. If it were me, I'd start with a large `blog_recent_posts()` function call getting the maximum number of posts, then use the `|selectattr()` filter/function to filter the objects in that dict before looping through it to generate markup."
  },
  {
    "poster": {
      "poster_name": "Chuck Taylor",
      "poster_handle": "chuck"
    },
    "time_stamp": "2020-12-01 09:09:10",
    "text": "Can I decide _when_ to apply the `|selectattr()` filter/function? For example during an `onclick` event?"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2020-12-01 09:33:41",
    "text": "No, HubL compiles on pageload only. You could add query strings to the URL, however, and use `request` to filter the posts on reload"
  },
  {
    "poster": {
      "poster_name": "Chuck Taylor",
      "poster_handle": "chuck"
    },
    "time_stamp": "2020-12-01 09:37:20",
    "text": "Okay. That’s what I had thought. Tahnk you for your insight <@U26BLKGE4>!"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2020-12-01 10:58:07",
    "text": "Not possible via that route.\n\nThere is a way to look up the property change history for whatever property change to see if it was a human or an automation that made the change"
  },
  {
    "poster": {
      "poster_name": "Alex Martin",
      "poster_handle": "amartin566"
    },
    "time_stamp": "2020-12-01 11:13:18",
    "text": "Hello all - I'm trying to extract a list of subject lines for my A/B test draft emails. I can find the subject line endpoint for non-A/B emails (or the A version), but having trouble grabbing the B version and finding the data and API URL on it alone. I appreciate any tips anyone has!",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2020-12-01 11:37:55"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2020-12-01 11:37:55",
    "text": "Can you be more specific about what APIs you tried and what kind of (anonymized / censored) data came back?"
  },
  {
    "poster": {
      "poster_name": "Gal Briner",
      "poster_handle": "gal.briner"
    },
    "time_stamp": "2020-12-02 00:23:04",
    "text": "Hi Matthew,\nThanks for responding.\n\nWhich API can I use to look up the property change history?"
  }
]