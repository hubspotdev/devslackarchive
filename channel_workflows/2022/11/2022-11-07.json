[
  {
    "poster": {
      "poster_name": "Muhammad Naveed",
      "poster_handle": "mnaveed"
    },
    "time_stamp": "2022-11-07 01:18:52",
    "text": "Looking for an opportunity for HS dev?"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 08:44:58",
    "text": "can you not Loop at all if a workflow has a custom coded action? I get the \"can't create endless loop\" error even though its not, no matter what I do",
    "reply_count": 124,
    "reply_users_count": 6,
    "replies": [
      {
        "time_stamp": "2022-11-07 08:46:27"
      },
      {
        "time_stamp": "2022-11-07 08:47:54"
      },
      {
        "time_stamp": "2022-11-07 08:49:27"
      },
      {
        "time_stamp": "2022-11-07 08:55:23"
      },
      {
        "time_stamp": "2022-11-07 09:58:30"
      },
      {
        "time_stamp": "2022-11-07 09:59:20"
      },
      {
        "time_stamp": "2022-11-07 09:59:59"
      },
      {
        "time_stamp": "2022-11-07 10:00:18"
      },
      {
        "time_stamp": "2022-11-07 10:03:28"
      },
      {
        "time_stamp": "2022-11-07 10:14:53"
      },
      {
        "time_stamp": "2022-11-07 10:43:15"
      },
      {
        "time_stamp": "2022-11-07 10:48:32"
      },
      {
        "time_stamp": "2022-11-07 11:14:13"
      },
      {
        "time_stamp": "2022-11-07 11:14:17"
      },
      {
        "time_stamp": "2022-11-07 11:14:30"
      },
      {
        "time_stamp": "2022-11-07 11:17:03"
      },
      {
        "time_stamp": "2022-11-07 11:18:11"
      },
      {
        "time_stamp": "2022-11-07 11:24:49"
      },
      {
        "time_stamp": "2022-11-07 11:25:01"
      },
      {
        "time_stamp": "2022-11-07 11:52:14"
      },
      {
        "time_stamp": "2022-11-07 12:00:37"
      },
      {
        "time_stamp": "2022-11-07 12:21:30"
      },
      {
        "time_stamp": "2022-11-07 12:25:08"
      },
      {
        "time_stamp": "2022-11-07 12:26:52"
      },
      {
        "time_stamp": "2022-11-07 12:26:57"
      },
      {
        "time_stamp": "2022-11-07 12:27:08"
      },
      {
        "time_stamp": "2022-11-07 12:27:38"
      },
      {
        "time_stamp": "2022-11-07 12:27:43"
      },
      {
        "time_stamp": "2022-11-07 12:28:02"
      },
      {
        "time_stamp": "2022-11-07 12:28:25"
      },
      {
        "time_stamp": "2022-11-07 12:29:19"
      },
      {
        "time_stamp": "2022-11-07 12:29:46"
      },
      {
        "time_stamp": "2022-11-07 12:31:05"
      },
      {
        "time_stamp": "2022-11-07 12:31:11"
      },
      {
        "time_stamp": "2022-11-07 12:31:41"
      },
      {
        "time_stamp": "2022-11-07 12:32:06"
      },
      {
        "time_stamp": "2022-11-07 12:32:30"
      },
      {
        "time_stamp": "2022-11-07 12:32:34"
      },
      {
        "time_stamp": "2022-11-07 12:33:01"
      },
      {
        "time_stamp": "2022-11-07 12:33:19"
      },
      {
        "time_stamp": "2022-11-07 12:33:23"
      },
      {
        "time_stamp": "2022-11-07 12:34:39"
      },
      {
        "time_stamp": "2022-11-07 12:35:32"
      },
      {
        "time_stamp": "2022-11-07 12:36:30"
      },
      {
        "time_stamp": "2022-11-07 12:36:58"
      },
      {
        "time_stamp": "2022-11-07 12:39:28"
      },
      {
        "time_stamp": "2022-11-07 12:39:47"
      },
      {
        "time_stamp": "2022-11-07 12:55:42"
      },
      {
        "time_stamp": "2022-11-07 12:57:56"
      },
      {
        "time_stamp": "2022-11-07 12:59:34"
      },
      {
        "time_stamp": "2022-11-07 12:59:46"
      },
      {
        "time_stamp": "2022-11-07 13:00:07"
      },
      {
        "time_stamp": "2022-11-07 13:00:45"
      },
      {
        "time_stamp": "2022-11-07 13:01:25"
      },
      {
        "time_stamp": "2022-11-07 13:20:08"
      },
      {
        "time_stamp": "2022-11-07 13:49:42"
      },
      {
        "time_stamp": "2022-11-07 13:51:06"
      },
      {
        "time_stamp": "2022-11-07 13:56:22"
      },
      {
        "time_stamp": "2022-11-07 13:58:11"
      },
      {
        "time_stamp": "2022-11-07 13:58:32"
      },
      {
        "time_stamp": "2022-11-07 13:58:58"
      },
      {
        "time_stamp": "2022-11-07 13:59:15"
      },
      {
        "time_stamp": "2022-11-07 14:11:29"
      },
      {
        "time_stamp": "2022-11-07 14:12:11"
      },
      {
        "time_stamp": "2022-11-07 14:12:33"
      },
      {
        "time_stamp": "2022-11-07 14:13:00"
      },
      {
        "time_stamp": "2022-11-07 14:13:41"
      },
      {
        "time_stamp": "2022-11-07 14:14:53"
      },
      {
        "time_stamp": "2022-11-07 14:14:56"
      },
      {
        "time_stamp": "2022-11-07 14:16:17"
      },
      {
        "time_stamp": "2022-11-07 14:16:33"
      },
      {
        "time_stamp": "2022-11-07 14:17:51"
      },
      {
        "time_stamp": "2022-11-07 14:17:58"
      },
      {
        "time_stamp": "2022-11-07 14:18:05"
      },
      {
        "time_stamp": "2022-11-07 14:18:16"
      },
      {
        "time_stamp": "2022-11-07 14:19:06"
      },
      {
        "time_stamp": "2022-11-07 14:19:34"
      },
      {
        "time_stamp": "2022-11-07 14:19:38"
      },
      {
        "time_stamp": "2022-11-07 14:20:18"
      },
      {
        "time_stamp": "2022-11-07 14:20:50"
      },
      {
        "time_stamp": "2022-11-07 14:21:25"
      },
      {
        "time_stamp": "2022-11-07 14:21:36"
      },
      {
        "time_stamp": "2022-11-07 14:21:37"
      },
      {
        "time_stamp": "2022-11-07 14:21:39"
      },
      {
        "time_stamp": "2022-11-07 14:22:12"
      },
      {
        "time_stamp": "2022-11-07 14:22:27"
      },
      {
        "time_stamp": "2022-11-09 02:19:19"
      },
      {
        "time_stamp": "2022-11-09 02:22:15"
      },
      {
        "time_stamp": "2022-11-09 02:23:21"
      },
      {
        "time_stamp": "2022-11-09 02:44:03"
      },
      {
        "time_stamp": "2022-11-09 05:49:42"
      },
      {
        "time_stamp": "2022-11-09 05:55:45"
      },
      {
        "time_stamp": "2022-11-09 06:09:39"
      },
      {
        "time_stamp": "2022-11-09 06:14:03"
      },
      {
        "time_stamp": "2022-11-09 07:13:33"
      },
      {
        "time_stamp": "2022-11-09 07:16:30"
      },
      {
        "time_stamp": "2022-11-09 07:29:11"
      },
      {
        "time_stamp": "2022-11-09 07:30:02"
      },
      {
        "time_stamp": "2022-11-09 07:40:09"
      },
      {
        "time_stamp": "2022-11-09 07:49:08"
      },
      {
        "time_stamp": "2022-11-09 08:05:47"
      },
      {
        "time_stamp": "2022-11-09 08:06:05"
      },
      {
        "time_stamp": "2022-11-09 08:06:44"
      },
      {
        "time_stamp": "2022-11-09 08:07:28"
      },
      {
        "time_stamp": "2022-11-09 08:07:41"
      },
      {
        "time_stamp": "2022-11-09 08:08:04"
      },
      {
        "time_stamp": "2022-11-09 08:08:42"
      },
      {
        "time_stamp": "2022-11-09 08:09:19"
      },
      {
        "time_stamp": "2022-11-09 08:09:39"
      },
      {
        "time_stamp": "2022-11-09 08:10:19"
      },
      {
        "time_stamp": "2022-11-09 08:10:48"
      },
      {
        "time_stamp": "2022-11-09 08:10:57"
      },
      {
        "time_stamp": "2022-11-09 08:16:16"
      },
      {
        "time_stamp": "2022-11-09 08:21:19"
      },
      {
        "time_stamp": "2022-11-09 08:33:05"
      },
      {
        "time_stamp": "2022-11-09 09:42:46"
      },
      {
        "time_stamp": "2022-11-14 10:42:47"
      },
      {
        "time_stamp": "2022-11-20 05:54:17"
      },
      {
        "time_stamp": "2022-11-21 14:14:05"
      },
      {
        "time_stamp": "2022-11-21 14:15:13"
      },
      {
        "time_stamp": "2022-11-21 14:31:59"
      },
      {
        "time_stamp": "2022-11-21 14:32:27"
      },
      {
        "time_stamp": "2022-11-21 14:33:49"
      },
      {
        "time_stamp": "2022-11-21 16:21:25"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 08:46:27",
    "text": "Do you have a screenshot of your workflow?"
  },
  {
    "text": "essentially trying to run this until numberOfLoops = 0 _without_ having to run the whole thing non stop, if that makes sense lol",
    "time_stamp": "2022-11-07 08:47:54"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 08:49:27",
    "text": "due to it running at X time, and thanks!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 08:55:23",
    "text": "Very interesting, you do know that you can store a persisting value in custom code right? It might solve the issue for you"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 09:58:30",
    "text": "Oh I had no idea; that's a good idea"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 09:59:20",
    "text": "Yeah, let me find the post I made about it, one moment"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 09:59:59",
    "text": "<https://HubSpotdev.slack.com/archives/C019VT42R8X/p1666103843582969>"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 10:00:18",
    "text": "A little different usecase but you can definitely see how the code works"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 10:03:28",
    "text": "good find, thanks man"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 10:14:53",
    "text": "Of course"
  },
  {
    "poster": {
      "poster_name": "Zeke Schmois",
      "poster_handle": "zschmois"
    },
    "time_stamp": "2022-11-07 10:43:15",
    "text": "cc <@U01DSSS4Z6D>"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 10:48:32",
    "text": "You know it's getting serious when Megan gets cc'ed"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 11:14:13",
    "text": "lol"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 11:14:17",
    "text": "I ended up hacking my way around it"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 11:14:30",
    "text": "I have a recurring workflow running nonstop and everyday I set off the trigger to constantly run 24/7"
  },
  {
    "poster": {
      "poster_name": "Megan Legge",
      "poster_handle": "mlegge"
    },
    "time_stamp": "2022-11-07 11:17:03",
    "text": "<@U0336QCR2FQ> what’s the high level view of what you’re trying to accomplish (eg why loop)?"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 11:18:11",
    "text": "importing 20k records every day into HubSpot. HubSpot CCA can only handle 200 batch inputs at a time before timing out, so I need to run the workflow 20k / 100 times each day <@U01DSSS4Z6D>"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 11:24:49",
    "text": "<@U01DSSS4Z6D> I can't have it stagger based on time because there is only 48 time options, so that's only 96 loops"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 11:25:01",
    "text": "(plus I don't want it looping over 24 hours, rather get it down fast)"
  },
  {
    "poster": {
      "poster_name": "Megan Legge",
      "poster_handle": "mlegge"
    },
    "time_stamp": "2022-11-07 11:52:14",
    "text": "Ah got it, that is super helpful context thanks"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 12:00:37",
    "text": "Have you thought about using the import endpoint? If you setup id fields the old records will update while the new records will be created"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 12:21:30",
    "text": "requires XLSX doesnt it?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 12:25:08",
    "text": "CSV or XLSX"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 12:26:52",
    "text": "hmm yeah thats the problem, it's taking the data from django end point"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 12:26:57",
    "text": "well not the problem"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 12:27:08",
    "text": "but a pain point lol"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 12:27:38",
    "text": "And currently you have a custom code action getting this data from django?"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 12:27:43",
    "text": "yeah"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 12:28:02",
    "text": "guess I could somehow offload it to have python make a xlsx and then just import it that way lol"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 12:28:25",
    "text": "Why not just format as a csv, super easy?"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 12:29:19",
    "text": "On the HubSpot side? So grab data into HubSpot -&gt; format as CSV -&gt; import csvb?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 12:29:46",
    "text": "Bingo"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 12:31:05",
    "text": "good idea, will experiment"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 12:31:11",
    "text": "It would handle the list in just a couple minutes"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 12:31:41",
    "text": "yeah good idea"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 12:32:06",
    "text": "although I wonder if workflows can load in a way to make a CSV"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 12:32:30",
    "text": "I think you can use the os package to make files"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 12:32:34",
    "text": "oh sweet"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 12:33:01",
    "text": "Don't quote me on that though, I would need to run some tests"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 12:33:19",
    "text": "yeah had no idea you could do that with HubSpot, makes sense tho"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 12:33:23",
    "text": "i'll messa round with it, good idea"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 12:34:39",
    "text": "Well HubSpot on the backend is just lamda functions"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 12:35:32",
    "text": "yeah, wish they let us load in packages lol"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 12:36:30",
    "text": "Hacky way for now is to setup a cms serverless function and have the workflow one send a webhook"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 12:36:58",
    "text": "yeah I can't remember if they had serverless or not :disappointed:"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 12:39:28",
    "text": "ughhhh enterprise everything but CMS lol"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 12:39:47",
    "text": "will mess with workflows though good idea lol"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 12:55:42",
    "edited": {
      "time_stamp": "2022-11-07 12:56:04"
    },
    "text": "Check this out:\n```exports.main = async (event, callback) =&gt; {\n\nlet myObj = {\n  \"rows\": [\n    [\n      \"New , Visitor\",\n      \"(not set)\",\n      \"(not set)\",\n      \"0\"\n    ],\n    [\n      \"New Visitor\",\n      \"(not set)\",\n      \"(not set)\",\n      \"mobile\"\n    ],\n    [\n      \"New Visitor\",\n      \"(not set)\",\n      \"(not set)\",\n      \"mobile\"\n    ],\n    [\n      \"New Visitor\",\n      \"(not set)\",\n      \"(not set)\",\n      \"mobile\",\n    ]\n  ]\n}\n\n// 1. One way - if you want the results to be in double quotes and you have comas inside\n\n// choose another string to temporally replace commas if necessary\nlet stringToReplaceComas = '!!!!';\n\nmyObj.rows.map((singleRow) =&gt; {\n  singleRow.map((value, index) =&gt; {\n    singleRow[index] = value.replace(/,/g, stringToReplaceComas);\n  })\n})\n\nlet csv = `\"${myObj.rows.join('\"\\n\"').replace(/,/g, '\",\"')}\"`;\n// // or like this\n// let csv = `\"${myObj.rows.join('\"\\n\"').split(',').join('\",\"')}\"`;\n\ncsv = csv.replace(new RegExp(`${stringToReplaceComas}`, 'g'), ',');\n\n  //save the csv string as a file call csv file\n  \nlet file = new Buffer.from(csv);\nconsole.log(file)\n  \n  callback({\n    outputFields: {\n    }\n  });\n}```"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 12:57:56",
    "text": "huh yeah smart way of doing it"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 12:59:34",
    "text": "Oh I store pretty much all the code from stackoverflow"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 12:59:46",
    "text": "lol"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 13:00:07",
    "text": "only question would be if the workflow can store the buffer since its a lambda...I don't see why _not_ but stranger things have happened lol"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 13:00:45",
    "text": "You can't write the file to the file system, just store it in memory for a couple seconds"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 13:01:25",
    "text": "Lambdas traditionally have read only file systems and HubSpot lambdas are no exceptions"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 13:20:08",
    "text": "interesting okay"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 13:49:42",
    "text": "Also I should mention that just because HubSpot doesn't have it listed in the packages documentation doesn't mean they don't support it"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 13:51:06",
    "text": "really?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 13:56:22",
    "text": "Yeah, because the runtime is now 16.x there are several packages that are now supported that weren't before <https://nodejs.org/docs/latest-v16.x/api/>"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 13:58:11",
    "text": "oh wow had no iddea, that's cool"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 13:58:32",
    "text": "the crypto package is especially nice"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 13:58:58",
    "text": "dang yeah look at that, maybe there is still a way to figure out the e-mail encryption lol"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 13:59:15",
    "text": "lol"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 14:11:29",
    "text": "hmm yeah CSV I don't think will work; there just isn't enough time in a CCA for HubSpot to page through the 200 pages and grab data without splitting it up similiar to how its done now"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 14:12:11",
    "text": "but that's more of a external API issue"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 14:12:33",
    "edited": {
      "time_stamp": "2022-11-07 14:12:36"
    },
    "text": "How were you doing it before? the converting it to a csv should take under a couple tens of milliseconds"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 14:13:00",
    "text": "the Django endpoint that we were given (unless i'm missing something) only shows us 100 records at a time, so we have to get the count and then divide it by 100"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 14:13:41",
    "text": "Ah but how were you able to process this data in quickly before?"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 14:14:53",
    "text": "oh lol, so I had two workflows; one that would update a variable to the count every morning at 8, and then another that runs on the count is known and count != 0, and then removes 2 from the count after every run"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 14:14:56",
    "text": "if that makes sense"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 14:16:17",
    "text": "Ah yes, that definitely makes sense. Would you be able to setup a lambda on your own aside from HubSpot? and then just send a webhook to it?"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 14:16:33",
    "text": "they have every enterprise account except for CRM Enterprise :V"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 14:17:51",
    "text": "oh I got what you're saying"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 14:17:58",
    "text": "the answer is no  :disappointed:"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 14:18:05",
    "text": "Oh dang"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 14:18:16",
    "text": "yeah if I could do this outside of HubSpot it'd be trivial"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 14:19:06",
    "text": "truly would be, what about 2 custom code actions that run back to back?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 14:19:34",
    "text": "Janky? Yes. But might do the trick"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 14:19:38",
    "text": "whatcha mean"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 14:20:18",
    "edited": {
      "time_stamp": "2022-11-07 14:20:22"
    },
    "text": "Like have one custom code action process 50% of the pages and then have the other do the other 50%"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 14:20:50",
    "text": "oh gotcha; for CSV's though, not sure if it would persist between the two CCA?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 14:21:25",
    "text": "You could output the data as stringified json and then use it as input for the next one"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 14:21:36",
    "text": ":joy:"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 14:21:37",
    "text": "that's true, good idea"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 14:21:39",
    "text": "lmao"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-07 14:22:12",
    "text": "Jank upon jank upon jank"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-11-07 14:22:27",
    "text": "100% lol"
  }
]