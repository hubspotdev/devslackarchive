[
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-09-24 07:58:36",
    "edited": {
      "time_stamp": "2019-09-24 08:02:27"
    },
    "text": "Calling all geniuses! Is there a way to lazy load blog post images without hackery (and needs to work in all browsers)?\n*Note:* the marketer shouldn’t have to add classes or a `loading=lazy` attribute. They should just add a HubSpot image to a blog post and that is it. Any success?",
    "reply_count": 23,
    "reply_users_count": 5,
    "replies": [
      {
        "time_stamp": "2019-09-24 08:05:49"
      },
      {
        "time_stamp": "2019-09-24 08:06:48"
      },
      {
        "time_stamp": "2019-09-24 08:10:09"
      },
      {
        "time_stamp": "2019-09-24 08:16:55"
      },
      {
        "time_stamp": "2019-09-24 08:17:54"
      },
      {
        "time_stamp": "2019-09-24 08:18:13"
      },
      {
        "time_stamp": "2019-09-24 08:19:12"
      },
      {
        "time_stamp": "2019-09-24 08:25:55"
      },
      {
        "time_stamp": "2019-09-24 08:27:04"
      },
      {
        "time_stamp": "2019-09-24 08:28:21"
      },
      {
        "time_stamp": "2019-09-24 08:34:08"
      },
      {
        "time_stamp": "2019-09-24 08:34:36"
      },
      {
        "time_stamp": "2019-09-24 08:35:51"
      },
      {
        "time_stamp": "2019-09-24 08:36:37"
      },
      {
        "time_stamp": "2019-09-24 08:37:20"
      },
      {
        "time_stamp": "2019-09-24 08:37:44"
      },
      {
        "time_stamp": "2019-09-24 08:37:56"
      },
      {
        "time_stamp": "2019-09-24 08:38:08"
      },
      {
        "time_stamp": "2019-09-24 09:30:24"
      },
      {
        "time_stamp": "2019-09-24 12:05:19"
      },
      {
        "time_stamp": "2019-09-24 12:05:42"
      },
      {
        "time_stamp": "2019-09-24 12:30:52"
      },
      {
        "time_stamp": "2019-09-24 13:15:58"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-09-24 08:05:49",
    "text": "I've tried using a `replace` filter on the post body but never was able to get it to work"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-09-24 08:06:48",
    "edited": {
      "time_stamp": "2019-09-24 08:06:58"
    },
    "text": "I'd like to know as well if somebody has figured this out"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-09-24 08:10:09",
    "text": "I assume you’re talking about images other than featured image?"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-09-24 08:16:55",
    "text": "<@U7V9DQ31P> same here. HubSpot’s script on images with width attributes always made it impossible for me.\n\n<@U54TVT3C1> yes"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-09-24 08:17:54",
    "text": "currently the only browser I can do this in is Chrome by\n```{{ content.post_body|replace('&lt;img ', '&lt;img loading=\"lazy\" ') }}```"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-09-24 08:18:13",
    "edited": {
      "time_stamp": "2019-09-24 08:19:11"
    },
    "text": "Although Chrome has native lazy loading now, I still need it to work in other browsers too :slightly_frowning_face:"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-09-24 08:19:12",
    "text": "you could also add `lazyload=\"1\"` for IE lol"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-09-24 08:25:55",
    "text": "This is a very interesting problem to solve for.\n\nI’m wondering if you could loop through all images in `post_body`, get the ‘src’ and make it a ‘data-src’ and then use a lazy load plugin"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-09-24 08:27:04",
    "text": "(PS, by no means a genius.  I implemented lazy loading using instructions in a blog post written by <@U7V9DQ31P>)"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-09-24 08:28:21",
    "text": "I feel like I’m suggesting turning a lazy load plugin on backwards…"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-09-24 08:34:08",
    "text": "it's really something HubSpot should enable in the site settings"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-09-24 08:34:36",
    "text": "a checkbox to \"Enable lazy loading markup on images in rich text modules\" or whatever"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-09-24 08:35:51",
    "text": "That would be cool… They could even build in a native lazy loading plugin"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-09-24 08:36:37",
    "text": "or if we took a step back, if they added the ability to change the markup for all the standard elements in rich text modules. so you could write your own markup for the images and whatever else"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-09-24 08:37:20",
    "text": "that would be handy"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-09-24 08:37:44",
    "text": "Yeah, that could be interesting... and dangerous lol"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-09-24 08:37:56",
    "text": "haha yeah. hide it real deep in the developer tools somewhere"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-09-24 08:38:08",
    "text": "\"Global Rich Text Markup Editor\""
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-09-24 09:30:24",
    "text": "i have to imagine they are working adding native lazy loading at a min...right?"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-09-24 12:05:19",
    "text": "we made it for our main theme.\nI can't share anymore as it will be one of those features _on point_"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-09-24 12:05:42",
    "edited": {
      "time_stamp": "2019-09-24 12:07:00"
    },
    "text": "well I can point out to the right path tho...\n`|regex_replace` :shushing_face:"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-09-24 12:30:52",
    "text": ":thinking_face: <@U7ADCU3BM> did you manage to make it respect users’ widths?\nFor example, imagine a marketer shrinks an image to 200px, and then inserts another one at full width of the blog’s body (800px)."
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-09-24 13:15:58",
    "edited": {
      "time_stamp": "2019-09-24 13:16:44"
    },
    "text": "it respect the widths :slightly_smiling_face:\nI actually did it initially to add my own  `srcset`  but we also added the lazyload functionality afterwards"
  }
]