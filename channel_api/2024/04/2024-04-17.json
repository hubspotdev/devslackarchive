[
  {
    "poster": {
      "poster_name": "Manish Dhanwal",
      "poster_handle": "manish.dhanwal"
    },
    "time_stamp": "2024-04-17 03:01:46",
    "text": "Hello everyone,\nI have multiple pipelines, and I need to retrieve all the deals from each pipeline based on specific pipeline filters or pipeline IDs. Could you please help with this?\nThanks\n```curl --request GET \\\n  --url '<https://api.hubapi.com/crm/v3/objects/deals?limit=10&amp;archived=false>' \\\n  --header 'authorization: Bearer YOUR_ACCESS_TOKEN'```",
    "reply_count": 17,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-04-17 06:19:56"
      },
      {
        "time_stamp": "2024-04-17 06:23:07"
      },
      {
        "time_stamp": "2024-04-17 06:23:33"
      },
      {
        "time_stamp": "2024-04-17 06:23:38"
      },
      {
        "time_stamp": "2024-04-17 06:23:52"
      },
      {
        "time_stamp": "2024-04-17 06:25:32"
      },
      {
        "time_stamp": "2024-04-17 06:27:05"
      },
      {
        "time_stamp": "2024-04-17 06:27:36"
      },
      {
        "time_stamp": "2024-04-17 06:28:15"
      },
      {
        "time_stamp": "2024-04-17 06:28:24"
      },
      {
        "time_stamp": "2024-04-17 06:29:12"
      },
      {
        "time_stamp": "2024-04-17 06:29:31"
      },
      {
        "time_stamp": "2024-04-17 06:30:57"
      },
      {
        "time_stamp": "2024-04-17 06:32:06"
      },
      {
        "time_stamp": "2024-04-17 06:32:12"
      },
      {
        "time_stamp": "2024-04-17 06:32:46"
      },
      {
        "time_stamp": "2024-04-17 06:33:09"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Nisan Ruvinov",
      "poster_handle": "nisanr"
    },
    "time_stamp": "2024-04-17 03:07:57",
    "text": "i want to use this api as a user info endpoint where the result is returned not as an array"
  },
  {
    "poster": {
      "poster_name": "Matt Cruz",
      "poster_handle": "matt.cruz"
    },
    "time_stamp": "2024-04-17 06:01:21",
    "text": "love to hear it, get at it!"
  },
  {
    "poster": {
      "poster_name": "Matt Cruz",
      "poster_handle": "matt.cruz"
    },
    "time_stamp": "2024-04-17 06:19:56",
    "text": "Your pipeline IDs and stage IDs are going to be unique to your portal most likely, and depending on how old your portal is and how customized the stages are, there may be no rhyme or reason to the internal values when all brought together (speaking from experience)\n\nThe stages are pipeline specific, so if you wanted to say something like \"stage 2 in the renewal pipeline\" that's going to be a specific stage value, and you don't need to include the pipeline filter to find it.\nThat said, if you need _all_ deals from a specific pipeline that match [some custom filter, let's say industry = IT] then you would want to use the pipeline's value and then the custom filter\nthere are limits so you may need to paginate depending on how big your looking for.\n\nGraphQL is pretty sweet too, you can avoid using the rest endpoints for the deals object entirely and just hit that up with your filters, and the explorer will give you a good idea of what the payload will look like.\n\n*To find the specific pipeline IDs / stage IDs of your own portal, go to Settings &gt; Properties &gt; Deals* look up the property and grab the values."
  },
  {
    "poster": {
      "poster_name": "Matt Cruz",
      "poster_handle": "matt.cruz"
    },
    "time_stamp": "2024-04-17 06:22:19",
    "text": "is there a particular reason why it can't be an array? This endpoint will always return an array of objects because there are more than 1 users in the portal. That said, you can do a dance with the data all you want and turn it into something else, stringify it, turn it into a csv, base64 encode it, once you have it (depending on your environment) you should be able to manipulate it to your purposes, but this is the only endpoint I am aware of the provides and user data currently"
  },
  {
    "poster": {
      "poster_name": "Manish Dhanwal",
      "poster_handle": "manish.dhanwal"
    },
    "time_stamp": "2024-04-17 06:23:07",
    "text": "Can I use APIs for everything like fetching pipelines and stages then deals from the specific pipeline?"
  },
  {
    "poster": {
      "poster_name": "Matt Cruz",
      "poster_handle": "matt.cruz"
    },
    "time_stamp": "2024-04-17 06:23:33",
    "text": "big time"
  },
  {
    "poster": {
      "poster_name": "Manish Dhanwal",
      "poster_handle": "manish.dhanwal"
    },
    "time_stamp": "2024-04-17 06:23:38",
    "text": "Also I couldnâ€™t find the reference anywhere for passing  filter in the API"
  },
  {
    "poster": {
      "poster_name": "Matt Cruz",
      "poster_handle": "matt.cruz"
    },
    "time_stamp": "2024-04-17 06:23:52",
    "text": "I gotchu one sec"
  },
  {
    "poster": {
      "poster_name": "Matt Cruz",
      "poster_handle": "matt.cruz"
    },
    "time_stamp": "2024-04-17 06:25:32",
    "text": "so I can't link directly to it because of the build of the page but\n<https://developers.HubSpot.com/docs/api/crm/deals>\n\nGo here, go to the Endpoints tab, and you can use those examples to actually build out your full query. You're looking for the 'properties' attribute as these are _properties_ of the _object_ in HubSpot terms, and the object in this case is a Deal, the properties are Pipeline and deal stage"
  },
  {
    "poster": {
      "poster_name": "Manish Dhanwal",
      "poster_handle": "manish.dhanwal"
    },
    "time_stamp": "2024-04-17 06:27:05",
    "text": "Yes, i explored this but could not find the solution where i can pass the query as pipeline id or something so i can get all the deals from the specific pipeline"
  },
  {
    "poster": {
      "poster_name": "Manish Dhanwal",
      "poster_handle": "manish.dhanwal"
    },
    "time_stamp": "2024-04-17 06:27:36",
    "text": "It's always returns all the deals"
  },
  {
    "poster": {
      "poster_name": "Matt Cruz",
      "poster_handle": "matt.cruz"
    },
    "time_stamp": "2024-04-17 06:28:15",
    "text": "ah shit my bad dude, I need more coffee"
  },
  {
    "poster": {
      "poster_name": "Matt Cruz",
      "poster_handle": "matt.cruz"
    },
    "time_stamp": "2024-04-17 06:28:24",
    "text": "one sec"
  },
  {
    "poster": {
      "poster_name": "Matt Cruz",
      "poster_handle": "matt.cruz"
    },
    "time_stamp": "2024-04-17 06:29:12",
    "edited": {
      "time_stamp": "2024-04-17 06:30:06"
    },
    "text": "my dumbass: the properties attribute is what is returned, not the filter.\nYou want the Search endpoint"
  },
  {
    "poster": {
      "poster_name": "Matt Cruz",
      "poster_handle": "matt.cruz"
    },
    "time_stamp": "2024-04-17 06:29:31",
    "text": "the gets can only call for IDs or unique properties (at least currently)"
  },
  {
    "poster": {
      "poster_name": "Matt Cruz",
      "poster_handle": "matt.cruz"
    },
    "time_stamp": "2024-04-17 06:30:57",
    "text": "(or graphql, it's going to be the answer for retrieving most data in the future)"
  },
  {
    "poster": {
      "poster_name": "Manish Dhanwal",
      "poster_handle": "manish.dhanwal"
    },
    "time_stamp": "2024-04-17 06:32:06",
    "text": "gotcha, i will filter the data from the gets response; for now it's the solution."
  },
  {
    "poster": {
      "poster_name": "Manish Dhanwal",
      "poster_handle": "manish.dhanwal"
    },
    "time_stamp": "2024-04-17 06:32:12",
    "text": "Thanks"
  },
  {
    "text": "Not according to the new version of the developer docs.",
    "time_stamp": "2024-04-17 06:32:26"
  },
  {
    "poster": {
      "poster_name": "Matt Cruz",
      "poster_handle": "matt.cruz"
    },
    "time_stamp": "2024-04-17 06:32:46",
    "text": "fair play that will work too, best of luck!"
  },
  {
    "poster": {
      "poster_name": "Manish Dhanwal",
      "poster_handle": "manish.dhanwal"
    },
    "time_stamp": "2024-04-17 06:33:09",
    "text": ":blush:"
  },
  {
    "poster": {
      "poster_name": "Scott Marion",
      "poster_handle": "scott943"
    },
    "time_stamp": "2024-04-17 06:37:41",
    "text": "You probably will need to show some of your code to have someone here help.  The APIs should return results within a very short period of time."
  },
  {
    "poster": {
      "poster_name": "Nisan Ruvinov",
      "poster_handle": "nisanr"
    },
    "time_stamp": "2024-04-17 07:09:41",
    "text": "I want to use a 3rd party authentication product (<https://www.descope.com/> for example) that so it will handle the token management for me and i need to specify a \"user info endpoint\" that will be queried using the generated access token (using the client id and secret) and this user info endpoint should return the user id that generated it. the restrains is that i can't use an endpoint with query_variables like `/auth/:token` or api that result with an array."
  },
  {
    "poster": {
      "poster_name": "Nisan Ruvinov",
      "poster_handle": "nisanr"
    },
    "time_stamp": "2024-04-17 07:12:23",
    "text": "<@U06B6J5BCRY> for salesforce for example u have a userinfo path in the <https://help.salesforce.com/s/articleView?id=sf.remoteaccess_oauth_endpoints.htm&amp;type=5|OAuth Endpoints> section"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-04-17 07:13:21",
    "text": "when search results are returned with the API they each have a \"score\" of how relevant they are"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-04-17 07:13:37",
    "text": "but sometimes, I'm getting the same post with slightly different scores"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-04-17 07:14:03",
    "text": "which shows a duplicate + I can't use the id as a key in my `cms-react` project"
  },
  {
    "text": "",
    "subtype": "thread_broadcast",
    "time_stamp": "2024-04-17 07:14:38"
  },
  {
    "poster": {
      "poster_name": "Matt Cruz",
      "poster_handle": "matt.cruz"
    },
    "time_stamp": "2024-04-17 07:16:09",
    "text": "ah I see, you're looking for user information in relation to oauth, my suggestion is for managing information about owners. I _believe_ HubSpot's oauth functions a little differently than SFDCs but I am less familiar with them.\nlet me see if I can find some relevant documentation for you though"
  },
  {
    "poster": {
      "poster_name": "Matt Cruz",
      "poster_handle": "matt.cruz"
    },
    "time_stamp": "2024-04-17 07:17:54",
    "text": "ahhhhh interesting, my dumbass thought you were querying contact's HubSpot scores. seems odd that they wouldn't deduplicate based on the ID. Are the parameters in an OR statement? maybe it's the score of one OR statement versus the other?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-04-17 07:19:58",
    "text": "no OR statements but I do multiple queries (sometimes)...maybe it's different between queries or I need to deduplicate myself"
  },
  {
    "poster": {
      "poster_name": "Matt Cruz",
      "poster_handle": "matt.cruz"
    },
    "time_stamp": "2024-04-17 07:21:50",
    "text": "very odd, vibes-based algorithm"
  },
  {
    "poster": {
      "poster_name": "Nisan Ruvinov",
      "poster_handle": "nisanr"
    },
    "time_stamp": "2024-04-17 07:22:27",
    "text": "Thanks Matt! appreciate it!"
  },
  {
    "poster": {
      "poster_name": "Joshua de Leon",
      "poster_handle": "joshua475"
    },
    "time_stamp": "2024-04-17 07:32:32",
    "text": "Its a pretty generic implementation. We create a client and then request with a specific limit and properties. I can confirm that we go through the entire process fine up to the contact request which appears to go out but with no response.\n```  const HubSpotClient = await createHubSpotClient();\n  const res = await HubSpotClient.crm.contacts.getAll(limit, \"0\", properties);```"
  },
  {
    "poster": {
      "poster_name": "Joshua de Leon",
      "poster_handle": "joshua475"
    },
    "time_stamp": "2024-04-17 07:32:58",
    "text": "limit set to 10 and the properties are formatted as such [\"prop1\", \"prop2\"]"
  },
  {
    "poster": {
      "poster_name": "Matt Cruz",
      "poster_handle": "matt.cruz"
    },
    "time_stamp": "2024-04-17 07:34:29",
    "text": "a _stupid_ amount of googling later and I may have an answer for you:\n<https://legacydocs.HubSpot.com/docs/methods/oauth2/get-access-token-information?_gl=1*3y57v8*_ga*MjAyMjEzMDQ0LjE3MTMzNTUzNzE.*_ga_LXTM6CQ0XK*MTcxMzM1OTk2Ni4yLjEuMTcxMzM2MDc4OC4xOC4wLjA>."
  },
  {
    "text": "Hmmm....  I would suggest using the docs page where you can test right there with Node and then use that code as a guide to help see what's going on.  <https://developers.HubSpot.com/docs/api/crm/contacts>",
    "time_stamp": "2024-04-17 07:42:57"
  },
  {
    "poster": {
      "poster_name": "Joshua de Leon",
      "poster_handle": "joshua475"
    },
    "time_stamp": "2024-04-17 07:45:40",
    "text": "Do most end up calling the API directly over the package sdks? That's what facilitates the call, the library owned by HubSpot."
  },
  {
    "text": "actually, that contact Node code is weird - looking at deals list method instead looks more like what I am using.  The import statement for the HubSpot client is there -",
    "time_stamp": "2024-04-17 07:49:00",
    "edited": {
      "time_stamp": "2024-04-17 07:54:04"
    }
  },
  {
    "poster": {
      "poster_name": "Nisan Ruvinov",
      "poster_handle": "nisanr"
    },
    "time_stamp": "2024-04-17 07:50:17",
    "text": "unfortunately i can't user apis with url parameters :cry:"
  },
  {
    "poster": {
      "poster_name": "Scott Marion",
      "poster_handle": "scott943"
    },
    "time_stamp": "2024-04-17 07:53:12",
    "text": "When I first started using HS I didn't even know there were any packages and I wrote my own using direct calls.  After that I started using the HS client but I mostly use the CRM for deals and line items which shows the code much more normal using the HubSpot Client package."
  },
  {
    "poster": {
      "poster_name": "Matt Cruz",
      "poster_handle": "matt.cruz"
    },
    "time_stamp": "2024-04-17 08:04:14",
    "text": ":disappointed: not sure if I know the answer then"
  },
  {
    "poster": {
      "poster_name": "Joshua de Leon",
      "poster_handle": "joshua475"
    },
    "time_stamp": "2024-04-17 08:05:10",
    "text": "const apiResponse = await HubSpotClient.crm.deals.batchApi.post-/crm/v3/objects/deals/batch/archive(BatchInputSimplePublicObjectId);\n\nYou structure your request with the dash after the post? The library has specific methods for this. At least from what I can see looking at the module"
  },
  {
    "poster": {
      "poster_name": "Scott Marion",
      "poster_handle": "scott943"
    },
    "time_stamp": "2024-04-17 08:08:55",
    "text": "```        const BatchReadInputSimplePublicObjectId = { propertiesWithHistory: [propertiesWithHistory], inputs: inputs, properties: [properties] };\n\n        return await HubSpotClient.crm.deals.batchApi.read(BatchReadInputSimplePublicObjectId, archived);```"
  },
  {
    "poster": {
      "poster_name": "Scott Marion",
      "poster_handle": "scott943"
    },
    "time_stamp": "2024-04-17 08:09:39",
    "text": "same basically as what the docs page shows"
  },
  {
    "poster": {
      "poster_name": "Scott Marion",
      "poster_handle": "scott943"
    },
    "time_stamp": "2024-04-17 08:13:51",
    "text": "```Whole method looks like this and is called from another controller:      /**\n     * Batch Read Deals\n     */\n    static async batchReadDeals (req, res, next) {\n        console.log(\"HubSpotCRMService:: batchReadDeals::\");\n\n        let inputs = [];\n        let properties = \"string\";\n        let propertiesWithHistory = \"string\";\n        let idProperty = undefined;\n        let archived = false;\n\n        // HubSpot client\n        const HubSpotClient = new HubSpot.Client({\"accessToken\": hs_token });\n\n        // inputs\n        if (typeof (req.body.inputs) != 'undefined') {\n            inputs = req.body.inputs;\n        } else {\n            console.log(\"HubSpotCRMService:: batchReadDeals:: Required Parameter Missing::inputs\");\n            return new Promise(async (resolve, reject) =&gt; {\n                reject(\"Required Parameter Missing::inputs\");\n            })\n        }\n\n        // properties\n        if (typeof(req.body.properties) != 'undefined' &amp;&amp; req.body.properties !== '') {\n            properties = req.body.properties;\n        } else {\n            properties = dsb_deals_custom_properties;\n        }\n\n        const BatchReadInputSimplePublicObjectId = { propertiesWithHistory: [propertiesWithHistory], inputs: inputs, properties: [properties] };\n\n        return await HubSpotClient.crm.deals.batchApi.read(BatchReadInputSimplePublicObjectId, archived);\n    }```"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-04-17 08:18:05",
    "text": "It appears a new scope type just dropped, anyone else just now seeing these condition scopes?\n<https://developers.HubSpot.com/docs/api/creating-an-app#configure-scopes>",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-04-17 08:27:00"
      },
      {
        "time_stamp": "2024-04-17 08:28:05"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Roger Brown",
      "poster_handle": "robrown"
    },
    "time_stamp": "2024-04-17 08:27:00",
    "text": "Hey Carter, we have more information about this in our changelog post\n<https://developers.HubSpot.com/changelog/advanced-auth-and-scope-settings-for-public-apps>"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-04-17 08:28:05",
    "text": "Ah so it is new! Love seeing it!"
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-17 10:34:48",
    "text": "Hi All, is there any way to not import the entire companies table when hitting the <https://api.hubapi.com/crm/v3/objects/companies> ? I am moving company data to BigQuery and can't find a way to only bring in altered records since the last run.",
    "reply_count": 44,
    "reply_users_count": 6,
    "replies": [
      {
        "time_stamp": "2024-04-17 11:03:32"
      },
      {
        "time_stamp": "2024-04-17 11:05:59"
      },
      {
        "time_stamp": "2024-04-17 11:16:03"
      },
      {
        "time_stamp": "2024-04-17 11:18:51"
      },
      {
        "time_stamp": "2024-04-17 11:33:28"
      },
      {
        "time_stamp": "2024-04-17 11:34:10"
      },
      {
        "time_stamp": "2024-04-17 11:34:36"
      },
      {
        "time_stamp": "2024-04-17 11:34:57"
      },
      {
        "time_stamp": "2024-04-17 11:35:09"
      },
      {
        "time_stamp": "2024-04-17 11:35:10"
      },
      {
        "time_stamp": "2024-04-17 11:35:29"
      },
      {
        "time_stamp": "2024-04-17 11:35:33"
      },
      {
        "time_stamp": "2024-04-17 11:36:07"
      },
      {
        "time_stamp": "2024-04-17 11:36:14"
      },
      {
        "time_stamp": "2024-04-17 11:36:45"
      },
      {
        "time_stamp": "2024-04-17 11:37:03"
      },
      {
        "time_stamp": "2024-04-17 11:37:34"
      },
      {
        "time_stamp": "2024-04-17 11:38:27"
      },
      {
        "time_stamp": "2024-04-17 11:38:35"
      },
      {
        "time_stamp": "2024-04-17 11:39:34"
      },
      {
        "time_stamp": "2024-04-17 11:39:57"
      },
      {
        "time_stamp": "2024-04-17 11:40:33"
      },
      {
        "time_stamp": "2024-04-17 11:40:51"
      },
      {
        "time_stamp": "2024-04-17 11:40:55"
      },
      {
        "time_stamp": "2024-04-17 11:41:04"
      },
      {
        "time_stamp": "2024-04-17 11:41:13"
      },
      {
        "time_stamp": "2024-04-17 11:41:30"
      },
      {
        "time_stamp": "2024-04-17 11:41:46"
      },
      {
        "time_stamp": "2024-04-17 11:42:05"
      },
      {
        "time_stamp": "2024-04-17 11:42:27"
      },
      {
        "time_stamp": "2024-04-17 11:43:27"
      },
      {
        "time_stamp": "2024-04-17 11:44:29"
      },
      {
        "time_stamp": "2024-04-17 11:44:42"
      },
      {
        "time_stamp": "2024-04-17 11:44:59"
      },
      {
        "time_stamp": "2024-04-17 12:03:02"
      },
      {
        "time_stamp": "2024-04-17 16:35:08"
      },
      {
        "time_stamp": "2024-04-18 06:26:05"
      },
      {
        "time_stamp": "2024-04-18 06:27:09"
      },
      {
        "time_stamp": "2024-04-26 12:03:01"
      },
      {
        "time_stamp": "2024-04-26 12:05:04"
      },
      {
        "time_stamp": "2024-04-26 12:11:20"
      },
      {
        "time_stamp": "2024-04-26 12:12:53"
      },
      {
        "time_stamp": "2024-05-20 09:13:00"
      },
      {
        "time_stamp": "2024-06-21 12:32:40"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Arno Van de Weyer",
      "poster_handle": "arno.vandeweyer"
    },
    "time_stamp": "2024-04-17 11:03:32",
    "text": "I guess you can filter on Last modified date?"
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-17 11:05:59",
    "text": "That doesn't appear to be an option in the endpoint."
  },
  {
    "text": "SearchCRM is the only way I know of to do what you want.",
    "time_stamp": "2024-04-17 11:16:03"
  },
  {
    "poster": {
      "poster_name": "Amalia",
      "poster_handle": "amalia.reodica"
    },
    "time_stamp": "2024-04-17 11:18:51",
    "text": "You can try this, create an export and then get the export data: <https://developers.HubSpot.com/docs/api/crm/exports>"
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-17 11:33:28",
    "text": "Both of these hinge on the filters working correctly. Last I checked, if you merge a company, the update time doesn't get changed.  <https://community.HubSpot.com/t5/APIs-Integrations/Merged-Companies-do-not-trigger-UpdatedAt-date-change/td-p/785805>"
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-17 11:34:10",
    "text": "How is everyone else dealing with this? Is everybody just downloading entire objects every time? Such as the entire Companies data set?"
  },
  {
    "poster": {
      "poster_name": "Arno Van de Weyer",
      "poster_handle": "arno.vandeweyer"
    },
    "time_stamp": "2024-04-17 11:34:36",
    "edited": {
      "time_stamp": "2024-04-17 11:34:55"
    },
    "text": "I'm not sure what exactly you need, do you want all Company data but for a certain filter like Country Germany?"
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-17 11:34:57",
    "text": "I want to pull records into a data warehouse. I am currently doing that, but I have to pull the entire contents."
  },
  {
    "poster": {
      "poster_name": "Scott Marion",
      "poster_handle": "scott943"
    },
    "time_stamp": "2024-04-17 11:35:09",
    "text": "I don't currently have any set needs to try what you're doing - mostly my apps for clients have to deal with creating/updating deals and line items"
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-17 11:35:10",
    "text": "No, the filter I want to use is updated at, but it doesn't work."
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-17 11:35:29",
    "text": "I just wonder what all the data warehouse folks are doing."
  },
  {
    "poster": {
      "poster_name": "Arno Van de Weyer",
      "poster_handle": "arno.vandeweyer"
    },
    "time_stamp": "2024-04-17 11:35:33",
    "text": "Well via the API I would use the Companies search API and have it paged to load in everything needed."
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-17 11:36:07",
    "text": "I am painfully loading 100 records at a time, because that is that the API allows. My company has thousands of contacts and companies. It's painful."
  },
  {
    "poster": {
      "poster_name": "Scott Marion",
      "poster_handle": "scott943"
    },
    "time_stamp": "2024-04-17 11:36:14",
    "text": "is there a webhook for a merged operation?  I believe there is - and you could then set another property when  that happens"
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-17 11:36:45",
    "text": "I would rather they fix the updated at field!"
  },
  {
    "poster": {
      "poster_name": "Scott Marion",
      "poster_handle": "scott943"
    },
    "time_stamp": "2024-04-17 11:37:03",
    "text": "doing otherwise is way quicker imo"
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-17 11:37:34",
    "edited": {
      "time_stamp": "2024-04-17 11:37:47"
    },
    "text": "True, but this must be a common issue for other data warehouse professionals. Is everyone else creating a webhook to create a proxy field update because the actual field is broken?"
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-17 11:38:27",
    "text": "Secondly, you have to request archived TRUE and archived FALSE separately, for some reason."
  },
  {
    "poster": {
      "poster_name": "Scott Marion",
      "poster_handle": "scott943"
    },
    "time_stamp": "2024-04-17 11:38:35",
    "text": "agreed - that just doesn't affect me atm - probably will at some point"
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-17 11:39:34",
    "text": "HubSpot is very mature, I am just looking for the other data warehouse processes. Right now, I'm loading the entire contents daily, but that is timely."
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-17 11:39:57",
    "text": "If everyone is using webhooks to create proxy fields, then I guess that is what I will do also, but that is not elegant at all."
  },
  {
    "poster": {
      "poster_name": "Arno Van de Weyer",
      "poster_handle": "arno.vandeweyer"
    },
    "time_stamp": "2024-04-17 11:40:33",
    "text": "I think your problem can be resolved in a couple of ways, just need to think this through.\nWhat's the reason why you need all records to be updated daily inside the data warehouse?"
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-17 11:40:51",
    "text": "I don't need all the records. Just the new records since last run."
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-17 11:40:55",
    "text": "But updated at doesn't work on merges."
  },
  {
    "poster": {
      "poster_name": "Arno Van de Weyer",
      "poster_handle": "arno.vandeweyer"
    },
    "time_stamp": "2024-04-17 11:41:04",
    "text": "Would a sort on modify date, and only getting the ones since last run already fix a big issue?"
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-17 11:41:13",
    "text": "And I have to make two calls for archived items because the API won't send both TRUE and FALSE results in the same call."
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-17 11:41:30",
    "text": "Yes <@U046C9LKJP8>, if the updated at filter worked properly."
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-17 11:41:46",
    "text": "It doesn't update on merges."
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-17 11:42:05",
    "text": "And two calls are always required due to the archived flag not being able to send both TRUE and FALSE items in the same payload."
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-17 11:42:27",
    "text": "That seems insane to not send them both in a single call. I don't understand the reasoning."
  },
  {
    "poster": {
      "poster_name": "Arno Van de Weyer",
      "poster_handle": "arno.vandeweyer"
    },
    "time_stamp": "2024-04-17 11:43:27",
    "text": "I am not sure but via the search api you can maybe do archived equals true or false in 2 filters.\nBut I understand the problem"
  },
  {
    "poster": {
      "poster_name": "Arno Van de Weyer",
      "poster_handle": "arno.vandeweyer"
    },
    "time_stamp": "2024-04-17 11:44:29",
    "text": "It is so you don't get archived records with your unarchived ones I assume"
  },
  {
    "poster": {
      "poster_name": "Arno Van de Weyer",
      "poster_handle": "arno.vandeweyer"
    },
    "time_stamp": "2024-04-17 11:44:42",
    "text": "accidentally*"
  },
  {
    "poster": {
      "poster_name": "Scott Marion",
      "poster_handle": "scott943"
    },
    "time_stamp": "2024-04-17 11:44:59",
    "edited": {
      "time_stamp": "2024-04-17 11:45:29"
    },
    "text": "but you could - get all you need by sorting the modified date (2 calls) and then pulling all the merged records (assuming you have a webhook that fires when this happens and set a flag in the record - probably one call, why would a recently merged record be archived"
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-17 12:03:02",
    "text": "<@U046C9LKJP8> That's a great idea! I'm trying that now, but archived is a meta property. It doesn't seem to be accessible like a normal property like domain, phone number, first name.... etc.  Have you ever filtered on these meta fields (created at, updated at, archived, Id... etc)"
  },
  {
    "poster": {
      "poster_name": "Elijah Gastin",
      "poster_handle": "elijah.gastin"
    },
    "time_stamp": "2024-04-17 12:24:01",
    "text": "<@U06B6J5BCRY>, Yeah I understand I can make it in the ui but the use case for me doing with the api. I am making a product for our clients and I wanted to easily deploy it instead of making it by hand."
  },
  {
    "poster": {
      "poster_name": "Matt Cruz",
      "poster_handle": "matt.cruz"
    },
    "time_stamp": "2024-04-17 12:32:57",
    "text": "ahhh gotchu, cool use case, when I pull the formula made in the UI it sadly doesn't give me any definitions on the internal calculus, wack. This seems fun to play around with I might poke around later to see if I can format it."
  },
  {
    "poster": {
      "poster_name": "Alejandro Stafuza",
      "poster_handle": "alejandrostafuza"
    },
    "time_stamp": "2024-04-17 14:22:10",
    "text": "Hi everyone, im trying to handle HubSpot API but it is too much for my front-end brain :laughing: Currently im trying to code in node a simple request to get the contacts from our company's HubSpot and throw that info into <http://monday.com|monday.com>. All is good so far but the code only works with the first 100 contacts, as that is the limit. How can I get the other contacts? Ive been tryign to play around adding \"offset\", \"vidOffset\" and \"after\" but got no results.",
    "reply_count": 18,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2024-04-17 15:04:16"
      },
      {
        "time_stamp": "2024-04-17 15:06:29"
      },
      {
        "time_stamp": "2024-04-17 16:28:00"
      },
      {
        "time_stamp": "2024-04-17 16:30:06"
      },
      {
        "time_stamp": "2024-04-18 12:19:34"
      },
      {
        "time_stamp": "2024-04-18 12:21:55"
      },
      {
        "time_stamp": "2024-04-18 12:22:28"
      },
      {
        "time_stamp": "2024-04-18 12:24:51"
      },
      {
        "time_stamp": "2024-04-18 12:25:22"
      },
      {
        "time_stamp": "2024-04-18 12:26:01"
      },
      {
        "time_stamp": "2024-04-18 13:08:03"
      },
      {
        "time_stamp": "2024-04-18 13:08:24"
      },
      {
        "time_stamp": "2024-04-18 13:09:49"
      },
      {
        "time_stamp": "2024-04-18 13:10:47"
      },
      {
        "time_stamp": "2024-04-18 13:11:47"
      },
      {
        "time_stamp": "2024-04-18 13:12:23"
      },
      {
        "time_stamp": "2024-04-18 14:18:38"
      },
      {
        "time_stamp": "2024-04-18 14:46:27"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2024-04-17 15:04:16",
    "text": "You will use the after value as a query param in your URL."
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2024-04-17 15:06:29",
    "text": "So you can create a loop to cycle through while an after value is returned"
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-17 16:28:00",
    "text": "100 at a time is painful, would an export be a way around this <@UD53A9UUR>?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2024-04-17 16:30:06",
    "text": "If it is a one time sync, export is the way to go.\nBtw, 100 at a time is painful for you, but not a huge deal for our machine overlords :wink:"
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-17 16:35:08",
    "edited": {
      "time_stamp": "2024-04-17 16:36:03"
    },
    "text": "This is a death blow to using search for loading a data warehouse from HubSpot: The search endpoints are limited to 10,000 total results for any given query. Attempting to page beyond 10,000 will result in a 400 error."
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-17 16:40:07",
    "text": "When using the search endpoints (such as <http://api.hubapi.com/crm/v3/objects/companies/search|api.hubapi.com/crm/v3/objects/companies/search>) how can I filter for archived = TRUE/FALSE? It's not a property, it's more of a meta property and sits at the same hierarchy as the properties key.",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-04-18 06:42:37"
      },
      {
        "time_stamp": "2024-04-18 09:36:01"
      },
      {
        "time_stamp": "2024-04-19 03:57:42"
      },
      {
        "time_stamp": "2024-04-19 10:28:15"
      }
    ]
  },
  {
    "text": "I want to query the archived key in a filter.",
    "time_stamp": "2024-04-17 16:44:19"
  }
]