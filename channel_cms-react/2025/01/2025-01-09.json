[
  {
    "poster": {
      "poster_name": "Mattis Rosenkranz",
      "poster_handle": "m.rosenkranz"
    },
    "time_stamp": "2025-01-09 02:02:49",
    "edited": {
      "time_stamp": "2025-01-09 02:03:13"
    },
    "text": "Thanks for the help though <@U02G7H60YCS> :+1: After deleting the ids we could move on as usual.\nI think it would be helpful to have a typescript type for the meta. We wouldn’t have made this mistake for example. We just didn’t think about the id being mandatory or not."
  },
  {
    "poster": {
      "poster_name": "Jon Miller",
      "poster_handle": "jon894"
    },
    "time_stamp": "2025-01-09 10:22:51",
    "text": "Great <@U061NQ66Y6S>! Glad this got you unblocked. This information has been passed along to the right teams so this `module_id` discrepancy between projects and classic hubL can get documented. No timeline for this update has been given, but its on the radar of the correct teams.\n\n*ONE ADDITIONAL COMMENT RELATED TO THE HUBL USE CASE:*\nThe one use case for using an explicit ID in the hubl world is when you want to reference a module in a coded template by the id instead of path. I don't know how common referencing a module in this way is, but was mentioned to me yesterday in case anyone in this thread is thinking about ripping all their hardcoded `module_id`'s  from their meta.json associated to their hubl modules. Just check the references of these modules in coded templates to be safe :safety_vest:\n\nThere is not similar use case for the cms react world (since we prevent setting module_id's in the meta). But wanted to share since part of this thread was asking about the hubL reason to setting a `module_id` on the meta.json file."
  },
  {
    "poster": {
      "poster_name": "Don Denton",
      "poster_handle": "don.denton"
    },
    "time_stamp": "2025-01-09 11:04:01",
    "edited": {
      "time_stamp": "2025-01-09 11:05:00"
    },
    "text": "> Just check the references of these modules in coded templates to be safe :safety_vest:\nI thought the discovery here was that HS has _never_ allowed writing a `module_id`, so that even if you declare it, nothing changes. (Whereas ReactCMS strips the declaration altogether.) So if you are using the “correct” `module_id` in your `meta.json`, then that is purely because you copy/pasted from an ID you received, but it does nothing to actually declare it. Hence, if your ID references in coded templates actually work, then removing the `module_id` declaration won’t matter. It will still be the same.\n\n:point_up: All thinking out loud, trying to get the mental model correct. (Though it doesn’t affect us since we do not reference by ID in our templates.)"
  },
  {
    "text": "&gt; I thought the discovery here was that HS has _never_ allowed writing a `module_id`,\nThat is my understanding too. Here I am trying to set the module id and you can see, per the slug, that the id is not what I have it set to.",
    "time_stamp": "2025-01-09 11:10:10"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2025-01-09 11:14:37",
    "text": "I do vaguely remember a world where sometimes fetching a module sometimes results in the module ID being returned (it’s been a minute since Ive played with it) but as Jon mentioned above I think that was more or less a vestige of OG HS ways of referencing modules in templates.\n\nRegardless going forward I would say that best practice is to not include module Id’s in the file and reference modules in templates via the path attribute."
  },
  {
    "poster": {
      "poster_name": "Colby Holmstead",
      "poster_handle": "colby.holmstead"
    },
    "time_stamp": "2025-01-09 12:30:20",
    "text": "I have searched for a little while now but I can not seem to find how to set up and access the environment variables on react projects. I have some API keys that I want to use locally and then once the project is uploaded I will be passing in a new api key with a TextField.",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2025-01-09 12:32:09"
      },
      {
        "time_stamp": "2025-01-09 16:32:38"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Colby Holmstead",
      "poster_handle": "colby.holmstead"
    },
    "time_stamp": "2025-01-09 12:32:09",
    "text": "I know these are using Vite but this does not work: <https://vite.dev/guide/env-and-mode>"
  },
  {
    "poster": {
      "poster_name": "Jon Miller",
      "poster_handle": "jon894"
    },
    "time_stamp": "2025-01-09 16:32:38",
    "text": "Hey <@U07JYP2FBB2> These docs should help. Let me know if you have any questions.\n\n<https://github.HubSpot.com/cms-react/reference/secrets.html>"
  },
  {
    "poster": {
      "poster_name": "Jon Miller",
      "poster_handle": "jon894"
    },
    "time_stamp": "2025-01-09 16:39:40",
    "text": "<@U07A0FAALSY> Yes, that is correct we don't allow writing a module_id but if the valid hubl module_id is set on a meta.json (not relevant for react modules), then it makes it possible to reference a module by its ID in a template. This shouldn't be viewed as a common pattern, but I was simply trying to convey this use case in case anyone was in fact referencing modules in a coded template via the id. Again, this does not change this value in the DB, just exposes a different way to reference a module.\n\nAgreed with <@UQWGKUEN7> on best practice to not include module_id's on hubl modules and in the the react world, we prevent it."
  }
]