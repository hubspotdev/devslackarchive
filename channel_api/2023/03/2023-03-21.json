[
  {
    "poster": {
      "poster_name": "Kanaiyalal Badal",
      "poster_handle": "kanaiyalalbadal"
    },
    "time_stamp": "2023-03-21 01:09:00",
    "text": "Hello there,\n\nI want to get private app API call log but there is no option to export as sheet and i can't find any API in HubSpot API docs. So, any one have idea about that.\n\nThanks!",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-03-21 08:25:15"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Krista Triviso",
      "poster_handle": "krista661"
    },
    "time_stamp": "2023-03-21 08:09:19",
    "text": "Hi, I am trying to send a transactional email with my private app API key. I have checked that the API key's scopes has \"transactional-email\" enabled. But every time I send a post to <https://api.hubapi.com/marketing/v3/transactional/single-email/send>, I get an error \"\"The API key provided is invalid\".\n\nI am able to use this API key for other things such as sending a CBE so I know it is valid. Does anyone know what's going on here?",
    "reply_count": 5,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-03-21 08:12:48"
      },
      {
        "time_stamp": "2023-03-21 08:12:53"
      },
      {
        "time_stamp": "2023-03-21 08:26:52"
      },
      {
        "time_stamp": "2023-03-21 08:28:44"
      },
      {
        "time_stamp": "2023-03-21 08:29:04"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Lukas",
      "poster_handle": "lukas.pichler"
    },
    "time_stamp": "2023-03-21 08:09:27",
    "text": "Hi there :wave:\nI was wondering if we can start a new conversation in inboxes via the API?",
    "reply_count": 14,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-03-21 08:12:12"
      },
      {
        "time_stamp": "2023-03-21 08:13:32"
      },
      {
        "time_stamp": "2023-03-21 08:13:57"
      },
      {
        "time_stamp": "2023-03-21 08:16:50"
      },
      {
        "time_stamp": "2023-03-21 08:37:41"
      },
      {
        "time_stamp": "2023-03-21 08:38:20"
      },
      {
        "time_stamp": "2023-03-21 09:04:35"
      },
      {
        "time_stamp": "2023-03-21 09:11:01"
      },
      {
        "time_stamp": "2023-03-21 09:11:35"
      },
      {
        "time_stamp": "2023-03-21 09:11:45"
      },
      {
        "time_stamp": "2023-03-21 09:49:54"
      },
      {
        "time_stamp": "2023-03-21 11:49:07"
      },
      {
        "time_stamp": "2023-03-23 03:29:54"
      },
      {
        "time_stamp": "2023-03-23 07:22:08"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 08:12:12",
    "text": "Through the conversations api no, but you could just send a programmatic email to your email address in HubSpot and that would create a conversation"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 08:12:48",
    "text": "Are you sending it as an Authorization header?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 08:12:53",
    "text": "Can you show your code?"
  },
  {
    "poster": {
      "poster_name": "Lukas",
      "poster_handle": "lukas.pichler"
    },
    "time_stamp": "2023-03-21 08:13:32",
    "text": "I thought about that, but I'd like to link the ticket that gets automatically created when a conversation is started to the actual user that initiated the request"
  },
  {
    "poster": {
      "poster_name": "Lukas",
      "poster_handle": "lukas.pichler"
    },
    "time_stamp": "2023-03-21 08:13:57",
    "text": "so if I send mails to that one mail address from one mail address, the tickets resulting from that will be assigned to that mail"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 08:16:50",
    "text": "Now this might sound like a bad idea but it could work. What you could do is send the emails with the contact id in the subject line (or in the body of the email) and then whenever a new conversation is started just associate the objects together"
  },
  {
    "poster": {
      "poster_name": "Jonathan",
      "poster_handle": "jonathan656"
    },
    "time_stamp": "2023-03-21 08:24:49",
    "text": "Hi,\n```How to search for a user both on the email but also on the secondary emails of a contact```\n``````\n",
    "reply_count": 23,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-03-21 08:25:30"
      },
      {
        "time_stamp": "2023-03-21 08:26:52"
      },
      {
        "time_stamp": "2023-03-21 08:28:49"
      },
      {
        "time_stamp": "2023-03-21 08:29:27"
      },
      {
        "time_stamp": "2023-03-21 08:29:48"
      },
      {
        "time_stamp": "2023-03-21 08:30:12"
      },
      {
        "time_stamp": "2023-03-21 08:30:46"
      },
      {
        "time_stamp": "2023-03-21 08:31:45"
      },
      {
        "time_stamp": "2023-03-21 08:32:50"
      },
      {
        "time_stamp": "2023-03-21 08:33:21"
      },
      {
        "time_stamp": "2023-03-21 08:37:47"
      },
      {
        "time_stamp": "2023-03-21 08:38:57"
      },
      {
        "time_stamp": "2023-03-21 08:39:02"
      },
      {
        "time_stamp": "2023-03-21 08:39:35"
      },
      {
        "time_stamp": "2023-03-21 08:39:43"
      },
      {
        "time_stamp": "2023-03-21 08:41:20"
      },
      {
        "time_stamp": "2023-03-21 08:41:33"
      },
      {
        "time_stamp": "2023-03-21 08:45:28"
      },
      {
        "time_stamp": "2023-03-21 08:46:05"
      },
      {
        "time_stamp": "2023-03-21 08:46:44"
      },
      {
        "time_stamp": "2023-03-21 08:47:00"
      },
      {
        "time_stamp": "2023-03-21 09:08:36"
      },
      {
        "time_stamp": "2023-03-21 09:08:44"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 08:25:15",
    "text": "<https://HubSpotdev.slack.com/archives/CCQ7H31D5/p1679381738210899>"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-03-21 08:25:18",
    "text": "hey <@U01G8SAK0LC>, apologies for delay.\n<@U01QVR44MEY> has the correct answer with associations api.  I am confirming that to be 100% certain and also determining why it is in the code example"
  },
  {
    "poster": {
      "poster_name": "Jonathan",
      "poster_handle": "jonathan656"
    },
    "time_stamp": "2023-03-21 08:25:30",
    "text": "```My example only for the main email```\n```public function searchContactByEmail($email)\n  {\n    //Chercher un contact\n    $filter = new \\HubSpot\\Client\\Crm\\Contacts\\Model\\Filter();\n    $filter-&gt;setPropertyName('email')\n      -&gt;setOperator('EQ')\n      -&gt;setValue($email);\n\n    $filter_group = new \\HubSpot\\Client\\Crm\\Contacts\\Model\\FilterGroup();\n    $filter_group-&gt;setFilters([$filter]);\n\n    $search_request = new \\HubSpot\\Client\\Crm\\Contacts\\Model\\PublicObjectSearchRequest();\n    $search_request-&gt;setFilterGroups([$filter_group]);\n\n    return $this-&gt;connector-&gt;crm()-&gt;contacts()-&gt;searchApi()-&gt;doSearch($search_request);\n  }```\n"
  },
  {
    "poster": {
      "poster_name": "Krista Triviso",
      "poster_handle": "krista661"
    },
    "time_stamp": "2023-03-21 08:26:52",
    "text": "i am not! ah! one sec let me try that instead"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 08:26:52",
    "text": "you can setup an or filter to check if the email is inside of the hs_additional_emails property"
  },
  {
    "poster": {
      "poster_name": "Krista Triviso",
      "poster_handle": "krista661"
    },
    "time_stamp": "2023-03-21 08:28:44",
    "text": "fixed :slightly_smiling_face: You're the best, thank you"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 08:28:49",
    "text": "Or you could just use the query option to search because that will search both email and additional email"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 08:29:04",
    "edited": {
      "time_stamp": "2023-03-22 07:23:03"
    },
    "text": "of course, glad you got it"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 08:29:27",
    "text": "This would be the body of the search request\n```{\n    \"query\": \"INSERT EMAIL HERE\"\n}```\n"
  },
  {
    "text": "The other properties it would also search through:",
    "time_stamp": "2023-03-21 08:29:48"
  },
  {
    "poster": {
      "poster_name": "Jonathan",
      "poster_handle": "jonathan656"
    },
    "time_stamp": "2023-03-21 08:30:12",
    "text": "```I don't understand how to do both at the same time :(```\n``````\n"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 08:30:46",
    "edited": {
      "time_stamp": "2023-03-21 08:31:54"
    },
    "text": "so like this:\n```{\n  \"filterGroups\": [\n    {\n      \"filters\": [\n        {\n          \"propertyName\": \"hs_additional_emails\",\n          \"operator\": \"EQ\",\n          \"value\": \"*EMAIL HERE*\"\n        }\n      ]\n    },\n    {\n      \"filters\": [\n        {\n          \"propertyName\": \"email\",\n          \"operator\": \"EQ\",\n          \"value\": \"EMAIL HERE\"\n        }\n      ]\n    }\n  ]\n}```"
  },
  {
    "poster": {
      "poster_name": "Jonathan",
      "poster_handle": "jonathan656"
    },
    "time_stamp": "2023-03-21 08:31:45",
    "text": "So for me : ?\n```{\n  \"filterGroups\": [\n    {\n      \"filters\": [\n        {\n          \"propertyName\": \"email\",\n          \"operator\": \"EQ\",\n          \"value\": \"<mailto:ssoso@msn.com|ssoso@msn.com>\"\n        },\n        {\n          \"propertyName\": \"hs_additional_emails\",\n          \"operator\": \"EQ\",\n          \"value\": \"<mailto:sdosdos@msn.com|sdosdos@msn.com>\"\n        }\n      ]\n    }}```\n"
  },
  {
    "poster": {
      "poster_name": "Jonathan",
      "poster_handle": "jonathan656"
    },
    "time_stamp": "2023-03-21 08:32:50",
    "text": "Ok thank you i try"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 08:33:21",
    "text": "I just updated the above code, you'll want to copy the new code"
  },
  {
    "poster": {
      "poster_name": "Lukas",
      "poster_handle": "lukas.pichler"
    },
    "time_stamp": "2023-03-21 08:37:41",
    "text": "I don't know the contact id prior to sending the mail - at least I don't want to perform the lookup for that before sending the mail - so I'd rather have HubSpot pick up on linking the conversation to a customer"
  },
  {
    "poster": {
      "poster_name": "Jonathan",
      "poster_handle": "jonathan656"
    },
    "time_stamp": "2023-03-21 08:37:47",
    "text": "```With this query, I feel like it's an \"And\". I would like an \"Or\"```\n``````\n"
  },
  {
    "poster": {
      "poster_name": "Lukas",
      "poster_handle": "lukas.pichler"
    },
    "time_stamp": "2023-03-21 08:38:20",
    "edited": {
      "time_stamp": "2023-03-21 08:41:57"
    },
    "text": "&gt; and then whenever a new conversation is started just associate the objects together\nhow would you associate the objects together?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 08:38:57",
    "text": "Yes that's why I updated the code"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 08:39:02",
    "text": "per the above line"
  },
  {
    "poster": {
      "poster_name": "Jonathan",
      "poster_handle": "jonathan656"
    },
    "time_stamp": "2023-03-21 08:39:35",
    "text": "I think :\n```{\n  \"filterGroups\": [\n    {\n      \"filters\": [\n        {\n          \"propertyName\": \"email\",\n          \"operator\": \"EQ\",\n          \"value\": \"<mailto:ssoso@msn.com|ssoso@msn.com>\"\n        },\n],\n\"filterGroups\": [\n        {\n          \"propertyName\": \"hs_additional_emails\",\n          \"operator\": \"EQ\",\n          \"value\": \"<mailto:sdosdos@msn.com|sdosdos@msn.com>\"\n        }\n      ]\n    }}```\n"
  },
  {
    "poster": {
      "poster_name": "Jonathan",
      "poster_handle": "jonathan656"
    },
    "time_stamp": "2023-03-21 08:39:43",
    "text": "2 filterGroups"
  },
  {
    "poster": {
      "poster_name": "Jonathan",
      "poster_handle": "jonathan656"
    },
    "time_stamp": "2023-03-21 08:41:20",
    "text": "Ex : Alice and Smith OR email valid :\n```\"filterGroups\":[{\n      \"filters\": [\n        {\n          \"propertyName\": \"firstname\",\n           \"operator\": \"EQ\",\n            \"value\": \"Alice\"\n        }],\n      \"filters\":[\n          {\n            \"propertyName\": \"lastname\",\n            \"operator\": \"EQ\",\n            \"value\": \"Smith\"\n          }],\n     \"filterGroups\":[{\n        \"filters\": [\n            {\n            \"propertyName\": \"email\",\n            \"operator\": \"HAS_PROPERTY\"\n           }\n]}\n]\n}]```\n"
  },
  {
    "poster": {
      "poster_name": "Jonathan",
      "poster_handle": "jonathan656"
    },
    "time_stamp": "2023-03-21 08:41:33",
    "text": "But i'm not sure"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 08:45:28",
    "text": "Personally I would use this:\n```{\n  \"filterGroups\": [\n    {\n      \"filters\": [\n        {\n          \"propertyName\": \"hs_additional_emails\",\n          \"operator\": \"EQ\",\n          \"value\": \"*EMAIL HERE*\"\n        }\n      ]\n    },\n    {\n      \"filters\": [\n        {\n          \"propertyName\": \"email\",\n          \"operator\": \"EQ\",\n          \"value\": \"EMAIL HERE\"\n        }\n      ]\n    }\n  ]\n}```\n"
  },
  {
    "poster": {
      "poster_name": "Jonathan",
      "poster_handle": "jonathan656"
    },
    "time_stamp": "2023-03-21 08:46:05",
    "text": "```If it's an \"Or\", how to make an \"And\" in this case?```\n``````\n"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 08:46:44",
    "text": "This would make it an AND:\n```{\n  \"filterGroups\": [\n    {\n      \"filters\": [\n        {\n          \"propertyName\": \"hs_additional_emails\",\n          \"operator\": \"EQ\",\n          \"value\": \"*EMAIL HERE*\"\n        },\n        {\n          \"propertyName\": \"email\",\n          \"operator\": \"EQ\",\n          \"value\": \"EMAIL HERE\"\n        }\n      ]\n    }\n  ]\n}```"
  },
  {
    "poster": {
      "poster_name": "Jonathan",
      "poster_handle": "jonathan656"
    },
    "time_stamp": "2023-03-21 08:47:00",
    "text": "Ha ok ok"
  },
  {
    "poster": {
      "poster_name": "Jhon",
      "poster_handle": "michael.bolima"
    },
    "time_stamp": "2023-03-21 08:53:49",
    "text": "Thanks.  It gives me joy when I see the code example for batch create and update haha still hoping that the association can be implemented for batch update. \nAnyways, thanks again guys!"
  },
  {
    "poster": {
      "poster_name": "Jhon",
      "poster_handle": "michael.bolima"
    },
    "time_stamp": "2023-03-21 08:56:37",
    "text": "Please update me <@UD53A9UUR>  if you already have answers for the code example. Thanks!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 08:57:04",
    "text": "what do you mean have answers for the code examples?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-03-21 08:58:21",
    "text": "the code in the endpoints tab"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 08:58:33",
    "text": "is it incorrect?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-03-21 08:59:05",
    "text": "so far, the answer is you cant do it via the batch update companies endpoint"
  },
  {
    "poster": {
      "poster_name": "Lukas",
      "poster_handle": "lukas.pichler"
    },
    "time_stamp": "2023-03-21 09:04:35",
    "edited": {
      "time_stamp": "2023-03-21 09:04:44"
    },
    "text": "<@U01QVR44MEY> What if I create a form instead, which I can post data to, which will create a conversation and subsequently create a ticket from that?"
  },
  {
    "poster": {
      "poster_name": "Jerome Degl’innocenti",
      "poster_handle": "jerome.deglinnocenti"
    },
    "time_stamp": "2023-03-21 09:07:25",
    "edited": {
      "time_stamp": "2023-03-21 09:08:31"
    },
    "text": "```Hi, I've got a form using the forms submit API using React/axios, <https://api.hsforms.com/submissions/v3/integration/submit/${portalId}/${formId}> one of the field it's a files uploader. I'm trying to find a way to upload the file to hubpsot and push the url with form data. I'm struggling to find a demo/docs here the file upload component I started to build:  import 'intl-tel-input/build/css/intlTelInput.css';\nimport React, { FC, forwardRef, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport axios from 'axios';\nimport { Attach } from '../../icons/Attach';\nimport { Typography } from '../../Typography';\nimport { getResponsiveType } from '../../../utils/getResponsiveType';\n\nexport interface InputProps {\n    id: string;\n    label: string;\n    invalid?: boolean;\n    required?: boolean;\n    onChange?: any;\n}\n\ninterface StyledInputProps {\n    invalid?: boolean;\n}\n\nconst StyledFileUpload = styled.div`\n    ${({ theme: { space } }) =&gt; css`\n        display: flex;\n        align-items: center;\n        gap: ${space.md};\n    `};\n`;\n\nconst StyledLabel = styled.label&lt;StyledInputProps&gt;`\n    ${({ theme, theme: { space, colors }, invalid }) =&gt; css`\n        display: inline-flex;\n        gap: ${<http://space.sm|space.sm>};\n        background: transparent;\n        cursor: pointer;\n        align-items: center;\n        ${getResponsiveType('body', theme, 'md')};\n\n        ${invalid &amp;&amp;\n        css`\n            color: ${colors.red};\n        `}\n\n        svg {\n            flex-shrink: 0;\n        }\n    `};\n`;\n\nconst StyledInput = styled.input`\n    width: 0.1px;\n    height: 0.1px;\n    opacity: 0;\n    overflow: hidden;\n    position: absolute;\n    z-index: -1;\n`;\n\nconst StyledFileList = styled.ul`\n    ${({ theme: { space } }) =&gt; css`\n        display: flex;\n    `};\n`;\n\nconst StyledErrorMessage = styled(Typography)`\n    ${({ theme: { colors, space } }) =&gt; css`\n        color: ${colors.red};\n        display: block;\n        margin-top: -${space.lg};\n    `};\n`;\n\nexport const FileUpload = forwardRef(\n    ({ id, label, invalid, required, onChange, ...rest }: InputProps, ref) =&gt; {\n        const [uploadedFiles, setUploadedFiled] = useState([]);\n        const toBase64 = (file) =&gt;\n            new Promise((resolve, reject) =&gt; {\n                const reader = new FileReader();\n                reader.readAsDataURL(file);\n                reader.onload = () =&gt;\n                    resolve(\n                        reader.result\n                        // .replace('data:application/pdf;base64,', '')\n                        // .replace('data:text/plain;base64,', '')\n                        // .replace(\n                        //     'data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64,',\n                        //     ''\n                        // )\n                    );\n                reader.onerror = (error) =&gt; reject(error);\n            });\n\n        const handleOnChange = async (event: any) =&gt; {\n            if (onChange) {\n                const files = [];\n                const inputFiles = Array.from(event.target.files);\n                console.log('inputFiles', inputFiles);\n                if (inputFiles &amp;&amp; inputFiles.length &gt; 0) {\n                    setUploadedFiled(inputFiles);\n                    inputFiles.forEach(async (file) =&gt; {\n                        const { name, type } = file as File;\n                        console.log('file', name);\n                        const fileData = await toBase64(file);\n                        console.log('fileData', fileData);\n\n                        // const fileOptions = {\n                        //     access: 'PRIVATE',\n                        //     overwrite: false,\n                        //     duplicateValidationStrategy: 'NONE',\n                        //     duplicateValidationScope: 'ENTIRE_PORTAL',\n                        // };\n\n                        // const formData = {\n                        //     file: fileData,\n                        //     options: JSON.stringify(fileOptions),\n                        //     folderPath: 'form-uploads',\n                        // };\n\n                        // const { data: rawData } = await axios({\n                        //     url: `<https://api.hubapi.com/filemanager/api/v3/files/upload>`,\n                        //     method: 'post',\n                        //     headers: {\n                        //         'Content-Type': 'multipart/form-data',\n                        //         Authorization: `Bearer ....`,\n                        //     },\n                        //     data: formData,\n                        // });\n\n                        // if (rawData.error) {\n                        //     throw new Error(rawData.error);\n                        // }\n\n                        // return rawData;\n\n                        // files.push({\n                        //     fileData,\n                        //     // base64File: await toBase64(file),\n                        //     // extension: name.split('.')[1],\n                        //     // fileName: name.split('.')[0],\n                        // });\n                        // files.push(await toBase64(file));\n                    });\n                }\n                onChange(files);\n            }\n        };\n\n        return (\n            &lt;&gt;\n                &lt;StyledFileUpload&gt;\n                    &lt;StyledLabel htmlFor={id} invalid={invalid}&gt;\n                        &lt;Attach /&gt;\n                        {label} {required &amp;&amp; &lt;sup&gt;*&lt;/sup&gt;}\n                    &lt;/StyledLabel&gt;\n                    &lt;StyledInput\n                        id={id}\n                        name={id}\n                        onChange={handleOnChange}\n                        type=\"file\"\n                        multiple\n                        {...rest}\n                        ref={ref}\n                    /&gt;\n                    &lt;Typography component=\"p\" variant=\"small\"&gt;\n                        PDF, DOC, DOCX\n                        &lt;br /&gt;\n                        Max size 8MB\n                    &lt;/Typography&gt;\n                &lt;/StyledFileUpload&gt;\n                {invalid &amp;&amp; (\n                    &lt;StyledErrorMessage component=\"span\" variant=\"body\"&gt;\n                        Please complete this required field.\n                    &lt;/StyledErrorMessage&gt;\n                )}\n                {uploadedFiles.length &gt; 0 &amp;&amp; (\n                    &lt;StyledFileList&gt;\n                        {uploadedFiles.map(({ name }, index) =&gt; (\n                            &lt;Typography\n                                component=\"li\"\n                                variant=\"small\"\n                                key={index}\n                            &gt;\n                                {name}\n                                {uploadedFiles.length &gt; 0 &amp;&amp;\n                                uploadedFiles.length !== index + 1\n                                    ? ', '\n                                    : ''}\n                            &lt;/Typography&gt;\n                        ))}\n                    &lt;/StyledFileList&gt;\n                )}\n            &lt;/&gt;\n        );\n    }\n);\n\nFileUpload.displayName = 'FileUpload';```",
    "reply_count": 12,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-03-21 09:12:55"
      },
      {
        "time_stamp": "2023-03-21 09:13:59"
      },
      {
        "time_stamp": "2023-03-21 09:15:41"
      },
      {
        "time_stamp": "2023-03-21 09:21:32"
      },
      {
        "time_stamp": "2023-03-21 09:30:38"
      },
      {
        "time_stamp": "2023-03-21 09:34:45"
      },
      {
        "time_stamp": "2023-03-21 10:06:33"
      },
      {
        "time_stamp": "2023-03-21 11:47:51"
      },
      {
        "time_stamp": "2023-03-22 06:25:36"
      },
      {
        "time_stamp": "2023-03-22 06:35:13"
      },
      {
        "time_stamp": "2023-03-22 06:36:23"
      },
      {
        "time_stamp": "2023-03-22 06:36:56"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jonathan",
      "poster_handle": "jonathan656"
    },
    "time_stamp": "2023-03-21 09:08:36",
    "text": "```it works thank you```"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 09:08:44",
    "text": "of course"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 09:11:01",
    "text": "Oh yeah that might work: <https://community.HubSpot.com/t5/Releases-and-Updates/Support-forms-are-now-available-in-the-Conversations-Inbox/ba-p/418299>"
  },
  {
    "poster": {
      "poster_name": "Lukas",
      "poster_handle": "lukas.pichler"
    },
    "time_stamp": "2023-03-21 09:11:35",
    "text": ":+1: seems to work, thx for your help"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 09:11:45",
    "text": "of course"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 09:12:55",
    "text": "Well like your code hints to you first need to upload the file to the file manager (you need to do this on the backend, so you don't expose your key) and then you need to use the url sent back from the file upload and use that to populate the file field"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 09:13:59",
    "text": "if you use the v2 endpoint though you can upload the file as form data: <https://community.HubSpot.com/t5/APIs-Integrations/How-to-set-a-file-field-via-the-forms-API/m-p/317415/highlight/true#M30407>"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 09:15:41",
    "text": "v2 endpoint: <https://legacydocs.HubSpot.com/docs/methods/forms/v2/submit_form>"
  },
  {
    "poster": {
      "poster_name": "Jerome Degl’innocenti",
      "poster_handle": "jerome.deglinnocenti"
    },
    "time_stamp": "2023-03-21 09:21:32",
    "text": "Thanks Carter, unfortunately with GDPR I have to use V3 endpoint, struggling with the upload first and then push the url, any example from someone?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 09:30:38",
    "text": "here's how to upload a file in nodejs:\n```var request = require('request');\nvar fs = require('fs');\n\nvar postUrl = '<https://api.hubapi.com/filemanager/api/v3/files/upload?hapikey=demo>';\n\nvar filename = 'example_file.txt';\n\nvar fileOptions = {\n    access: 'PUBLIC_INDEXABLE',\n    ttl: 'P3M',\n    overwrite: false,\n    duplicateValidationStrategy: 'NONE',\n    duplicateValidationScope: 'ENTIRE_PORTAL'\n};\n\nvar formData = {\n    file: fs.createReadStream(filename),\n    options: JSON.stringify(fileOptions),\n    folderPath: 'docs'\n};\n\n<http://request.post|request.post>({\n    url: postUrl,\n    formData: formData\n}, function optionalCallback(err, httpResponse, body){\n    return console.log(err, httpResponse.statusCode, body);\n});```\n"
  },
  {
    "poster": {
      "poster_name": "Jerome Degl’innocenti",
      "poster_handle": "jerome.deglinnocenti"
    },
    "time_stamp": "2023-03-21 09:34:45",
    "text": "Yes it’s what I was trying to replicate in react but I couldn’t get it to work"
  },
  {
    "poster": {
      "poster_name": "Lukas",
      "poster_handle": "lukas.pichler"
    },
    "time_stamp": "2023-03-21 09:49:54",
    "edited": {
      "time_stamp": "2023-03-21 10:03:00"
    },
    "text": "Another follow up question:\nIf I create a ticket via a form, how would I be able to retrieve that ticket?\nI assume there will be some delay until the ticket is created, but I'd still like to receive the ticket after the POST to the form.\n\nDo you think some retries to fetch tickets should be sufficient here?"
  },
  {
    "poster": {
      "poster_name": "Jerome Degl’innocenti",
      "poster_handle": "jerome.deglinnocenti"
    },
    "time_stamp": "2023-03-21 10:06:33",
    "text": "When I upload a file getting this error: Access to XMLHttpRequest at ‘<https://api.hubapi.com/filemanager/api/v3/files/upload?hapikey=secretkey>’ from origin ‘<http://localhost:8000>’ has been blocked by CORS policy: Response to preflight request doesn’t pass access control check: No ‘Access-Control-Allow-Origin’ header is present on the requested resource. The form use axios, and the file uploader component use also axios, maybe a conflict?"
  },
  {
    "text": "why are these api calls not showing up in the private apps logs? and why is the response None for almost all the fields?",
    "time_stamp": "2023-03-21 10:32:14",
    "reply_count": 26,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-03-21 10:33:11"
      },
      {
        "time_stamp": "2023-03-21 10:33:27"
      },
      {
        "time_stamp": "2023-03-21 10:35:51"
      },
      {
        "time_stamp": "2023-03-21 11:03:31"
      },
      {
        "time_stamp": "2023-03-21 11:03:34"
      },
      {
        "time_stamp": "2023-03-21 11:05:16"
      },
      {
        "time_stamp": "2023-03-21 11:34:34"
      },
      {
        "time_stamp": "2023-03-21 13:25:27"
      },
      {
        "time_stamp": "2023-03-21 13:26:03"
      },
      {
        "time_stamp": "2023-03-21 13:26:26"
      },
      {
        "time_stamp": "2023-03-21 13:27:01"
      },
      {
        "time_stamp": "2023-03-21 13:28:31"
      },
      {
        "time_stamp": "2023-03-21 13:29:28"
      },
      {
        "time_stamp": "2023-03-21 13:31:31"
      },
      {
        "time_stamp": "2023-03-21 13:34:48"
      },
      {
        "time_stamp": "2023-03-21 13:40:17"
      },
      {
        "time_stamp": "2023-03-21 13:40:30"
      },
      {
        "time_stamp": "2023-03-21 13:40:41"
      },
      {
        "time_stamp": "2023-03-21 13:43:17"
      },
      {
        "time_stamp": "2023-03-21 13:47:30"
      },
      {
        "time_stamp": "2023-03-21 13:59:22"
      },
      {
        "time_stamp": "2023-03-21 14:03:46"
      },
      {
        "time_stamp": "2023-03-21 15:20:59"
      },
      {
        "time_stamp": "2023-03-21 16:02:39"
      },
      {
        "time_stamp": "2023-03-21 16:26:04"
      },
      {
        "time_stamp": "2023-03-21 17:01:21"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Chris Barry",
      "poster_handle": "cbarry"
    },
    "time_stamp": "2023-03-21 10:33:11",
    "text": "<https://developers.HubSpot.com/docs/api/marketing/transactional-emails>"
  },
  {
    "poster": {
      "poster_name": "Chris Barry",
      "poster_handle": "cbarry"
    },
    "time_stamp": "2023-03-21 10:33:27",
    "text": "followed the instructions at the link above"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 10:35:51",
    "text": "do you have your code?"
  },
  {
    "poster": {
      "poster_name": "Sudhanshu - MakeWebBetter",
      "poster_handle": "sudhanshukumarrai"
    },
    "time_stamp": "2023-03-21 11:00:11",
    "text": "It is not provided intentionally"
  },
  {
    "poster": {
      "poster_name": "Chris Barry",
      "poster_handle": "cbarry"
    },
    "time_stamp": "2023-03-21 11:03:31",
    "text": "yes"
  },
  {
    "poster": {
      "poster_name": "Chris Barry",
      "poster_handle": "cbarry"
    },
    "time_stamp": "2023-03-21 11:03:34",
    "text": "im getting a 200 back"
  },
  {
    "poster": {
      "poster_name": "Chris Barry",
      "poster_handle": "cbarry"
    },
    "time_stamp": "2023-03-21 11:05:16",
    "text": "'completed_at': None,\n 'event_id': None,\n 'requested_at': datetime.datetime(2023, 3, 21, 17, 4, 43, 601000, tzinfo=tzutc()),\n 'send_result': None,\n 'started_at': None,\n 'status': 'PENDING',"
  },
  {
    "text": "What happens if you use the status endpoint to pull the status of the email?",
    "time_stamp": "2023-03-21 11:34:34"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 11:47:51",
    "text": "And you're running nodejs as your backend server?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 11:49:07",
    "text": "Yes, there might be a slight delay in the ticket creation after the form is submitted. You can use the HubSpot API to retrieve the ticket information. You should periodically retry fetching the ticket until you get the desired ticket. The API endpoint to get all tickets is `GET /crm/v3/objects/tickets`. You can also use filters to narrow down the tickets you're looking for, like filtering by contact or creation date. Just make sure to handle the case where the ticket might not be available immediately and implement a retry mechanism to fetch the ticket again."
  },
  {
    "poster": {
      "poster_name": "Michelle Chu",
      "poster_handle": "contact845"
    },
    "time_stamp": "2023-03-21 13:09:23",
    "text": "has anyone worked with EverWebinar (formerly WebinarJam) to integrate with HubSpot? specifically trying to see if you can track if an attendee attended a webinar for longer than 15 minutes --&gt; if so, update HubSpot object \"Webinar Attended\" with Yes or No"
  },
  {
    "poster": {
      "poster_name": "Chris Barry",
      "poster_handle": "cbarry"
    },
    "time_stamp": "2023-03-21 13:25:27",
    "text": "i dont have enough information to answer that. right now i am referencing <https://developers.HubSpot.com/docs/api/marketing/transactional-emails>"
  },
  {
    "poster": {
      "poster_name": "Chris Barry",
      "poster_handle": "cbarry"
    },
    "time_stamp": "2023-03-21 13:26:03",
    "text": "'event_id': None,\n 'requested_at': datetime.datetime(2023, 3, 21, 19, 22, 6, 653000, tzinfo=tzutc()),\n 'send_result': None,\n 'started_at': None,\n 'status': 'PENDING',"
  },
  {
    "poster": {
      "poster_name": "Chris Barry",
      "poster_handle": "cbarry"
    },
    "time_stamp": "2023-03-21 13:26:26",
    "text": "thats the response from the send_email()....why is 'started_at': None?"
  },
  {
    "text": "In your screenshot it looks like there was a status_id returned",
    "time_stamp": "2023-03-21 13:27:01"
  },
  {
    "poster": {
      "poster_name": "Chris Barry",
      "poster_handle": "cbarry"
    },
    "time_stamp": "2023-03-21 13:28:31",
    "text": "yes... just never delivered. and nothing shows in the logs"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 13:29:28",
    "text": "but if you ping the status endpoint using the status id what gets returned?"
  },
  {
    "poster": {
      "poster_name": "Chris Barry",
      "poster_handle": "cbarry"
    },
    "time_stamp": "2023-03-21 13:31:31",
    "text": "there isnt a method for that endpoint in the client wrapper that was referenced in the docs... one sec....\n\nfrom HubSpot.marketing.transactional import PublicSingleSendRequestEgg, ApiException"
  },
  {
    "poster": {
      "poster_name": "Chris Barry",
      "poster_handle": "cbarry"
    },
    "time_stamp": "2023-03-21 13:34:48",
    "text": "{'statusId': '3qtGV20ETzapBX8kZM1JsgAAAYcFnxzWAIuKOA==', 'sendResult': 'IDEMPOTENT_IGNORE', 'requestedAt': '2023-03-21T19:22:06.653Z', 'startedAt': '2023-03-21T19:22:11.664Z', 'completedAt': '2023-03-21T19:22:11.857Z', 'status': 'COMPLETE', 'eventId': {'created': '2023-03-14T20:30:31.085Z', 'id': '2cd561b9-634b-4ffa-8092-a4fcebb7d9c5'}}"
  },
  {
    "poster": {
      "poster_name": "Chris Barry",
      "poster_handle": "cbarry"
    },
    "time_stamp": "2023-03-21 13:40:17",
    "text": "so it looks like cause i was sending the same email....."
  },
  {
    "poster": {
      "poster_name": "Chris Barry",
      "poster_handle": "cbarry"
    },
    "time_stamp": "2023-03-21 13:40:30",
    "text": "which explains why i had just 1 bounce"
  },
  {
    "poster": {
      "poster_name": "Chris Barry",
      "poster_handle": "cbarry"
    },
    "time_stamp": "2023-03-21 13:40:41",
    "text": "thanks for helping get to that"
  },
  {
    "poster": {
      "poster_name": "Chris Barry",
      "poster_handle": "cbarry"
    },
    "time_stamp": "2023-03-21 13:43:17",
    "text": "actually not sure thats it as im still getting it with different emails"
  },
  {
    "poster": {
      "poster_name": "Chris Barry",
      "poster_handle": "cbarry"
    },
    "time_stamp": "2023-03-21 13:47:30",
    "text": "so to summarize i am using the single send api call from this example. and the status is saying complete but the email is not actually being delivered judging by the response from the status endpoint \"'sendResult': 'IDEMPOTENT_IGNORE'\"\n\n<https://developers.HubSpot.com/docs/api/marketing/transactional-emails>"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 13:59:22",
    "text": "Interesting, have you tested with an email you have access to just to double check if it gets delivered or not? Also strange that that status isn't marked in the docs..."
  },
  {
    "poster": {
      "poster_name": "Chris Barry",
      "poster_handle": "cbarry"
    },
    "time_stamp": "2023-03-21 14:03:46",
    "text": "yes im sending to a couple of my emails and checking inbox/spam..."
  },
  {
    "poster": {
      "poster_name": "Matt Swanson",
      "poster_handle": "matt353"
    },
    "time_stamp": "2023-03-21 14:15:37",
    "text": "[Future Matt back to report that `merge` has been added to deal webhooks]"
  },
  {
    "poster": {
      "poster_name": "Chris Barry",
      "poster_handle": "cbarry"
    },
    "time_stamp": "2023-03-21 15:20:59",
    "text": "was due to a hard bounce....sending from a new IP"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 16:02:39",
    "text": "Oh understood, glad you got it fixed, was going to run some more tests on my end"
  },
  {
    "poster": {
      "poster_name": "Chris Barry",
      "poster_handle": "cbarry"
    },
    "time_stamp": "2023-03-21 16:26:04",
    "text": "thanks for the help!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-21 17:01:21",
    "text": "of course man, no problem"
  },
  {
    "poster": {
      "poster_name": "Daniel Wong",
      "poster_handle": "dan.wong"
    },
    "time_stamp": "2023-03-21 20:09:47",
    "text": "you could always submit the form using js using the form submission endpoint. HubSpot's external form collection isn't the best, and it doesn't account for a lot of things (like validation). If you press submit on a form, it will sometimes collect the submission even if it didn't pass the form's own validation. Also, it has to be submitted via a &lt;form&gt; html element, which isn't always how these editors handle forms.\n\nWhat you could do is just send data via the API:\n<https://legacydocs.HubSpot.com/docs/methods/forms/submit_form>\n\nIt doesn't require authentication so there's no danger of leaving a key in your code"
  }
]