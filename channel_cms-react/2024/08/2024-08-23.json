[
  {
    "poster": {
      "poster_name": "Erik Rorstrom",
      "poster_handle": "erik.rorstrom"
    },
    "time_stamp": "2024-08-23 02:26:06",
    "text": "Yea but those are the requirements for where the types of files are assumed to be located. Not the requirements for how the github project needs to be structured in order for the automatic deployment to work."
  },
  {
    "poster": {
      "poster_name": "Jonathan Asbury",
      "poster_handle": "jasbury"
    },
    "time_stamp": "2024-08-23 08:53:41",
    "text": "Gotcha.  I started using this yesterday so don't know that one.  Can you step into HubSpot's code?"
  },
  {
    "poster": {
      "poster_name": "Josh GH",
      "poster_handle": "joshgh"
    },
    "time_stamp": "2024-08-23 11:34:28",
    "text": "For us, every page we update is a complete rewrite. Especially bc we’re updating the pages to properly use HubSpot’s WYSISWYG editor, which involved lots of design discussions that we didn’t have previously. But if you’re site is already designed around drag and drop elements, you’d have way less rewriting.\n\nIf you’re ok with a giant page with a single element and only the ability to change text (what we’re now transitioning away from), it’s way less work, but could be a way faster transition to HubSpot.\n\nI’d personally still use CMS-react in either case."
  },
  {
    "poster": {
      "poster_name": "Tricia Leach",
      "poster_handle": "tleach"
    },
    "time_stamp": "2024-08-23 14:31:37",
    "edited": {
      "time_stamp": "2024-08-23 15:07:05"
    },
    "text": "Solved! :white_check_mark: Does anyone have a code example of `useInlineHeadAsset`<https://github.HubSpot.com/cms-js-building-block-examples/reference/cms-components.html#useinlineheadasset| hook> in use? Thanks!",
    "reply_count": 3,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2024-08-23 15:06:53"
      },
      {
        "time_stamp": "2024-08-23 15:20:09"
      },
      {
        "time_stamp": "2024-08-23 15:23:48"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Tricia Leach",
      "poster_handle": "tleach"
    },
    "time_stamp": "2024-08-23 15:06:53",
    "text": "Nevermind, I found one here: <https://github.com/HubSpot/cms-react/blob/6147cea0c8023b5d8ff7eb18aac9316b584c930d/examples/styling/styling-project/styling-app/components/StyledJSXRegistry.jsx#L2|https://github.com/HubSpot/cms-react/blob/6147cea0c8023b5d8ff7eb18aac9316b584c930d[…]ng/styling-project/styling-app/components/StyledJSXRegistry.jsx>\n\nWill post another example soon just in case anyone else needs it."
  },
  {
    "poster": {
      "poster_name": "Tricia Leach",
      "poster_handle": "tleach"
    },
    "time_stamp": "2024-08-23 15:20:09",
    "edited": {
      "time_stamp": "2024-08-23 15:22:54"
    },
    "text": "A simple version to add `<style>` tag if anyone else looks for this:\n\n```import { useInlineHeadAsset } from '@HubSpot/cms-components';```\n```  useInlineHeadAsset(() => {\n    if (isMinimalHeader) {\n      return <></>;\n    }\n\n    return (\n      <style>\n        {`\n          .body-wrapper {\n            margin-top: ${CONSTANTS.mobileHeight};\n          }\n\n          @media (min-width: 992px) {\n            .body-wrapper {\n              margin-top: ${CONSTANTS.desktopHeight};\n            }\n          }\n        `}\n      </style>\n    );\n  });```"
  },
  {
    "poster": {
      "poster_name": "Tricia Leach",
      "poster_handle": "tleach"
    },
    "time_stamp": "2024-08-23 15:23:48",
    "text": "This is an excellent hook, HubSpot—thank you! :orange_heart:\n\n<@UAYBXDG4U> <@UCY83QS6Q> Suggestion, wonder what you'd think of having `useInlineHeadAsset` typed so that you could return `null` or `undefined` conditionally, instead of requiring an `Element`. I had to return an empty Fragment to return nothing."
  }
]