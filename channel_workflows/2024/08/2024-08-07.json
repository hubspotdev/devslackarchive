[
  {
    "text": "Hi, I am trying to build a workflow which triggers an email send once a particular file is attached to a contact record. What are some unique identifiers of a file which I can identify to use the condition \"contains all of\" so that workflow triggers based on this condition only. Also, open to using any other conditions. Thank you!",
    "time_stamp": "2024-08-07 08:08:01",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2024-08-08 04:51:17"
      }
    ]
  },
  {
    "text": "Hey everyone!\n\nI was running some tests for webhook triggered workflows and noticed that the values posted to the webhook are not accessible in custom code workflow actions.\n\nHas anyone figured out a solid method for passing the request values to custom code actions?\n\nFor instance, in my use case users can like posts in a clients social media app. When the event is triggered in app, the app sends a webhook to the HS webhook triggered workflow. This request includes the post_id that was liked. I would like to use that post_id in a custom event so it can be leverage from a reporting and automation perspective.\n\nThoughts? <@U01QVR44MEY> <@UD53A9UUR> <@UJAPS2K4N> <@U2H3TT8F2>",
    "time_stamp": "2024-08-07 08:31:44",
    "reply_count": 5,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-08-07 08:34:02"
      },
      {
        "time_stamp": "2024-08-07 08:35:13"
      },
      {
        "time_stamp": "2024-08-07 08:35:53"
      },
      {
        "time_stamp": "2024-08-07 08:40:05"
      },
      {
        "time_stamp": "2024-08-07 08:43:51"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-08-07 08:34:02",
    "edited": {
      "time_stamp": "2024-08-07 08:34:08"
    },
    "text": "lol it's a dumb thing but you can just set the value using a format data action (no functions or anything) and then use the output from the format data action in the custom coded action"
  },
  {
    "poster": {
      "poster_name": "Kevin-C",
      "poster_handle": "kevin.cornett135"
    },
    "time_stamp": "2024-08-07 08:35:13",
    "text": "<@U01QVR44MEY> interesting! I'll give it a shot."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-08-07 08:35:53",
    "text": "hahaha, I know it sounds so dumb but that's the only way I've found to do it"
  },
  {
    "poster": {
      "poster_name": "Kevin-C",
      "poster_handle": "kevin.cornett135"
    },
    "time_stamp": "2024-08-07 08:40:05",
    "text": "That did the trick! Yeah, unintuitive &amp; cumbersome but doable.\nGreatly appreciated!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-08-07 08:43:51",
    "text": "100%"
  },
  {
    "text": "Hi! I created a workflow to merge contacts that have the same phone numbers on our account. Our developer successfully modified the custom code, and we tested it with two duplicate contacts.\nAlthough the action logs show successful execution, the test contacts are still not merging and remain as duplicates. I'm wondering why the contacts aren't merging despite the code being set up to do so :thinking:",
    "time_stamp": "2024-08-07 11:59:28",
    "reply_count": 14,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2024-08-07 12:07:58"
      },
      {
        "time_stamp": "2024-08-07 12:15:58"
      },
      {
        "time_stamp": "2024-08-07 13:27:46"
      },
      {
        "time_stamp": "2024-08-07 13:51:45"
      },
      {
        "time_stamp": "2024-08-07 14:18:31"
      },
      {
        "time_stamp": "2024-08-07 14:31:49"
      },
      {
        "time_stamp": "2024-08-08 03:46:11"
      },
      {
        "time_stamp": "2024-08-08 04:06:57"
      },
      {
        "time_stamp": "2024-08-08 15:02:28"
      },
      {
        "time_stamp": "2024-08-08 15:23:02"
      },
      {
        "time_stamp": "2024-08-08 15:39:16"
      },
      {
        "time_stamp": "2024-08-08 15:41:21"
      },
      {
        "time_stamp": "2024-08-08 16:04:09"
      },
      {
        "time_stamp": "2024-08-08 16:06:42"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2024-08-07 12:07:58",
    "text": "Your developer would need to look at the results from the merge request within the Custom Code Action.\n\nWe can’t really help without seeing more details and/or responses from the custom code action."
  },
  {
    "poster": {
      "poster_name": "Psalm Gajudo",
      "poster_handle": "pgajudo"
    },
    "time_stamp": "2024-08-07 12:15:58",
    "text": "Hi Justin! This is the custom code HS provided, we just added the private app info;\n\n/**\n * This custom code action removes duplicate contacts based on a specific contact property\n */\n\n// Import required libraries\nconst HubSpot = require('@HubSpot/api-client');\n\n/**\n * How to access HubSpot's client to make API\n * 1) Create a Private App: <https://developers.HubSpot.com/docs/api/private-apps>\n * 2) Create a Secret using your Private App's access token via the \"Secrets\" dropdown above\n * 3) Insert your secret below, replacing \"YOUR_PRIVATE_APP_ACCESS_TOKEN\" with the name of your Secret\n */\nconst HubSpot_PRIVATE_APP_ACCESS_TOKEN = process.env.Contact_Dedup;\n\n// By default, phone numbers are used to dedupe contacts (i.e. 2 contacts with the same phone number are merged together)\n// Change this property if you would like to use a different property to dedupe contacts with\nconst PROPERTY_USED_TO_DEDUPE_CONTACTS = 'phone';\n\nexports.main = (event, callback) =&gt; {\n  const HubSpotClient = new HubSpot.Client({ accessToken: HubSpot_PRIVATE_APP_ACCESS_TOKEN });\n\n  HubSpotClient.crm.contacts.basicApi\n    .getById(event.object.objectId, [PROPERTY_USED_TO_DEDUPE_CONTACTS])\n    .then(contactResult =&gt; {\n      let dedupePropValue = contactResult.properties[PROPERTY_USED_TO_DEDUPE_CONTACTS];\n\n      console.log('Looking for duplicates based on ${PROPERTY_USED_TO_DEDUPE_CONTACTS} = ${dedupePropValue}');\n      HubSpotClient.crm.contacts.searchApi.doSearch({\n          filterGroups: [{\n            filters: [{\n              propertyName: PROPERTY_USED_TO_DEDUPE_CONTACTS,\n              operator: 'EQ',\n              value: dedupePropValue\n            }]\n          }]\n        })\n        .then(searchResults =&gt; {\n          let idsToMerge = searchResults.results\n            .map(object =&gt; object.id)\n            .filter(vid =&gt; Number(vid) !== Number(event.object.objectId));\n\n          if (idsToMerge.length == 0) {\n            console.log('No matching contact, nothing to merge');\n            return;\n          } else if (idsToMerge.length &gt; 1) {\n            console.log('Found multiple potential contact IDs ${idsToMerge.join(', ')} to merge');\n            throw new Error(\"Ambiguous merge; more than one matching contact\");\n          }\n\n          let idToMerge = idsToMerge[0];\n          console.log('Merging enrolled contact id=${event.object.objectId} into contact id=${idToMerge}');\n          HubSpotClient\n            .apiRequest({\n              method: 'POST',\n              path: '/contacts/v1/contact/merge-vids/${idToMerge}',\n              body: {\n                vidToMerge: event.object.objectId\n              }\n            })\n            .then(mergeResult =&gt; {\n              console.log('Contacts merged!');\n            });\n        });\n    });\n};"
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2024-08-07 13:27:46",
    "text": "So look at the event details in the workflow log and see what messages you have received.\n\nSuccessful result, you should see `Contacts merged!` if there’s an issue, you should see other logs."
  },
  {
    "poster": {
      "poster_name": "Psalm Gajudo",
      "poster_handle": "pgajudo"
    },
    "time_stamp": "2024-08-07 13:51:45",
    "text": "Yes, we're seeing `Contacts merged!` the on the event details for contacts that have successfully executed in the workflow\n\nHere's a sample event detail\n```2024-08-06T19:03:20.903Z\tINFO\tLooking for duplicates based on ${PROPERTY_USED_TO_DEDUPE_CONTACTS} = ${dedupePropValue}\n2024-08-06T19:03:21.244Z\tINFO\tMerging enrolled contact id=${event.object.objectId} into contact id=${idToMerge}\n2024-08-06T19:03:21.365Z\tINFO\tContacts merged!\n\nMemory: 75/128 MB\nRuntime: 1781.92 ms```\n"
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2024-08-07 14:18:31",
    "text": "yeah that code looks out of date.\n\nCheck out the latest docs: <https://developers.HubSpot.com/beta-docs/reference/api/crm/objects/contacts#post-%2Fcrm%2Fv3%2Fobjects%2Fcontacts%2Fmerge>"
  },
  {
    "poster": {
      "poster_name": "Psalm Gajudo",
      "poster_handle": "pgajudo"
    },
    "time_stamp": "2024-08-07 14:31:49",
    "text": "Thanks, Justin! I'm forwarding this to our dev team."
  },
  {
    "poster": {
      "poster_name": "Cameron Harro",
      "poster_handle": "cameron420"
    },
    "time_stamp": "2024-08-07 14:44:22",
    "text": "My guess is that it’s a timezone thing, like it could be putting in a UTC timestamp for the selected date and then converting it into your timezone (if you’re in the western hemisphere)."
  },
  {
    "text": "Have you ever been able to receive a test event when setting up your webhook trigger?",
    "time_stamp": "2024-08-07 14:48:19"
  },
  {
    "poster": {
      "poster_name": "Raymond",
      "poster_handle": "rhong"
    },
    "time_stamp": "2024-08-07 16:08:59",
    "edited": {
      "time_stamp": "2024-08-07 16:09:52"
    },
    "text": "Hey folks, Node.js 20.x includes AWS SDK v3 while Node.js 16.x includes AWS SDK v2. The major difference is that AWS SDK v3 doesn't allow users to import the entire sdk at once. It should work if you import the subpackages you need.\n\nEx: `require(\"aws-sdk\")`  won't work in Node 20, but `require(\"@aws-sdk/client-s3\")` will.\n\nThis <https://aws.amazon.com/blogs/compute/node-js-18-x-runtime-now-available-in-aws-lambda/#:~:text=Lambda's%20Node.,was%20released%20in%20December%202020|blog post> describes the differences in more detail. Hope this helps!"
  }
]