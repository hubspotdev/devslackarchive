[
  null,
  {
    "poster": {
      "poster_name": "Theresa Weaver",
      "poster_handle": "theresa.weaver"
    },
    "time_stamp": "2019-01-17 06:01:18",
    "edited": {
      "time_stamp": "2019-01-17 06:03:12"
    },
    "text": "yes! this is what we are trying to do, pull 4 posts with the tag “Featured” from each blog, put them into an array, then sort them by date and show the most recent 4."
  },
  {
    "poster": {
      "poster_name": "Theresa Weaver",
      "poster_handle": "theresa.weaver"
    },
    "time_stamp": "2019-01-17 06:18:28",
    "text": "yes, I am still trying to code it pull the blogs into an array and call that properly"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-17 06:53:20",
    "text": "I will help you out when I get to work :)"
  },
  null,
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2019-01-17 08:18:33",
    "text": "```{% set featured_1 = blog_recent_topic_posts(1, 'featured', 4) %}\n{% set featured_2 = blog_recent_topic_posts(2, 'featured', 4) %}\n{% set featured_3 = blog_recent_topic_posts(3, 'featured', 4) %}\n{% set featured_4 = blog_recent_topic_posts(4, 'featured', 4) %}\n\n{% set all_featured = featured_1 + featured_2 + featured_3 + featured_4 %}\n\n{% for post in all_featured|dictstort(false, 'publish_date') %}\n  {% if loop.index0 &lt; 4 %}\n    {{ post.name }}\n  {% endif %}\n{% endfor %}```\nI think something like this might do it? I didn't test this."
  },
  null,
  {
    "poster": {
      "poster_name": "Matt McClard",
      "poster_handle": "matt327"
    },
    "time_stamp": "2019-01-17 09:33:53",
    "text": "Can I use `{{ require_css(get_public_template_url(\"/relative/path/to/file.css\")) }}` in a HUBL HTML email template?",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-01-17 09:39:25"
      },
      {
        "time_stamp": "2019-01-17 09:40:44"
      },
      {
        "time_stamp": "2019-01-17 09:41:10"
      },
      {
        "time_stamp": "2019-01-17 09:42:22"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt McClard",
      "poster_handle": "matt327"
    },
    "time_stamp": "2019-01-17 09:35:18",
    "text": "Or is there an include alternative? I can't seem to get that to work, but I'd rather not maintain a bunch of different CSS for different templates",
    "reply_count": 2,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-01-17 09:40:49"
      },
      {
        "time_stamp": "2019-01-17 09:41:37"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-17 09:39:25",
    "text": "I would assume no, as require_css adds a link tag which wouldn’t work in an email."
  },
  {
    "poster": {
      "poster_name": "Matt McClard",
      "poster_handle": "matt327"
    },
    "time_stamp": "2019-01-17 09:40:44",
    "text": "Yea, I've got it in there, but there isn't even and link tag being added. I'd like to use it more like a partial where it just dumps the CSS in style tag. Thanks"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-17 09:40:49",
    "text": "haven’t tried using an include for this but theoretically it should work just fine."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-17 09:41:10",
    "text": "yea then you want include"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-17 09:41:37",
    "text": "you’d just wrap it in a style tag"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-17 09:42:02",
    "text": "```{% set blog_1 = blog_recent_posts('######') %}\n{% set blog_2 = blog_recent_posts('########') %}\n{% set blog_3 = blog_recent_posts('#####') %}\n{% set blog_4 = blog_recent_posts('########') %}\n{% set blog_5 = blog_recent_posts('##########') %}\n{% set dem_all = blog_1 + blog_2 + blog_3 + blog_white_papers + blog_5 | sort(true, false,\n'publish_date')%4 count = 1 %}\n{% for post in dem_all %}\n{% if post.topic_list and 'featured' in post.topic_list|map('name') %}\n{% for topic in post.topic_list %}\n{% if loop.first %}\n{% if count &lt;= 5 %} &lt;div&gt;\n  this is your content\n  &lt;/div&gt;\n  {% endif %}\n  {% endif %}\n  {% endfor %}\n  {% set count = count + 1 %}\n  {% endif %}\n  {% endfor %}```"
  },
  {
    "poster": {
      "poster_name": "Matt McClard",
      "poster_handle": "matt327"
    },
    "time_stamp": "2019-01-17 09:42:22",
    "text": "Thanks!"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-17 09:43:01",
    "text": "changed ‘featured’ to whatever tag you want.  if you want more than 5, adjust the  number"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-17 09:43:11",
    "text": "and use your blog ids :slightly_smiling_face:"
  },
  null,
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-17 11:57:21",
    "text": "is there a way to reference variables from another stylesheet like you do with scss?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-17 11:57:42",
    "text": "like have all of my colors in one stylesheet and call on them in others"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-17 11:58:03",
    "text": "(maybe wrong channel)"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-17 11:58:35",
    "text": "nevermind"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-17 11:58:37",
    "text": ":slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-17 11:58:47",
    "text": "had my include at the top"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-17 11:58:50",
    "text": "carry on"
  },
  {
    "time_stamp": "2019-01-17 11:59:08",
    "text": ""
  },
  {
    "poster": {
      "poster_name": "Sylvia King",
      "poster_handle": "sking"
    },
    "time_stamp": "2019-01-17 12:16:10",
    "text": "I'm passing an author name using request.query_dict to a website page. I now want to  add other author variables (bio and avatar) to that website page. Any suggestions?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-17 12:17:10",
    "text": "uh… can you explain why you’re using query parameters to trigger the display of data on a page?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-17 12:18:38",
    "text": "I would advise against doing something like `<http://example.com/page?author=Billy>`\nand then rendering the query parameter - as someone could use that maliciously"
  },
  {
    "poster": {
      "poster_name": "Sylvia King",
      "poster_handle": "sking"
    },
    "time_stamp": "2019-01-17 12:19:15",
    "text": "I am not using a standard listing page because I am merging multiple blogs. The only way I thought of creating an author listing page that includes multiple blogs was to pass the author to the url."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-17 12:23:45",
    "text": "well, there are other ways of doing it, though the easiest ways would still show the current blog’s path\n`<http://site.com/blog_path/author_name|site.com/blog_path/author_name>`\nYou’d just use\n<https://designers.HubSpot.com/en/docs/hubl/hubl-supported-functions#blog-recent-author-posts>\n\nto pull from each blog."
  },
  {
    "poster": {
      "poster_name": "Sylvia King",
      "poster_handle": "sking"
    },
    "time_stamp": "2019-01-17 12:33:31",
    "text": "right, but I cannot use the blog path since there are 5 with more coming"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-17 12:34:22",
    "text": "what I’m saying is the blog author pages would work in each blog and display the same thing, we’d just set a canonical so it has no effect on SEO"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-17 12:36:04",
    "text": "so for example\n`<http://site.com/blog_path/bob|site.com/blog_path/bob>`\nand\n`<http://site.com/blog2_path/bob|site.com/blog2_path/bob>`\n\nWould show the listing of the authors posts in all blogs. The pages would be basically identical.\n\nThis method of doing it, you don’t have to manually create author pages, and you don’t introduce a potential security issue by displaying data from a query param"
  },
  {
    "poster": {
      "poster_name": "Sylvia King",
      "poster_handle": "sking"
    },
    "time_stamp": "2019-01-17 12:36:10",
    "text": "what is the risk of the author name in the url?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-17 12:36:25",
    "text": "It’s only a risk if you’re rendering what is entered into the URL"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-17 12:38:08",
    "text": "for example - a user could pass url encoded html and js in\n`<http://example.com/page?author=>`\n\nThen use the page as a phishing page and steal people’s information who think they’re sending it to the legit website"
  },
  {
    "poster": {
      "poster_name": "Sylvia King",
      "poster_handle": "sking"
    },
    "time_stamp": "2019-01-17 12:38:25",
    "text": "I'm rendering from the url, but then changing it to title case and replacing the \"-\""
  },
  {
    "poster": {
      "poster_name": "Sylvia King",
      "poster_handle": "sking"
    },
    "time_stamp": "2019-01-17 12:38:41",
    "text": "I will try your suggestion, though"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-17 12:39:30",
    "edited": {
      "time_stamp": "2019-01-17 12:40:24"
    },
    "text": "eek yea… it’s better if you can instead check what is in your query param against something in your HS data. like do a listing of all the authors and loop through or use selectattr to see if the param matches. otherwise like i said"
  },
  {
    "poster": {
      "poster_name": "Sylvia King",
      "poster_handle": "sking"
    },
    "time_stamp": "2019-01-17 12:39:30",
    "text": "I'm using the same method to capture tags used across multiple blogs as well"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-17 12:39:33",
    "text": "someone could be malicious"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-17 12:40:06",
    "text": "I would do the same exact looping check to verify the query param matches the tags then too."
  },
  {
    "poster": {
      "poster_name": "Theresa Weaver",
      "poster_handle": "theresa.weaver"
    },
    "time_stamp": "2019-01-17 12:40:12",
    "text": ":tada: This worked great!! there was a slight typo in `dictsort` but once that was resolved this worked exactly as expected, I thank you so much for your time!!"
  },
  {
    "poster": {
      "poster_name": "Sylvia King",
      "poster_handle": "sking"
    },
    "time_stamp": "2019-01-17 12:40:43",
    "text": "{% if tagName in post.topic_list|map('name')%} ?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-17 12:42:25",
    "text": "I think post.topic_list will only render topics for that individual post. but yes correct idea"
  },
  {
    "poster": {
      "poster_name": "Theresa Weaver",
      "poster_handle": "theresa.weaver"
    },
    "time_stamp": "2019-01-17 12:43:24",
    "text": "Hey Dennis, thanks for your time and helping with this! we ended up going with a solution Ian provided."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-17 12:43:31",
    "text": "<https://designers.HubSpot.com/en/docs/hubl/hubl-supported-functions#blog-topics>"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-17 12:43:44",
    "text": ":slightly_smiling_face:"
  },
  null,
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-17 14:00:59",
    "edited": {
      "time_stamp": "2019-01-17 14:01:11"
    },
    "text": "anyone know why these docs exist?\n<https://designers.HubSpot.com/docs/markup/supported-filters>\n\nI think they’re old docs but I don’t see why they haven’t been removed yet. They show up in Google Search results, makes it harder to find some things sometimes",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-01-17 14:53:48"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Chris Abplanalp",
      "poster_handle": "cabplanalp"
    },
    "time_stamp": "2019-01-17 14:06:24",
    "text": "<@U7SL518D6>, the interesting thing about these docs, we found that this “default” option in these docs, and we could not directly find that in the normal doc:\ndefault(value, default_value=u’’, boolean=False)\nIf the value is undefined it will return the passed default value, otherwise the value of the variable:\n\n{{ my_variable|default(‘my_variable is not defined’) }}\nThis will output the value of my_variable if the variable was defined, otherwise ‘my_variable is not defined’. If you want to use default with variables that evaluate to false you have to set the second parameter to true:\n\n{{ ‘’|default(‘the string was empty’, true) }}\n\nthis somewhat helps with optimized HubL code"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-17 14:06:59",
    "text": "default is a filter that is documented in the normal docs"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-17 14:07:16",
    "text": "I use it every now and again. it’s useful"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-17 14:07:52",
    "text": "<https://designers.HubSpot.com/docs/hubl/hubl-supported-filters#default>"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2019-01-17 14:53:48",
    "text": "Just addressed this"
  },
  null,
  null,
  null,
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2019-01-17 16:09:01",
    "text": "Using HubL, is there a way to exclude the stylesheets found in Settings &gt; Website &gt; Pages &gt; CSS &amp; Stylesheets?"
  },
  null,
  null,
  null
]