[
  {
    "poster": {
      "poster_name": "Stefan Dzalev",
      "poster_handle": "stefan632"
    },
    "time_stamp": "2021-07-09 01:09:18",
    "text": "Hey guys i have a table recipes and a child table ingredients. Is there a way to automatically link the right ingredients to the recipe without doing it all manually? Because i have alot od recipes at the moment and it’s getting really hard to do so. Any ideas?? "
  },
  {
    "poster": {
      "poster_name": "Andreas",
      "poster_handle": "andreas.terzitane"
    },
    "time_stamp": "2021-07-09 01:19:30",
    "text": "Oh yes, that's actually what worked for me! :smile:"
  },
  {
    "poster": {
      "poster_name": "Bhréin Brannick",
      "poster_handle": "bhreinb"
    },
    "time_stamp": "2021-07-09 03:57:49",
    "edited": {
      "time_stamp": "2021-07-09 03:58:30"
    },
    "text": "Hi there,\n\nI’m looking at the `JinJava` codebase <https://github.com/HubSpot/jinjava/|here>.\n\nI notice from the unit tests that there is a possibility to resolve/render standard `JinJa` tags (namely `set`, `for`, `if`) via two options:\n1. Via default tags i.e. `SetTag, ForTag and IfTag` \n2. Via eager tags i.e. `EagerSetTag, EagerForTag and EagerIfTag`\nJust curious is there any advantage using one over the other in terms of resolving/rendering a template or is one implementation going to deprecate the other per se. Many thanks in advance.",
    "reply_count": 3,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2021-07-12 02:45:14"
      },
      {
        "time_stamp": "2021-07-13 10:38:38"
      },
      {
        "time_stamp": "2021-07-13 15:58:43"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Dani Carles",
      "poster_handle": "dani.carles"
    },
    "time_stamp": "2021-07-09 05:31:17",
    "text": "Hi. Also interested in this. It’d be great if this were released as that would allow the use of macros with custom methods"
  },
  {
    "subtype": "thread_broadcast",
    "time_stamp": "2021-07-09 07:14:12",
    "text": "Although modules’ default values are missing in `content.widgets` dev info (users have to make a change to the module for `content.widgets` to have the module data) – there is a workaround I thought I’d share.\n\n```{% set programatic_value = 'foo' %}\n{{ content.widgets.my_text.body.value || programatic_value }}```\ncc: <@U38EZFVFE> and <@UDJV5B73R> since y’all agreed with this frustration of mine :upside_down_face:"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2021-07-09 07:16:45",
    "text": "I’ll give you a hint: go to the design manager and search logo and peak around at the default HubSpot logo module source code"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2021-07-09 07:29:03",
    "text": "You can use` |default(\"VALUE\")`"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2021-07-09 07:35:35",
    "text": "yeah but the default value is different per page in my case. And since this is a global template inheriting a dynamic value I can’t use that"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2021-07-09 07:37:31",
    "text": "What I mean is you can dynamicly write the default value with the variable value"
  },
  {
    "poster": {
      "poster_name": "Eric Levine",
      "poster_handle": "eric811"
    },
    "time_stamp": "2021-07-09 07:54:17",
    "edited": {
      "time_stamp": "2021-07-09 10:36:12"
    },
    "text": "Hey all! When adding an image inside of a custom module, is there any way to force the `src` url to use the websites domain as opposed to `HubSpotusercontent`?\n\nExample\n`<https://www.websiteurl.com/hubfs/wordmark-dark.svg>` vs `<https://f.HubSpotusercontent20.net/hubfs/0000000/wordmark-dark.svg>`"
  },
  {
    "poster": {
      "poster_name": "Eric Levine",
      "poster_handle": "eric811"
    },
    "time_stamp": "2021-07-09 07:58:44",
    "text": "`&lt;img src=\"{{ item.svg_logo.src }}\"&gt;`  prints  `<https://www.websiteurl.com/hubfs/wordmark-dark.svg>`\nand\n`{{ item.svg_logo.src }}` prints  `<https://f.HubSpotusercontent20.net/hubfs/0000000/wordmark-dark.svg>`"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2021-07-09 08:27:26",
    "text": "You will likely need to URL encode the ampersand in this case which would be %26 if I am not mistaken"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2021-07-09 08:31:44",
    "text": "<https://developers.HubSpot.com/docs/cms/hubl/tags#logo>"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2021-07-09 08:47:52",
    "text": "You need to change that is settings."
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2021-07-09 12:01:03",
    "text": "gotcha"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2021-07-09 12:01:51",
    "text": "whatever, the cat is skinned :stuck_out_tongue_winking_eye:"
  }
]