[
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 12:39:16",
    "text": "Is it possible to sort blog posts by a custom field?"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 12:39:37",
    "text": "I've got an old template that I'm replacing that has a loop like this:\n`{% for content in contents|sort(False, False, 'widgets.sort_by_this.body.value') %}`"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 12:39:42",
    "text": "But that doesn't actually seem to work"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 12:42:59",
    "text": "I don't think so"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 12:43:48",
    "text": "depends what type of value it is though"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 12:44:08",
    "text": "If it's a boolean or something, you can just nest 2 for loops"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 12:44:18",
    "text": "sort_by_this would just be a text field"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 12:44:25",
    "text": "err - not nest but run 2 for loops with conditionals"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 12:45:02",
    "text": "`{% text \"sort_by_this\" label=\"Sort Field\", value=\"\", export_to_template_context=True %}`"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 12:45:14",
    "text": "I'm a bit partial to creating macros for this type of custom filtering / matching"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 12:45:34",
    "text": "i.e. create a macro that spits out a comma-separated list of Blog Post IDs"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 12:45:39",
    "text": "Based on whatever set of filtering"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 12:45:52",
    "text": "then split that into a variable and run the for loop"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 12:46:01",
    "text": "with Blog_post_by_id(&lt;blogid&gt;)"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 12:46:13",
    "text": "How would it get sorted in the macro?"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 12:47:03",
    "text": "Let me remember what I did"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 12:47:37",
    "text": "I could always use js to sort it, but that sucks"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 12:47:44",
    "text": "Ehhhh yeah I wouldn't want to do that"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 12:48:28",
    "text": "Give me a few minutes to find my macro"
  },
  {
    "text": "<@U4RP6AGV9|mgrubbs> uploaded a file: <https://HubSpotdev.slack.com/files/mgrubbs/F5XJ2CHPT/-.txt|Untitled>",
    "time_stamp": "2017-06-22 12:55:22",
    "edited": {
      "time_stamp": "2017-06-22 12:55:47"
    }
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 12:55:26",
    "text": "try something like that"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 12:55:32",
    "text": "I didn't test it (just wrote it quick)"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 12:55:54",
    "text": "Ah, I see"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 12:56:02",
    "text": "it's hacky but it works"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 12:56:13",
    "text": "I'm all about hacky!"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 12:56:14",
    "text": "Thanks"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 12:56:20",
    "text": "np lmk if you get it working"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 12:58:29",
    "text": "I also wasn't aware you could save the output of a macro to a variable like that"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 12:58:31",
    "text": "Good to know"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 12:58:38",
    "text": "Oh yeah, when I learned that my life changed"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 12:59:31",
    "text": "Not sure if they actual went through with deprecating the ability to modify \"choice\" modules this way, but that's another good use case"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 12:59:53",
    "text": "You'd output a comma-separated list into a choice module to get dynamic drop downs"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 13:26:21",
    "text": "Got it working :+1:"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 13:29:16",
    "edited": {
      "time_stamp": "2017-06-22 13:30:07"
    },
    "text": "```{# In a separate components.html file that I import: #}\n{%- macro event_looper() -%}\n    {% set today = local_dt|datetimeformat('%Y%m%d')|int %}\n    {% for event in contents %}\n        {% set sort_date = event.widgets.hs_calculated_date.body.value or event.widgets.short_date.body.value or event.widgets.sort_by_this.body.value %}\n        {% if simple_list_page or today &lt;= sort_date %}\n            {{ sort_date }}:{{event.id}}{% unless loop.last %},{% endunless %}\n        {% endif %}\n    {% endfor %}\n{%- endmacro -%}\n\n{# In the blog index template: #}\n{% set events = components.event_looper()|split(',')|sort(False, False) %}\n{% for event in events %}\n    {% set post_id = event|split(':',2)|last %}\n    {% set content = blog_post_by_id(post_id) %}\n    &lt;a href=\"{{ content.absolute_url }}\" class=\"pioneer-thumb {% if not content.featured_image %}pioneer-thumb--no-image{% endif %}\" {% if content.featured_image %}style=\"background-image: url('{{ content.featured_image }}');\"{% endif %}&gt;\n        &lt;div class=\"pioneer-thumb__body\"&gt;\n            &lt;p class=\"pioneer-thumb__title\"&gt;{{ content.name }}&lt;/p&gt;\n            {{ components.event_date(content) }}\n            &lt;hr&gt;\n            &lt;p class=\"pioneer-thumb__summary\"&gt;\n                {{ content.post_body|striptags|truncate(200) }}\n            &lt;/p&gt;\n            &lt;p class=\"pioneer-thumb__more\"&gt;More&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/a&gt;\n{% endfor %}```"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 13:34:01",
    "text": "Boss"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 13:34:19",
    "text": "What's with the {% set sort_date = &lt;val&gt; OR &lt;val&gt; %}"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 13:34:27",
    "text": "I've never used \"or\"s that way, what's it do"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 13:35:56",
    "text": "and good call on the unless in the loop.last ,  I wasn't thinking since I was writing that up quickly from scratch  :wink:"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 13:36:56",
    "text": "I actually do use {% if loop.last %} a lot though because I'm often doing conditional checks to see if a variable was set to \"found\" or \"1\" then taking additional processing if true"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 13:42:44",
    "text": "This template has a load of legacy fields that are all basically the same thing, so setting my sort date this way catches all those"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 13:43:05",
    "edited": {
      "time_stamp": "2017-06-22 13:43:15"
    },
    "text": "Including `or` in a variable assignment is an easy way to do fallbacks"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 13:43:24",
    "text": "It'll use the first one that's truthy"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 13:44:22",
    "text": "Therefore, if `event.widgets.hs_calculated_date.body.value` is blank, then it'll go with `event.widgets.short_date.body.value`"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 13:44:25",
    "text": "And so on and so forth"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 13:44:37",
    "text": "Pretty common in a lot of languages"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 13:45:04",
    "text": "Clearer than doing a big stupid chain of ifs"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 13:45:28",
    "text": "Ah didn't know about that functionality"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 13:45:38",
    "text": "I usually use |default()"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 13:45:41",
    "text": "the filter"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 13:46:45",
    "text": "I guess your setup would then be varName|default(varName2|default(varName3))"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 13:46:49",
    "text": "using the filters"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 13:46:59",
    "text": "Something like that"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 13:47:03",
    "text": "but it's awkward"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 13:47:03",
    "text": "I like my way"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 13:47:07",
    "text": "Yeah"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 13:47:08",
    "text": "I like the or"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 13:48:54",
    "text": "It has to do with how `or` is evaluated. Since only one value needs to be true for an or to evaluate to true, it'll check the first one, if it's false move on to the second one, if that's false move on to the third one, until it reaches the end, but if any one of those is truthy it stops there"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 13:49:01",
    "text": "And therefore, that's the value your variable gets"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 13:49:17",
    "text": "At least, I think that's how it works"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 13:49:19",
    "text": "no yeah, I get it - it's far more elegant"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 13:49:41",
    "text": "That sounds about right re: how it would work"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 13:50:58",
    "text": "I run into situations a lot with my variable setting where it's heavily dependent on those {% macro %} outputs, so there are times when you do have to be careful with fallbacks"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 13:51:13",
    "text": "i.e. let's say I tried setting a variable from that looper() macro then running a split filter on it"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 13:51:23",
    "text": "you can't split filter on an empty string"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 13:51:25",
    "text": "so you throw errors"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-06-22 14:03:52",
    "text": "Thanks for all the help, I would never have thought of that."
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-06-22 14:04:34",
    "text": "Np - best of luck"
  }
]