[
  {
    "poster": {
      "poster_name": "Qiniso Mdletshe",
      "poster_handle": "qiniso"
    },
    "time_stamp": "2024-04-25 01:17:02",
    "text": "Hello everyone.\nI’m trying to access Saved Views from the Contacts collection using the REST API, can anyone point me in the right direction.  If this has been answered before I apologies in advance and please add the link to the solution",
    "reply_count": 3,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2024-04-25 04:31:28"
      },
      {
        "time_stamp": "2024-04-25 04:32:58"
      },
      {
        "time_stamp": "2024-04-25 04:33:36"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "atul",
      "poster_handle": "web.braintree"
    },
    "time_stamp": "2024-04-25 02:40:06",
    "text": "api for sending email with website in HubSpot"
  },
  {
    "poster": {
      "poster_name": "Alok Chakraborty",
      "poster_handle": "alok.c"
    },
    "time_stamp": "2024-04-25 03:26:30",
    "text": "Hey guys i need your help on this",
    "reply_count": 5,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-04-25 03:37:33"
      },
      {
        "time_stamp": "2024-04-25 06:21:18"
      },
      {
        "time_stamp": "2024-04-25 17:37:23"
      },
      {
        "time_stamp": "2024-04-28 22:36:54"
      },
      {
        "time_stamp": "2024-04-30 07:50:55"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Richard Owens",
      "poster_handle": "rich151"
    },
    "time_stamp": "2024-04-25 03:37:33",
    "text": "Hey mate, have you looked through the pages visited contact property. Might be able to see a page and a form submission at the same time"
  },
  {
    "poster": {
      "poster_name": "Byron Pokorniecki",
      "poster_handle": "byron.pokorniecki.ext"
    },
    "time_stamp": "2024-04-25 04:22:58",
    "text": "Hey guys - I am trying to verify if my assumptions are correct in regards to engagements. Based on the API documentation, it does not seem possible to get the comments on a note/call/activity. After looking through the forums I found nothing in addition. Is there something I am missing?\n\nThe notes API docs dont mention them:\n<https://developers.HubSpot.com/docs/api/crm/notes>\n\nThere also seems to be no association available for comments based on the overview done here:\n<https://developers.HubSpot.com/docs/api/crm/associations>",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-04-26 00:55:33"
      },
      {
        "time_stamp": "2024-04-26 06:23:55"
      },
      {
        "time_stamp": "2024-04-26 06:24:48"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Fredrik Wendt",
      "poster_handle": "fredrik.wendt"
    },
    "time_stamp": "2024-04-25 04:31:28",
    "text": "I'm also looking, but I want to create views for my sales people to act on.\nA backup for me is to use Lists"
  },
  {
    "poster": {
      "poster_name": "Fredrik Wendt",
      "poster_handle": "fredrik.wendt"
    },
    "time_stamp": "2024-04-25 04:32:30",
    "text": "<@U01BQTZUG9J> Did you find anything here?"
  },
  {
    "poster": {
      "poster_name": "Fredrik Wendt",
      "poster_handle": "fredrik.wendt"
    },
    "time_stamp": "2024-04-25 04:32:58",
    "text": "search for \"saved views\" here in slack only gives this: <https://HubSpotdev.slack.com/archives/C2YHAHB6K/p1637599718289200>"
  },
  {
    "poster": {
      "poster_name": "Fredrik Wendt",
      "poster_handle": "fredrik.wendt"
    },
    "time_stamp": "2024-04-25 04:33:36",
    "text": "This from 2016 suggests there are no APIs for Views: <https://community.HubSpot.com/t5/APIs-Integrations/How-to-access-Views-via-API/m-p/237772>"
  },
  {
    "poster": {
      "poster_name": "Alok Chakraborty",
      "poster_handle": "alok.c"
    },
    "time_stamp": "2024-04-25 06:21:18",
    "text": "Yeah its there, But this will get cumbersome as i have to open each contact to see the page of conversion.\n\nLike on other non-HubSpot forms. I can see the conversion page."
  },
  {
    "poster": {
      "poster_name": "Scott Marion",
      "poster_handle": "scott943"
    },
    "time_stamp": "2024-04-25 06:33:08",
    "edited": {
      "time_stamp": "2024-04-25 06:33:30"
    },
    "text": "```'Authorization': `Bearer ${access_token}`,\n'Content-Type': 'application/json'```\nwhy do you have the f`Bearer in there"
  },
  {
    "poster": {
      "poster_name": "Sebastian Hölscher",
      "poster_handle": "s.hoelscher"
    },
    "time_stamp": "2024-04-25 06:36:08",
    "text": "It's python syntax for string interpolation :slightly_smiling_face:\nCalled F-String"
  },
  {
    "poster": {
      "poster_name": "Scott Marion",
      "poster_handle": "scott943"
    },
    "time_stamp": "2024-04-25 06:36:43",
    "text": "Gotcha - I wondered, I am using Node"
  },
  {
    "poster": {
      "poster_name": "Scott Marion",
      "poster_handle": "scott943"
    },
    "time_stamp": "2024-04-25 06:37:28",
    "text": "Maybe try recycling the private app key"
  },
  {
    "poster": {
      "poster_name": "Scott Marion",
      "poster_handle": "scott943"
    },
    "time_stamp": "2024-04-25 07:04:33",
    "text": "try contact (singular)"
  },
  {
    "text": "I wonder if they are making any changes to the older v1 and you might consider trying the newer v3 (I know it's currently in beta and I do not personally use this api so can't say whether it will solve your issue - but it might worth a try)",
    "time_stamp": "2024-04-25 07:12:48"
  },
  {
    "poster": {
      "poster_name": "Scott Marion",
      "poster_handle": "scott943"
    },
    "time_stamp": "2024-04-25 07:24:52",
    "text": "You can retrieve a contact by ID and include the deal associations in the api call.  This will only give you the associated deal ID values but from there you can then retrieve the deals from the api to get the actual data for the deal.  <https://developers.HubSpot.com/docs/api/crm/contacts>  <https://developers.HubSpot.com/docs/api/crm/deals>"
  },
  {
    "poster": {
      "poster_name": "Victor Barros",
      "poster_handle": "victor387"
    },
    "time_stamp": "2024-04-25 08:14:11",
    "text": "Yes, it's."
  },
  {
    "poster": {
      "poster_name": "Danai Chronopoulou",
      "poster_handle": "danai"
    },
    "time_stamp": "2024-04-25 08:23:21",
    "text": "Hi all, I tried to batch create ~3k contacts. Successfully created 2,890 contacts but then the api failed with the error:\n```ForbiddenException: (403)\nReason: Forbidden\nHTTP response headers: HTTPHeaderDict({'Date': 'Thu, 25 Apr 2024 14:00:54 GMT', 'Content-Type': 'text/html; charset=UTF-8', 'Content-Length': '4512', 'Connection': 'keep-alive', 'X-Frame-Options': 'SAMEORIGIN', 'Referrer-Policy': 'same-origin', 'Cache-Control': 'max-age=15', 'Expires': 'Thu, 25 Apr 2024 14:01:09 GMT', 'Report-To': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=NrpeFN%2B4eZENyg%2FDDHSxkPYn41CIbkSogb25Ouxv7fFcchRyJchWTL0Vu1NjXQTkijUO1ZHYk27CHc0nXfd%2FbvTX4AWJXI1fSUwcBUq8H7Al5FTs%2B8qr19ZLeQFLyKyp\"}],\"group\":\"cf-nel\",\"max_age\":604800}', 'NEL': '{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}', 'Vary': 'Accept-Encoding', 'Strict-Transport-Security': 'max-age=31536000; includeSubDomains; preload', 'Server': 'cloudflare', 'CF-RAY': '879edcadcb7765d0-FRA'})\nHTTP response body: <!DOCTYPE html>\n&lt;!--[if lt IE 7]&gt; &lt;html class=\"no-js ie6 oldie\" lang=\"en-US\"&gt; &lt;![endif]--&gt;\n&lt;!--[if IE 7]&gt;    &lt;html class=\"no-js ie7 oldie\" lang=\"en-US\"&gt; &lt;![en...```\nDoes anyone knows what is this and how to handle?",
    "reply_count": 14,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-04-25 09:32:37"
      },
      {
        "time_stamp": "2024-04-25 09:33:47"
      },
      {
        "time_stamp": "2024-04-25 09:38:17"
      },
      {
        "time_stamp": "2024-04-25 09:39:50"
      },
      {
        "time_stamp": "2024-04-25 09:40:04"
      },
      {
        "time_stamp": "2024-04-25 09:41:26"
      },
      {
        "time_stamp": "2024-04-25 09:45:22"
      },
      {
        "time_stamp": "2024-04-25 09:55:18"
      },
      {
        "time_stamp": "2024-04-26 04:21:23"
      },
      {
        "time_stamp": "2024-04-26 05:02:39"
      },
      {
        "time_stamp": "2024-04-26 05:05:52"
      },
      {
        "time_stamp": "2024-04-26 05:13:40"
      },
      {
        "time_stamp": "2024-04-26 05:56:17"
      },
      {
        "time_stamp": "2024-04-26 06:10:55"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Nathan Yergler",
      "poster_handle": "nathan521"
    },
    "time_stamp": "2024-04-25 09:14:03",
    "text": "No."
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2024-04-25 09:32:37",
    "text": "This looks like a CloudFlare error - maybe your access token expired? I would recommend adding logic to handle retries and errors like this within your request lib, or data layer."
  },
  {
    "poster": {
      "poster_name": "Danai Chronopoulou",
      "poster_handle": "danai"
    },
    "time_stamp": "2024-04-25 09:33:47",
    "text": "How can I check if the access token is expired?"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2024-04-25 09:38:17",
    "edited": {
      "time_stamp": "2024-04-25 09:38:26"
    },
    "text": "If you've implemented authentication using oAuth (and not a private app) then when initially exchanging the code for an access token the payload includes an expiresIn field, along with a refresh token. You can save the refresh token in a persistent store (and the access token.)\n\nI usually would then have a wrapper around the core HubSpot API requests which 1) checks if the token has expired when retrieving it from the database, with a small 5 min buffer), if it has - refresh there and then and store the updated token. You can also just handle the exceptions and refresh it that way - if an exception is thrown, then check the response code and if it's an unauthorized code - invoke the refresh method and then retry the request (up to x times)"
  },
  {
    "poster": {
      "poster_name": "Danai Chronopoulou",
      "poster_handle": "danai"
    },
    "time_stamp": "2024-04-25 09:39:50",
    "text": "I have used the api key from the private app"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2024-04-25 09:40:04",
    "text": "the error response above though does seem to be a Cloudflare error, which usually indicates something has gone wrong on the HubSpot side. So this may just simply need some retry logic adding."
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2024-04-25 09:41:26",
    "edited": {
      "time_stamp": "2024-04-25 09:42:27"
    },
    "text": "As usually HubSpot will return JSON as a response, even for errors, unless there is some issue with Cloudflare, or Cloudflare has decided to reject the request."
  },
  {
    "poster": {
      "poster_name": "Danai Chronopoulou",
      "poster_handle": "danai"
    },
    "time_stamp": "2024-04-25 09:45:22",
    "text": "I see. So this html error response comes from Cloudflare.\nMy implementation though goes  as:\n1. Run the python app which initializes the HubSpot\n2. Call HubSpot apis with a scheduled task\nSo, the expired token makes sense somehow, because the task run after ~2hours that HubSpot was initialized"
  },
  {
    "poster": {
      "poster_name": "Tudor Petracovici",
      "poster_handle": "tudor.petracovici"
    },
    "time_stamp": "2024-04-25 09:49:28",
    "text": "Hello there,\nI;m trying to get the amount spent on marketing ads using the python api client and a private app. I can't find any endpoint linked to marketing ads. Can someone suggest me something? Thank you",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-04-26 11:18:01"
      },
      {
        "time_stamp": "2024-04-26 11:18:08"
      },
      {
        "time_stamp": "2024-05-07 06:49:52"
      },
      {
        "time_stamp": "2024-05-07 07:02:18"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Julian Vidal",
      "poster_handle": "julian.vidal123"
    },
    "time_stamp": "2024-04-25 09:50:39",
    "text": "Hey All! Is there a way to associate a thread (conversation from Inbox) with a ticket? with help desk, the option to create a ticket from a message has been removed and it’s only available in pro accounts.\n\nBasically, I want to replicate the behavior of the “create a ticket” button. I can create the ticket via API and associate it with the contact record, but can’t associate the conversation with the ticket."
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2024-04-25 09:55:18",
    "text": "Private apps dont need access tokens - the key doesnt expire"
  },
  {
    "poster": {
      "poster_name": "Laura Osorio",
      "poster_handle": "l.osorio"
    },
    "time_stamp": "2024-04-25 10:03:50",
    "text": "Hello everyone!\n\nI hope someone can help me, in the contacts we have a field that is of file type and I want to be able to upload files through the API to the specific contact but I am not even sure which endpoint I should use. If anyone can give me some light because the document is not clear to me what I should do...\n\nThank you !"
  },
  {
    "poster": {
      "poster_name": "Juan Felipe Aranguen",
      "poster_handle": "juan.felipe"
    },
    "time_stamp": "2024-04-25 10:26:24",
    "edited": {
      "time_stamp": "2024-04-25 10:58:42"
    },
    "text": "Hey everyone!\nAre there sample apps including tests for the Node.js HubSpot api? Or could anyone share how they’ve mocked it?\n\nFor example I’m importing the HP client `import { Client as HubSpotClient } from '@HubSpot/api-client';`\nAnd trying the mock the following method using jest but I’m definitely not sure how to do it\n```await this.apiClient.crm.contacts.basicApi.create```\nWould appreciate some guidance\n\n---\n\n**Edit: Just found <https://github.com/Invise/mocking-HubSpot-examples/blob/main/__test__/mock-basic-api.test.ts|this helpful repo> with some samples* :3231_transparrontparrot:"
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-25 10:46:28",
    "text": "This used to bother me too but if you think about all the different processes that are happening under the hood when an account is created, it makes sense."
  },
  {
    "poster": {
      "poster_name": "Nathan Potter",
      "poster_handle": "nathanscottpotter"
    },
    "time_stamp": "2024-04-25 10:56:56",
    "text": "In the same situation <@U070ATQAMJP> in the sense I am just bootstrapping; Did you find their library of starter projects??",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-04-25 10:58:22"
      },
      {
        "time_stamp": "2024-04-25 10:59:09"
      },
      {
        "time_stamp": "2024-04-25 11:11:33"
      },
      {
        "time_stamp": "2024-04-25 11:12:09"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Juan Felipe Aranguen",
      "poster_handle": "juan.felipe"
    },
    "time_stamp": "2024-04-25 10:58:22",
    "text": "Hey Nathan, I found an unofficial one. Helped me to successfully mock my use cases\n<https://github.com/Invise/mocking-HubSpot-examples/blob/main/__test__/mock-basic-api.test.ts>"
  },
  {
    "poster": {
      "poster_name": "Nathan Potter",
      "poster_handle": "nathanscottpotter"
    },
    "time_stamp": "2024-04-25 10:59:09",
    "edited": {
      "time_stamp": "2024-04-25 10:59:17"
    },
    "text": "Awesome, you happen to find any React based starters for reading data from the CRM tables?? <@U070ATQAMJP>"
  },
  {
    "poster": {
      "poster_name": "Victor Barros",
      "poster_handle": "victor387"
    },
    "time_stamp": "2024-04-25 11:10:41",
    "text": "I see what's going on, but I disagree. This is an object created under my domain, if it's being updated who is doing that?\nIf it's an unavoidable behavior, it should be clear in the documentation."
  },
  {
    "poster": {
      "poster_name": "Juan Felipe Aranguen",
      "poster_handle": "juan.felipe"
    },
    "time_stamp": "2024-04-25 11:11:33",
    "text": "No <@U070P3V3KPC>, I was looking for a more backend-oriented solution tbh.\nMaybe try asking on the <#C04AY1H2204|cms-react> channel?"
  },
  {
    "poster": {
      "poster_name": "Juan Felipe Aranguen",
      "poster_handle": "juan.felipe"
    },
    "time_stamp": "2024-04-25 11:12:09",
    "text": "Oh well, it’s cms, not crm sorry"
  },
  {
    "poster": {
      "poster_name": "Tyron Foston",
      "poster_handle": "tyron"
    },
    "time_stamp": "2024-04-25 11:13:35",
    "text": "Is there a way to get user/seat information via the Owners object or anyway/method?"
  },
  {
    "poster": {
      "poster_name": "Aaron Gutierrez",
      "poster_handle": "aaron.gutierrez"
    },
    "time_stamp": "2024-04-25 11:20:12",
    "text": "I'm not sure. I think that creating a contact does more than just add one record to the contact table, that's why it has the subsequent updates. Yeah, that process should be more clear."
  },
  {
    "poster": {
      "poster_name": "Joe Goeman",
      "poster_handle": "joe400"
    },
    "time_stamp": "2024-04-25 13:17:49",
    "edited": {
      "time_stamp": "2024-04-25 13:18:19"
    },
    "text": "Greetings! We're trying to use `createOrUpdate` on `v1`. Everything seems to be working, but I can't seem to find any documentation on a field that is available in the import: `data_submitted_registration` - Is this field also available from the API? If so, what is the format expected?"
  },
  {
    "poster": {
      "poster_name": "Isabelle OMahony",
      "poster_handle": "isabelle.omahony"
    },
    "time_stamp": "2024-04-25 15:07:35",
    "text": "Hi everyone, I'm trying to create an API to query the deals table. At the moment, it works only querying one deal property at a time. Can anyone advise a solution for this? I've tried both ...properties=dealname,dealstage..etc and properties=* but the only thing that works is properties=dealname or any one property at a time.",
    "reply_count": 11,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-04-25 15:55:58"
      },
      {
        "time_stamp": "2024-04-25 16:24:11"
      },
      {
        "time_stamp": "2024-04-25 16:25:20"
      },
      {
        "time_stamp": "2024-04-25 16:25:32"
      },
      {
        "time_stamp": "2024-04-25 16:37:58"
      },
      {
        "time_stamp": "2024-04-25 18:01:13"
      },
      {
        "time_stamp": "2024-04-25 18:01:58"
      },
      {
        "time_stamp": "2024-04-25 18:02:29"
      },
      {
        "time_stamp": "2024-04-25 18:03:43"
      },
      {
        "time_stamp": "2024-04-26 10:03:58"
      },
      {
        "time_stamp": "2024-04-26 10:05:11"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-04-25 15:55:58",
    "edited": {
      "time_stamp": "2024-04-25 15:56:03"
    },
    "text": "Share your code without the API Access Token"
  },
  {
    "poster": {
      "poster_name": "Isabelle OMahony",
      "poster_handle": "isabelle.omahony"
    },
    "time_stamp": "2024-04-25 16:24:11",
    "text": "var Airtable = require('airtable');\nvar request = require(\"request\");\nvar fs = require(\"fs\");\n\n// Airtable configuration\nvar airtableApiKey = 'airtableKey';\nvar airtableBaseId = 'airtableBase';\n\nvar base = new Airtable({ apiKey: airtableApiKey }).base(airtableBaseId);\n\ntry {\n  // Fetch existing records from Airtable\n  base('HubSpot Deal Import').select({\n    view: 'Grid view'\n  }).firstPage(function(err, records) {\n    if (err) {\n      console.error(\"Error fetching existing records from Airtable:\", err);\n      return;\n    }\n\n    // Prepare an object to store existing deals' IDs and corresponding record IDs\n    var existingDeals = {};\n    records.forEach(function(record) {\n      existingDeals[record.get('Deal ID')] = record.id;\n    });\n\n    // Fetch data from HubSpot\n    var options = {\n      method: 'GET',\n      url: '<https://api.hubapi.com/deals/v1/deal/paged?includeAssociations=true&amp;properties=dealname>', // amount,dealname,createdate,closedate,HubSpot_owner_id,hs_lastmodifieddate\n      headers: {\n        'Authorization': 'Bearer key'\n      }\n    };\n\n    request(options, function (error, response, body) {\n      if (error) {\n        console.error(\"Error fetching data from HubSpot:\", error);\n        return;\n      }\n\n      // Parse the JSON response\n      var deals = JSON.parse(body);\n\n      // Access the `deals` array within the `deals` object\n      var dealObjects = deals.deals;\n\n\n      // Prepare an array to store records to create in Airtable\n      var recordsToCreate = [];\n\n      // Iterate through the array of deal objects\n      dealObjects.forEach(function(deal) {\n\n        // Access the `associations` object within each deal\n        var companyIds = deal.associations.associatedCompanyIds;\n\n        // Access the `properties` object within each deal\n        var properties = deal.properties;\n\n        // Check if the `properties` object exists\n        if (properties &amp;&amp; properties.dealname) {\n\n            // Access the `dealname` property within the `properties` object\n            var dealnameProperty = properties.dealname;\n            // var closedateProperty = properties.closedate;\n\n            // Access the `value` field within the `dealname` property to get the deal name\n            var dealName = dealnameProperty.value;\n            // var closeDate = closedateProperty.value;\n\n            var dealId = deal.dealId;\n            var existingRecordId = existingDeals[dealId];\n\n          // Prepare fields for creating or updating records\n          var fields = {\n            \"Deal ID\": deal.dealId,\n            \"Deal Name\": dealName,\n            // \"Close Date\":  new Date(closeDate,).toISOString().substring(0, 10),\n            \"Company ID\": companyIds[0]\n          };\n\n          // console.log(fields);\n\n          // Check if the deal exists in Airtable\n          if (existingRecordId) {\n            // Update the existing record\n            base('HubSpot Deal Import').update(existingRecordId, fields, function (err, updatedRecord) {\n              if (err) {\n                console.error(\"Error updating record in Airtable:\", err);\n                return;\n              }\n              console.log(\"Updated record with ID:\", updatedRecord.getId());\n            });\n          } else {\n            // Deal doesn't exist in Airtable, add it to the recordsToCreate array\n            recordsToCreate.push({ fields: fields });\n          }\n\n        } else {\n          // Handle the case where the `dealname` property doesn't exist\n          console.log(\"Deal name not available for this deal.\");\n        }\n\n          console.log(body);\n\n      });\n\n\n\n\n          // Create new records in Airtable only if there are records to create\n        if (recordsToCreate.length &gt; 0) {\n            base('HubSpot Deal Import').create(recordsToCreate, function (err, createdRecords) {\n                if (err) {\n                    console.error(\"Error creating records in Airtable:\", err);\n                    return;\n                }\n                createdRecords.forEach(function (record) {\n                    console.log(\"Created record with ID:\", record.getId());\n                });\n            });\n        } else {\n            console.log(\"No new records to add to Airtable.\");\n        }\n\n      // console.log(dealName);\n\n    });\n  });\n} catch (err) {\n  console.error(\"An unexpected error occurred:\", err);\n}"
  },
  {
    "poster": {
      "poster_name": "Isabelle OMahony",
      "poster_handle": "isabelle.omahony"
    },
    "time_stamp": "2024-04-25 16:25:20",
    "text": "I'm basically trying to copy the data to airtable, and I want to check before if the record already exists and then update it if it does or create a new record in airtable if it doesn't already exist"
  },
  {
    "poster": {
      "poster_name": "Isabelle OMahony",
      "poster_handle": "isabelle.omahony"
    },
    "time_stamp": "2024-04-25 16:25:32",
    "text": "thanks in advance for your help!"
  },
  {
    "poster": {
      "poster_name": "Isabelle OMahony",
      "poster_handle": "isabelle.omahony"
    },
    "time_stamp": "2024-04-25 16:37:58",
    "text": "<@U05R380MLMC> actually here's all the columns I'm looking for if that helps: Deal ID, Deal Name, Updated At, Deal Amount, Close Date, Create Date, Deal Description, Forecast Category, Next Step, Owner ID, Company ID, Is Open, Is Closed, Is Closed Won, Is Deleted,"
  },
  {
    "poster": {
      "poster_name": "Richard Owens",
      "poster_handle": "rich151"
    },
    "time_stamp": "2024-04-25 17:37:23",
    "text": "How have you integrated the non HubSpot form. Is it via api or tracking code?"
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-04-25 18:01:13",
    "text": "check out this resource for crm-object-sync --&gt; <https://github.com/HubSpotdev/crm-object-sync/tree/main>"
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-04-25 18:01:58",
    "text": "This one is for a database but if you can re-factor it using your Airtable API - that might be a decent approach"
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-04-25 18:02:29",
    "text": "I'll take a look and see what I can do for you"
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-04-25 18:03:43",
    "edited": {
      "time_stamp": "2024-04-25 18:03:53"
    },
    "text": "The properties for example can be found here --> <https://github.com/HubSpotdev/crm-object-sync/blob/634f82ad8d8c397d5fdc595d1a01da4a14018c00/src/initialSyncToHubSpot.ts#L108>"
  },
  {
    "poster": {
      "poster_name": "Byron Pokorniecki",
      "poster_handle": "byron.pokorniecki.ext"
    },
    "time_stamp": "2024-04-26 00:55:33",
    "text": "Sorry for tagging you directly, but I am sure you will know if I am missing something <@U01QVR44MEY>"
  }
]