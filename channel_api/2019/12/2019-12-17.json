[
  {
    "poster": {
      "poster_name": "Rahmona Henry",
      "poster_handle": "rhenry"
    },
    "time_stamp": "2019-12-17 02:44:44",
    "text": "Hi <@ULPUVFK7W> webhooks are a great way to pass information from HubSpot to another web application. Did you have any specific questions about webhooks that I can help with?"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-12-17 08:04:57",
    "text": "<@U26BLKGE4> <@UQERM7BLY> This idea is interesting but my app is very light so I don't have a database set up for this project. The app is hosted on heroku. Do you think if I could set a serverless function on this kind of app?"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-12-17 08:05:17",
    "edited": {
      "time_stamp": "2019-12-17 08:06:42"
    },
    "text": "You wont need a daatabase - I mean, you could do it on heroku too i imagine"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-12-17 08:06:43",
    "text": "<https://devcenter.heroku.com/articles/scheduled-jobs-custom-clock-processes>"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-12-17 08:08:09",
    "text": "I'd almost think that would be a better use-case"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-12-17 08:09:03",
    "text": "all right thanks I'll lookinto this"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-12-17 08:09:39",
    "text": "The biggest issue you’re going to have is reliability. In any distributed system, without any sort of record of what jobs have executed you may run into scenarios where a job is executed multiple times/is not executed"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-12-17 08:11:26",
    "text": "but in a lot of cases as long as you’re not writing software to manage control rods in nuclear reactor, then life goes on :D"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-12-17 08:55:18",
    "text": "<@UQERM7BLY> this is an mvp. Someday I'll add record of jobs for sure."
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-12-17 13:52:47",
    "text": "Anyone has ever worked with the quickstart node js app available on the HubSpot GitHub account? It looks like the refresh token doesn't work for me...   <https://github.com/HubSpot/oauth-quickstart-nodejs/issues/16> thanks for your help"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-12-17 15:35:09",
    "text": "What sort of interaction are you wanting to do with the API server-&gt;server or client-&gt;server&gt;"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-12-17 15:39:44",
    "text": "Sorry what I meant to ask - is are you building an app for others to use, or just an internal application which manipulates data in one account? "
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-12-17 16:04:10",
    "text": "<@UQERM7BLY> it manipulates data in one account but I need the oauth since it uses webhooks",
    "reply_count": 57,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-12-17 16:14:34"
      },
      {
        "time_stamp": "2019-12-17 16:18:45"
      },
      {
        "time_stamp": "2019-12-17 16:40:02"
      },
      {
        "time_stamp": "2019-12-17 16:50:20"
      },
      {
        "time_stamp": "2019-12-17 16:53:47"
      },
      {
        "time_stamp": "2019-12-17 16:55:12"
      },
      {
        "time_stamp": "2019-12-17 16:57:12"
      },
      {
        "time_stamp": "2019-12-17 17:17:24"
      },
      {
        "time_stamp": "2019-12-17 17:27:55"
      },
      {
        "time_stamp": "2019-12-17 17:59:51"
      },
      {
        "time_stamp": "2019-12-17 18:04:01"
      },
      {
        "time_stamp": "2019-12-18 09:21:23"
      },
      {
        "time_stamp": "2019-12-18 09:25:25"
      },
      {
        "time_stamp": "2019-12-18 10:32:04"
      },
      {
        "time_stamp": "2019-12-18 10:42:53"
      },
      {
        "time_stamp": "2019-12-18 12:04:05"
      },
      {
        "time_stamp": "2019-12-18 12:26:14"
      },
      {
        "time_stamp": "2019-12-18 12:28:18"
      },
      {
        "time_stamp": "2019-12-18 12:54:18"
      },
      {
        "time_stamp": "2019-12-18 12:54:27"
      },
      {
        "time_stamp": "2019-12-18 12:56:43"
      },
      {
        "time_stamp": "2019-12-18 12:57:20"
      },
      {
        "time_stamp": "2019-12-18 13:34:29"
      },
      {
        "time_stamp": "2019-12-18 13:49:04"
      },
      {
        "time_stamp": "2019-12-18 13:49:18"
      },
      {
        "time_stamp": "2019-12-18 14:11:15"
      },
      {
        "time_stamp": "2019-12-18 14:17:26"
      },
      {
        "time_stamp": "2019-12-18 14:21:18"
      },
      {
        "time_stamp": "2019-12-19 03:28:27"
      },
      {
        "time_stamp": "2019-12-19 03:28:42"
      },
      {
        "time_stamp": "2019-12-19 03:34:47"
      },
      {
        "time_stamp": "2019-12-19 08:10:27"
      },
      {
        "time_stamp": "2019-12-19 08:11:47"
      },
      {
        "time_stamp": "2019-12-19 08:12:13"
      },
      {
        "time_stamp": "2019-12-19 08:18:02"
      },
      {
        "time_stamp": "2019-12-19 08:19:55"
      },
      {
        "time_stamp": "2019-12-19 08:20:14"
      },
      {
        "time_stamp": "2019-12-19 08:21:18"
      },
      {
        "time_stamp": "2019-12-19 08:21:53"
      },
      {
        "time_stamp": "2019-12-19 08:23:57"
      },
      {
        "time_stamp": "2019-12-19 08:24:16"
      },
      {
        "time_stamp": "2019-12-19 08:24:27"
      },
      {
        "time_stamp": "2019-12-19 08:25:43"
      },
      {
        "time_stamp": "2019-12-19 08:25:59"
      },
      {
        "time_stamp": "2019-12-19 08:26:05"
      },
      {
        "time_stamp": "2019-12-19 08:27:17"
      },
      {
        "time_stamp": "2019-12-19 08:29:22"
      },
      {
        "time_stamp": "2019-12-19 08:29:36"
      },
      {
        "time_stamp": "2019-12-19 08:33:19"
      },
      {
        "time_stamp": "2019-12-19 08:33:52"
      },
      {
        "time_stamp": "2019-12-19 08:34:08"
      },
      {
        "time_stamp": "2019-12-19 08:35:15"
      },
      {
        "time_stamp": "2019-12-19 09:04:32"
      },
      {
        "time_stamp": "2019-12-19 09:05:57"
      },
      {
        "time_stamp": "2019-12-19 10:34:12"
      },
      {
        "time_stamp": "2019-12-19 10:34:17"
      },
      {
        "time_stamp": "2019-12-19 15:03:09"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-12-17 16:14:34",
    "edited": {
      "time_stamp": "2019-12-17 16:15:00"
    },
    "text": "So the webhook hits a endpoint (you’ve got the webhooks setup yeah?) and then you run some API calls?"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-12-17 16:18:45",
    "edited": {
      "time_stamp": "2019-12-17 16:19:07"
    },
    "text": "If you’re doing that, AND it’s just an internal app it might be less work to just use the API keys from your HS account (for invoking the API/creating deals etc)"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-12-17 16:40:02",
    "text": "Yes the web hook is set up. Using hapi key was my last resort. I was looking for a way to make it work with oauth since it is all set up."
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-12-17 16:50:20",
    "edited": {
      "time_stamp": "2019-12-17 16:53:04"
    },
    "text": "Yeah so I reckon if you stripped out the sessionId logic it’d work. You could tweak it to use/store the portal id? <https://github.com/HubSpot/oauth-quickstart-nodejs/blob/master/index.js#L101>\n\nyou could store it in the cache/db with data from this call: <https://developers.HubSpot.com/docs/methods/oauth2/get-access-token-information>"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-12-17 16:53:47",
    "text": "so refreshTokenStore[hub_id] =xx; and accessTokenCache[hub_id] = xx;"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-12-17 16:55:12",
    "edited": {
      "time_stamp": "2019-12-17 16:56:36"
    },
    "text": "hopefully that makes some sense :smile: but yeah, once you receive a webhook you can use the portalId from that request to look up the access token."
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-12-17 16:57:12",
    "text": "ctrl+f “Webhooks payloads” on <https://developers.HubSpot.com/docs/methods/webhooks/webhooks-overview>"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-12-17 17:17:24",
    "text": "\"You could tweak it to use/store the portal id?\" this what I'm trying to do for quite a while now but without success..."
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-12-17 17:27:55",
    "edited": {
      "time_stamp": "2019-12-17 17:28:16"
    },
    "text": "i’ll give it a go, see if i can make any sense of it"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-12-17 17:59:51",
    "edited": {
      "time_stamp": "2019-12-17 18:00:12"
    },
    "text": "<https://github.com/kieranja/oauth-quickstart-nodejs/blob/master/index.js>"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-12-17 18:04:01",
    "text": "The confirmation page wont work anymore, but easily fixed. Ultimately all it does is\n1. User clicks oauth Install link\n2. Clicks the account/hub to install the app on\n3. Redirected back to /oauth-callback, where exchangeForTokens is called, which I’ve added a call to oauth/v1/access-tokens/ to get information about the access token (the hub id) i then store access token and refresh token in the maps using this\n4. added a route <http://localhost:3000/webhook?hub_id=xxx> to test the API calls. You will need to tweak this to actually have the usual webhook checks (and maybe some IP range restrictions, but you’ll see the idea that you can use the hub_id given to you from the webhooks to find the token."
  }
]