[
  {
    "poster": {
      "poster_name": "Anze",
      "poster_handle": "anzekopko2002"
    },
    "time_stamp": "2024-02-16 07:55:23",
    "edited": {
      "time_stamp": "2024-02-16 07:58:23"
    },
    "text": "Hi everyone,\n\nThere is a huge bug with how the new serverless functions within projects work. When working together with js-building-blocks if i run a deploy and only change something in the js-building-block part of the project and not the severless part the serverless functions deploy but don't work at all (return a 404 when being called)\n\nDoing a random update to any severless functions (so that there is a change) seems to fix this but still seems like a massive bug if someone could have a look at HubSpot"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-16 13:52:07",
    "text": "is there any meaningful difference between using the HubSpot API via serverless functions or running a local server or using Postman? I need to make a series of API calls for internal use only. Any reason not to use serverless functions for that? (it would be slightly more convenient)",
    "reply_count": 13,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-02-16 13:55:28"
      },
      {
        "time_stamp": "2024-02-16 13:57:20"
      },
      {
        "time_stamp": "2024-02-16 13:57:51"
      },
      {
        "time_stamp": "2024-02-16 13:58:18"
      },
      {
        "time_stamp": "2024-02-16 13:59:24"
      },
      {
        "time_stamp": "2024-02-16 14:03:40"
      },
      {
        "time_stamp": "2024-02-16 14:04:33"
      },
      {
        "time_stamp": "2024-02-16 14:05:51"
      },
      {
        "time_stamp": "2024-02-16 14:06:11"
      },
      {
        "time_stamp": "2024-02-16 14:09:34"
      },
      {
        "time_stamp": "2024-02-16 14:10:02"
      },
      {
        "time_stamp": "2024-02-16 14:24:06"
      },
      {
        "time_stamp": "2024-02-16 14:25:50"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Niko Dixon",
      "poster_handle": "niko209"
    },
    "time_stamp": "2024-02-16 13:55:28",
    "text": "I can’t think of any, outside of the obvious one - the run time limit."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-16 13:57:20",
    "text": "hmmm...yea, I don't think I would hit that if I do the work in batches but that's definitely a big one"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-16 13:57:51",
    "text": "I need a way to loop through and process all blog posts on a site (about 700)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-16 13:58:18",
    "text": "but I could definitely do 10 at a time or whatever doesn't cause an issue"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-16 13:59:24",
    "text": "leaning towards doing it over a local server at the moment. hopefully I can just use a bearer token in the same way as serverless—I don't work on the backend too often"
  },
  {
    "poster": {
      "poster_name": "Niko Dixon",
      "poster_handle": "niko209"
    },
    "time_stamp": "2024-02-16 14:03:40",
    "text": "yea, sounds like you’ll be golden either way. You will definitely be able to use the token in the same fashion. I run various scripts utilizing the HS APIs using Node locally, just about daily"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-16 14:04:33",
    "text": "do you use the HubSpot api client? <https://www.npmjs.com/package/@HubSpot/api-client>"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-16 14:05:51",
    "text": "although...looks like that isn't necessarily meant for things like making blog api calls"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-16 14:06:11",
    "text": "can you share any starter code or resources that you've found helpful?"
  },
  {
    "poster": {
      "poster_name": "Niko Dixon",
      "poster_handle": "niko209"
    },
    "time_stamp": "2024-02-16 14:09:34",
    "text": "no, although you likely could if you wanted to. I got scared off from the client a year or 2 ago after spending a few hours trying to figure out an issue with…I think it was the search API, don’t quite recall. But it ended up being due to some strange little detail specific to the client that wasn’t documented anywhere.\n\nI use axios exclusively now.\n\nAnd yea, give me a few and I’ll toss you a pseudo template I use. Standby"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-16 14:10:02",
    "text": "awesome, thank you so much"
  },
  {
    "poster": {
      "poster_name": "Niko Dixon",
      "poster_handle": "niko209"
    },
    "time_stamp": "2024-02-16 14:24:06",
    "text": "I think this would have all of the essential pieces. There’s some extra stuff in there that you’ll obviously want to change and/or delete. But should serve as a halfway decent starting point. I don’t know what IDE you use (I use vs code), but should be a fairly similar process regardless. Just make sure you have Node installed. Highly recommend the CodeRunner extension if you don’t have it already too.\n\nThe counter stuff was something I was tinkering with that was ultimately…not overly useful at all.\n\nIf you were looking more for batching logic - let me know, might be able to find something more specific to that. Not entirely sure what specific areas you’re looking to get additional info on. Regardless, hopefully there’s something useful for you in here.\n\n```const axios = require(\"axios\");\nconst HubSpot = require(\"@HubSpot/api-client\");\nrequire(\"dotenv\").config();\nconst fs = require(\"fs\");\n\n// requires dotenv to be installed and a .env file with the key\nconst hsKey = process.env.key;\n\n(async function () {\n\tconst loopDelay = (ms) =&gt; new Promise((res) =&gt; setTimeout(res, ms));\n\n\tconst mergeDupeContacts = async (hsKey) =&gt; {\n\t\tlet essentialData = JSON.parse(\n\t\t\tfs.readFileSync(\n\t\t\t\t\"/Users/nikod/Code/test/api_templates/identifiedDupes1.json\"\n\t\t\t)\n\t\t);\n\n\t\tlet masterArray = [];\n\t\tlet startTime = performance.now();\n\t\tlet counter = 0;\n\t\tfor (let obj of essentialData) {\n\t\t\tawait loopDelay(30);\n\t\t\tcounter += 1;\n\t\t\tlet mergeOptions = {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\turl: `<https://api.hubapi.com/contacts/v1/contact/merge-vids/${obj.keep.id}>`,\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\tAuthorization: `Bearer ${hsKey}`\n\t\t\t\t},\n\t\t\t\tdata: {\n\t\t\t\t\tvidToMerge: obj.match.id\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (counter % 145 == 0) {\n\t\t\t\tlet endTime = performance.now();\n\t\t\t\tlet timeElapsed = endTime - startTime;\n\t\t\t\tconsole.log(\"time elapsed:\", timeElapsed);\n\n\t\t\t\tif (timeElapsed &lt; 9200) {\n\t\t\t\t\tawait loopDelay(12000 - timeElapsed);\n\t\t\t\t}\n\t\t\t\tstartTime = performance.now();\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tlet mergeRes = await axios(mergeOptions);\n\n\t\t\t\tconsole.log(mergeRes.status);\n\t\t\t\tif (mergeRes.status == 200) {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"merged\",\n\t\t\t\t\t\t`${obj.match.id} with userID ${obj.match.user_wid}`,\n\t\t\t\t\t\t\"into\",\n\t\t\t\t\t\t`${obj.keep.id}with userID ${obj.keep.user_wid}`\n\t\t\t\t\t);\n\t\t\t\t\tmasterArray.push(obj);\n\n\t\t\t\t\tlet finishedFileData = JSON.parse(\n\t\t\t\t\t\tfs.readFileSync(\n\t\t\t\t\t\t\t\"/Users/nikod/Code/test/api_templates/mergedAlready.json\"\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\tfinishedFileData.push(obj);\n\n\t\t\t\t\tfs.writeFileSync(\n\t\t\t\t\t\t\"/Users/nikod/Code/test/api_templates/mergedAlready.json\",\n\t\t\t\t\t\tJSON.stringify(finishedFileData)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tfs.appendFileSync(\n\t\t\t\t\t\"/Users/nikod/Code/test/api_templates/mergeErrors.txt\",\n\t\t\t\t\tJSON.stringify(`${err}` + \"\\n\")\n\t\t\t\t);\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t};\n\n\tmergeDupeContacts(hsKey);\n})();```"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-16 14:25:50",
    "text": "amazing, thank you. that definitely helps as a great starting point and to help make the concept click"
  }
]