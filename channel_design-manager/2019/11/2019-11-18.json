[
  {
    "poster": {
      "poster_name": "geoff",
      "poster_handle": "geoffroy"
    },
    "time_stamp": "2019-11-18 09:34:51",
    "text": "Hi there. I think I’ve found a bug with the CSS minification. The uploaded CSS contains few @supports rule like:\n&gt; `@supports((-o-object-fit: cover) or (object-fit:cover)){`\nWhen loaded in the browser, they turn to (notice the space missing after ‘or’:\n&gt; `@supports((-o-object-fit: cover) or(object-fit:cover)) {`\nThis cause Chrome to skip all these rules.",
    "reply_count": 21,
    "reply_users_count": 6,
    "replies": [
      {
        "time_stamp": "2019-11-18 09:38:49"
      },
      {
        "time_stamp": "2019-11-18 09:42:17"
      },
      {
        "time_stamp": "2019-11-18 09:42:45"
      },
      {
        "time_stamp": "2019-11-18 09:43:17"
      },
      {
        "time_stamp": "2019-11-18 09:44:03"
      },
      {
        "time_stamp": "2019-11-18 09:44:57"
      },
      {
        "time_stamp": "2019-11-18 09:47:04"
      },
      {
        "time_stamp": "2019-11-18 09:48:31"
      },
      {
        "time_stamp": "2019-11-18 09:51:11"
      },
      {
        "time_stamp": "2019-11-18 09:52:40"
      },
      {
        "time_stamp": "2019-11-18 10:00:58"
      },
      {
        "time_stamp": "2019-11-18 10:07:29"
      },
      {
        "time_stamp": "2019-11-18 11:31:36"
      },
      {
        "time_stamp": "2019-11-18 11:31:54"
      },
      {
        "time_stamp": "2019-11-18 11:34:05"
      },
      {
        "time_stamp": "2019-11-18 11:34:13"
      },
      {
        "time_stamp": "2019-11-18 11:34:26"
      },
      {
        "time_stamp": "2019-11-18 11:34:48"
      },
      {
        "time_stamp": "2019-11-18 13:10:44"
      },
      {
        "time_stamp": "2019-11-18 13:30:59"
      },
      {
        "time_stamp": "2019-11-19 06:44:08"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-11-18 09:38:49",
    "text": "<@U7SL518D6> <@U2H3TT8F2>"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-11-18 09:42:17",
    "text": "Hi <@UBM2D9L5N> at the current moment, using `@supports` will cause minification to break."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-11-18 09:42:45",
    "text": "<@U6TBZ66FN>"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-11-18 09:43:17",
    "text": "a work around is to upload into the file manager the @supports pre minified"
  },
  {
    "poster": {
      "poster_name": "geoff",
      "poster_handle": "geoffroy"
    },
    "time_stamp": "2019-11-18 09:44:03",
    "text": "OK, but how to prevent minification then?"
  },
  {
    "poster": {
      "poster_name": "Libo Song",
      "poster_handle": "lsong"
    },
    "time_stamp": "2019-11-18 09:44:57",
    "text": "<@U2H3TT8F2> is right. We do not minify when the CSS contains `@supports`. <@U6GNQ7JBU>"
  },
  {
    "poster": {
      "poster_name": "geoff",
      "poster_handle": "geoffroy"
    },
    "time_stamp": "2019-11-18 09:47:04",
    "text": "But it seems it does (my file is already pre-minified). It’s uploaded as jenga.css and then in the browser a jenga.min.css is loaded."
  },
  {
    "poster": {
      "poster_name": "geoff",
      "poster_handle": "geoffroy"
    },
    "time_stamp": "2019-11-18 09:48:31",
    "text": "At least there are some transformations on it"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-11-18 09:51:11",
    "text": "I will try to fix"
  },
  {
    "poster": {
      "poster_name": "Libo Song",
      "poster_handle": "lsong"
    },
    "time_stamp": "2019-11-18 09:52:40",
    "edited": {
      "time_stamp": "2019-11-18 09:52:59"
    },
    "text": "Yeah, The new minifier does, but there is a bug :disappointed:"
  },
  {
    "poster": {
      "poster_name": "geoff",
      "poster_handle": "geoffroy"
    },
    "time_stamp": "2019-11-18 10:00:58",
    "text": "Great thanks"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-11-18 10:07:29",
    "text": "Looks like this is an open issue <https://github.com/fmarcia/UglifyCSS/issues/71>, let me see if I can fix on our end"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-11-18 11:31:36",
    "text": "<@UBM2D9L5N> I made the fix, I will let you know when it is available for you to republish your file"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-11-18 11:31:54",
    "text": "ooh ooh.. will this allow for @supports?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-11-18 11:34:05",
    "text": "It fixes the whitespace bug for media queries"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-11-18 11:34:13",
    "text": "ah"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-11-18 11:34:26",
    "text": "We were handling `and` but not `or` and not `not`"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-11-18 11:34:48",
    "text": "so you were handling `not` :wink:"
  },
  {
    "poster": {
      "poster_name": "geoff",
      "poster_handle": "geoffroy"
    },
    "time_stamp": "2019-11-18 13:10:44",
    "text": "<@U6GNQ7JBU> Thank you, looking forward to it."
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-11-18 13:30:59",
    "text": "Try publishing the file again"
  },
  {
    "poster": {
      "poster_name": "Frank Ladd",
      "poster_handle": "frank"
    },
    "time_stamp": "2019-11-18 18:28:22",
    "edited": {
      "time_stamp": "2019-11-18 21:16:54"
    },
    "text": "I have coded an all-new version of a website page template and want to replace an existing page in my website using the content staging replacement process. *Here's the question:* the page I want to replace has two A/B test versions. Can I select one of the A/B test pages as the page to replace, and will that leave the other A/B test page as-is (and still functioning), or will it swap the template for both, or will it simply break the A/B test? (Or should I stop the A/B test and leave only one live page to swap via content staging?) I'm trying to get a handle on what the variables and options are."
  }
]