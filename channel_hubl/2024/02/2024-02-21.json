[
  {
    "poster": {
      "poster_name": "Alberto Zordan",
      "poster_handle": "alberto.zordan"
    },
    "time_stamp": "2024-02-21 01:13:44",
    "text": "Oh! :open_mouth: Can you please provide a link to where you read that?"
  },
  {
    "poster": {
      "poster_name": "Alberto Zordan",
      "poster_handle": "alberto.zordan"
    },
    "time_stamp": "2024-02-21 01:32:41",
    "text": "Ops found it, guess it's this\n<https://developers.HubSpot.com/docs/cms/developer-reference/cdn/prerendering#incompatible-features>"
  },
  {
    "poster": {
      "poster_name": "Alberto Zordan",
      "poster_handle": "alberto.zordan"
    },
    "time_stamp": "2024-02-21 06:05:50",
    "text": "<@U3T21PDBK> do you think that a JS solution (as HS suggests) is appropriate? Like a simple `new Date().getFullYear()` ?"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2024-02-21 06:15:12",
    "text": "Idk imo I think we should be able to display the year without js. This is a feature in other langs \n\nThe year can be safely cached for 99% of the year lol"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2024-02-21 06:16:52",
    "text": "That’s what’s ideal. I understand using js for request vars… but for the year - come on HubSpot! :melting_face:  "
  },
  {
    "poster": {
      "poster_name": "Alberto Zordan",
      "poster_handle": "alberto.zordan"
    },
    "time_stamp": "2024-02-21 06:19:47",
    "text": "Yeah, I think it's a fair point :sweat_smile:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-02-21 06:43:31",
    "text": "Wow, I did not know this. Thanks for bringing this up! "
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-02-21 06:55:18",
    "text": "oh man. `&lt;span&gt;© {{ year }} All rights reserved.` boilerplate killing us here with our prerender."
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2024-02-21 07:23:59",
    "text": "```document.addEventListener('DOMContentLoaded', function() {\n  const currentYear = new Date().getFullYear(); // Get the current year\n\n  function replaceYear(node) {\n    if (node.nodeType === Node.TEXT_NODE) { // Check if the node is a text node\n      node.nodeValue = node.nodeValue.replace(/\\[\\[ year \\]\\]/g, currentYear);\n    } else if (node.nodeType === Node.ELEMENT_NODE) { // If it's an element node, recurse on its children\n      node.childNodes.forEach(replaceYear);\n    }\n  }\n\n  replaceYear(document.body); // Start the replacement from the body of the document\n});```\nNow your content editors can use `[[ year ]]` anywhere in your theme :handshake::skin-tone-2:"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2024-02-21 07:24:42",
    "text": "this shouldn’t destructively change html and restart any event listeners"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2024-02-21 07:25:16",
    "text": "it’s terrible we have to do this though"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2024-02-21 07:26:57",
    "text": "not to mention the possible layout shifts…"
  },
  {
    "poster": {
      "poster_name": "Libo Song",
      "poster_handle": "lsong"
    },
    "time_stamp": "2024-02-21 07:57:24",
    "edited": {
      "time_stamp": "2024-02-21 07:58:01"
    },
    "text": "I think we don't defer `{{ year }}` any more. It should be fully pre-rednered if the page uses none of the other incompatible variables. We need to update the doc."
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2024-02-21 07:58:48",
    "text": "that would be amazing <@U6TBZ66FN>! Can you confirm with 100% certainty?"
  },
  {
    "poster": {
      "poster_name": "Libo Song",
      "poster_handle": "lsong"
    },
    "time_stamp": "2024-02-21 07:59:36",
    "text": "Yes, I just checkout out code :smile: ."
  },
  {
    "time_stamp": "2024-02-21 08:10:23",
    "text": "pitchforks away"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-02-21 08:10:30",
    "text": "get outta here with the pitchforks!"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2024-02-21 08:11:12",
    "text": "hahaha i JUST put mine back in the shed :rolling_on_the_floor_laughing:"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-02-21 08:21:06",
    "text": "good job on being solutions oriented and making that script <@U3T21PDBK>"
  }
]