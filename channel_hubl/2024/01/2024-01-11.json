[
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2024-01-11 04:35:33",
    "text": "I tried this and am getting this error"
  },
  {
    "text": "",
    "time_stamp": "2024-01-11 04:35:36"
  },
  {
    "text": "It is putting the variable for the key and not the dynamic value",
    "time_stamp": "2024-01-11 04:46:03"
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2024-01-11 04:49:09",
    "text": "```loop.index|string```\n"
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2024-01-11 05:27:12",
    "text": "Hi Matt. I tried that also and it prints \"loop.index\""
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2024-01-11 05:35:14",
    "text": "that’s odd,\nI guess you could do\n`{% set index= loop.index|string %}`\n\nand then use `index` as the key\nor maybe it just needs to be in brackets\n\n```{% do systemsPrices.update( { (loop.index)|string : row.price } ) %}```\n"
  },
  {
    "poster": {
      "poster_name": "Ankit",
      "poster_handle": "ankit188"
    },
    "time_stamp": "2024-01-11 11:10:12",
    "edited": {
      "time_stamp": "2024-01-11 11:10:43"
    },
    "text": "Hi, All\nIs there any way, we can use api call  in hubl, like nodeJs",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2024-01-11 11:34:13"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Harun Kumar Siva",
      "poster_handle": "harun"
    },
    "time_stamp": "2024-01-11 11:34:13",
    "text": "Short answer No. Some perspective <https://HubSpotdev.slack.com/archives/C04AY1H2204/p1699536809612159?thread_ts=1699094767.160619&amp;cid=C04AY1H2204|here> although it is not about hubl."
  },
  {
    "text": "Hey Everyone,  I have this JS code:\n`const getValuesFromHS = (id) =&gt; {`\n  `const HSData = document.getElementById(\"HSData\")`\n\n  `HSData.innerHTML = ``\n  `{% set ISID = \"${id}\" %}`\n  `{{ISID|pprint}}&lt;br&gt;`\n  `{{ISID|int}}`\n  ```\n`}`\n\nAnd when I run `getValuesFromHS(<tel:6758979473|6758979473>)` I get this (screenshot) in my HTML\n\nWhy the `pprint` says it's a string, but when I try to convert it to an int, it doesn't work :thinking_face:",
    "time_stamp": "2024-01-11 14:43:30",
    "reply_count": 36,
    "reply_users_count": 5,
    "replies": [
      {
        "time_stamp": "2024-01-11 14:45:04"
      },
      {
        "time_stamp": "2024-01-11 14:47:46"
      },
      {
        "time_stamp": "2024-01-11 14:48:24"
      },
      {
        "time_stamp": "2024-01-11 15:00:03"
      },
      {
        "time_stamp": "2024-01-11 15:00:38"
      },
      {
        "time_stamp": "2024-01-11 15:01:25"
      },
      {
        "time_stamp": "2024-01-11 15:02:11"
      },
      {
        "time_stamp": "2024-01-11 15:03:35"
      },
      {
        "time_stamp": "2024-01-11 15:05:05"
      },
      {
        "time_stamp": "2024-01-11 15:08:31"
      },
      {
        "time_stamp": "2024-01-11 15:10:10"
      },
      {
        "time_stamp": "2024-01-11 15:10:16"
      },
      {
        "time_stamp": "2024-01-11 15:13:20"
      },
      {
        "time_stamp": "2024-01-11 15:15:12"
      },
      {
        "time_stamp": "2024-01-11 15:15:49"
      },
      {
        "time_stamp": "2024-01-11 15:21:12"
      },
      {
        "time_stamp": "2024-01-11 15:22:45"
      },
      {
        "time_stamp": "2024-01-11 15:23:22"
      },
      {
        "time_stamp": "2024-01-11 15:23:48"
      },
      {
        "time_stamp": "2024-01-11 15:23:56"
      },
      {
        "time_stamp": "2024-01-11 15:24:57"
      },
      {
        "time_stamp": "2024-01-11 15:25:27"
      },
      {
        "time_stamp": "2024-01-11 15:27:14"
      },
      {
        "time_stamp": "2024-01-11 15:28:10"
      },
      {
        "time_stamp": "2024-01-11 15:30:42"
      },
      {
        "time_stamp": "2024-01-11 15:30:51"
      },
      {
        "time_stamp": "2024-01-11 15:32:23"
      },
      {
        "time_stamp": "2024-01-11 15:33:46"
      },
      {
        "time_stamp": "2024-01-11 16:07:08"
      },
      {
        "time_stamp": "2024-01-11 16:09:20"
      },
      {
        "time_stamp": "2024-01-11 16:35:50"
      },
      {
        "time_stamp": "2024-01-11 16:54:54"
      },
      {
        "time_stamp": "2024-01-11 17:34:57"
      },
      {
        "time_stamp": "2024-01-11 18:32:10"
      },
      {
        "time_stamp": "2024-01-11 18:32:39"
      },
      {
        "time_stamp": "2024-01-12 11:20:58"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Julian Vidal",
      "poster_handle": "julian.vidal123"
    },
    "time_stamp": "2024-01-11 14:45:04",
    "text": "<@U01QVR44MEY> <@U7SL518D6> - You're my hope :pray:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2024-01-11 14:47:46",
    "text": "Out of curiosity what are you needing that id for, in which you need it to be an integer?"
  },
  {
    "poster": {
      "poster_name": "Julian Vidal",
      "poster_handle": "julian.vidal123"
    },
    "time_stamp": "2024-01-11 14:48:24",
    "text": "To use the crm_object function"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2024-01-11 15:00:03",
    "edited": {
      "time_stamp": "2024-01-11 15:01:05"
    },
    "text": "okay so the issue is that you're mixing HubL and JavaScript.\n\nHubL is serverside, so it runs first, JavaScript is client side, it runs after the page has finished loading."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2024-01-11 15:00:38",
    "text": "So the id you're passing in JavaScript is not set and accessible to the HubL"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-01-11 15:01:25",
    "text": "HubL runs on the server before the js runs on the clients, so it's a little bit of a race condition"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-01-11 15:02:11",
    "text": "Is it possible that the id is accessible to HubL before it gets put on the page?"
  },
  {
    "poster": {
      "poster_name": "Julian Vidal",
      "poster_handle": "julian.vidal123"
    },
    "time_stamp": "2024-01-11 15:03:35",
    "text": "Intersting. If that's the case, then `{{ISID|pprint}}&lt;br&gt;` should be blank, no? That's HubL code within a JS file."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-01-11 15:05:05",
    "text": "Do you have your full code?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2024-01-11 15:08:31",
    "text": "theoretically - yes. I don't know how the id would come through from the JS file to the HubL like that. They're separate runtimes and server/client side."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-01-11 15:10:10",
    "text": "Could be that there's a HubL defined ID var"
  },
  {
    "poster": {
      "poster_name": "Julian Vidal",
      "poster_handle": "julian.vidal123"
    },
    "time_stamp": "2024-01-11 15:10:16",
    "text": "I know, that's driving me crazy.\n\nThis is my HTML code:\n\n`{% extends \"./layouts/basev13.html\" %}`\n`{% block body %}`\n    `{{ require_js(get_asset_url(\"../js/updateISv13.js\")) }}`\n    `&lt;div id=\"HSData\"&gt;&lt;/div&gt;`    \n`{% endblock body %}`\n\nAnd this is my updateISV13.js file:\n`const getValuesFromHS = (id) =&gt; {`\n  `const HSData = document.getElementById(\"HSData\")`\n\n  `HSData.innerHTML = ``\n  `{% set ISID = \"${id}\" %}`\n  `{{ISID|pprint}}&lt;br&gt;`\n  `{{ISID|int}}`\n  ```\n`}`\n\nFrom  chrome dev tools I run `getValuesFromHS(<tel:6758979473|6758979473>)`"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-01-11 15:13:20",
    "text": "that is very very strange"
  },
  {
    "poster": {
      "poster_name": "Julian Vidal",
      "poster_handle": "julian.vidal123"
    },
    "time_stamp": "2024-01-11 15:15:12",
    "edited": {
      "time_stamp": "2024-01-11 15:15:54"
    },
    "text": "I tried to use a HubL variable since ID is a URL param, but that's not available through request.query because the url I get from there is <http://private-na1.hubapi.com/al/render?portalId=XXX&templateId=XXX&templatePath=membership%2Fmembership-theme%2Fjs%2FupdateISv13.js> instead of my domain: <http://test.com/update-is?id=123|test.com/update-is?id=123>. I guess that happens because the request is done from the JS"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-01-11 15:15:49",
    "text": "Could you share what you're trying to build? Could probably help you rewrite it so that the HubL and Javascript run seperately"
  },
  {
    "poster": {
      "poster_name": "Julian Vidal",
      "poster_handle": "julian.vidal123"
    },
    "time_stamp": "2024-01-11 15:21:12",
    "text": "Sure, I have a portal where logged in users can fill out an application form (with ~150 fields) that's saved within a HubSpot custom object.\n\nI implemented an autosave every 5min feature for the form (because some contacts didn't hit the save button). That autosave works, but when a contact opens the same form in multiple tabs the data is overwritten.\n\n So, I want that before triggering the autosave function, get the current values of the custom object record and only update those that are blank. I wanted to use HubL to get the current data in HubSpot instead of API calls to avoid reaching the API limit.\n\nHope that makes sense :sweat_smile:"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-01-11 15:22:45",
    "text": "yeah that's a little tough, so basically you can get the currently values of the fields when you first load the page. But everything after the page load will require a page refresh to get new data"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-01-11 15:23:22",
    "text": "So what I would do for this particular use case would be to setup a serverless function to handle the property updates"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-01-11 15:23:48",
    "text": "Before you update the object using the serverless function you can pull the object and check for the blank properties and only overwrite those"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-01-11 15:23:56",
    "text": "Does that make sense?"
  },
  {
    "poster": {
      "poster_name": "Julian Vidal",
      "poster_handle": "julian.vidal123"
    },
    "time_stamp": "2024-01-11 15:24:57",
    "text": "Makes sense, I do have tons of serverless functions but those use JS to make API calls, I wanted to use HubL but seems like my only option is using JS purely"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-01-11 15:25:27",
    "edited": {
      "time_stamp": "2024-01-11 15:26:05"
    },
    "text": "Yeah I mean using axios with your nodejs serverless function wouldn't be too difficult"
  },
  {
    "poster": {
      "poster_name": "Julian Vidal",
      "poster_handle": "julian.vidal123"
    },
    "time_stamp": "2024-01-11 15:27:14",
    "text": "Totally, I was hesitant to that because there are ~500 active users using the portal, if many of them use the platform at the same time, we may hit the HS API limit (I’m using patch request to reduce requests as much as possible)"
  },
  {
    "poster": {
      "poster_name": "Julian Vidal",
      "poster_handle": "julian.vidal123"
    },
    "time_stamp": "2024-01-11 15:28:10",
    "edited": {
      "time_stamp": "2024-01-11 15:29:08"
    },
    "text": "At least I’m glad to know that what I was getting was weird/unexpected and I’m not crazy. Thanks <@U01QVR44MEY> and <@U7SL518D6> !! "
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-01-11 15:30:42",
    "text": "Yeah and one thing to keep in mind is that you can retry request for up to 20 seconds with CMS functions, and even then if you don't get a success you can just send a 429 to the client and tell them to retry which buys you another 20 seconds of trying"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-01-11 15:30:51",
    "text": "just make sure to use some exponential backoff"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-01-11 15:32:23",
    "text": "Make sure you also use a separate private app token from all your other HubSpot API usage, each api token has it's own limits (10 reqs / second). You don't want an entirely separate process to be bogging down your member portal"
  },
  {
    "poster": {
      "poster_name": "Julian Vidal",
      "poster_handle": "julian.vidal123"
    },
    "time_stamp": "2024-01-11 15:33:46",
    "text": "Absolutely, thanks for the feedback! "
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-01-11 16:07:08",
    "edited": {
      "time_stamp": "2024-01-11 16:07:12"
    },
    "text": "I’d suggest saving this data to local storage on form blur or change or input — whatever you feel like\n\non page load, fill in those fields from local storage\n\nwhen a user saves, send it to HubSpot\n\nYou could also implement some sort of push to the forms api (not sure what api you are using currently for these updates) upon page load or upon specific changes"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-01-11 16:09:20",
    "text": "not sure if you are currently using the forms api for this, but at some point there was a limit on form submissions for contact, not sure if that still exists — something like 1000 submissions per form or all forms. So if you are sending to form api every 5 minutes that might be an issue — <@U7SL518D6> is that still a thing??"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2024-01-11 16:35:50",
    "edited": {
      "time_stamp": "2024-01-11 16:36:54"
    },
    "text": "+1 to what nick is saying re: local storage. Some users may not expect forms to automatically save/write to the database, and it could also put you in a little bit of a tricky spot opt-in and privacy wise, especially in the EU and California. If you need to do this, I would say ensure you have consent up front, otherwise I think Nick's solution (with a timeout) is the best bet here"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-01-11 16:54:54",
    "text": ":fire: stuff guys"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2024-01-11 17:34:57",
    "text": "Yes there's a limit to form submissions via API when unauthed. Using a serverless function and auth you can go higher. I forget the specifics atm. Am not at my computer."
  },
  {
    "poster": {
      "poster_name": "Axel",
      "poster_handle": "aobscura"
    },
    "time_stamp": "2024-01-11 17:53:08",
    "text": "Hi All, how can i convert this: *[{price_low__lte=1500}, {beds__gte=2}, {baths_low__gte=2}]* to a string like this: *&amp;price_low__lte=1300&amp;beds__gte=2&amp;available_count__gte=1?,* thank you!",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-01-12 11:08:22"
      },
      {
        "time_stamp": "2024-01-12 11:22:37"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-01-11 18:32:10",
    "text": "thanks <@UQERM7BLY> i hate to be the “privacy” guy but marketing events and what not are one thing and can be opted out of with cookie control and what not. but when you are trying to be somewhat responsible with privacy, unless you get consent to autosave local storage is the best option for this. \n\nnot everyone points their compass on that path, but it has to be said. thanks man"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-01-11 18:32:39",
    "text": "np jon!!"
  }
]