[
  {
    "poster": {
      "poster_name": "Robbie Maltby",
      "poster_handle": "robbie"
    },
    "time_stamp": "2021-12-09 03:18:24",
    "text": "Much better. Thanks Mark :+1:"
  },
  {
    "poster": {
      "poster_name": "Neil Carpenter",
      "poster_handle": "neil295"
    },
    "time_stamp": "2021-12-09 03:55:02",
    "text": "What do you mean?"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2021-12-09 08:20:06",
    "text": "Hey <@U02PP69P9T8> Timeline Events are not supported on Custom Objects at this time. It’s something we’re thinking about but have more work to do on Custom Object parity with native objects before we can turn our attention to extension points like this. Did you have a particular use case in mind I can share with the team?"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "lchausse"
    },
    "time_stamp": "2021-12-09 09:09:45",
    "text": "Hey <@U01K5P6M9PY>. Thanks for your answer.\n\nWe are working with a lot of software companies and recommend them to create a custom object for \"Account/Portal\" instead of pushing customer information onto the company object since a company can have access to multiple account/portal.\n\nWe are looking for a way to log into HubSpot key users and account events (cancellation, upgrade, etc.). The custom behavioural event API is nice to do that but if I am not mistaken this will only be visible on the contact record. Timeline event API is more suitable since it allows to post events on contact, company and deal (according to doc tickets are not supported, is that right?).. If this could be available for all objects that would be awesome."
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2021-12-09 09:16:47",
    "text": "That’s correct that CBEs are contact specific since the goal was to capture what individuals do and use attribution reporting to capture how those interactions impact the rest of the CRM. I can see where those types of events would be useful on other records and I’ll let the team that owns this know about this ask"
  },
  {
    "poster": {
      "poster_name": "Nick Ostreim",
      "poster_handle": "nick149"
    },
    "time_stamp": "2021-12-09 09:45:18",
    "text": "Copying this here: <https://HubSpotdev.slack.com/archives/C22PU4LV8/p1638828446347300>\n\nIn my authentication flow, if I replace the scope `contacts` with granular `crm.x.y` scopes I get an authentication error. I'm curious if I can leave in `contacts` or if that will break in February.",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2021-12-09 09:57:26"
      },
      {
        "time_stamp": "2021-12-09 12:08:06"
      },
      {
        "time_stamp": "2021-12-09 12:11:02"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2021-12-09 09:57:26",
    "text": "You should be good to go.  the granular scopes should be migrated automatically for you.  Once it has, you will receive an email saying as much.  At this point, you will need to update your install url to reflect the new scopes.  This will be for all *future installs*"
  },
  {
    "poster": {
      "poster_name": "Natália Dartora",
      "poster_handle": "natalia.dartora"
    },
    "time_stamp": "2021-12-09 10:31:49",
    "text": "<@U02JU710E73> like this: <https://www.w3schools.com/js/js_async.asp>"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "lchausse"
    },
    "time_stamp": "2021-12-09 11:02:56",
    "text": "Cool thanks. And can you confirm that tickets are not supported in the timeline event API?"
  },
  {
    "poster": {
      "poster_name": "Nick Ostreim",
      "poster_handle": "nick149"
    },
    "time_stamp": "2021-12-09 12:08:06",
    "text": "Hey Dennis, thanks for the reply. I found the root of the problem: I was attempting to authenticate against a test app that had not yet migrated to the new scopes. All is well now :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2021-12-09 12:11:02",
    "text": "even better!"
  },
  {
    "poster": {
      "poster_name": "Marcelo Eduardo Da Ros Arana",
      "poster_handle": "marcelo.daros"
    },
    "time_stamp": "2021-12-09 15:43:30",
    "text": "HI!!!! We are submitting one form by API\nfrom an external application\nbut the response is 400 Unable to parse form content\ndo you know why do we receive that error message?"
  },
  {
    "poster": {
      "poster_name": "Marcelo Eduardo Da Ros Arana",
      "poster_handle": "marcelo.daros"
    },
    "time_stamp": "2021-12-09 15:45:09",
    "text": "$ip_addr = $_SERVER['REMOTE_ADDR']; //IP address too.\n        $hs_context = array(\n            'hutk' =&gt; $HubSpotutk,\n            'ipAddress' =&gt; $ip_addr,\n            'pageUrl' =&gt; \"<https://XXYY.com>\",\n            'pageName' =&gt; 'QE,\n        );\n        $hs_context_json = json_encode($hs_context);\n\n        $str_post = \"email=<mailto:a@b.com|a@b.com>\"\n        . \"&amp;link_de_resultados=\".$url_props\n        . \"&amp;hs_context=\" . urlencode($hs_context_json);\n\n        $endpoint = '<https://forms.HubSpot.com/uploads/form/v2/>' . $portalid . '/' . $formGuid;\n        try {\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $str_post);\n            curl_setopt($ch, CURLOPT_URL, $endpoint);\n            curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n                'Content-Type: application/x-www-form-urlencoded',\n            ));\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            $response = curl_exec($ch); //Log the response from HubSpot as needed.\n            $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); //Log the response status code\n            curl_close($ch);\n\n            \\Log::info($response);\n        } catch (Exception $e) {\n            \\Log::debug('Error' . $e-&gt;getMessage());\n        }"
  }
]