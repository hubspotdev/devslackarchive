[
  {
    "poster": {
      "poster_name": "Jon Oates",
      "poster_handle": "jonathon.oates"
    },
    "time_stamp": "2018-06-04 02:50:41",
    "text": "Has anyone had issues with smart content always showing the default instead of adhering to the set rules? HS support have confirmed our lists are correct, but emails going out which should be smart are just defaulting to the original copy."
  },
  null,
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2018-06-04 13:09:19",
    "text": "Anyone out there know if it's possible to insert HUBL via jquery or javascript?  i.e.  ``` $(\".resourceViewer\").html('&lt;div&gt;{% set posts = blog_recent_posts(\"default\", 5) %}{% for post in posts %}&lt;h3&gt;&lt;a href=\"{{ post.absolute_url }}\"&gt;{{ post.name }}&lt;/a&gt;&lt;/h3&gt;&lt;img src=\"{{ post.featured_image }}\" alt=\"{{ post.name }}\"&gt;{% endfor %}&lt;/div&gt;');```"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-06-04 13:12:02",
    "text": "The HUBL is evaluated on HubSpot's server so can't be injected client-side"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2018-06-04 13:13:30",
    "text": "Ah... thought that was the case"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2018-06-04 13:13:40",
    "text": "thanks <@U6GNQ7JBU>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-04 13:18:56",
    "text": "<@U54TVT3C1> if it helps with what you’re trying to do, you could include hubl in your javascript to set a var equal to the hubl output. So if you’re trying to render something using JS you CAN do it that way."
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2018-06-04 14:09:55",
    "text": "<@U7SL518D6> Don't think that will quite work in this case.  I think I'm dreaming too big with what I'm trying to build"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-04 14:10:40",
    "text": "if you can talk about it, what is it you’re trying to do?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-04 14:12:31",
    "text": "because if you need to return HubL you could essentially create your own API on HS using query params. kick out HubL values by using javascript to ping a url with the parameter. Just understand you will deal with some caching issues during development"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2018-06-04 14:14:11",
    "text": "Basically, I'm building a modal do display a \"playlist\" of content (videos, pdfs, external blog posts)"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2018-06-04 14:15:50",
    "text": "I'm trying to figure out a way to display a single blog specific blog post.  Was hoping to just do a simple hubl loop instead of having to do an AJAX call to the blog API",
    "reply_count": 0,
    "reply_users_count": 0,
    "replies": []
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-04 14:18:16",
    "text": "Will this not work?<https://designers.HubSpot.com/en/docs/hubl/hubl-supported-functions#blog-post-by-id>\n\nIt’s HubL only, so if you need to be able to dynamically change it then it wont work, but not sure you need to do that"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-04 14:18:42",
    "edited": {
      "time_stamp": "2018-06-04 14:18:54"
    },
    "text": "oh sorry you said external blog post, so you need a URL"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-04 14:19:28",
    "text": "<@U54TVT3C1> <@U7SL518D6> I want to help but I can't figure out what it is you're trying to accomplish lol"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2018-06-04 14:19:53",
    "text": "lol.  I have that same problem myself sometimes."
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2018-06-04 14:21:30",
    "text": "basically, I'm trying to build a module that displays content in a modal.  I'm hoping to be able to add this modal module to a website page and display single blog posts",
    "reply_count": 5,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2018-06-04 14:22:27"
      },
      {
        "time_stamp": "2018-06-04 14:22:55"
      },
      {
        "time_stamp": "2018-06-04 14:23:44"
      },
      {
        "time_stamp": "2018-06-04 14:24:06"
      },
      {
        "time_stamp": "2018-06-05 07:58:33"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-04 14:22:27",
    "text": "Jon's answer about Blog_post_by_id... would that not be appropriate for you"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-04 14:22:55",
    "text": "You can put blog posts anywhere using that"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2018-06-04 14:23:44",
    "text": "It comes very close... the problem is that I'm trying to inject that `blog_post_by_id` hubl into a container using jquery"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-04 14:24:05",
    "edited": {
      "time_stamp": "2018-06-04 14:25:18"
    },
    "text": "I think I understand where the issue lies Ian, you’re generating the modal on the fly.\n\nHere’s the secret, have the html for the modal already in the page, use the hubl code to pull the blog post use jquery to simply toggle the visibility of the modal\n\nThis library can make it easy if you’ve been trying to write the modal yourself, <http://dimsemenov.com/plugins/magnific-popup/>"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-04 14:24:06",
    "text": "why?"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-04 14:24:19",
    "text": "Yep"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-04 14:24:57",
    "text": "You could even load up a whole bunch of blog posts into an object in local storage then just jquery the data in as needed based on specific element clicks"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-04 14:26:12",
    "text": "if you don't hate the idea of refreshes, you could reload the page as well and regenerate the Blog_post_by_id() call with a query_dict param in it for the id"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-04 14:26:24",
    "text": "based on the element clicked on the page"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-04 14:26:32",
    "edited": {
      "time_stamp": "2018-06-04 14:26:37"
    },
    "text": "(surely not ideal, but it would work)"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2018-06-04 14:26:57",
    "text": "or use an inline script if you really need hubl in your js"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-04 14:27:23",
    "edited": {
      "time_stamp": "2018-06-04 14:27:46"
    },
    "text": "or another method though HS staff may not advise it. \n\nset up your blog post template so if it has a certain query parameter, it returns json instead of the normal post. Then you can again use it like your own little api, then you can pull just the data the user wants at that time."
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-04 14:28:31",
    "text": "as <@U7SL518D6> mentioned earlier, you can store the results of the blog_post_by_id call in a JS var and just use that as well"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-04 14:28:52",
    "text": "Has anyone experimented with iframing a blog ?"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-04 14:29:09",
    "text": "You might also be able to switch the frame source to be the specific post you want"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-04 14:29:18",
    "text": "there’s an interesting idea"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2018-06-04 14:29:44",
    "text": "I think iframing might be the best course of action"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-04 14:30:37",
    "text": "What's even more interesting is that since it's not cross-domain you might even be able to get away with manipulating the html within the frame",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2018-06-04 14:31:34"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-04 14:31:09",
    "text": "O_o"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-04 14:31:34",
    "text": "assuming you're loading posts from the same HubSpot account as the one your calling the frame for"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2018-06-04 14:33:05",
    "text": "whoa... hadn't even thought about that"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-04 14:33:16",
    "text": "“I think iframing might be the best course of action”\ni think I fell into a black hole, just a test…. Are html tables “cool”?",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-06-04 14:33:55"
      },
      {
        "time_stamp": "2018-06-04 14:35:40"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-04 14:33:55",
    "text": "I love me a good table structure"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2018-06-04 14:34:58",
    "text": "I mean.... HTML tables have always been cool"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2018-06-04 14:35:26",
    "text": "vertically centring a decade before flexbox?",
    "reply_count": 4,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2018-06-04 14:36:45"
      },
      {
        "time_stamp": "2018-06-04 14:37:51"
      },
      {
        "time_stamp": "2018-06-04 14:38:27"
      },
      {
        "time_stamp": "2018-06-04 14:39:05"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-04 14:35:40",
    "text": "oh gawd, Michael J Fox jokes, iframes, tables, where the hell is the delorean!?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-04 14:36:45",
    "text": "I’ll give you that one.\n\nI can’t tell you how many friggin times I’ve opened <https://css-tricks.com/centering-css-complete-guide/>"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-06-04 14:37:51",
    "text": "definitely one of my most-visited pages of all time lol"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-04 14:38:27",
    "text": "(┛°□°)┛彡┻━┻"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-04 14:39:05",
    "text": "I’ve used the position absolute \nleft 50 top 50 transform:translate(-50%,-50%)\n\nSo many times I created a shortcut for it."
  },
  {
    "poster": {
      "poster_name": "jherson",
      "poster_handle": "jherson.onairam"
    },
    "time_stamp": "2018-06-04 15:26:50",
    "text": "hello, how to show relational posts\nwith hubl code ?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-04 15:31:01",
    "text": "define what you mean by relational posts?\n\nIf you mean like, “Related Posts” it’s kind of a pain in the butt, the best method I have is to loop through all of the blog posts that have the same topics as the post you’re viewing, then rank them by how many topics they have in common.\n\nOR if the client is fine specifying their own  related posts, just create a module with a repeatable blog post field or url field, and use that to reverse lookup the post ID to then display the link and all the meta data about the post in the page",
    "reply_count": 13,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2018-06-04 15:31:41"
      },
      {
        "time_stamp": "2018-06-04 15:32:15"
      },
      {
        "time_stamp": "2018-06-04 15:32:31"
      },
      {
        "time_stamp": "2018-06-04 15:32:35"
      },
      {
        "time_stamp": "2018-06-04 15:33:13"
      },
      {
        "time_stamp": "2018-06-04 15:33:19"
      },
      {
        "time_stamp": "2018-06-04 15:33:20"
      },
      {
        "time_stamp": "2018-06-04 15:33:33"
      },
      {
        "time_stamp": "2018-06-04 15:33:36"
      },
      {
        "time_stamp": "2018-06-04 15:33:55"
      },
      {
        "time_stamp": "2018-06-04 15:35:07"
      },
      {
        "time_stamp": "2018-06-04 15:36:00"
      },
      {
        "time_stamp": "2018-06-04 15:36:35"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-04 15:31:41",
    "text": "<@U7SL518D6> I'd be really interested to see your method for accomplishing this and how it compares to mine"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-04 15:32:15",
    "text": "PM me if you want to swap ideas on optimizing / improving"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-06-04 15:32:31",
    "text": "Or you can wait a few days until we are finished testing the HubL related posts tag :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-04 15:32:35",
    "text": "haven’t done it in a while because there hasn’t been much client demand for it recently so I’m sure it can be done better with DM2 Custom modules."
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-04 15:33:13",
    "text": "<@U6GNQ7JBU> what's this you're touting around?? an Improved related posts tag you say?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-04 15:33:19",
    "text": "F U Matt. I mean that in the best way haha. my co-worker and I spent like 6 hours figuring out how to do related posts, just for you to make it so everyone can do it"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-04 15:33:20",
    "text": "lol"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-04 15:33:33",
    "text": "Do you know how long I spent building mine...... Days..."
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-04 15:33:36",
    "text": "DAYS MATT"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-06-04 15:33:55",
    "text": "Haha we couldn't do it until we had site search up and running :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-04 15:35:07",
    "text": "well I’m eager to hear/see this bad boy.\n\nY’know Michael, now that Matt says that, I probably would have bastardized the HS search to do it if I had to build it now(without Matt’s magic hubl function)"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-06-04 15:36:00",
    "text": "I still haven't tried search yet, so I can't say if I'd do the same. I probably would have used custom modules had they been around when I did mine"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-04 15:36:35",
    "text": "same when I did mine those sites were all DM1"
  }
]