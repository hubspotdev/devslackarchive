[
  null,
  null,
  null,
  {
    "poster": {
      "poster_name": "Robert Pupaza",
      "poster_handle": "robert.pupaza"
    },
    "time_stamp": "2018-11-07 07:26:12",
    "text": "can hubDB be Ordered By latest rows without having a date column that you have to update every time you add a new row?",
    "reply_count": 12,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2018-11-07 07:37:13"
      },
      {
        "time_stamp": "2018-11-07 07:38:46"
      },
      {
        "time_stamp": "2018-11-07 07:40:21"
      },
      {
        "time_stamp": "2018-11-07 07:42:24"
      },
      {
        "time_stamp": "2018-11-07 07:43:10"
      },
      {
        "time_stamp": "2018-11-07 07:43:37"
      },
      {
        "time_stamp": "2018-11-07 07:43:43"
      },
      {
        "time_stamp": "2018-11-07 07:44:19"
      },
      {
        "time_stamp": "2018-11-07 08:03:38"
      },
      {
        "time_stamp": "2018-11-07 08:03:58"
      },
      {
        "time_stamp": "2018-11-07 08:04:04"
      },
      {
        "time_stamp": "2018-11-07 08:36:23"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-07 07:37:13",
    "text": "good question. I’m not sure if there’s a property for like last modified date or something for a row, but if there was that’d solve that problem for you"
  },
  {
    "poster": {
      "poster_name": "Robert Pupaza",
      "poster_handle": "robert.pupaza"
    },
    "time_stamp": "2018-11-07 07:38:46",
    "text": "I found this property row.hs_created_at and is suppose to work that way but I can't find any documentation based on that."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-07 07:40:21",
    "edited": {
      "time_stamp": "2018-11-07 07:40:35"
    },
    "text": "one downside to using a created at date/time would be that if you won’t be able to re-order the items. without deleting rows. for example if you add a row and need to change it later to re-order it."
  },
  {
    "poster": {
      "poster_name": "Robert Pupaza",
      "poster_handle": "robert.pupaza"
    },
    "time_stamp": "2018-11-07 07:42:24",
    "text": "yep, I understand what you mean, that value is when the row is created and not updated, assuming that I could find that 'hidden' column, ther must be an updated_at column as well, right? I was hoping for a documentation or something ... couldn't find anything though"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-07 07:43:10",
    "text": "could try digging in developer info. though I don’t recall HubDB stuff showing up in there."
  },
  {
    "poster": {
      "poster_name": "Robert Pupaza",
      "poster_handle": "robert.pupaza"
    },
    "time_stamp": "2018-11-07 07:43:37",
    "text": "hubDB is not showing there, tried"
  },
  {
    "poster": {
      "poster_name": "Robert Pupaza",
      "poster_handle": "robert.pupaza"
    },
    "time_stamp": "2018-11-07 07:43:43",
    "text": "thanks for the help though :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-07 07:44:19",
    "text": ":coley:"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-11-07 07:52:43",
    "text": "yes.",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2018-11-07 07:53:35"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-07 07:53:35",
    "text": "lol, feeling wordy today?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-11-07 08:00:45",
    "text": "Curious how yall would handle ordering individuals on a team page. Let's say the team has a few different departments. In each department we want to order how they are displayed on the page. Would you create a number field and pop a number in the field for them? Is there a better way?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-11-07 08:01:28",
    "text": "By name then filter by department.. OR Groupby and order by name"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-11-07 08:02:11",
    "text": "Name would be great, but they want to have them in order by manger, then in a special order"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-11-07 08:02:21",
    "text": "so they may change this after people come in and come out"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-11-07 08:02:32",
    "text": "Seniority"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-11-07 08:02:33",
    "text": "etc"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-11-07 08:02:56",
    "text": "Yea I would say 2 columns one for main order (such as the department listing order) and then another for individual order"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-11-07 08:03:22",
    "text": "HMM"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-11-07 08:03:38",
    "text": "`hs_created_at`"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-11-07 08:03:43",
    "text": "Department order would be nice because right now I am doing executive call, then management call, then rest"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-11-07 08:03:48",
    "edited": {
      "time_stamp": "2018-11-07 08:03:52"
    },
    "text": "so that would be super nice"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-11-07 08:03:58",
    "text": "<https://designers.HubSpot.com/docs/tools/hubdb>"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-11-07 08:04:04",
    "text": "Under built-in columns"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-11-07 08:04:21",
    "edited": {
      "time_stamp": "2018-11-07 08:04:52"
    },
    "text": "so you would have something like:\n```\nhs_id | fname | lname | group | order\n7979 | name  | name |    1       | 1 \n7279 | name  | name |    1       | 2\n7379 | name  | name |    2       | 2\n```"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-11-07 08:05:07",
    "text": "okay one more complication"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-11-07 08:05:12",
    "text": "A person can belong to multiple groups"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-11-07 08:05:25",
    "text": "So I was thinking of a foreign table to manage the different departments/groups"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-11-07 08:05:39",
    "text": "But not sure how to handle a different order for a different group"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-07 08:05:43",
    "text": "Nick Here’s how I approach ordering people in staff listings, because usually the businesses want to custom order people to list before others"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-11-07 08:08:39",
    "text": "I appreciate the typing"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-11-07 08:08:44",
    "text": "I'm in suspense"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-07 08:11:47",
    "text": "what I do is I have a field in the HubDB or in the blog post that is a normal text field.\nThen I sort first by that field. then the person’s name.\n\nThen I tell the client they have 2 ways they can choose to order people with that field, they can litterally number people(tedious and prone to a maintennance nightmare down the road) or use alphabetical characters like a dictionary.\n\nI usually encourage putting part of the person’s name in there(like first or last, however you’re sorting)\n\nThen say you have: Bill, Ted, and Zed,\nAnd you want them to display Ted Bill Zed.\n\nYou would simply edit Bill’s sort order field and add a U before bill’s name OR add an A before Ted’s name\n\nSo the sort order field values would be\ncbill, Ted, and Zed or\nBill, aTed and Zed\n\nWhen displayed they will show:\nTed Bill Zed\nLike how dictionaries are ordered"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-07 08:12:11",
    "text": "This same method can be used to order the groups of staff members too"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-11-07 08:12:43",
    "text": "hmmmmm"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-11-07 08:12:52",
    "text": "I made a few different noises reading that"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-11-07 08:12:57",
    "text": "lol"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-11-07 08:12:59",
    "text": "Nice I like it"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-07 08:13:34",
    "text": "lol, if you already have your hubDB in the structure you stated above. this will work perfect for you.\n\nHere’s the reason not to use numbers though - incase it’s not obvious"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-07 08:17:05",
    "text": "here’s an example for when numbers bite you in the toches.\nYou have:\nBill, Ted, Zed\nYou want\nTed, Bill, Zed\n\nYou set your fields like this:\nTed:1\nBill:2\nZed:3\n\nNow Jill get’s hired. For some reason they decide, she should be listed first.\n\nYou now have  to add a 1 to Jill’s sort order, and then increment everyone else in the table up to accomodate"
  },
  {
    "text": "",
    "time_stamp": "2018-11-07 08:27:42"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-11-07 08:34:46",
    "text": "Yes, this is why I was asking, because numbers are horrible"
  },
  {
    "poster": {
      "poster_name": "Robert Pupaza",
      "poster_handle": "robert.pupaza"
    },
    "time_stamp": "2018-11-07 08:36:23",
    "text": "oh, Thanks a lot <@U6GNQ7JBU>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-11-07 08:38:26",
    "text": "Thanks for the insight on this"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-11-07 08:44:23",
    "text": "You should use multiples of 100's for easier reordering"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-11-07 08:47:45",
    "text": "When i do ordering, i always use multiples of 10 or 20"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-07 08:48:02",
    "text": "makes me think of inheriting projects when people use z-index in their css lol"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-11-07 08:48:58",
    "text": "ha"
  },
  null,
  null,
  null,
  null,
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-11-07 13:26:15",
    "edited": {
      "time_stamp": "2018-11-07 13:32:09"
    },
    "text": "how do i pull just two columns from a hubdb table, i cant remember the param to append (this is in the URL, not in actual hubdb code)"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-07 13:49:13",
    "edited": {
      "time_stamp": "2018-11-07 13:49:32"
    },
    "text": "it works the same as the filterqueries you just append to the url"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-11-07 13:55:12",
    "text": "do you remembe what it is though to call em? Like if iwant to call the name and country columns only",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-11-07 14:25:53"
      },
      {
        "time_stamp": "2018-11-07 14:26:21"
      }
    ]
  },
  null,
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-11-07 14:25:53",
    "text": "I might be wrong having looked at the api, it doesn’t appear to be the same. I think you have to get all the data at once with <https://developers.HubSpot.com/docs/methods/hubdb/v2/get_table> and parse through it to get what you need"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-11-07 14:26:21",
    "text": "Yea, thats the conclusion I came to as well"
  },
  null
]