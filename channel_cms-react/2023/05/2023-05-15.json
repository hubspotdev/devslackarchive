[
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-15 10:06:00",
    "text": "If I need to get data from HubDB, is the preferred method to pass that data into a js_partial or to make a fetch request in a js_module?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-15 10:06:45",
    "text": "does it make a difference if the module is \"interactive\" (technically just switching between tabs but I think there is underlying state)",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-05-15 11:42:00"
      },
      {
        "time_stamp": "2023-05-15 11:44:08"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-15 10:27:44",
    "text": "<@UAYBXDG4U> it would also be useful to see examples that use the HubSpot API in some way — for example, can I make a request to a public HubDB table?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-05-15 11:42:00",
    "text": "I think someone already DMed with you about some other things that are coming to the docs real soon now :tm:, but as for interactivity…\n\nI think a good way to think about the places you need an island for interactivity are any of the places where you would normally need client-side JavaScript to call things like `onClick`, `onKeydown`, `setTimeout`, etc*. So if you have any code in your react components like a  `onClick={…}`  prop then that code will need to be contained inside an island to work.\n\n---\n\n*: Little note of nuance, if you really wanted/needed you can server-render your React component and only have later non-React custom Javascript “enhance” that server-rendered HTML via vanilla JS/jQuery/whatever in an external JS script. Like some custom `document.getElementById()…` or `window.addEventListener(…)` . And while there are some edge cases where that could be useful, I wouldn’t recommend it in most cases. Because you are essentially defeating the purpose of having all your UI code in one place, have to remember to maintain that external code with changes, etc."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-15 11:44:08",
    "text": "ok, yea, that makes sense. thank you"
  }
]