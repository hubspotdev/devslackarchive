[
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-03-08 06:46:02",
    "text": "when dragging a module into a blog post, it adds this tag around it:\n```&lt;div id=\"hs_cos_wrapper_widget_3af791ac-de87-4932-a807-47d9079a2d11\" class=\"hs_cos_wrapper hs_cos_wrapper_widget hs_cos_wrapper_type_module\" style=\"\" data-hs-cos-general-type=\"widget\" data-hs-cos-type=\"module\"&gt;```\nis there any chance I can remove that?",
    "reply_count": 16,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-03-08 07:25:22"
      },
      {
        "time_stamp": "2024-03-08 09:00:36"
      },
      {
        "time_stamp": "2024-03-08 09:01:32"
      },
      {
        "time_stamp": "2024-03-08 09:04:34"
      },
      {
        "time_stamp": "2024-03-08 09:08:35"
      },
      {
        "time_stamp": "2024-03-08 09:09:21"
      },
      {
        "time_stamp": "2024-03-08 09:09:29"
      },
      {
        "time_stamp": "2024-03-08 13:35:46"
      },
      {
        "time_stamp": "2024-03-08 13:36:32"
      },
      {
        "time_stamp": "2024-03-08 13:37:48"
      },
      {
        "time_stamp": "2024-03-08 13:37:59"
      },
      {
        "time_stamp": "2024-03-08 13:39:37"
      },
      {
        "time_stamp": "2024-03-08 13:42:22"
      },
      {
        "time_stamp": "2024-03-08 13:43:21"
      },
      {
        "time_stamp": "2024-03-08 13:43:34"
      },
      {
        "time_stamp": "2024-03-08 13:45:20"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-03-08 07:25:22",
    "text": "I ended up removing this with javascript, it would still be great if there was a noWrapper option of some sort but that might be on the blog team to do.\n\nIs there any way to get the `wrapperClassName` to render during proxy? not a huge deal but makes it all a little bit tricker to tweak"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-03-08 09:00:36",
    "text": "The verbose wrappers stink (and could be much better) , but if you get rid of them there would be no way do further dragging of the module in a blog post (i.e. the wrapper is what the blog editor needs to “hook on to” for drag events, etc)."
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-03-08 09:01:32",
    "text": "&gt; Is there any way to get the `wrapperClassName` to render during proxy?\nI’m pretty sure that should work. Any more detail on what you are seeing?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-03-08 09:04:34",
    "text": "<@UCY83QS6Q> I have a bunch of breaking things going on right now so I can't test at the moment but I'm pretty sure it just didn't have the class set at all during proxy but would show live. right now I'm dealing with a blog post content rendering issue on proxy so I can't test"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-03-08 09:08:35",
    "text": "ok, I was able to undo enough, can confirm that the class does not show up at all in proxy"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-03-08 09:09:21",
    "text": "live: `&lt;div data-hs-island=\"true\" id=\"island-a0e700i1R0\" class=\"breakout\"&gt;`\nproxy: `&lt;div data-hs-island=\"true\" id=\"island-ac54bai2R0\"&gt;`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-03-08 09:09:29",
    "text": "^ <@UCY83QS6Q>"
  },
  {
    "poster": {
      "poster_name": "Marcus Shannon",
      "poster_handle": "mshannon"
    },
    "time_stamp": "2024-03-08 12:28:43",
    "edited": {
      "time_stamp": "2024-03-08 12:32:06"
    },
    "text": "Hello CMS React devs,\n\nWe are releasing a new component today, `Icon`, available with the latest version of `cms-components` that integrates with Icon fields. This is the first of a number of components we will be releasing to help integrate HubSpot fields and their functionality with React.\n\nIcon be imported via `import { Icon } from '@HubSpot/cms-components'`\n\nExample Usage:\n`<Icon fieldPath=\"<http://group_field.my|group_field.my>_icon_field\" height={10} />`\n\nThis will render a SVG of the icon represented by your field.\n\nPlease see associated <https://github.HubSpot.com/cms-react/reference/cms-components.html#icon|documentation> for more information. This component is similar in behavior to the HubL `{% icon %}` tag."
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-03-08 12:45:07",
    "text": "To follow up on the above release, I want to mention an update to `@HubSpot/cms-dev-server` . With components like `Icon` we need to the dev server to be connected to the HubSpot backend to have the most robust data context. To that end there is a new route for the dev server `<http://hslocal.net:3000/preview/module/[module_name]|hslocal.net:3000/preview/module/[module_name]>` . This will still do the react rendering locally and use your local source code, however as said before it has that required connection to the HubSpot backend. The most recent version of dev server has this route available and will present it at the \"home\" route along with the \"purely local\" module route."
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-03-08 13:35:46",
    "text": "What version of `@HubSpot/cms-components` do you have installed locally?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-03-08 13:36:32",
    "text": "`\"version\": \"0.14.5\",`"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-03-08 13:37:48",
    "text": "I think it was introduced in 0.14.6"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-03-08 13:37:59",
    "text": "(latest is 0.14.12)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-03-08 13:39:37",
    "text": "ah, ok, I have it set to `latest` which I thought would keep me updated, should I specify that version and manually check back occasionally?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-03-08 13:42:22",
    "text": "latest won’t keep you “live” updated, especially if you have a lockfile. There are “upgrade” commands for npm/yarn/etc that you can use to get new packages. Try one of…\n\n```npm update @HubSpot/cms-components @HubSpot/cms-dev-server\n-------\npnpm update @HubSpot/cms-components @HubSpot/cms-dev-server\n-------\nyarn upgrade @HubSpot/cms-components @HubSpot/cms-dev-server```\n… and with `latest` in your `package.json`  I believe ^ will prompt you to install the latest version it can find"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-03-08 13:43:21",
    "text": "thanks, appreciate that info"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-03-08 13:43:34",
    "text": "I'll test to see if the class shows up, one sec"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-03-08 13:45:20",
    "text": "yup, thank you"
  }
]