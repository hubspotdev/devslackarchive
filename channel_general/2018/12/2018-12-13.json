[
  null,
  null,
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 07:25:35",
    "text": "ok"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 07:25:42",
    "text": "screenshots a coming"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 07:25:52",
    "text": "maybe i am an idiot.."
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 07:25:55",
    "text": "but"
  },
  {
    "text": "",
    "time_stamp": "2018-12-13 07:26:13"
  },
  {
    "text": "",
    "time_stamp": "2018-12-13 07:27:15"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 07:27:34",
    "text": "shouldnt that span4 be in the row-fluid div with the span8?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 07:30:24",
    "text": "maybe i am a fool?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 07:30:31",
    "text": "it’s ok.  you can tell me"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-13 07:38:58",
    "edited": {
      "time_stamp": "2018-12-13 07:39:26"
    },
    "text": "seems like you have an extra closing tag `&lt;/div&gt;` somewhere in blog content post or listing tab :partyparrot:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 07:40:27",
    "text": ":slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 07:40:30",
    "text": "yup"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 07:40:36",
    "text": "i blame other people"
  },
  {
    "poster": {
      "poster_name": "Akin Ekici",
      "poster_handle": "akin.ekici"
    },
    "time_stamp": "2018-12-13 07:40:44",
    "text": "Is there a way to add two strings in hubl"
  },
  {
    "poster": {
      "poster_name": "Akin Ekici",
      "poster_handle": "akin.ekici"
    },
    "time_stamp": "2018-12-13 07:40:49",
    "text": "?"
  },
  {
    "poster": {
      "poster_name": "Akin Ekici",
      "poster_handle": "akin.ekici"
    },
    "time_stamp": "2018-12-13 07:41:20",
    "text": "{% set myVar = '' %}  and  {% myVar += 'test' %}"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-13 07:41:26",
    "edited": {
      "time_stamp": "2018-12-13 07:42:33"
    },
    "text": "`+` or `~` should work\n`{% set myVar = \"Hello\" %}`\n`{% set myVar2 = myVar ~ \" world\" %}`"
  },
  {
    "poster": {
      "poster_name": "Akin Ekici",
      "poster_handle": "akin.ekici"
    },
    "time_stamp": "2018-12-13 07:42:52",
    "text": "Thanks"
  },
  {
    "text": "Why this code does not work?",
    "time_stamp": "2018-12-13 07:51:33"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-12-13 07:53:18",
    "text": "You can’t set variables within loops like that"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-12-13 07:53:36",
    "text": "The scoping doesn’t work the same as in other languages"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-12-13 07:55:12",
    "text": "So what you have would be like writing\n```\nvar something;\nfor(i=0;i&lt;arr.length;i++){\n    var something = i;\n}\n```"
  },
  {
    "poster": {
      "poster_name": "Akin Ekici",
      "poster_handle": "akin.ekici"
    },
    "time_stamp": "2018-12-13 07:55:47",
    "text": "Ok, but is there another way to do it?"
  },
  {
    "poster": {
      "poster_name": "Akin Ekici",
      "poster_handle": "akin.ekici"
    },
    "time_stamp": "2018-12-13 07:56:09",
    "text": "I have to use two for loop otherwise"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-13 07:56:50",
    "text": "thats right, the vars inside loops are destroyed after the iteration ends"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-12-13 07:57:00",
    "text": "So instead of setting those variables then printing them out you could just print them out from the loop"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-13 07:57:19",
    "text": "you can although, do a trick to get the info you need out of the loop:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 07:58:07",
    "text": "a trick, eh"
  },
  {
    "poster": {
      "poster_name": "Akin Ekici",
      "poster_handle": "akin.ekici"
    },
    "time_stamp": "2018-12-13 07:58:56",
    "text": "something like array_map ?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-12-13 07:59:35",
    "text": "```\n&lt;div class=\"wrapper--contact-tabs\"&gt;  \n  \n    {% for item in module.contact_items %}\n      &lt;a href=\"#itm-{{ loop.index}}\" class=\"contact-tab-link {{loop.index == 1}} active\"&gt;{{ item.title }}&lt;/a&gt;\n    {% endfor %}\n  \n&lt;/div&gt;\n```"
  },
  {
    "text": "",
    "time_stamp": "2018-12-13 07:59:50"
  },
  {
    "poster": {
      "poster_name": "Akin Ekici",
      "poster_handle": "akin.ekici"
    },
    "time_stamp": "2018-12-13 08:00:24",
    "text": "But instead I can use two loops"
  },
  {
    "poster": {
      "poster_name": "Akin Ekici",
      "poster_handle": "akin.ekici"
    },
    "time_stamp": "2018-12-13 08:00:34",
    "text": "it is now three loops"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-13 08:00:37",
    "text": "basically the trick is use `append` to output to an external array"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-12-13 08:01:16",
    "text": "If the items are being printed sequentially why not just do it without variables?"
  },
  {
    "poster": {
      "poster_name": "Akin Ekici",
      "poster_handle": "akin.ekici"
    },
    "time_stamp": "2018-12-13 08:01:43",
    "text": "I just wanted to use one loop"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-13 08:01:45",
    "text": "in this case, will means extra loops so maybe it loose the sense. but I think is the only way if you don't want to do all your code inside the loop xD"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-13 08:02:06",
    "text": "the other solution is do the rest of your code in the last iteration tho"
  },
  {
    "text": "",
    "time_stamp": "2018-12-13 08:02:40"
  },
  {
    "poster": {
      "poster_name": "Akin Ekici",
      "poster_handle": "akin.ekici"
    },
    "time_stamp": "2018-12-13 08:02:53",
    "text": "Think that I have a huge count  of items, we say 999999999 items",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2018-12-13 08:05:23"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Akin Ekici",
      "poster_handle": "akin.ekici"
    },
    "time_stamp": "2018-12-13 08:03:03",
    "text": "it will be 999999999*2"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-13 08:03:46",
    "text": "if you don't need to add to much code more than those two lines (tabs &amp; content) this last snippet is okay. If you have to keep working there and add several extra lines...\nIt becomes harder to read and understand the code so.."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-12-13 08:05:12",
    "text": "I must be missing something, you can just run the loop and print the elements directly instead of calling them from a variable."
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-13 08:05:23",
    "edited": {
      "time_stamp": "2018-12-13 08:05:41"
    },
    "text": "I know..\nI think, but its the only way if you want to work out of the loop"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-13 08:06:01",
    "text": "I am guessing he is saving it for a reason :sweat_smile:"
  },
  {
    "poster": {
      "poster_name": "Akin Ekici",
      "poster_handle": "akin.ekici"
    },
    "time_stamp": "2018-12-13 08:06:10",
    "text": "But I wanted to print all tabs first then content"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-12-13 08:06:26",
    "text": "Oooooohhhhhh"
  },
  {
    "text": "",
    "time_stamp": "2018-12-13 08:06:38"
  },
  {
    "poster": {
      "poster_name": "Akin Ekici",
      "poster_handle": "akin.ekici"
    },
    "time_stamp": "2018-12-13 08:06:45",
    "text": "This will be ok"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-12-13 08:08:10",
    "text": "Running the strings like that looks nuts to me because I always just do stuff like:\n```\n&lt;a href=\"{{ module.link }}\"&gt;{{ module.link_text }}&lt;/a&gt;\n```"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-13 08:08:34",
    "text": "as said, if you don't need to work anything deeper in the DOM there, I would use this right at the bottom before the `endfor`:\n\n`{% if loop.last %}`\n`  {{ tabs }}`\n`  {{ content }}`\n`{% endif %}`"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-13 08:09:08",
    "text": "that will be the most optimised way (while you keep the order)"
  },
  {
    "poster": {
      "poster_name": "Akin Ekici",
      "poster_handle": "akin.ekici"
    },
    "time_stamp": "2018-12-13 08:09:09",
    "text": "Thanks"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-12-13 09:23:38",
    "text": "other than Re-captcha, are there any strategies to blocking spam submissions to javascript embedded CTAs?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-13 09:24:31",
    "text": "CTAs or forms?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-13 09:25:14",
    "text": "Forms yes- though I don’t think we can control it on our end- there’s a method called a honeypot which works pretty well"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-12-13 09:27:07",
    "text": "CTAs embedded w/Javascript. for example in the header and in the hero section of <https://www.unific.com/HubSpot/woocommerce>"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-12-13 09:34:23",
    "text": "That's a form"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-12-13 09:40:41",
    "text": "So just out of curiosity, how many kudos does someone need to get on the ideas forum before someone from HS chimes in?",
    "reply_count": 5,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2018-12-13 11:55:49"
      },
      {
        "time_stamp": "2018-12-13 11:56:39"
      },
      {
        "time_stamp": "2018-12-13 11:59:23"
      },
      {
        "time_stamp": "2018-12-13 12:02:29"
      },
      {
        "time_stamp": "2018-12-13 12:02:37"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-13 09:42:02",
    "text": "lol I don’t think it works the same way that <http://change.org|change.org> does AJ, i think they just scan through em and if one looks interesting they take a look. and the more upvotes the more likely they are to see it"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-12-13 09:50:29",
    "text": "yea...."
  },
  {
    "poster": {
      "poster_name": "Michele Herzog",
      "poster_handle": "mherzog"
    },
    "time_stamp": "2018-12-13 11:55:49",
    "text": "Personally, I filter by \"Top Ideas\", and I have eyes on most things with more than 5 upvotes (but I only look at \"Template Design and Marketplace\", so take that with a grain of salt)"
  },
  {
    "text": "",
    "time_stamp": "2018-12-13 11:56:39"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2018-12-13 11:59:23",
    "text": "jk, I would say most people sort by top ideas when looking at the forum. BUT, content is key. A good idea is a good idea,regardless of votes :smile_cat:"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-12-13 12:02:29",
    "text": "i was just curious bc i have a had an idea that is reaching 100 votes but not a peep from anyone. So I wasnt sure if it was something that was just looked at and  a no or if its being discussed"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-12-13 12:02:37",
    "text": "its about Google DataStudio"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2018-12-13 12:36:48",
    "text": "<https://HubSpotdev.slack.com/archives/CEQQ9NFK2/p1544729801132300>"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-12-13 13:45:11",
    "text": "I built out some location pages with a “follow form” on the left hand side here: <https://www.premierworkspaces.com/california/beverly-hills>. it’s working well in modern browsers but breaks for IE. Any idea on what the issue might be?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 13:53:51",
    "text": "IE"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-12-13 13:54:16",
    "text": "IE doesn't support position: sticky"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-12-13 13:55:10",
    "text": "any way around that?"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-12-13 13:55:25",
    "text": "to try and make this layout work?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-12-13 13:55:27",
    "text": "I’ve never heard of position:sticky"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-12-13 13:55:41",
    "text": "I can't vouch for this because I've never used it, but you might try <https://github.com/wilddeer/stickyfill>"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 13:55:52",
    "text": "oh"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 13:55:54",
    "text": "nice"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-12-13 13:56:24",
    "text": "Otherwise, it's not _that_ complicated to mimic with a bit of js"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 13:56:38",
    "text": "<@UDPA7JFHA>, report back if that works"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-12-13 13:56:38",
    "text": "ok -"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-12-13 13:56:39",
    "text": "Barring that you’d have to write some JS that checks when that element hits the top of the screen then transform it along with the window.scrollTop()"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-12-13 13:56:49",
    "text": "Pretty much, yeah"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-12-13 13:56:54",
    "text": "right"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-12-13 13:57:00",
    "text": "And then also calculate when it hits the bottom"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 13:57:36",
    "text": "polyfill isnt that big."
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-12-13 13:57:36",
    "text": "I wonder if you can just browser prefix for position sticky"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 13:57:46",
    "text": "try it so i know :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 13:57:59",
    "text": "no browser prefix"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-12-13 13:58:05",
    "text": "<https://caniuse.com/#search=sticky> Nope. Not supported at all."
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-12-13 13:58:13",
    "text": "ah"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-12-13 13:58:15",
    "text": "```\nvar screenTop = $(window).scrollTop();\nvar target = $('.whatever').offset().top;\n$(document).scroll(function(){\n  screenTop = $(window).scrollTop();\n  if(screenTop &gt;= target){\n    $('.whatever').css yadda yadda yadda\n  }\n});\n```"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-12-13 13:58:33",
    "text": "I mean, there are prefixes for other browsers, just no `-ms-` prefix",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2018-12-13 13:59:31"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 13:58:34",
    "text": "var = let"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 13:58:39",
    "text": "get with the times"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-12-13 13:58:47",
    "text": "thanks <@U26DA9CQ0>"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-12-13 13:59:24",
    "text": "I’m going to add the JS now"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-12-13 13:59:29",
    "text": "see if that will work for me"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 13:59:31",
    "text": "should have been more specific with my “no browser prefix” comment"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-12-13 13:59:33",
    "text": "appreciate the help"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-12-13 13:59:45",
    "text": "I thought we wanted it to work on IE <@UD53A9UUR>"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 13:59:52",
    "text": "DOH!"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-12-13 14:00:05",
    "text": "Get your new fangled ECMA outta here!"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 14:00:13",
    "text": "you cant do anything fun…."
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 14:00:16",
    "text": "BABBBBEELLLLLL"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 14:00:24",
    "text": "lets really complicate this"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 14:00:58",
    "text": "so"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 14:01:15",
    "text": "you are gonna need to open terminal"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-12-13 14:01:24",
    "text": "ruh roh"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 14:01:24",
    "text": "`mkdir works`"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 14:01:32",
    "text": "is node installed?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-13 14:01:46",
    "edited": {
      "time_stamp": "2018-12-13 14:03:28"
    },
    "text": "`cd works`"
  },
  null,
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-13 15:05:57",
    "text": "anyone know if it’s possible to use an alternate image for the play button on videos embedded through the vidyard integration?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-13 15:06:20",
    "text": "I realize it’s a stupid thing but client wants their specific play button"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-12-13 15:07:38",
    "text": "It's an iframe, so I don't think so unless there's some option I'm not aware of"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-12-13 15:07:47",
    "text": "Which is possible"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-13 15:09:23",
    "text": "I had a brilliant solution, then the wysiwyg editor killed it"
  },
  null,
  null,
  {
    "poster": {
      "poster_name": "Joel Warren",
      "poster_handle": "joel"
    },
    "time_stamp": "2018-12-13 17:46:26",
    "text": "HubSpot seems to strip out some template code I'm trying to use and provide for another platform, i.e {form} {javascript}\n{% raw %} doesn't seem to work, anyway around this so the code will show as plain text on the page?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-13 17:51:43",
    "text": "the raw tag should work, remember you need to have an endraw as well"
  },
  {
    "poster": {
      "poster_name": "Joel Warren",
      "poster_handle": "joel"
    },
    "time_stamp": "2018-12-13 17:56:11",
    "text": "getting nada"
  },
  {
    "text": "template",
    "time_stamp": "2018-12-13 17:56:31"
  },
  {
    "text": "page",
    "time_stamp": "2018-12-13 17:56:43"
  },
  {
    "poster": {
      "poster_name": "Joel Warren",
      "poster_handle": "joel"
    },
    "time_stamp": "2018-12-13 17:56:55",
    "text": "following up with hs support"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-13 17:57:32",
    "text": "did you check the console? maybe you have a JS error"
  },
  {
    "poster": {
      "poster_name": "Joel Warren",
      "poster_handle": "joel"
    },
    "time_stamp": "2018-12-13 18:07:15",
    "text": "all clear there"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-13 18:08:18",
    "text": "and you’re sure the script that’s suppose to interpret the moustaches isn’t expecting double {{’s?"
  },
  {
    "poster": {
      "poster_name": "Joel Warren",
      "poster_handle": "joel"
    },
    "time_stamp": "2018-12-13 18:46:24",
    "text": "yep referencing a working example that's built on drupal"
  },
  {
    "poster": {
      "poster_name": "Joel Warren",
      "poster_handle": "joel"
    },
    "time_stamp": "2018-12-13 19:10:04",
    "text": "looks like I'll be able to use the template preview urls for now"
  },
  null
]