[
  {
    "poster": {
      "poster_name": "Bob Balm",
      "poster_handle": "bob209"
    },
    "time_stamp": "2023-07-04 01:40:18",
    "text": "Hey everyone - does someone have any suggestions how to fix this? I'm trying to construct a new date object out of a ticket's create datetime, for a custom code action. So the ticket's create date is passed into the code as a Unix timestamp, and I'm doing this:\n\n```// Get input properties from HubSpot\n  const createDatetime = event.inputFields.createDatetime;\n  console.log('Input createDatetime:', createDatetime);\n\n// Define a new JS Date object from the input createDatetime\n  const inputDate = new Date(createDatetime);\n  console.log('inputDate:', inputDate); ```\nIn my logs, I get the following returned:\n\n```2023-07-03T15:36:11.033Z\tINFO\tInput createDatetime: 1688045052056\n2023-07-03T15:36:11.034Z\tINFO\tinputDate: Invalid Date\n\nMemory: 76/128 MB\nRuntime: 1720.54 ms```\nI checked and the unix timechamp does convert to the exact datetime that I'm looking for. I thought `new Date();`  was able to handle unix timestamps, but from this it looks like it can't. Anyone have an idea what's going on here? Would the solution be to convert it to something else first?",
    "reply_count": 12,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2023-07-04 01:47:02"
      },
      {
        "time_stamp": "2023-07-04 01:50:30"
      },
      {
        "time_stamp": "2023-07-04 01:51:16"
      },
      {
        "time_stamp": "2023-07-04 01:51:47"
      },
      {
        "time_stamp": "2023-07-04 08:22:46"
      },
      {
        "time_stamp": "2023-07-04 08:25:56"
      },
      {
        "time_stamp": "2023-07-04 08:26:34"
      },
      {
        "time_stamp": "2023-07-04 08:26:53"
      },
      {
        "time_stamp": "2023-07-04 08:27:27"
      },
      {
        "time_stamp": "2023-07-21 02:25:51"
      },
      {
        "time_stamp": "2024-05-02 05:03:08"
      },
      {
        "time_stamp": "2024-05-02 06:28:48"
      }
    ]
  },
  {
    "text": "Try to parse the value to an integer - does that solve your problem?",
    "time_stamp": "2023-07-04 01:47:02"
  },
  {
    "poster": {
      "poster_name": "Bob Balm",
      "poster_handle": "bob209"
    },
    "time_stamp": "2023-07-04 01:50:30",
    "text": "genius! thanks"
  },
  {
    "poster": {
      "poster_name": "Bob Balm",
      "poster_handle": "bob209"
    },
    "time_stamp": "2023-07-04 01:51:16",
    "text": "...You'd think that'd be understood as an integer already. :sweat_smile:"
  },
  {
    "poster": {
      "poster_name": "Byron Pokorniecki",
      "poster_handle": "byron.pokorniecki.ext"
    },
    "time_stamp": "2023-07-04 01:51:47",
    "text": "Anything is possible in javascript-land :smile:"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-07-04 08:22:46",
    "text": "Ah you used the parseInt, I always use the Number(). Any particular reason to do it with parseInt?"
  },
  {
    "poster": {
      "poster_name": "Byron Pokorniecki",
      "poster_handle": "byron.pokorniecki.ext"
    },
    "time_stamp": "2023-07-04 08:25:56",
    "text": "Old habits die slow - I think you are right to mention Number() as itâ€™s the safer option"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-07-04 08:26:34",
    "text": "oh honestly I have no idea which one is better just find it interesting that everyone has there own way to do things. That's programming in a nutshell"
  },
  {
    "poster": {
      "poster_name": "Bob Balm",
      "poster_handle": "bob209"
    },
    "time_stamp": "2023-07-04 08:26:53",
    "text": "I'm not even a developer. I built this whole thing together with ChatGPT"
  },
  {
    "poster": {
      "poster_name": "Bob Balm",
      "poster_handle": "bob209"
    },
    "time_stamp": "2023-07-04 08:27:27",
    "text": "Learning a lot though :smile:"
  }
]