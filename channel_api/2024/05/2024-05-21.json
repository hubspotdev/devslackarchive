[
  {
    "poster": {
      "poster_name": "Gagandeep Singh",
      "poster_handle": "gagan317"
    },
    "time_stamp": "2024-05-21 03:09:23",
    "text": "Hi <@U06KP87QUJW> The payment status property is read only for quotes. So I looked for solutions via workflows but they do not allow to update those properties from there as well. That property is hs_payment_status"
  },
  {
    "text": "Hi everyone!\n\nI have a HubSpot form which is submitted via forms API (<https://legacydocs.HubSpot.com/docs/methods/forms/submit_form?_gl=1*1fnhk4o*_ga*MjAzODU0NzY0OC4xNzE2MjI5NzYx*_ga_LXTM6CQ0XK*MTcxNjI5NDM2Ny42LjEuMTcxNjI5NDg4OC42MC4wLjA><https://legacydocs.HubSpot.com/docs/methods/forms/submit_form?_gl=1*1fnhk4o*_ga*MjAzODU0NzY0OC4xNzE2MjI5NzYx*_ga_LXTM6CQ0XK*MTcxNjI5NDM2Ny42LjEuMTcxNjI5NDg4OC42MC4wLjA.|.>)\nFor some reason ticket is not created from the API submission while when we submit same data from HubSpot form ticket is created.\n\n\nIs there something i did miss?",
    "time_stamp": "2024-05-21 06:39:38"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "lchausse"
    },
    "time_stamp": "2024-05-21 08:02:39",
    "text": "soon? like one month or 6 month ?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2024-05-21 08:14:05",
    "text": "between 1-1.5 mo i think"
  },
  {
    "poster": {
      "poster_name": "Adam Evers",
      "poster_handle": "adam.evers"
    },
    "time_stamp": "2024-05-21 11:00:26",
    "text": "Right but which fields specifically? Date Entered what?"
  },
  {
    "poster": {
      "poster_name": "Adam Evers",
      "poster_handle": "adam.evers"
    },
    "time_stamp": "2024-05-21 11:01:37",
    "text": "I think I figured it out after a bunch of testing for those in the future.\n\nAnything with `v2` is an updated version from HubSpot of the original Date Entered field. You'll need to map them back to sort out which is which. You can review in deal properties the API names which should help figure out which field is which."
  },
  {
    "poster": {
      "poster_name": "Scott Marion",
      "poster_handle": "scott943"
    },
    "time_stamp": "2024-05-21 11:06:47",
    "text": "Hello fellow devs.  I need to figure out how to provide a dropdown select menu property on each of my deals but each with completely different options to select from on each deal.  What do you think are my best options for doing that?  I have thought of a conditional selection menu but I don't know exactly how that would work.  Also I thought I might need a custom object.  Other ideas?",
    "reply_count": 9,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-05-21 12:30:29"
      },
      {
        "time_stamp": "2024-05-21 12:31:14"
      },
      {
        "time_stamp": "2024-05-21 12:38:03"
      },
      {
        "time_stamp": "2024-05-21 13:02:53"
      },
      {
        "time_stamp": "2024-05-21 13:05:54"
      },
      {
        "time_stamp": "2024-05-21 13:09:08"
      },
      {
        "time_stamp": "2024-05-21 13:14:57"
      },
      {
        "time_stamp": "2024-05-21 13:16:27"
      },
      {
        "time_stamp": "2024-05-21 13:25:22"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2024-05-21 11:09:44",
    "text": "ah apologies!  you are correct.  the v2 versions of the props are available for contacts and deals.  we are in the process of cleaning this up.  keep an eye on the changelog for an update on this"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2024-05-21 11:09:54",
    "text": "<http://developer.HubSpot.com/changelog|developer.HubSpot.com/changelog>"
  },
  {
    "poster": {
      "poster_name": "Robert Ainslie",
      "poster_handle": "rainslie"
    },
    "time_stamp": "2024-05-21 12:30:29",
    "text": "What’s the business process and rationale? What are you trying to track and why?"
  },
  {
    "poster": {
      "poster_name": "Robert Ainslie",
      "poster_handle": "rainslie"
    },
    "time_stamp": "2024-05-21 12:31:14",
    "text": "Also, are you developing for just one HubSpot portal or for a public listed app?"
  },
  {
    "poster": {
      "poster_name": "Scott Marion",
      "poster_handle": "scott943"
    },
    "time_stamp": "2024-05-21 12:38:03",
    "edited": {
      "time_stamp": "2024-05-21 12:46:32"
    },
    "text": "Hi Robert,\n\nI am using a private app for a specific client.  When they have a quote accepted we have them follow a process to make sure all the information we need for an order is ready because we are then sending all that order information to their Oracle database via a web service on their end.\n\nOne thing they need is for the sales rep to be able to select from a custom list of shipping addresses for that customer which we also will get from their Oracle system real-time once we know the customer.  So I need to be able to load those addresses to a dropdown menu that the sales rep can choose from before they send the order to Oracle.  So each deal needs to have a different set of ship-to addresses to select from to accomplish that.\n\nHope that makes more sense of things.  Right now I am just examining possibilities."
  },
  {
    "poster": {
      "poster_name": "Chana Olesker",
      "poster_handle": "chana.olesker"
    },
    "time_stamp": "2024-05-21 12:46:33",
    "text": "Hi, I am trying to update contact's custom properties via `_hsq.push`, but for some reason sometime the data goes through and sometime it doesn't.\nhere is my code:\n```fetch(&lt;apiEndpoint&gt;, {\n    method: \"GET\",\n  })\n  .then((response) =&gt; response.json())\n  .then((result) =&gt; {\n      const hsUserProperties = {\n          \"WS_companyName\": result.name,\n          \"WS_employeeCount\": result.employeeCount,\n          \"WS_industries\": result.industries,\n      };\n      const _hsq = window._hsq = window._hsq || [];\n      _hsq.push([\"identify\", hsUserProperties]);\n      _hsq.push([\"trackPageView\"]);\n  })\n  .catch((error) =&gt; console.error(error));```\nIs there a better way to update/set user's properties in my website with HS tracking code installed?",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2024-06-07 11:45:05"
      }
    ]
  },
  {
    "text": "This sounds like a really good use case for a custom card / UI extension. The data can be loaded real time and actioned by the user.\n\nRequires Sales or Service Hub Enterprise - do you know if this is in your client's subscription? If not, happy to work with you and your client's CSM on this (I manage solution architects at HubSpot)\n\nHave you ever built with or explored the CRM dev tools that leverage HS managed React components combined with serverless functions?\n\n<https://developers.HubSpot.com/docs/platform/crm-development-tools-overview|Docs>  & Screenshot of a sample card (but can be built with many different components and levels of interactivity)",
    "time_stamp": "2024-05-21 13:02:53",
    "edited": {
      "time_stamp": "2024-05-21 13:03:06"
    }
  },
  {
    "poster": {
      "poster_name": "Robert Ainslie",
      "poster_handle": "rainslie"
    },
    "time_stamp": "2024-05-21 13:05:54",
    "text": "You would build like a \"Prepare order\" or \"Confirm Quote Order\" custom card that:\n1. showed the relevant Deal data, \n2. then prompted for the needed user input, where the Customer Addresses could be loaded from middleware that queries their Oracle DB\n3. User submits and card updates to show finalized submission\n4. Allows them to 'edit' or 'update' the submitted order details"
  },
  {
    "poster": {
      "poster_name": "Scott Marion",
      "poster_handle": "scott943"
    },
    "time_stamp": "2024-05-21 13:09:08",
    "text": "Unfortunately they only have Operations Hub Enterprise and they are not open to purchasing another Enterprise license at this time.  Can I do this by creating a custom object to hold the shipping addresses?  This is the only thing I can think of since that requires any enterprise license which they have."
  },
  {
    "poster": {
      "poster_name": "Robert Ainslie",
      "poster_handle": "rainslie"
    },
    "time_stamp": "2024-05-21 13:14:57",
    "text": "What's the hubid? (I'd like to take a quick look at their product config, promise I'm just looking)"
  },
  {
    "poster": {
      "poster_name": "Robert Ainslie",
      "poster_handle": "rainslie"
    },
    "time_stamp": "2024-05-21 13:16:27",
    "text": "Feel free to DM me that too"
  },
  {
    "poster": {
      "poster_name": "Scott Marion",
      "poster_handle": "scott943"
    },
    "time_stamp": "2024-05-21 13:25:22",
    "text": "I cannot do that per our contract with our clients - but I thank you for your suggestions.  I was excited to start experimenting with UI Extensions and serverless functions when the beta appeared but our HS clients are not enterprise level and so I had to put that on the shelf for now.  Down the road, who knows?  I work for a HubSpot Gold Partner so we will get there!"
  },
  {
    "poster": {
      "poster_name": "Annie Short",
      "poster_handle": "annie.short"
    },
    "time_stamp": "2024-05-21 13:42:22",
    "edited": {
      "time_stamp": "2024-05-21 13:43:10"
    },
    "text": "Hi all, trying to create new leads via the Basic Create Leads API (crm/v3/objects/leads) with the following body structure ( I have removed my id and property values for clarity):\n{\n  \"associations\": [\n    {\n      \"types\": [\n        {\n          \"associationCategory\": \"HubSpot_DEFINED\",\n          \"associationTypeId\": 610\n        }\n      ],\n      \"to\": {\n        \"id\": \"\"\n      }\n    }\n  ],\n  \"properties\": {\n    \"hs_primary_company_id\": \"\",\n       \"HubSpot_owner_id\": \"\",\n       \"hs_lead_name\": \"\",\n       \"lead_notes\": \"\",\n       \"marketing_lead_source\": \"\",\n       \"marketing_lead_category\": \"\",\n       \"hs_pipeline_stage\": \"\"\n  }\n}\nBut I am getting this error:\nThe operation failed with an error. [400] A LEAD_TO_PRIMARY_CONTACT or LEAD_TO_PRIMARY_COMPANY association is required to create a LEAD object.. HubSpot Correlation ID: 2564a4d6-de66-4638-9354-5e014a199a1c\n\nAny thoughts?"
  },
  {
    "poster": {
      "poster_name": "Marcio Oliveira",
      "poster_handle": "marcio.oliveira"
    },
    "time_stamp": "2024-05-21 19:56:51",
    "text": "Hello guys, are there some endpoint to return all workflows from an user, newers and olders. I already try to use <https://api.hubapi.com/automation/v2/workflows/enrollments/contacts/:vid> but this just return the current workflows attached to an user.",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2024-05-22 11:03:43"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-05-22 00:31:13",
    "text": "I could really use an extra pair of eyes on this as I've been poking at this for the last 4 hours and I have no idea what I am doing wrong.\n\n1.) A custom coded webform is submitting the following data to an AWS Lambda function. Note: The data is not being sent as FormData but as a JSON string which we are parsing.\n\n```//Create a custom PDF file with the form data\n\nconst pdfFile = await createPdfFromJson(formDataWithoutFileField);  //This returns a dataUri\n\n//Next we try to upload the file\n\nlet customFileUploadRequest = await uploadRawFileToHubSpot(\n    pdfFile,\n    \"Customer Support Form - Form Data.pdf\",\n    \"application/pdf\",  //This will always be a PDF\n    HubSpot_access_token\n  );\n\nexport const uploadRawFileToHubSpot = async (\n  fileData,\n  fileName,\n  contentType,\n  hs_access_token\n) =&gt; {\n\n  const buffer = Buffer.from(fileData.split(\",\")[1], 'base64');\n\n  return await uploadToHubSpot(buffer, fileName, contentType, hs_access_token);\n};\n\nconst uploadToHubSpot = async (buffer, fileName, contentType, hs_access_token) =&gt; {\n  const folderId = 165720113185;\n  const HubSpotFileName = fileName || `defaultFileName-${Date.now()}.pdf`;\n\n  const form = new FormData();\n  form.append('file', buffer, {\n    filename: HubSpotFileName,\n    contentType: contentType\n  });\n  form.append(\"folderId\", folderId);\n  form.append(\"fileName\", HubSpotFileName);\n  form.append(\"options\", JSON.stringify({ access: \"PRIVATE\" }));\n\n  // Make the request to HubSpot API\n  let HubSpotResponse;\n  try {\n    HubSpotResponse = await fetch(\"<https://api.hubapi.com/files/v3/files>\", {\n      method: \"POST\",\n      body: form,\n      headers: {\n        Authorization: `Bearer ${hs_access_token}`,\n      },\n    });\n  } catch (error) {\n    //Capture exception\n    return { ok: false, responseData: null, error: `Error: ${error}` };\n  }\n\n  // Return response to check if the upload was successful\n  if (HubSpotResponse.ok) {\n    const jsonResponse = await HubSpotResponse.json();\n    return { ok: true, responseData: jsonResponse, error: null };\n  } else {\n    const errorResponse = await HubSpotResponse.text();\n    return { ok: false, responseData: null, error: errorResponse };\n  }\n};\n\n//The code above returns the following error\n\n{\n    \"body\": \"{\\\"ok\\\":false,\\\"responseData\\\":null,\\\"error\\\":\\\"&lt;html&gt;\\\\n&lt;head&gt;\\\\n&lt;meta http-equiv=\\\\\\\"Content-Type\\\\\\\" content=\\\\\\\"text/html;charset=utf-8\\\\\\\"/&gt;\\\\n&lt;title&gt;Error 415 Unsupported Media Type&lt;/title&gt;\\\\n&lt;/head&gt;\\\\n&lt;body&gt;&lt;h2&gt;HTTP ERROR 415&lt;/h2&gt;\\\\n&lt;p&gt;Reason:\\\\n&lt;pre&gt;    Unsupported Media Type&lt;/pre&gt;&lt;/p&gt;\\\\n&lt;/body&gt;\\\\n&lt;/html&gt;\\\\n\\\"}\",\n    \"status\": 200\n}```\nNow, when I run the following code locally - everything works just fine.",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-05-22 01:58:08"
      },
      {
        "time_stamp": "2024-05-22 16:15:49"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-05-22 00:32:10",
    "text": "```import FormData from \"form-data\"\nimport fetch from \"node-fetch\"\n\nconst HubSpot_access_token = \"\"\n\nlet dataURL = \n`data:application/pdf;base64,JVBERi0xLjMNCiXi48/TDQoNCjEgMCBvYmoNCjw8DQovVHlwZSAvQ2F0YWxvZw0KL091dGxpbmVzIDIgMCBSDQovUGFnZXMgMyAwIFINCj4+DQplbmRvYmoNCg0KMiAwIG9iag0KPDwNCi9UeXBlIC9PdXRsaW5lcw0KL0NvdW50IDANCj4+DQplbmRvYmoNCg0KMyAwIG9iag0KPDwNCi9UeXBlIC9QYWdlcw0KL0NvdW50IDINCi9LaWRzIFsgNCAwIFIgNiAwIFIgXSANCj4+DQplbmRvYmoNCg0KNCAwIG9iag0KPDwNCi9UeXBlIC9QYWdlDQovUGFyZW50IDMgMCBSDQovUmVzb3VyY2VzIDw8DQovRm9udCA8PA0KL0YxIDkgMCBSIA0KPj4NCi9Qcm9jU2V0IDggMCBSDQo+Pg0KL01lZGlhQm94IFswIDAgNjEyLjAwMDAgNzkyLjAwMDBdDQovQ29udGVudHMgNSAwIFINCj4+DQplbmRvYmoNCg0KNSAwIG9iag0KPDwgL0xlbmd0aCAxMDc0ID4+DQpzdHJlYW0NCjIgSg0KQlQNCjAgMCAwIHJnDQovRjEgMDAyNyBUZg0KNTcuMzc1MCA3MjIuMjgwMCBUZA0KKCBBIFNpbXBsZSBQREYgRmlsZSApIFRqDQpFVA0KQlQNCi9GMSAwMDEwIFRmDQo2OS4yNTAwIDY4OC42MDgwIFRkDQooIFRoaXMgaXMgYSBzbWFsbCBkZW1vbnN0cmF0aW9uIC5wZGYgZmlsZSAtICkgVGoNCkVUDQpCVA0KL0YxIDAwMTAgVGYNCjY5LjI1MDAgNjY0LjcwNDAgVGQNCigganVzdCBmb3IgdXNlIGluIHRoZSBWaXJ0dWFsIE1lY2hhbmljcyB0dXRvcmlhbHMuIE1vcmUgdGV4dC4gQW5kIG1vcmUgKSBUag0KRVQNCkJUDQovRjEgMDAxMCBUZg0KNjkuMjUwMCA2NTIuNzUyMCBUZA0KKCB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiApIFRqDQpFVA0KQlQNCi9GMSAwMDEwIFRmDQo2OS4yNTAwIDYyOC44NDgwIFRkDQooIEFuZCBtb3JlIHRleHQuIEFuZCBtb3JlIHRleHQuIEFuZCBtb3JlIHRleHQuIEFuZCBtb3JlIHRleHQuIEFuZCBtb3JlICkgVGoNCkVUDQpCVA0KL0YxIDAwMTAgVGYNCjY5LjI1MDAgNjE2Ljg5NjAgVGQNCiggdGV4dC4gQW5kIG1vcmUgdGV4dC4gQm9yaW5nLCB6enp6ei4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kICkgVGoNCkVUDQpCVA0KL0YxIDAwMTAgVGYNCjY5LjI1MDAgNjA0Ljk0NDAgVGQNCiggbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiApIFRqDQpFVA0KQlQNCi9GMSAwMDEwIFRmDQo2OS4yNTAwIDU5Mi45OTIwIFRkDQooIEFuZCBtb3JlIHRleHQuIEFuZCBtb3JlIHRleHQuICkgVGoNCkVUDQpCVA0KL0YxIDAwMTAgVGYNCjY5LjI1MDAgNTY5LjA4ODAgVGQNCiggQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgKSBUag0KRVQNCkJUDQovRjEgMDAxMCBUZg0KNjkuMjUwMCA1NTcuMTM2MCBUZA0KKCB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBFdmVuIG1vcmUuIENvbnRpbnVlZCBvbiBwYWdlIDIgLi4uKSBUag0KRVQNCmVuZHN0cmVhbQ0KZW5kb2JqDQoNCjYgMCBvYmoNCjw8DQovVHlwZSAvUGFnZQ0KL1BhcmVudCAzIDAgUg0KL1Jlc291cmNlcyA8PA0KL0ZvbnQgPDwNCi9GMSA5IDAgUiANCj4+DQovUHJvY1NldCA4IDAgUg0KPj4NCi9NZWRpYUJveCBbMCAwIDYxMi4wMDAwIDc5Mi4wMDAwXQ0KL0NvbnRlbnRzIDcgMCBSDQo+Pg0KZW5kb2JqDQoNCjcgMCBvYmoNCjw8IC9MZW5ndGggNjc2ID4+DQpzdHJlYW0NCjIgSg0KQlQNCjAgMCAwIHJnDQovRjEgMDAyNyBUZg0KNTcuMzc1MCA3MjIuMjgwMCBUZA0KKCBTaW1wbGUgUERGIEZpbGUgMiApIFRqDQpFVA0KQlQNCi9GMSAwMDEwIFRmDQo2OS4yNTAwIDY4OC42MDgwIFRkDQooIC4uLmNvbnRpbnVlZCBmcm9tIHBhZ2UgMS4gWWV0IG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gKSBUag0KRVQNCkJUDQovRjEgMDAxMCBUZg0KNjkuMjUwMCA2NzYuNjU2MCBUZA0KKCBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSApIFRqDQpFVA0KQlQNCi9GMSAwMDEwIFRmDQo2OS4yNTAwIDY2NC43MDQwIFRkDQooIHRleHQuIE9oLCBob3cgYm9yaW5nIHR5cGluZyB0aGlzIHN0dWZmLiBCdXQgbm90IGFzIGJvcmluZyBhcyB3YXRjaGluZyApIFRqDQpFVA0KQlQNCi9GMSAwMDEwIFRmDQo2OS4yNTAwIDY1Mi43NTIwIFRkDQooIHBhaW50IGRyeS4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gKSBUag0KRVQNCkJUDQovRjEgMDAxMCBUZg0KNjkuMjUwMCA2NDAuODAwMCBUZA0KKCBCb3JpbmcuICBNb3JlLCBhIGxpdHRsZSBtb3JlIHRleHQuIFRoZSBlbmQsIGFuZCBqdXN0IGFzIHdlbGwuICkgVGoNCkVUDQplbmRzdHJlYW0NCmVuZG9iag0KDQo4IDAgb2JqDQpbL1BERiAvVGV4dF0NCmVuZG9iag0KDQo5IDAgb2JqDQo8PA0KL1R5cGUgL0ZvbnQNCi9TdWJ0eXBlIC9UeXBlMQ0KL05hbWUgL0YxDQovQmFzZUZvbnQgL0hlbHZldGljYQ0KL0VuY29kaW5nIC9XaW5BbnNpRW5jb2RpbmcNCj4+DQplbmRvYmoNCg0KMTAgMCBvYmoNCjw8DQovQ3JlYXRvciAoUmF2ZSBcKGh0dHA6Ly93d3cubmV2cm9uYS5jb20vcmF2ZVwpKQ0KL1Byb2R1Y2VyIChOZXZyb25hIERlc2lnbnMpDQovQ3JlYXRpb25EYXRlIChEOjIwMDYwMzAxMDcyODI2KQ0KPj4NCmVuZG9iag0KDQp4cmVmDQowIDExDQowMDAwMDAwMDAwIDY1NTM1IGYNCjAwMDAwMDAwMTkgMDAwMDAgbg0KMDAwMDAwMDA5MyAwMDAwMCBuDQowMDAwMDAwMTQ3IDAwMDAwIG4NCjAwMDAwMDAyMjIgMDAwMDAgbg0KMDAwMDAwMDM5MCAwMDAwMCBuDQowMDAwMDAxNTIyIDAwMDAwIG4NCjAwMDAwMDE2OTAgMDAwMDAgbg0KMDAwMDAwMjQyMyAwMDAwMCBuDQowMDAwMDAyNDU2IDAwMDAwIG4NCjAwMDAwMDI1NzQgMDAwMDAgbg0KDQp0cmFpbGVyDQo8PA0KL1NpemUgMTENCi9Sb290IDEgMCBSDQovSW5mbyAxMCAwIFINCj4+DQoNCnN0YXJ0eHJlZg0KMjcxNA0KJSVFT0YNCg==`\n\n\n\n// Decode the base64 string\nconst buffer = Buffer.from(dataURL.split(\",\")[1], 'base64');\n\nconsole.log(buffer)\n\nconst form = new FormData()\n\nform.append('file', buffer, {\n  filename: \"Testing File Data.pdf\",\n  contentType: \"application/pdf\"\n});\n\nform.append(\"folderId\", 165720113185);\nform.append(\"fileName\", \"Testing File Data.pdf\");\nform.append(\"options\", JSON.stringify({ access: \"PRIVATE\" }));\n\n// Make the request to HubSpot API\nlet HubSpotResponse;\ntry {\n  HubSpotResponse = await fetch(\"<https://api.hubapi.com/files/v3/files>\", {\n    method: \"POST\",\n    body: form,\n    headers: {\n      Authorization: `Bearer ${HubSpot_access_token}`,\n    },\n  });\n\n  console.log(await HubSpotResponse.json())\n} catch (error) {\n  //Capture exception\n  console.log(error)\n}```"
  },
  {
    "text": "<@U7BEP5R7T> Did you try this ? <https://developers.HubSpot.com/docs/api/crm/imports>\n```            \"columnName\": \"Association Label\",\n            \"columnType\": \"FLEXIBLE_ASSOCIATION_LABEL\",\n            \"columnObjectTypeId\": \"0-1\",\n            \"toColumnObjectTypeId\": \"0-2\"```",
    "time_stamp": "2024-05-22 00:59:53"
  }
]