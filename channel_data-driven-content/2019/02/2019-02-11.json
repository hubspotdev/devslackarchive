[
  {
    "poster": {
      "poster_name": "Luca Bartoli",
      "poster_handle": "bartoli"
    },
    "time_stamp": "2019-02-11 04:49:17",
    "text": "<@UEZ3125LL> tried your method, but it doesn't work anymore (text is naturally escaped before you ask the field to hubDB). Moreover, you can't edit it without exporting and reimporting.\nWe found out a variation of your method: write html in the rtf field, then {{ row.your_field|replace('&amp;gt;','&gt;')|replace('&amp;lt;','&lt;') }}\nObviously, you can't use &lt; and &gt; symbols in your text :wink:"
  },
  {
    "poster": {
      "poster_name": "Claudio Cappelletti",
      "poster_handle": "cca"
    },
    "time_stamp": "2019-02-11 06:39:32",
    "text": "Hi, I'm trying to use the following function:\nhubdb_table_row\nBut I get an error, it was working in the last weeks but now I get an error in the editor"
  },
  {
    "poster": {
      "poster_name": "Claudio Cappelletti",
      "poster_handle": "cca"
    },
    "time_stamp": "2019-02-11 06:39:46",
    "text": "This is the error:\nTemplateSyntaxException: Error invoking function 'hubdb_table_row'"
  },
  {
    "poster": {
      "poster_name": "Luca Bartoli",
      "poster_handle": "bartoli"
    },
    "time_stamp": "2019-02-11 06:42:09",
    "text": "<@UBKP9GNBH> we are facing the same issue in custom modules since this morning. There is a new field \"HubDB table field\", you can use it to fix"
  },
  {
    "poster": {
      "poster_name": "Claudio Cappelletti",
      "poster_handle": "cca"
    },
    "time_stamp": "2019-02-11 06:45:09",
    "text": "<@UAX5LJ9K3> Hi Luca, thanks for the answer. The new field is used only to choose the table? In my code I'm trying to choose a row choosed by an ID insert by the user."
  },
  {
    "poster": {
      "poster_name": "Claudio Cappelletti",
      "poster_handle": "cca"
    },
    "time_stamp": "2019-02-11 06:46:03",
    "text": "This example:\n{% set row = hubdb_table_row(#tableid#, module.id_libro) %}\nthe #tableid# is the id of the table, then the user insert the number of the row"
  },
  {
    "poster": {
      "poster_name": "Claudio Cappelletti",
      "poster_handle": "cca"
    },
    "time_stamp": "2019-02-11 06:46:11",
    "text": "and after this I use the value of the value like this:"
  },
  {
    "poster": {
      "poster_name": "Claudio Cappelletti",
      "poster_handle": "cca"
    },
    "time_stamp": "2019-02-11 06:46:19",
    "text": "{{ row.sinossi_lunga }}"
  },
  {
    "poster": {
      "poster_name": "Luca Bartoli",
      "poster_handle": "bartoli"
    },
    "time_stamp": "2019-02-11 06:48:03",
    "text": "{% set rows =hubdb_table_rows( module.hubdbtable_field)  %}\n\n{% for row in rows %}"
  },
  {
    "poster": {
      "poster_name": "Claudio Cappelletti",
      "poster_handle": "cca"
    },
    "time_stamp": "2019-02-11 06:48:17",
    "text": "and then I print out only the needed ID, right?"
  },
  {
    "poster": {
      "poster_name": "Luca Bartoli",
      "poster_handle": "bartoli"
    },
    "time_stamp": "2019-02-11 06:49:13",
    "text": "probably you can try the same hubdb_table_row to fetch a single row"
  },
  {
    "poster": {
      "poster_name": "Luca Bartoli",
      "poster_handle": "bartoli"
    },
    "time_stamp": "2019-02-11 06:50:07",
    "text": "i would try {% set row = hubdb_table_row(#tableid#, module.id_libro) %} where #tableid# is your hubdb field"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-02-11 08:28:12",
    "text": "this code works on the front end and didn’t throw errors when the template was published.\n```{% set x = hubdb_table_column(dynamic_page_hubdb_row.hs_child_table_id, 'shade_types').options %}```\nNow the IDE is showing this error and preventing published edits\n`TemplateSyntaxException: Error invoking function 'hubdb_table_column'`",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-02-11 08:29:06"
      },
      {
        "time_stamp": "2019-02-11 08:31:51"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-02-11 08:29:06",
    "text": "Can you send me the template"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-02-11 08:31:51",
    "text": "yes. It is also worth noting that this is a template partial coded file that’s included in a master template"
  }
]