[
  {
    "poster": {
      "poster_name": "Valon Breznica",
      "poster_handle": "valon.breznica"
    },
    "time_stamp": "2019-05-15 07:27:28",
    "text": "Is there any tool out there to convert from -&gt; ||||||||| &lt;div class=\\\"collapsenavbar-collapsenavbar-ex1-collapse\\\"&gt;\\n |||| to HTML and vice versa?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-15 07:29:50",
    "edited": {
      "time_stamp": "2019-05-15 07:30:05"
    },
    "text": "erm, what’s with the “||||||||” stuff? as for converting the rest of that to html, you’d just remove the “\\” and the \\n and voila"
  },
  {
    "poster": {
      "poster_name": "Valon Breznica",
      "poster_handle": "valon.breznica"
    },
    "time_stamp": "2019-05-15 07:34:11",
    "text": "Well the \"||||||\" was a stupid way of writing a markup instead of using :arrow_right: \"content\" :arrow_left: so my bad.\n\nBut doing that in this small line is no problem, but how about when the the html is a big code ? :slightly_smiling_face:",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-05-15 07:35:19"
      },
      {
        "time_stamp": "2019-05-15 07:36:09"
      },
      {
        "time_stamp": "2019-05-15 07:41:43"
      },
      {
        "time_stamp": "2019-05-15 07:43:32"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Guido Porcaro",
      "poster_handle": "guido.porcaro"
    },
    "time_stamp": "2019-05-15 07:35:19",
    "edited": {
      "time_stamp": "2019-05-15 07:35:52"
    },
    "text": "Next time use the backtick for the content because if you do: `text(backtick)\n\nIt will write `text`"
  },
  {
    "poster": {
      "poster_name": "Guido Porcaro",
      "poster_handle": "guido.porcaro"
    },
    "time_stamp": "2019-05-15 07:36:09",
    "edited": {
      "time_stamp": "2019-05-15 07:36:31"
    },
    "text": "or use three of them ``\\` (the \\ need to be removed)\n\nLike: ```content```"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2019-05-15 07:39:07",
    "text": "Is there some kinda function that does this? `content.topic_list|contains(\"module.category\")`",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-05-15 07:45:29"
      },
      {
        "time_stamp": "2019-05-15 07:45:31"
      },
      {
        "time_stamp": "2019-05-15 07:51:36"
      },
      {
        "time_stamp": "2019-05-15 07:52:03"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Valon Breznica",
      "poster_handle": "valon.breznica"
    },
    "time_stamp": "2019-05-15 07:41:43",
    "edited": {
      "time_stamp": "2019-05-15 07:41:54"
    },
    "text": "Oh nice !  `cool`"
  },
  {
    "poster": {
      "poster_name": "Valon Breznica",
      "poster_handle": "valon.breznica"
    },
    "time_stamp": "2019-05-15 07:43:32",
    "text": "```cool```"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-15 07:45:29",
    "text": "this might be where you want to look"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-15 07:45:31",
    "text": "<https://designers.HubSpot.com/docs/hubl/operators-and-expression-tests>"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2019-05-15 07:51:36",
    "text": "Bless you"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-15 07:52:03",
    "text": "i wouldnt go that far :wink:"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 07:56:05",
    "text": "We've managed to reduce the logic requirements for this particular task, fortunately"
  },
  {
    "poster": {
      "poster_name": "David",
      "poster_handle": "david589"
    },
    "time_stamp": "2019-05-15 10:39:10",
    "edited": {
      "time_stamp": "2019-05-15 10:43:42"
    },
    "text": "Best config for Atom IDE width remote-ftp\nConfigure watch to upload CSS from SASS compiled.\n\n```\n{\n    \"protocol\": \"ftp\",\n    \"host\": \"<http://ftp.hubapi.com|ftp.hubapi.com>\",\n    \"port\": 3200,\n    \"user\": \"user\",\n    \"pass\": \"password\",\n    \"promptForPass\": false,\n    \"remote\": \"/portals/0000-portalname/content/designs/Custom/\",\n    \"local\": \"\",\n    \"agent\": \"\",\n    \"secure\": true,\n    \"privatekey\": \"\",\n    \"passphrase\": \"\",\n    \"hosthash\": \"\",\n    \"ignorehost\": true,\n    \"connTimeout\": 10000,\n    \"keepalive\": 10000,\n    \"keyboardInteractive\": false,\n    \"keyboardInteractiveForPass\": false,\n    \"remoteCommand\": \"\",\n    \"remoteShell\": \"\",\n    \"watch\": [],\n    \"watchTimeout\": 500\n}\n```"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 11:52:06",
    "text": "So I have a thing where I'm testing out if I can use a `macro in a macro` to serve up a bunch o'content that is first filtered through some `if/else` loops based on a `dynamic_page_hubdb_row.foreign_id != null`\n\nThe `macro in a macro` works nicely to render out the desired content if taken OUT of the `dynamic_page_hubdb_row.foreign_id != null` shenanigans... but it dies when I try to have the parent macro contain that if/else logic with the foreign_id.\n\nAnyone have any thoughts on this? Are macros unable to handle if statements if that if statement is referring to a dynamic_page item?",
    "reply_count": 73,
    "reply_users_count": 5,
    "replies": [
      {
        "time_stamp": "2019-05-15 11:54:05"
      },
      {
        "time_stamp": "2019-05-15 11:56:06"
      },
      {
        "time_stamp": "2019-05-15 11:58:33"
      },
      {
        "time_stamp": "2019-05-15 11:58:41"
      },
      {
        "time_stamp": "2019-05-15 11:59:01"
      },
      {
        "time_stamp": "2019-05-15 11:59:13"
      },
      {
        "time_stamp": "2019-05-15 12:01:48"
      },
      {
        "time_stamp": "2019-05-15 12:04:43"
      },
      {
        "time_stamp": "2019-05-15 12:05:02"
      },
      {
        "time_stamp": "2019-05-15 12:07:04"
      },
      {
        "time_stamp": "2019-05-15 12:12:14"
      },
      {
        "time_stamp": "2019-05-15 12:13:12"
      },
      {
        "time_stamp": "2019-05-15 12:21:11"
      },
      {
        "time_stamp": "2019-05-15 12:23:57"
      },
      {
        "time_stamp": "2019-05-15 12:24:38"
      },
      {
        "time_stamp": "2019-05-15 12:24:40"
      },
      {
        "time_stamp": "2019-05-15 12:24:40"
      },
      {
        "time_stamp": "2019-05-15 12:24:50"
      },
      {
        "time_stamp": "2019-05-15 12:24:56"
      },
      {
        "time_stamp": "2019-05-15 12:25:11"
      },
      {
        "time_stamp": "2019-05-15 12:25:18"
      },
      {
        "time_stamp": "2019-05-15 12:25:40"
      },
      {
        "time_stamp": "2019-05-15 12:25:52"
      },
      {
        "time_stamp": "2019-05-15 12:26:34"
      },
      {
        "time_stamp": "2019-05-15 12:26:54"
      },
      {
        "time_stamp": "2019-05-15 12:29:57"
      },
      {
        "time_stamp": "2019-05-15 12:30:00"
      },
      {
        "time_stamp": "2019-05-15 12:30:04"
      },
      {
        "time_stamp": "2019-05-15 12:30:12"
      },
      {
        "time_stamp": "2019-05-15 12:30:37"
      },
      {
        "time_stamp": "2019-05-15 12:31:27"
      },
      {
        "time_stamp": "2019-05-15 12:33:11"
      },
      {
        "time_stamp": "2019-05-15 12:33:28"
      },
      {
        "time_stamp": "2019-05-15 12:33:44"
      },
      {
        "time_stamp": "2019-05-15 12:34:30"
      },
      {
        "time_stamp": "2019-05-15 12:34:43"
      },
      {
        "time_stamp": "2019-05-15 12:34:47"
      },
      {
        "time_stamp": "2019-05-15 12:35:49"
      },
      {
        "time_stamp": "2019-05-15 12:36:02"
      },
      {
        "time_stamp": "2019-05-15 12:36:58"
      },
      {
        "time_stamp": "2019-05-15 12:37:43"
      },
      {
        "time_stamp": "2019-05-15 12:37:49"
      },
      {
        "time_stamp": "2019-05-15 12:38:10"
      },
      {
        "time_stamp": "2019-05-15 12:39:18"
      },
      {
        "time_stamp": "2019-05-15 12:39:27"
      },
      {
        "time_stamp": "2019-05-15 12:40:02"
      },
      {
        "time_stamp": "2019-05-15 12:40:39"
      },
      {
        "time_stamp": "2019-05-15 12:41:05"
      },
      {
        "time_stamp": "2019-05-15 12:41:51"
      },
      {
        "time_stamp": "2019-05-15 12:43:13"
      },
      {
        "time_stamp": "2019-05-15 12:43:27"
      },
      {
        "time_stamp": "2019-05-15 13:15:58"
      },
      {
        "time_stamp": "2019-05-15 13:34:17"
      },
      {
        "time_stamp": "2019-05-15 13:34:24"
      },
      {
        "time_stamp": "2019-05-15 14:50:04"
      },
      {
        "time_stamp": "2019-05-15 14:51:18"
      },
      {
        "time_stamp": "2019-05-15 14:56:32"
      },
      {
        "time_stamp": "2019-05-15 14:57:09"
      },
      {
        "time_stamp": "2019-05-15 14:57:14"
      },
      {
        "time_stamp": "2019-05-15 14:57:51"
      },
      {
        "time_stamp": "2019-05-15 14:58:11"
      },
      {
        "time_stamp": "2019-05-15 14:58:51"
      },
      {
        "time_stamp": "2019-05-15 14:59:25"
      },
      {
        "time_stamp": "2019-05-15 14:59:37"
      },
      {
        "time_stamp": "2019-05-15 15:01:29"
      },
      {
        "time_stamp": "2019-05-15 15:01:46"
      },
      {
        "time_stamp": "2019-05-15 15:02:18"
      },
      {
        "time_stamp": "2019-05-15 15:02:20"
      },
      {
        "time_stamp": "2019-05-15 15:04:37"
      },
      {
        "time_stamp": "2019-05-15 15:05:25"
      },
      {
        "time_stamp": "2019-05-15 15:06:02"
      },
      {
        "time_stamp": "2019-05-15 15:06:23"
      },
      {
        "time_stamp": "2019-05-15 15:07:19"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-15 11:54:05",
    "text": "good question. not sure I’ve tested your exact situation but I’ve done if statements to determine if I’m going to run a nested macro before and it worked. I just didn’t do it with dynamic pages"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 11:54:13",
    "text": "<@U7SL518D6> Imma have a slew of fun 'you can do this this way' after this project...."
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 11:56:06",
    "text": "Yeah, I've tested out the initial nest. It's only when dropping it into the parent dynamic content that I'm going to need to repeat all over the place that it breaks. Of course."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-15 11:56:17",
    "text": "I can definitely say that breaking your code into smaller reusable macros like you’re doing is definitely the right thing to do when you’re building complex stuff like you’ve been doing. I almost always end up doing that. makes it easier to test your stuff, and makes it easier to focus on just the smaller functionality separate",
    "reply_count": 7,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-05-15 17:17:57"
      },
      {
        "time_stamp": "2019-05-15 17:18:40"
      },
      {
        "time_stamp": "2019-05-15 17:19:20"
      },
      {
        "time_stamp": "2019-05-15 17:20:15"
      },
      {
        "time_stamp": "2019-05-15 17:20:45"
      },
      {
        "time_stamp": "2019-05-15 17:20:55"
      },
      {
        "time_stamp": "2019-05-15 17:22:53"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-15 11:58:33",
    "text": "Would you happen to be nesting the macros 20 levels deep at the point it breaks?\n<https://github.com/HubSpot/jinjava/pull/308>"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 11:58:41",
    "edited": {
      "time_stamp": "2019-05-15 12:05:26"
    },
    "text": "here is the current framework where it dies:\n\n```\n{% macro asset_name() %}\n  {% for item in row.role %}\n    {{ item.name }}\n  {% endfor %}\n{% endmacro %}\n\n{% macro foreign_logic( arg ) %}\n  {% if dynamic_page_hubdb_row.foreign_id1 != null %}\n    {% for row in dynamic_page_hubdb_row.foreign_id1 %}\n      {{ arg }}\n    {% endfor %}\n  {% elif dynamic_page_hubdb_row.foreign_id12 != null %}\n    {% for row in dynamic_page_hubdb_row.foreign_id2 %}\n      {{ arg }}\n    {% endfor %}\n  {% elif dynamic_page_hubdb_row.foreign_id3 != null %}\n    {% for row in dynamic_page_hubdb_row.foreign_id3 %}\n      {{ arg }}\n    {% endfor %}\n  {% endif %}\n\n{% macro conf_content( value ) %}\n  {{ value }}\n  {{ row.hs_name }}\n  {{ row.interior_content }}\n  &lt;img src=\"{{ row.image_1.url }}\"&gt;\n{% endmacro %}\n\n{{ foreign_logic( asset_name() ) }}  &lt;!--- Doesn't work --&gt;\n\n{% if dynamic_page_hubdb_row.foreign_id1 != null %}\n          {% for row in dynamic_page_hubdb_row.foreign_id1 %}\n            {{ conf_content(asset_name()) }}\n          {% endfor %}\n        {% endif %}    &lt;!--- Works  --&gt;\n```"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 11:59:01",
    "text": "Hm."
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 11:59:13",
    "text": "That SHOULDN'T hit 20 levels deep...."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-15 12:01:48",
    "text": "yea doesn’t look like it does.\n\nI wonder if it has to do with the way you’re nesting the macros. I’ve never tried doing `{{ conf_content(asset_name()) }}`\n\nYou should be able to just do `{{ conf_content() }}` and reference asset_name() inside it."
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 12:04:43",
    "text": "... I can't say I'm following your logic on the difference between the two methods you are saying there... Are you meaning referencing `asset_name()` in the original `macro` structure?"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 12:05:02",
    "text": "Regardless -- the `conf_content` is the example that works"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 12:06:13",
    "text": "I love me some macros"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-15 12:07:04",
    "text": "if it works it works. I was meaning nesting a macro as a parameter for a macro seemed like a pattern prone to problems or quirks.\n\nThe workaround being that macros themselves can be called within the definition of another macro. So you don’t need to actually set them as a parameter."
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 12:12:14",
    "edited": {
      "time_stamp": "2019-05-15 12:24:44"
    },
    "text": "ah you're meaning a structure like\n```\n{% macro happy() %}\nfun things \n{% endmacro %}\n\n{% macro doubleFun() %}\n   {{ happy() }}\n{% endmacro %}\n```\n\nunfortunately, I'm really wanting to be able to have a `parameter` for `doubleFun` so I can use different macros within it based on it's location on the page."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-15 12:13:12",
    "text": "ahh, interesting"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 12:21:11",
    "text": "indeed. I wonder if <@UD53A9UUR> has played with anything like this. Or if any of the HS star-team have any insights there."
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-15 12:23:57",
    "text": "a: i like the use of doublefun, but it should be camelCased."
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 12:24:38",
    "text": "fixed. just for you"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-15 12:24:40",
    "text": ":point_up_2::skin-tone-2:  gonna have to agree with Dennis"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-15 12:24:40",
    "text": "lol"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-15 12:24:50",
    "text": "b: i got nothing on this.  macro love is something i look to <@U7SL518D6> for"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-15 12:24:56",
    "text": "maybe <@U7ADCU3BM>"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-15 12:25:11",
    "text": "or <@U38EZFVFE>"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-15 12:25:18",
    "text": "unless he is working on a floor"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 12:25:40",
    "text": "welp. I'll just keep poking at it in hopes that one day I will make my dreams reality"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-15 12:25:52",
    "text": ":themoreyouknow:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-15 12:26:34",
    "text": "<https://gph.is/1HxZsab>"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 12:26:54",
    "text": ":rolling_on_the_floor_laughing:"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 12:29:57",
    "text": "so I don't fully understand whats happening here"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 12:30:00",
    "text": "but I am joining the party"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 12:30:04",
    "text": ":tada:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-15 12:30:12",
    "text": ":rolling_on_the_floor_laughing:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-15 12:30:37",
    "text": "Huzzah!"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 12:31:27",
    "edited": {
      "time_stamp": "2019-05-15 12:31:37"
    },
    "text": "I think, I had macros calling other macros, that should be fine"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 12:33:11",
    "text": "tho, you want to print `{{ arg }}` XX times?"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 12:33:28",
    "text": "```   {% for row in dynamic_page_hubdb_row.foreign_id1 %}\n      {{ arg }}\n    {% endfor %}```"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 12:33:44",
    "text": "is it the part the code is not evaluating?"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 12:34:30",
    "text": "oh I see it now, nvm"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 12:34:43",
    "edited": {
      "time_stamp": "2019-05-15 12:36:14"
    },
    "text": "okay I think for what you want to do is better to use the caller()\n<https://designers.HubSpot.com/docs/hubl/hubl-variables-and-macros-syntax>"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 12:34:47",
    "text": "instead different macros"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 12:35:49",
    "text": "i shall check this out"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 12:36:02",
    "text": "glad you could make it to the party!"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 12:36:58",
    "edited": {
      "time_stamp": "2019-05-15 15:59:08"
    },
    "text": "because what are you sending (the val of `arg`) is being processed before, so the hubL in that macro is not hubL anymore?"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 12:37:43",
    "text": "actually its a whole HTML block so you would like to `|trim` etc"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 12:37:49",
    "text": "the other option is change the logic"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 12:38:10",
    "text": "and call the conf_content inside the other macro"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 12:39:18",
    "text": "oh scramp. that might check out nicely"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 12:39:27",
    "text": "I shall try and report back"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 12:40:02",
    "text": "```\n{% macro foreign_logic( arg ) %}\n  {% if dynamic_page_hubdb_row.foreign_id1 != null %}\n    {% for row in dynamic_page_hubdb_row.foreign_id1 %}\n      {{ conf_content(row,args,whateverYouWantToSend) }}\n    {% endfor %}\n  {% elif dynamic_page_hubdb_row.foreign_id12 != null %}\n    {% for row in dynamic_page_hubdb_row.foreign_id2 %}\n      {{ conf_content(row,args,whateverYouWantToSend) }}\n    {% endfor %}\n  {% elif dynamic_page_hubdb_row.foreign_id3 != null %}\n    {% for row in dynamic_page_hubdb_row.foreign_id3 %}\n            {{ conf_content(row,args,whateverYouWantToSend) }}\n    {% endfor %}\n  {% endif %}\n```"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 12:40:39",
    "edited": {
      "time_stamp": "2019-05-15 12:40:45"
    },
    "text": "```\n{% macro conf_content(row,value) %}\n  {{ value }}\n  {{ row.hs_name }}\n  {{ row.interior_content }}\n  &lt;img src=\"{{ row.image_1.url }}\"&gt;\n{% endmacro %}\n```"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 12:41:05",
    "text": "something like that"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-15 12:41:51",
    "text": "#nonfunctionalprograming"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-15 12:43:13",
    "text": "#macrotacularprogramming"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-15 12:43:27",
    "edited": {
      "time_stamp": "2019-05-15 12:43:40"
    },
    "text": ":eyes:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-15 13:15:58",
    "text": "ha"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 13:34:17",
    "text": "welp. got distracted by a person looking at my roof :neutral_face:\n\nAnyways. <@U7ADCU3BM> -- on that `foreign_logic` block, wouldn't that structure still mean I would have to have a determined item that I would want to send through the instance `{{ conf_content() }}`, as opposed to a possibly variable param for different uses of the `foreign_id` macro? Regardless, swapping the order doesn't seem to impact the macro's ability to correctly process the multiple levels of hubL. Perhaps I'm missing something at the moment... I'll revisit this later."
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 13:34:24",
    "text": "Thanks for the input folks"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 14:50:04",
    "edited": {
      "time_stamp": "2019-05-15 14:50:10"
    },
    "text": "now that I have double check I dunno what I was thinking? :thinking_face:.\nMaybe I though the `arg` was parse to the `conf_content` initially.\n\nTaking a depth look:\n\nDid you checked the output of `asset_name()`?\nThat's probably gonna be like:\n```\n\nvalue1\n\n\nvalue2\n\n\nvalue3\n\n```"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 14:51:18",
    "text": "and that whole string is what {{ arg }} is (with the \\n too)"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 14:56:32",
    "text": "if the main issue is just the line where you are sending a macro as parameter you can try saving it as a var before\n```{% set arg = asset_name() %}\n{{ foreign_logic( arg ) }}\n```"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-15 14:57:09",
    "text": "this guy joined the party til the end :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-15 14:57:14",
    "text": "no sleep til brooklyn!"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-15 14:57:51",
    "text": "also, that looks about right"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 14:58:11",
    "text": ":slightly_smiling_face: thanks for digging in a bit more, i've resorted to forgoing the parent macro for now, but would love to solve for this.\n\nso `asset_name()` as a standalone doesn't output a value. When wrapped in the appropriate `{% for row in dynamic_page_hubdb_row.foreign_id %}` it happily outputs the requested row value (in this case ``{{ row.asset_name``}} so this currently works :\n\n```{% if dynamic_page_hubdb_row.customer_stories != null %}\n            {% for row in dynamic_page_hubdb_row.customer_stories %}\n              {{ conf_content( asset_name() ) }}\n            {% endfor %}\n          {% elif dynamic_page_hubdb_row.datasheets != null %}\n            {% for row in dynamic_page_hubdb_row.datasheets %}\n              {{ conf_content( asset_name() ) }}\n            {% endfor %}\n{% endif %}\n```"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 14:58:51",
    "text": "```{% macro asset_name() %}\n  {{ row.asset_name }}\n{% endmacro %}```"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 14:59:25",
    "text": "```{% macro conf_content( value ) %}\n  {{ value }}\n{% endmacro %}```"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 14:59:37",
    "text": "with those three all paired happily. it works."
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 15:01:29",
    "text": "hmm, so what about calling the asset_name() inside the loop too?"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 15:01:46",
    "text": "sorry, still not fully get what are you doing here :upside_down_face:\nso talking blind"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 15:02:18",
    "text": "it's when you dump the `{% if dynamic_page_hubdb_row.foreignId %}\n{% for row in dynamic_page_hubdb_row.foreignId %}` into a macro and try to then pull in the content&gt;asset_name that I'm getting no results. I can flush a basic param (number for instance) all the way through without issue, but it seems that the rendering of the row content within dynamic nested macros is unhappy with me."
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 15:02:20",
    "edited": {
      "time_stamp": "2019-05-15 15:02:35"
    },
    "text": "but I think you can send the row as parameter to `asset_name(row)`, and that should print as expected"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 15:04:37",
    "text": "I think that would work for a normal child row of the table, but I think because this is pulling in content from a table referenced by a foreign id, it requires that foreign_id wrapper loop"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 15:05:25",
    "edited": {
      "time_stamp": "2019-05-15 15:51:15"
    },
    "text": "so its related to the scoped vars in the loop"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-15 15:06:02",
    "text": "indeed."
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 15:06:23",
    "text": "you could use the `append()` to save the val out the loop then"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-15 15:07:19",
    "edited": {
      "time_stamp": "2019-05-15 15:07:31"
    },
    "text": "```\n{% set val = [] %}\n{% for item in items %}\n{% set _dump = val.append( item ) %}\n{% endfor %}\n{{ val[0] }} \n```"
  },
  {
    "poster": {
      "poster_name": "Steven Hambleton",
      "poster_handle": "steven994"
    },
    "time_stamp": "2019-05-15 17:17:57",
    "text": "So is Hubl using Twig for it's templating? Looks pretty much the same!"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-15 17:18:40",
    "text": "HubL is HubSpots version of jinjava"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-15 17:19:20",
    "text": "If you google HubSpot jinjava you will find HubSpot's open source repo for it"
  },
  {
    "poster": {
      "poster_name": "Steven Hambleton",
      "poster_handle": "steven994"
    },
    "time_stamp": "2019-05-15 17:20:15",
    "text": "Interesting, wonder why they felt the need to fork it?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-15 17:20:45",
    "text": "Because they added a lot of features on top of it"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-15 17:20:55",
    "text": "That are HubSpot specific"
  },
  {
    "poster": {
      "poster_name": "Steven Hambleton",
      "poster_handle": "steven994"
    },
    "time_stamp": "2019-05-15 17:22:53",
    "edited": {
      "time_stamp": "2019-05-15 17:22:57"
    },
    "text": "Ah ok I'll check out the notes.\n\nI'm amazed to find a platform that allows you to extend a layout, game changer!"
  }
]