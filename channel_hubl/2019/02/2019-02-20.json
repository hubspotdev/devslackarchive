[
  {
    "poster": {
      "poster_name": "Akin Ekici",
      "poster_handle": "akin.ekici"
    },
    "time_stamp": "2019-02-20 07:50:54",
    "text": "Hi, what is a blog posts topic? Is it same as the tag?",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-02-20 08:00:01"
      },
      {
        "time_stamp": "2019-02-20 08:06:52"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-20 07:55:42",
    "text": "yes"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 08:00:01",
    "text": "They renamed them to be more uniform with other CMS’s to reduce confusion. Some documentation still refers to them by their old name"
  },
  {
    "poster": {
      "poster_name": "Akin Ekici",
      "poster_handle": "akin.ekici"
    },
    "time_stamp": "2019-02-20 08:06:52",
    "text": "Thanks"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-02-20 10:33:25",
    "edited": {
      "time_stamp": "2019-02-20 10:33:39"
    },
    "text": "is there a better way to generate a slug / ID friendly value from a string other than adding a dozen `replace` filters in hubl yet?"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-02-20 10:39:10",
    "text": "For example, I usually do something like this to create an anchor link/ID to link to: `{{ post.name|lower|replace(' ','-')|replace('\"','')|replace(\"'\",\"\")|replace(',','') }}` and things get unwieldy rather quickly"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-02-20 10:40:33",
    "text": "Ah, I'm just now seeing `regex_replace` filter. This will work!"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 10:40:37",
    "edited": {
      "time_stamp": "2019-02-20 10:41:11"
    },
    "text": "could use a hubl filter to urlencode"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 10:40:40",
    "text": "or that"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 10:40:43",
    "text": "that works great too"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-02-20 10:41:14",
    "text": "I've tried urlencode but ran into issues with that for anchor links"
  },
  {
    "text": "FYI - regex_replace filter is not in the sidebar of the hubl supported filters documentation page",
    "time_stamp": "2019-02-20 10:45:30",
    "edited": {
      "time_stamp": "2019-02-20 10:45:41"
    },
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-02-20 10:46:24"
      },
      {
        "time_stamp": "2019-02-20 11:22:15"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 10:46:24",
    "text": "<@U6W3H6YN8>"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2019-02-20 11:22:15",
    "text": "Should be fixed! Thanks"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 14:15:21",
    "edited": {
      "time_stamp": "2019-02-20 14:16:23"
    },
    "text": "silly odd question - *anyone know if it’s possible in HubL to get a variable’s variable name as a string so you can print it?*\n\nExample\nHoneyBadger = “dont give”\n`{{HoneyBadger}}` prints `dont give`\nI want  to print  `HoneyBadger`"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 14:17:42",
    "edited": {
      "time_stamp": "2019-02-20 14:18:59"
    },
    "text": "use-case scenario - I’m making a standard macro for debugging purposes, so I don’t have to repeat myself a hundred times to do the same thing in a really complicated HubDB implementation I’m working on.\n\nWorks great, but I’m getting lazier, currently have to use `{{debugPrint(variable,variableLabel)}}`\n\nI want to be able to do\n`{{debugPrint(variable)}}`",
    "reply_count": 25,
    "reply_users_count": 5,
    "replies": [
      {
        "time_stamp": "2019-02-20 14:18:49"
      },
      {
        "time_stamp": "2019-02-20 14:20:25"
      },
      {
        "time_stamp": "2019-02-20 14:21:28"
      },
      {
        "time_stamp": "2019-02-20 14:23:24"
      },
      {
        "time_stamp": "2019-02-20 14:24:01"
      },
      {
        "time_stamp": "2019-02-20 14:24:19"
      },
      {
        "time_stamp": "2019-02-20 14:25:02"
      },
      {
        "time_stamp": "2019-02-20 14:25:07"
      },
      {
        "time_stamp": "2019-02-20 14:26:36"
      },
      {
        "time_stamp": "2019-02-20 14:26:48"
      },
      {
        "time_stamp": "2019-02-20 14:26:57"
      },
      {
        "time_stamp": "2019-02-20 14:27:29"
      },
      {
        "time_stamp": "2019-02-20 14:28:51"
      },
      {
        "time_stamp": "2019-02-20 14:29:55"
      },
      {
        "time_stamp": "2019-02-20 14:31:10"
      },
      {
        "time_stamp": "2019-02-20 14:32:09"
      },
      {
        "time_stamp": "2019-02-20 14:32:19"
      },
      {
        "time_stamp": "2019-02-20 14:32:28"
      },
      {
        "time_stamp": "2019-02-20 14:32:29"
      },
      {
        "time_stamp": "2019-02-20 14:32:40"
      },
      {
        "time_stamp": "2019-02-20 14:32:40"
      },
      {
        "time_stamp": "2019-02-20 14:33:52"
      },
      {
        "time_stamp": "2019-02-20 14:35:35"
      },
      {
        "time_stamp": "2019-02-20 14:41:10"
      },
      {
        "time_stamp": "2019-02-20 14:42:18"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-02-20 14:18:49",
    "text": "have you checked the jinja docs yet? I'm pretty sure I've done this in the past, but I can't remember how...."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 14:20:25",
    "text": "I can’t find it, this particular thing is just  obscure so I’m getting just basic stuff like “how to set a jinja variable” when I search"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-02-20 14:21:28",
    "text": "I want to say my use case was creating an array of variables and their values... maybe search something like \"store variable name in array jinja\"?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 14:23:24",
    "text": "not getting anything remotely related"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-02-20 14:24:01",
    "text": "hm, sorry dude :confused:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 14:24:19",
    "text": "didn’t find what I was looking for but might have found something certainly interesting\n<https://github.com/pallets/jinja/issues/232>"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-02-20 14:25:02",
    "text": "Can’t you just not surround it in `{{ }}`"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-02-20 14:25:07",
    "edited": {
      "time_stamp": "2019-02-20 14:25:12"
    },
    "text": "`HoneyBadger`"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 14:26:36",
    "text": "but that would just return honeybadger everywhere i put the macro"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 14:26:48",
    "text": "lol I want to dynamically print the variable name"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 14:26:57",
    "text": "that I’m passing into the macro, as well as it’s value"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-02-20 14:27:29",
    "text": "The variable name isn’t copied to the macro. You are passing a pointer to the variable"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-02-20 14:28:51",
    "text": "Oh I see you want to pass the variable name to the function"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 14:29:55",
    "text": "yes. lol you were confusing me, I was like - what level of magic wielding am I trying to comprehend here"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-02-20 14:31:10",
    "text": "So you want to do `{{debugPrint(variable)}` or `{{debugPrint(variableLabel)}`?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 14:32:09",
    "text": "I want the first one.\n\nBasically here’s a simplified version of what my macro does. plan to make it do more\n```{%- macro debugPrint(variable,label)-%}{#Macro for printing variables into the layout more easily.#}\n  {%- if request.query_dict.hsDebug==true -%}\n    &lt;div&gt;&lt;span&gt;{{label}}:&lt;/span&gt;\n      &lt;code&gt;\n        {{- variable -}}\n      &lt;/code&gt;\n    &lt;/div&gt;\n  {%- endif -%}\n{%- endmacro -%}```"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 14:32:19",
    "text": "I want to kill the need for the label"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-02-20 14:32:28",
    "text": "You’ll always need the label"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 14:32:29",
    "text": "and just auto grab it from the variable itself"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-02-20 14:32:40",
    "text": "As soon as you get in the macro the variable is named `variable`"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 14:32:40",
    "text": "crush’n my dev dreams"
  },
  {
    "poster": {
      "poster_name": "Anthony Pizzurro",
      "poster_handle": "anthonypizzurro"
    },
    "time_stamp": "2019-02-20 14:33:52",
    "text": "What if `pprint` was more verbose?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 14:35:35",
    "text": "could be cool."
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-20 14:41:10",
    "text": "I can't assign a :bam emoji to senior coley's answer..dev dreams were crushed"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-20 14:42:18",
    "text": "<https://giphy.com/gifs/sad-arrested-development-george-michael-EYmAHLpw5LBbG>"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-20 14:43:37",
    "text": "Can a repeater be used in a custom module in a blog template?  "
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 14:45:12",
    "text": "yes"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-20 14:45:16",
    "text": "I wanna hack myself together a flexible column"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 14:45:30",
    "text": "you can kind of do that"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 14:45:32",
    "text": "that way"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-20 14:45:39",
    "text": "That's right"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-20 14:45:47",
    "text": "I won't be constrained"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 14:45:52",
    "text": "lol"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 14:46:21",
    "edited": {
      "time_stamp": "2019-02-20 14:46:30"
    },
    "text": "you cant nest modules however - I mean I’ve found a way to pull modules from another page into your module, but that’s different"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-20 14:46:22",
    "text": "Just gave that as an answer on the forums and liked it"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-20 14:46:52",
    "text": "Better get a new badge for it"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 14:46:57",
    "text": "hahah"
  }
]