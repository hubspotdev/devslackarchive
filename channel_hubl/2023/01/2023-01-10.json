[
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2023-01-10 04:33:10",
    "text": "can HubL do external requests for an XML file? or would you have to use javascript for that?",
    "reply_count": 6,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-01-10 06:57:53"
      },
      {
        "time_stamp": "2023-01-10 07:18:57"
      },
      {
        "time_stamp": "2023-01-10 07:19:11"
      },
      {
        "time_stamp": "2023-01-10 07:20:08"
      },
      {
        "time_stamp": "2023-01-10 07:21:58"
      },
      {
        "time_stamp": "2023-01-10 07:22:29"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2023-01-10 06:57:53",
    "text": "is this a simple rss blog feed? then maybe with a standard rss tag? Otherwise, js … If needed on backend then it will require a serverless function"
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2023-01-10 07:18:57",
    "text": "Thank you John. It is just an XML but not an rss markup. I am going to see if the developers can enable CORS because that is what is blocking me at the moment."
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2023-01-10 07:19:11",
    "text": "its a job posting list xml file"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2023-01-10 07:20:08",
    "text": "Ahhhh I’ve been there"
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2023-01-10 07:21:58",
    "text": "CORS = COORS"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2023-01-10 07:22:29",
    "text": "I can get on board with that lol"
  },
  {
    "poster": {
      "poster_name": "Karis",
      "poster_handle": "karis.hizon"
    },
    "time_stamp": "2023-01-10 17:52:31",
    "text": "Hi, how do you make an editable gradient background? So most I do is apply the gradient code in :before but that makes it permanent. Is there a hubl way where I can create gradients 1 as background and 1 as overlay over a banner image and edit the gradients on a page level?",
    "reply_count": 3,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-01-10 18:37:32"
      },
      {
        "time_stamp": "2023-01-12 18:43:27"
      },
      {
        "time_stamp": "2023-01-13 01:58:02"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Evelynn Ulsh",
      "poster_handle": "evelynn"
    },
    "time_stamp": "2023-01-10 18:37:32",
    "text": "There’s a few different answers on how you can accomplish this, depending on the specific context.\n\nAs a starting point, the drag-and-drop page editor comes built-in with the ability to add simple gradient backgrounds to rows, columns, and sections. However, you wouldn’t be able to use this to create an overlay on top of an image background.\n\nIf you’d like an image background with a gradient overlay, you’ll have to do some sort of custom implementation. You can go about it in a few ways, but my suggestion would be to create a custom module which allows users to control the gradient via a <https://developers.HubSpot.com/docs/cms/building-blocks/module-theme-fields#gradient|Gradient style field>.\n\nI’d suggest using CSS custom properties for the gradient parameters, so your CSS stays the same across instances. Here’s an (incomplete) example of what that could look like:\n```{% set gradient = module.style.overlay.gradient %}\n{% set gradient_color_one = gradient[0] %}\n{% set gradient_color_two = gradient[1] %}\n{% set image = module.background.image %}\n{# ... #}\n\n{% require_css %}\n    &lt;style&gt;\n        .hero-overlay--gradient {\n            {# ... #}\n            background: linear-gradient(\n                to bottom,\n                var(--gradient-color-one),\n                var(--gradient-color-two)\n                );\n            {# ... #}\n        }\n    &lt;/style&gt;\n{% end_require_css %}\n\n&lt;div \n    class=\"hero-banner--gradient\"\n    style=\"\n        --gradient-color-one: {{ gradient_color_one | join(\", \") }};\n        --gradient-color-two: {{ gradient_color_two | join(\", \") }}\"\n    &gt;\n    &lt;img class=\"hero-background\" src=\"{{ image.src }}\" alt=\"{{ image.alt }}\"&gt;\n    &lt;div class=\"hero-overlay--gradient\"&gt;&lt;/div&gt;\n    &lt;div class=\"hero-content\"&gt;\n        {# ... #}\n    &lt;/div&gt;\n&lt;/div&gt;```"
  }
]