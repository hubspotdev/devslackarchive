[
  {
    "poster": {
      "poster_name": "Prakash Palaniappan",
      "poster_handle": "prak"
    },
    "time_stamp": "2023-01-11 02:01:21",
    "text": "Hi has anyone worked on receiving webhooks? I’m using the node HubSpot/api-client and I’m having problems validating the signature"
  },
  {
    "poster": {
      "poster_name": "Prakash Palaniappan",
      "poster_handle": "prak"
    },
    "time_stamp": "2023-01-11 02:01:41",
    "text": "As in I can never get an isValid",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-01-11 07:32:12"
      },
      {
        "time_stamp": "2023-01-11 16:36:47"
      },
      {
        "time_stamp": "2023-01-11 16:38:15"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Abhishek Mulay",
      "poster_handle": "abhishek.mulay"
    },
    "time_stamp": "2023-01-11 03:47:52",
    "text": "Hi there :wave:  Is there a way I can access the Views (All Deals, My deals, etc.) for CRM Objects via APIs?",
    "reply_count": 6,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-01-11 07:30:46"
      },
      {
        "time_stamp": "2023-01-11 07:30:52"
      },
      {
        "time_stamp": "2023-01-11 07:31:10"
      },
      {
        "time_stamp": "2023-01-11 07:31:28"
      },
      {
        "time_stamp": "2023-01-11 10:00:47"
      },
      {
        "time_stamp": "2023-01-11 10:01:01"
      }
    ]
  },
  {
    "text": "Hello! Does anyone know if it's possible to fetch the Ticket activities? I'm looking to retrieve the changes in the Ticket Pipeline as in the image attached.",
    "time_stamp": "2023-01-11 04:29:38",
    "reply_count": 3,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-01-11 07:55:59"
      },
      {
        "time_stamp": "2023-01-11 07:56:20"
      },
      {
        "time_stamp": "2023-01-11 07:56:47"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Yusuf Vora",
      "poster_handle": "yusuf"
    },
    "time_stamp": "2023-01-11 05:28:50",
    "text": "Hello. can I create custom object and schema with free account?"
  },
  {
    "poster": {
      "poster_name": "Vítor Lima",
      "poster_handle": "vitorlimag"
    },
    "time_stamp": "2023-01-11 05:59:14",
    "text": "hey everyone. We are integrating hubdb into our React Native App.\nusing api v3. thing is that some columns dont come on the request?\nDo you guys know if Im missing something, or is that a known issue?"
  },
  {
    "poster": {
      "poster_name": "Sadiya Parveen",
      "poster_handle": "sadiyap174"
    },
    "time_stamp": "2023-01-11 07:00:43",
    "text": "Hi guys can anyone let me know how can i trigger a custom object present in salesforce through HubSpot workflow."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 07:30:46",
    "text": "Currently this isn't  possible"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 07:30:52",
    "text": "<https://community.HubSpot.com/t5/APIs-Integrations/How-to-access-Views-via-API/m-p/237772>"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 07:31:10",
    "text": "One workaround is to instead use lists"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 07:31:28",
    "text": "You can create lists from the api (and setup the filters) and then you can also read the lists from the api"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 07:32:12",
    "text": "Do you want to share your code? Usually I find that it's just missing something or something is misplacesd"
  },
  {
    "text": "The propertiesWithHistory parameter will pull in the history of properties.",
    "time_stamp": "2023-01-11 07:55:59"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 07:56:20",
    "text": "But unfortunately there isn't a uniform place to get all contact activity data"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-11 07:56:41",
    "text": "is it possible to edit or update an existing record in the Custom object via API?  I tried making a `POST` request to `/crm/v3/objects/objecttype` . It looks like it is creating a new one instead of updating an existing record",
    "reply_count": 60,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-01-11 07:57:33"
      },
      {
        "time_stamp": "2023-01-11 07:57:43"
      },
      {
        "time_stamp": "2023-01-11 07:59:27"
      },
      {
        "time_stamp": "2023-01-11 07:59:38"
      },
      {
        "time_stamp": "2023-01-11 08:01:50"
      },
      {
        "time_stamp": "2023-01-11 08:02:03"
      },
      {
        "time_stamp": "2023-01-11 08:03:01"
      },
      {
        "time_stamp": "2023-01-11 08:03:15"
      },
      {
        "time_stamp": "2023-01-11 08:05:46"
      },
      {
        "time_stamp": "2023-01-11 08:05:49"
      },
      {
        "time_stamp": "2023-01-11 08:06:21"
      },
      {
        "time_stamp": "2023-01-11 08:09:04"
      },
      {
        "time_stamp": "2023-01-11 08:09:32"
      },
      {
        "time_stamp": "2023-01-11 08:10:40"
      },
      {
        "time_stamp": "2023-01-11 08:10:44"
      },
      {
        "time_stamp": "2023-01-11 08:10:55"
      },
      {
        "time_stamp": "2023-01-11 08:11:56"
      },
      {
        "time_stamp": "2023-01-11 08:12:12"
      },
      {
        "time_stamp": "2023-01-11 09:14:23"
      },
      {
        "time_stamp": "2023-01-11 09:14:39"
      },
      {
        "time_stamp": "2023-01-11 09:15:19"
      },
      {
        "time_stamp": "2023-01-11 09:15:24"
      },
      {
        "time_stamp": "2023-01-11 09:15:32"
      },
      {
        "time_stamp": "2023-01-11 09:17:43"
      },
      {
        "time_stamp": "2023-01-11 09:17:53"
      },
      {
        "time_stamp": "2023-01-11 09:18:17"
      },
      {
        "time_stamp": "2023-01-11 09:18:37"
      },
      {
        "time_stamp": "2023-01-11 09:18:45"
      },
      {
        "time_stamp": "2023-01-11 09:19:22"
      },
      {
        "time_stamp": "2023-01-11 09:21:19"
      },
      {
        "time_stamp": "2023-01-11 09:21:30"
      },
      {
        "time_stamp": "2023-01-11 09:25:12"
      },
      {
        "time_stamp": "2023-01-11 09:25:32"
      },
      {
        "time_stamp": "2023-01-11 09:30:18"
      },
      {
        "time_stamp": "2023-01-11 09:32:55"
      },
      {
        "time_stamp": "2023-01-11 09:33:05"
      },
      {
        "time_stamp": "2023-01-18 05:47:35"
      },
      {
        "time_stamp": "2023-01-18 05:48:47"
      },
      {
        "time_stamp": "2023-01-18 05:50:05"
      },
      {
        "time_stamp": "2023-01-18 07:37:30"
      },
      {
        "time_stamp": "2023-01-18 07:37:47"
      },
      {
        "time_stamp": "2023-01-18 07:37:58"
      },
      {
        "time_stamp": "2023-01-18 07:39:56"
      },
      {
        "time_stamp": "2023-01-18 07:40:07"
      },
      {
        "time_stamp": "2023-01-18 07:45:34"
      },
      {
        "time_stamp": "2023-01-18 07:45:53"
      },
      {
        "time_stamp": "2023-01-18 07:46:02"
      },
      {
        "time_stamp": "2023-01-18 07:46:15"
      },
      {
        "time_stamp": "2023-01-18 07:46:52"
      },
      {
        "time_stamp": "2023-01-18 07:47:29"
      },
      {
        "time_stamp": "2023-01-18 07:47:40"
      },
      {
        "time_stamp": "2023-01-18 07:47:55"
      },
      {
        "time_stamp": "2023-01-18 09:10:20"
      },
      {
        "time_stamp": "2023-01-18 09:11:09"
      },
      {
        "time_stamp": "2023-01-18 09:11:18"
      },
      {
        "time_stamp": "2023-01-18 09:14:13"
      },
      {
        "time_stamp": "2023-01-18 09:14:23"
      },
      {
        "time_stamp": "2023-01-18 09:14:30"
      },
      {
        "time_stamp": "2023-01-18 09:15:28"
      },
      {
        "time_stamp": "2023-01-18 09:15:41"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 07:56:47",
    "text": "The engagements api and page view apis will definitely get you most of the way there though"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 07:57:33",
    "text": "It needs to be a PATCH request with object id at the end of the url like this: `/crm/v3/objects/objecttype/123123`"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 07:57:43",
    "text": "with 123123 being the id of the object you want updated"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-11 07:59:27",
    "edited": {
      "time_stamp": "2023-01-11 07:59:33"
    },
    "text": "you mean the Record Id of the object?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 07:59:38",
    "text": "correct"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-11 08:01:50",
    "text": "instead of Record Id, is it possible to create a unique property like `deckid` and update it via deckid?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 08:02:03",
    "text": "Yeah you definitely can do that"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 08:03:01",
    "text": "your url for this would be like this: `/crm/v3/objects/objecttype/deckstanded?idProperty=deckid`"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 08:03:15",
    "text": "and deckstanded would be that unique value"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-11 08:05:46",
    "text": "`crm/v3/objects/objecttype/deckid?idProperty=123`"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-11 08:05:49",
    "text": "like this?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 08:06:21",
    "text": "nope swap deckid and 123"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-11 08:09:04",
    "text": "getting this error\nError 405 Method Not Allowed"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 08:09:32",
    "text": "Are you using PATCH"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-11 08:10:40",
    "text": "my bad :smile:, i forgot change it to patch"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-11 08:10:44",
    "text": "it worked"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 08:10:55",
    "text": "perfect!"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-11 08:11:56",
    "text": "Thanks much Carter :+1:, that saved me a lot of time"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 08:12:12",
    "text": "of course, let me know if you run into any issue in the future"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-11 09:14:23",
    "text": "hi, using axios we need to set Bearer as the private app token right?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 09:14:39",
    "text": "Yes"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 09:15:19",
    "text": "```var axios = require('axios');\n\nvar config = {\n  method: 'patch',\n  url: '<https://api.hubapi.com/crm/v3/objects/objecttype/deckid?idProperty=123>',\n  headers: { \n    'Authorization': 'Bearer xxxxx'\n  }\n};```"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 09:15:24",
    "text": "Like this"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 09:15:32",
    "text": "xxxxx is the private app token"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-11 09:17:43",
    "edited": {
      "time_stamp": "2023-01-11 09:21:09"
    },
    "text": "```const token = '******'\nconst endpoint = '<https://api.HubSpot.com/crm/v3/objects/objectype/123?idProperty=property>';\nconst headerOptions = {\n    headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n    }\n};\nconst body = {\n    \"properties\": {\n        \"deck_name\": \"name123\",\n    }\n};\naxios.patch(endpoint, headerOptions, body)\n    .then(function (response) {\n        resolve({status: \"success\", data: response.data});\n    })\n    .catch(function (error) {\n        reject({status: \"error\", errText: error.response});\n    });```"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-11 09:17:53",
    "text": "this is my code"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 09:18:17",
    "text": "Yes that should work"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 09:18:37",
    "text": "I don't know if the Deck name property is supposed to be like that though"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 09:18:45",
    "text": "usually it's like deck_name"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-11 09:19:22",
    "text": "but im getting `data: {`\n   `status: 'error',`\n   `message: 'Authentication credentials not found. This API supports both API Key and OAuth 2.0 authentication and you can find more details at <https://developers.HubSpot.com/docs/methods/auth/oauth-overview>',`\n   `correlationId: '240527d3-22a1-47f1-a6bc-7de11629e258',`\n   `category: 'INVALID_AUTHENTICATION'`"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 09:21:19",
    "text": "Please try this code instead:\n```var axios = require('axios');\nvar data = JSON.stringify({\n  \"properties\": {\n    \"Deck name\": \"name123\"\n  }\n});\n\nvar config = {\n  method: 'patch',\n  url: '<https://api.HubSpot.com/crm/v3/objects/objectype/123?idProperty=property>',\n  headers: { \n    'Authorization': 'Bearer xxxxxx', \n    'Content-Type': 'application/json'\n  },\n  data : data\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});```\n"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 09:21:30",
    "text": "replace xxxxxx with your token don't use a variable"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-11 09:25:12",
    "text": "working now"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-11 09:25:32",
    "text": "is that because of setting the token as a variable?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 09:30:18",
    "text": "I really don't know it's possible you just didn't have good code"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-11 09:32:55",
    "text": "okay. thanks :+1:"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 09:33:05",
    "text": "For sure"
  },
  {
    "poster": {
      "poster_name": "Abhishek Mulay",
      "poster_handle": "abhishek.mulay"
    },
    "time_stamp": "2023-01-11 10:00:47",
    "text": "Thanks for the response!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 10:01:01",
    "text": "of course"
  },
  {
    "poster": {
      "poster_name": "Cristian Garib",
      "poster_handle": "cristian006"
    },
    "time_stamp": "2023-01-11 14:59:26",
    "text": "Hey everyone!... just looking for help. Using API I need to know which customer has each deal, not sure how to do it using api.`/crm/v3/objects/deals`",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-01-11 15:16:20"
      },
      {
        "time_stamp": "2023-01-11 15:16:56"
      },
      {
        "time_stamp": "2023-01-11 15:17:03"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 15:16:20",
    "edited": {
      "time_stamp": "2023-01-11 15:16:27"
    },
    "text": "You can do that using this api: *`/crm/v4/objects/deals/{dealId}/associations/0-2`*"
  },
  {
    "poster": {
      "poster_name": "Cristian Garib",
      "poster_handle": "cristian006"
    },
    "time_stamp": "2023-01-11 15:16:56",
    "text": "Great!... Thanks a lot!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-11 15:17:03",
    "text": "of course"
  },
  {
    "poster": {
      "poster_name": "Prakash Palaniappan",
      "poster_handle": "prak"
    },
    "time_stamp": "2023-01-11 16:36:47",
    "text": "`//<https://github.com/HubSpot/sample-apps-webhooks/blob/main/node/src/js/webhooks-controller.js>`\n`import type { NextApiRequest, NextApiResponse } from 'next';`\n`import _ from 'lodash';`\n\n`const SIGNATURE_HEADER = 'X-HubSpot-Signature';`\n`const SIGNATURE_VERSION_HEADER = 'X-HubSpot-Signature-Version';`\n\n`import { Signature } from '@HubSpot/api-client';`\n\n`const webhookVerification = async (`\n  `req: NextApiRequest,`\n  `res: NextApiResponse`\n`) =&gt; {`\n  `console.log('###WHV: The req.query is: ', req.query);`\n  `console.log('###WHV: The req.headers is: ', req.headers);`\n\n  `const method = req.method || '';`\n  `console.log('###WHV: The method is: ', method);`\n\n  `const request_timestamp = _.get(`\n    `req,`\n    `'headers.x-HubSpot-request-timestamp'`\n  `) as unknown as number;`\n  `console.log('###WHV: The request_timestamp is: ', request_timestamp);`\n\n  `const signature = _.get(req, 'headers.x-HubSpot-signature-v3') as string;`\n  `console.log('###WHV: The signature is: ', signature);`\n\n  `const clientSecret = process.env.HubSpot_CLIENT_SECRET || '';`\n  `console.log('###WHV: The clientSecret is: ', clientSecret);`\n\n  `const requestBody = JSON.stringify(req.body);`\n  `console.log('###WHV: The requestBody is: ', requestBody);`\n\n  `if (request_timestamp) {`\n    `const options = {`\n      `method: method,`\n      `timestamp: request_timestamp,`\n      `signatureVersion: 'v3',`\n      `signature: signature,`\n      `requestBody: requestBody,`\n      `clientSecret: clientSecret`\n    `};`\n    `const isValid = Signature.isValid(options);`\n\n    `console.log('###WHV: The new HubSpotSignature is: ', isValid);`\n  `}`\n  `const response = { result: true };`\n  `return response;`\n`};`\n\n`export default webhookVerification;`"
  },
  {
    "poster": {
      "poster_name": "Prakash Palaniappan",
      "poster_handle": "prak"
    },
    "time_stamp": "2023-01-11 16:38:15",
    "text": "<@U01QVR44MEY> Much appreciate any hints"
  }
]