[
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-12-06 07:23:57",
    "text": "<@U6TBZ66FN> Matt was on vacay? Aw man.. he helped me anyways. What a guy.. Ill have to thank him. It ended up being user error. I chose the Text field in hubdb instead of the number field."
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2017-12-06 08:31:49",
    "edited": {
      "time_stamp": "2017-12-06 08:34:02"
    },
    "text": "Anyone know of a way to use |replace or something else to replace newlines with '/n'? Trying to assign the body of a rich text module to a variable in JS, but every time I add a new paragraph, it automatically prints a new line and breaks it. I tried finding a polyfill to use es15 style template literals, but I can't find a way to do that processing client side.",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2017-12-06 11:56:30"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-12-06 08:45:47",
    "text": "<@U26BLKGE4> are you combining Javascript and Hubl?"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2017-12-06 08:50:28",
    "text": "Yes, trying to print the value of a module (which prints multiple lines) into a JS variable"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-12-06 08:52:09",
    "text": "is hubl adding the break?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-12-06 08:52:22",
    "text": "or the Javascript?"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2017-12-06 08:53:55",
    "text": "Yeah, so I have a multi-paragraph rich text module, and as long as it's one paragraph it works fine, but once I start a new paragraph it breaks the statement."
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2017-12-06 08:54:52",
    "edited": {
      "time_stamp": "2017-12-06 08:56:32"
    },
    "text": "I get an error similar to \"unterminated string length\" or something along those lines. I did find a workaround for prototyping purposes using Babel client side, but loading an entire preprocessor to be compiled client side is obviously overkill"
  },
  {
    "text": "<@U38EZFVFE> uploaded a file: <https://HubSpotdev.slack.com/files/U38EZFVFE/F89URPUAU/-.html|Untitled>",
    "time_stamp": "2017-12-06 09:19:25",
    "edited": {
      "time_stamp": "2017-12-06 09:21:14"
    }
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-12-06 09:19:34",
    "text": "<@U26BLKGE4> Try that"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-12-06 09:19:54",
    "text": "asuming it is is just paragraph tags"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-12-06 09:22:05",
    "text": "also make sure you use single quotes in your javascript in case there are any style tags or class/id declarations in your content."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-12-06 09:22:32",
    "text": "you can also stack replace filters as well. |replace()|replace()"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2017-12-06 09:30:36",
    "text": "no dice :confused: now nothing is rendering."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-12-06 09:58:08",
    "text": "hmm."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-12-06 09:58:28",
    "text": "can you show me the code example?"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2017-12-06 10:02:01",
    "text": "I'll DM you"
  },
  {
    "poster": {
      "poster_name": "Anthony Johnson",
      "poster_handle": "anthonyjohnson"
    },
    "time_stamp": "2017-12-06 10:54:00",
    "text": "Is there a way to add fields programmatically in a module? A Google search did not yield any answers. I know you can add fields through design manager, but I want to be able to add some fields within the module's code, if it's possible."
  },
  {
    "subtype": "thread_broadcast",
    "time_stamp": "2017-12-06 11:56:30",
    "text": "For those interested, <@U38EZFVFE> helped me out, the filter I needed was |escapejson"
  },
  {
    "poster": {
      "poster_name": "Andrew Rogers",
      "poster_handle": "andrewrogers"
    },
    "time_stamp": "2017-12-06 12:57:40",
    "text": "Is there a way to utilize a date picker as a module? I want to allow the user to select a date and export the value to the my template. I don't see a date picker as a supported module.",
    "reply_count": 12,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2017-12-06 13:07:05"
      },
      {
        "time_stamp": "2017-12-06 13:08:38"
      },
      {
        "time_stamp": "2017-12-06 13:10:56"
      },
      {
        "time_stamp": "2017-12-06 13:13:38"
      },
      {
        "time_stamp": "2017-12-06 13:31:36"
      },
      {
        "time_stamp": "2017-12-06 13:32:12"
      },
      {
        "time_stamp": "2017-12-06 13:38:50"
      },
      {
        "time_stamp": "2017-12-06 13:42:56"
      },
      {
        "time_stamp": "2017-12-06 13:44:59"
      },
      {
        "time_stamp": "2017-12-06 13:45:02"
      },
      {
        "time_stamp": "2017-12-06 13:49:39"
      },
      {
        "time_stamp": "2017-12-06 14:09:45"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2017-12-06 13:07:05",
    "edited": {
      "time_stamp": "2017-12-06 13:07:29"
    },
    "text": "you could use a regular ol' date input e.g. `&lt;input type=\"date\"&gt;`"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2017-12-06 13:08:38",
    "text": "it has decent browser support: <https://caniuse.com/#feat=input-datetime>"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-12-06 13:10:56",
    "text": "I think he wants it available on the back end."
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2017-12-06 13:13:38",
    "text": "ah, yeah. nvm me"
  },
  {
    "poster": {
      "poster_name": "Steve Kenley",
      "poster_handle": "skenley"
    },
    "time_stamp": "2017-12-06 13:18:14",
    "text": "When editing a coded file template, how long do you typically have to wait before the changes will actually show up on your page?"
  },
  {
    "poster": {
      "poster_name": "Libo Song",
      "poster_handle": "lsong"
    },
    "time_stamp": "2017-12-06 13:23:17",
    "text": "<@U7B0H5NPN> They should take effect immediately, at most a few seconds. If it is more than that, it is a bug that we will fix."
  },
  {
    "poster": {
      "poster_name": "Steve Kenley",
      "poster_handle": "skenley"
    },
    "time_stamp": "2017-12-06 13:23:51",
    "text": "I've waited nearly 30 minutes on my last couple of changes."
  },
  {
    "poster": {
      "poster_name": "Libo Song",
      "poster_handle": "lsong"
    },
    "time_stamp": "2017-12-06 13:24:16",
    "text": "Let me know what is your page, and the code file. I can take a look.",
    "reply_count": 30,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2017-12-06 13:25:18"
      },
      {
        "time_stamp": "2017-12-06 13:26:26"
      },
      {
        "time_stamp": "2017-12-06 13:26:42"
      },
      {
        "time_stamp": "2017-12-06 13:27:01"
      },
      {
        "time_stamp": "2017-12-06 13:28:29"
      },
      {
        "time_stamp": "2017-12-06 13:28:53"
      },
      {
        "time_stamp": "2017-12-06 13:33:55"
      },
      {
        "time_stamp": "2017-12-06 13:35:01"
      },
      {
        "time_stamp": "2017-12-06 13:35:57"
      },
      {
        "time_stamp": "2017-12-06 13:36:15"
      },
      {
        "time_stamp": "2017-12-06 13:36:39"
      },
      {
        "time_stamp": "2017-12-06 13:37:17"
      },
      {
        "time_stamp": "2017-12-06 13:37:28"
      },
      {
        "time_stamp": "2017-12-06 13:37:38"
      },
      {
        "time_stamp": "2017-12-06 13:38:57"
      },
      {
        "time_stamp": "2017-12-06 13:42:22"
      },
      {
        "time_stamp": "2017-12-06 13:42:45"
      },
      {
        "time_stamp": "2017-12-06 13:43:17"
      },
      {
        "time_stamp": "2017-12-06 13:43:30"
      },
      {
        "time_stamp": "2017-12-06 13:43:40"
      },
      {
        "time_stamp": "2017-12-06 13:43:42"
      },
      {
        "time_stamp": "2017-12-06 14:06:45"
      },
      {
        "time_stamp": "2017-12-06 14:11:25"
      },
      {
        "time_stamp": "2017-12-06 14:13:01"
      },
      {
        "time_stamp": "2017-12-06 14:13:09"
      },
      {
        "time_stamp": "2017-12-06 14:19:42"
      },
      {
        "time_stamp": "2017-12-06 14:28:06"
      },
      {
        "time_stamp": "2017-12-06 14:28:37"
      },
      {
        "time_stamp": "2017-12-06 14:28:39"
      },
      {
        "time_stamp": "2017-12-06 16:29:28"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Steve Kenley",
      "poster_handle": "skenley"
    },
    "time_stamp": "2017-12-06 13:25:18",
    "text": "<http://www.shpbeds.org/test-events/test-event> is the page I'm working on."
  },
  {
    "poster": {
      "poster_name": "Steve Kenley",
      "poster_handle": "skenley"
    },
    "time_stamp": "2017-12-06 13:26:26",
    "text": "The file is event-lp-tmp.html"
  },
  {
    "poster": {
      "poster_name": "Steve Kenley",
      "poster_handle": "skenley"
    },
    "time_stamp": "2017-12-06 13:26:42",
    "text": "Not sure if you need more info than that."
  },
  {
    "poster": {
      "poster_name": "Libo Song",
      "poster_handle": "lsong"
    },
    "time_stamp": "2017-12-06 13:27:01",
    "text": "Thanks. The page is cached at CDN. Let me see why it did not get invalided when your coded file changes."
  },
  {
    "poster": {
      "poster_name": "Libo Song",
      "poster_handle": "lsong"
    },
    "time_stamp": "2017-12-06 13:28:29",
    "text": "That is enough. I can take a look."
  },
  {
    "poster": {
      "poster_name": "Steve Kenley",
      "poster_handle": "skenley"
    },
    "time_stamp": "2017-12-06 13:28:53",
    "text": "Thanks!"
  },
  {
    "poster": {
      "poster_name": "Andrew Rogers",
      "poster_handle": "andrewrogers"
    },
    "time_stamp": "2017-12-06 13:31:36",
    "text": "Correct <@U38EZFVFE>. I want the marketer to select the date. I see that the HubDB has the date picker option but I want utilize it in a custom blog type."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-12-06 13:32:12",
    "text": "Is this for a blog or something you are using the blog for?"
  },
  {
    "poster": {
      "poster_name": "Libo Song",
      "poster_handle": "lsong"
    },
    "time_stamp": "2017-12-06 13:33:55",
    "text": "I see that they are connected at our end. When you publish the code file, it  should invalidate the cache immediately."
  },
  {
    "poster": {
      "poster_name": "Steve Kenley",
      "poster_handle": "skenley"
    },
    "time_stamp": "2017-12-06 13:35:01",
    "text": "We have this problem often, as we manage many sites for clients on the HubSpot platform."
  },
  {
    "poster": {
      "poster_name": "Libo Song",
      "poster_handle": "lsong"
    },
    "time_stamp": "2017-12-06 13:35:57",
    "text": "We definitely want to fix it if we can reproduce it."
  },
  {
    "poster": {
      "poster_name": "Steve Kenley",
      "poster_handle": "skenley"
    },
    "time_stamp": "2017-12-06 13:36:15",
    "text": "I usually work in an incognito window, so that the browser doesn't cache, but still have to wait several minutes or more on some changes I make."
  },
  {
    "poster": {
      "poster_name": "Steve Kenley",
      "poster_handle": "skenley"
    },
    "time_stamp": "2017-12-06 13:36:39",
    "text": "It doesn't happen every time, but often enough to be frustrating."
  },
  {
    "poster": {
      "poster_name": "Steve Kenley",
      "poster_handle": "skenley"
    },
    "time_stamp": "2017-12-06 13:37:17",
    "text": "Are you seeing the id number above the \"Register Now!\" link?"
  },
  {
    "poster": {
      "poster_name": "Libo Song",
      "poster_handle": "lsong"
    },
    "time_stamp": "2017-12-06 13:37:28",
    "text": "Let us know exactly the change, and we may be able to track down it."
  },
  {
    "poster": {
      "poster_name": "Steve Kenley",
      "poster_handle": "skenley"
    },
    "time_stamp": "2017-12-06 13:37:38",
    "text": "I have removed the code that prints that, but it continues to print."
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2017-12-06 13:38:50",
    "text": "The new modules framework has a proper date and datetime picker. The current one in custom modules that you might be using in blogs unfortunately does not."
  },
  {
    "poster": {
      "poster_name": "Libo Song",
      "poster_handle": "lsong"
    },
    "time_stamp": "2017-12-06 13:38:57",
    "text": "Have a meeting, will come back later."
  },
  {
    "text": "<@U7B0H5NPN> uploaded a file: <https://HubSpotdev.slack.com/files/U7B0H5NPN/F8BRV4D7H/screen_shot_2017-12-06_at_1.38.30_pm.png|Screen Shot 2017-12-06 at 1.38.30 PM.png>",
    "time_stamp": "2017-12-06 13:39:48"
  },
  {
    "poster": {
      "poster_name": "Steve Kenley",
      "poster_handle": "skenley"
    },
    "time_stamp": "2017-12-06 13:41:06",
    "text": "<@U6TBZ66FN> the screenshot above shows the id number that has been removed from the code, but is still showing on the page."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-12-06 13:42:22",
    "text": "try adding a question mark and a random string of text after it at the and of the url i.e. (?ajhsdkjsh)"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-12-06 13:42:45",
    "text": "or (&amp;lajsdlas) if there is already a query string"
  },
  {
    "poster": {
      "poster_name": "Andrew Rogers",
      "poster_handle": "andrewrogers"
    },
    "time_stamp": "2017-12-06 13:42:56",
    "text": "I'm building a custom blog where the user can select if it's a specific type post type. One of the post types is an event. I want the user to be able to set the start date and end date in the back end and then in my listing page show the values. Where can I find the new modules framework documentation? Thanks for the info <@U22PJPGK0>"
  },
  {
    "poster": {
      "poster_name": "Steve Kenley",
      "poster_handle": "skenley"
    },
    "time_stamp": "2017-12-06 13:43:17",
    "text": "Hmm, that worked. Strange."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-12-06 13:43:30",
    "text": "its a way to cache bust"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-12-06 13:43:40",
    "text": "i have been running into the same issue lately"
  },
  {
    "poster": {
      "poster_name": "Steve Kenley",
      "poster_handle": "skenley"
    },
    "time_stamp": "2017-12-06 13:43:42",
    "text": "Thanks for the advice!"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-12-06 13:44:59",
    "text": "You have to be in the new beta editor."
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2017-12-06 13:45:02",
    "text": "I believe HubDB has a date picker."
  },
  {
    "poster": {
      "poster_name": "Andrew Rogers",
      "poster_handle": "andrewrogers"
    },
    "time_stamp": "2017-12-06 13:49:39",
    "text": "Thanks <@U38EZFVFE> I'll try it in another portal. <@U7V9DQ31P> HubDB is my contingency plan:) Thanks for the input have a great evening!"
  },
  {
    "poster": {
      "poster_name": "Libo Song",
      "poster_handle": "lsong"
    },
    "time_stamp": "2017-12-06 14:06:45",
    "text": "Just come back. Yes, that busts the cache. I would like to fix the issue so that you don’t have to do this."
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2017-12-06 14:09:45",
    "text": "Yes, that will start opening up in January"
  },
  {
    "poster": {
      "poster_name": "Libo Song",
      "poster_handle": "lsong"
    },
    "time_stamp": "2017-12-06 14:11:25",
    "text": "<@U7B0H5NPN> Can I try to reproduce this on your page?"
  },
  {
    "poster": {
      "poster_name": "Steve Kenley",
      "poster_handle": "skenley"
    },
    "time_stamp": "2017-12-06 14:13:01",
    "text": "Sure, I'm working on something else right now."
  },
  {
    "poster": {
      "poster_name": "Steve Kenley",
      "poster_handle": "skenley"
    },
    "time_stamp": "2017-12-06 14:13:09",
    "text": "Do you need anything else from me?"
  },
  {
    "poster": {
      "poster_name": "Libo Song",
      "poster_handle": "lsong"
    },
    "time_stamp": "2017-12-06 14:19:42",
    "text": "Thanks. Not now. Let me first reproduce this issue."
  },
  {
    "poster": {
      "poster_name": "Libo Song",
      "poster_handle": "lsong"
    },
    "time_stamp": "2017-12-06 14:28:06",
    "text": "Reproduced. Thanks."
  },
  {
    "poster": {
      "poster_name": "Steve Kenley",
      "poster_handle": "skenley"
    },
    "time_stamp": "2017-12-06 14:28:37",
    "text": "Cool! Thanks!"
  },
  {
    "poster": {
      "poster_name": "Libo Song",
      "poster_handle": "lsong"
    },
    "time_stamp": "2017-12-06 14:28:39",
    "text": "I added an extra ! after Now!, but it did not update after I Update."
  },
  {
    "poster": {
      "poster_name": "Libo Song",
      "poster_handle": "lsong"
    },
    "time_stamp": "2017-12-06 16:29:28",
    "text": "Find the root cause of the issue. We are working on a solution. Thanks for the help to nail down this issue."
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2017-12-07 00:34:29",
    "text": "Hey there, \nI have a problem cause I want to access a HubSpot Javascript File in another domain.\n\nThe function *get_public_template_url()* returns a slug like \n<https://my-website.com/hs-fs/hub/2393989/hub_generated/template_assets/1512631458248/>\nwhere ID (1512631458248) change every times I update the file\n\nSo I can’t use a static URL on the other domain to call my JS file...\n\nAnyone have an idea ?"
  }
]