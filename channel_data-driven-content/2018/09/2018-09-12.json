[
  null,
  null,
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-12 07:19:55",
    "text": "Hello all."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-12 07:21:30",
    "text": "Hello <@U38EZFVFE> welcome to developers anonymous"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-12 07:21:43",
    "edited": {
      "time_stamp": "2018-09-12 07:22:03"
    },
    "text": "I have a problem with code."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-12 07:22:30",
    "text": "here here. that’s why we started this support group"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-12 07:22:31",
    "text": "lol"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-12 07:22:34",
    "text": "But really I do have a question maybe any of you might be able to help with."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-12 07:23:13",
    "text": "I have a stack of 6 HUDB tables that i am pulling from. All have the same structure."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-12 07:23:52",
    "text": "When i query them i don’t necessarily get the most relevant item first."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-12 07:24:11",
    "text": "But I am trying to figure out a better way."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-12 07:25:48",
    "text": "so to understand correctly, you have 6 HubDB tables that are kind of all the same collection of data just split 6 times to maybe meet the row limit of the hubDB, and you’re trying to query against them to get the most relevant results for some kind of search or filtering tool on the front end of a HS site?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-12 07:26:07",
    "text": "yeah."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-12 07:26:29",
    "text": "The closes that i can come up with is alphabetical order"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-12 07:26:38",
    "text": "by name"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-12 07:27:19",
    "text": "Are you currently doing the foreign id thing?",
    "reply_count": 37,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2018-09-12 07:27:55"
      },
      {
        "time_stamp": "2018-09-12 07:28:30"
      },
      {
        "time_stamp": "2018-09-12 07:29:15"
      },
      {
        "time_stamp": "2018-09-12 07:31:27"
      },
      {
        "time_stamp": "2018-09-12 07:32:36"
      },
      {
        "time_stamp": "2018-09-12 07:33:39"
      },
      {
        "time_stamp": "2018-09-12 07:34:27"
      },
      {
        "time_stamp": "2018-09-12 07:34:52"
      },
      {
        "time_stamp": "2018-09-12 07:36:03"
      },
      {
        "time_stamp": "2018-09-12 07:38:01"
      },
      {
        "time_stamp": "2018-09-12 07:38:46"
      },
      {
        "time_stamp": "2018-09-12 07:39:18"
      },
      {
        "time_stamp": "2018-09-12 07:41:51"
      },
      {
        "time_stamp": "2018-09-12 07:42:12"
      },
      {
        "time_stamp": "2018-09-12 07:44:31"
      },
      {
        "time_stamp": "2018-09-12 07:45:22"
      },
      {
        "time_stamp": "2018-09-12 07:48:54"
      },
      {
        "time_stamp": "2018-09-12 07:49:08"
      },
      {
        "time_stamp": "2018-09-12 07:51:13"
      },
      {
        "time_stamp": "2018-09-12 07:58:27"
      },
      {
        "time_stamp": "2018-09-12 07:59:43"
      },
      {
        "time_stamp": "2018-09-12 09:27:54"
      },
      {
        "time_stamp": "2018-09-13 09:28:18"
      },
      {
        "time_stamp": "2018-09-13 09:29:14"
      },
      {
        "time_stamp": "2018-09-13 09:29:37"
      },
      {
        "time_stamp": "2018-09-13 09:29:59"
      },
      {
        "time_stamp": "2018-09-13 09:30:12"
      },
      {
        "time_stamp": "2018-09-13 09:30:28"
      },
      {
        "time_stamp": "2018-09-13 09:30:30"
      },
      {
        "time_stamp": "2018-09-13 09:30:59"
      },
      {
        "time_stamp": "2018-09-13 09:31:35"
      },
      {
        "time_stamp": "2018-09-13 09:31:36"
      },
      {
        "time_stamp": "2018-09-13 09:31:52"
      },
      {
        "time_stamp": "2018-09-13 09:31:58"
      },
      {
        "time_stamp": "2018-09-13 09:32:07"
      },
      {
        "time_stamp": "2018-09-13 09:44:11"
      },
      {
        "time_stamp": "2018-09-13 09:44:29"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-12 07:27:24",
    "text": "<https://designers.HubSpot.com/tutorials/how-to-join-hubdb-tables>"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-12 07:27:55",
    "text": "Hey lets do this here.."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-12 07:28:30",
    "text": "I though about that But really not sure how that thing works well enough I guess."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-12 07:29:15",
    "text": "If it works how I think it wouldnt work."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-12 07:31:27",
    "text": "I have to be able to pull from all of the columns with one giant query."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-12 07:32:36",
    "text": "Like this `&amp;cat_type=Cable&amp;manufacturer=Binzel&amp;part_number=WT5015-45-7`"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-12 07:33:39",
    "edited": {
      "time_stamp": "2018-09-12 07:34:09"
    },
    "text": "did more reading don’t think that hubdb foreign id thing is the right way to go for you. I think the secret is you need to assign your 6 hubDBs to  variables then for every query you need to make against it you have to merge the results of the 6 queries to the separate hubDB’s then maybe use filters to somehow sort in the way you need."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-12 07:34:27",
    "text": "it’s a bit complicated and tedious but I don’t know a way around it."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-12 07:34:52",
    "text": "<@U6GNQ7JBU> might have some wizardry that I don’t know of, maybe through the API client"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-12 07:36:03",
    "text": "That is basicly what im doing."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-12 07:38:01",
    "edited": {
      "time_stamp": "2018-09-12 07:38:15"
    },
    "text": ":confused: yea that’s the approach I’d personally go, it’s not an easy one but should work, the hard part is like you said finding a way to sort the results after merging so they make sense for what you’re trying to output.\n\nI’d say if there’s any part of that which is difficult to do in HubL, consider doing it in javascript instead."
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-12 07:38:46",
    "text": "So you are trying to combine the tables, sort, and limit the results?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-12 07:39:18",
    "text": "How many results do you need in the end?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-12 07:41:51",
    "text": "it depends on what the query returns"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-12 07:42:12",
    "edited": {
      "time_stamp": "2018-09-12 07:42:17"
    },
    "text": "Some times it is 2 some time its thousands"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-12 07:44:31",
    "text": "What is the use case? When would you need to display thousands of rows?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-12 07:45:22",
    "text": "Could pagination be created to handle past a few hundred results or something?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-12 07:48:54",
    "text": "haha.. i wouldn’t display them but I am paginating them"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-12 07:49:08",
    "text": "<https://www.americantorchtip.com/products/oxy-fuel>"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-12 07:51:13",
    "text": "brb"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-12 07:58:27",
    "text": "You only need to sort and return the limit for each table"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-12 07:59:43",
    "text": "This kind of mergesort would be easy to do in JS"
  },
  null,
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-12 09:27:54",
    "edited": {
      "time_stamp": "2018-09-12 09:28:02"
    },
    "text": "Please* Explain… are you talking about somthing different that what i am doing in hubl?"
  },
  {
    "poster": {
      "poster_name": "Woodsy",
      "poster_handle": "james.woods"
    },
    "time_stamp": "2018-09-12 10:41:37",
    "edited": {
      "time_stamp": "2018-09-12 11:06:58"
    },
    "text": "<@U2H3TT8F2> Let me know if you have any idea on these errors? I'm not sure if the drop down is 100% correct as the column in the table I'd like to reference is resource-type. Thanks"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-09-12 12:24:37",
    "text": "Noticed a super weird bug in HubDB. If you’ve entered something in the search area, but then scroll down past where one of those active areas is that matches the search. Then, click on a cell with a image input that opens the image sidebar, clicking anywhere in that sidebar closes it and jumps you  to an area that matches your initial hubdb search.",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2018-09-12 13:25:23"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-12 13:25:23",
    "text": "I've seen this before, let me report it"
  }
]