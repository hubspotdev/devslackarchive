[
  {
    "poster": {
      "poster_name": "Matt Brooking",
      "poster_handle": "matt.brooking"
    },
    "time_stamp": "2021-03-31 01:41:49",
    "text": "Ok thanks"
  },
  {
    "poster": {
      "poster_name": "Mitja Lewin",
      "poster_handle": "m.lewin"
    },
    "time_stamp": "2021-03-31 04:49:56",
    "edited": {
      "time_stamp": "2021-03-31 04:51:01"
    },
    "text": "You can use `export_to_template_context=True` on your module and then go with `widget_<http://data.my|data.my>_module_<http://name.my|name.my>_boolean_variable` in your template. Do the expression check in your template file.\n\nFor Sure, you can push the `global module` context into a `local module` context. This work as well. Create a text field, hide it for editors, and pass your widget_data object into the text field.  Inside your local module you receive it as a string (because its text field context). So add the filter `|fromjson` to your field variable and you get the working global object."
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2021-03-31 12:08:14",
    "text": "That pagination code is only going to work for the normal blog listing, where you're looping through `contents`. This module is looping through `related_posts`, which looks like a variable created by the various `blog_recent_posts` functions. Those functions don't do any pagination. If you wanted to paginate `related_posts`, you'd need to request more posts than you need from HS, then calculate the starting and ending index. Or, you could change/make a copy of this module to reference the `contents` variable instead of `related_posts`."
  }
]