[
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 07:10:55",
    "text": "are prettier plugins supported? I think I'm running into an issue where js config files are not supported"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 07:10:59",
    "text": "trying to implement this: <https://tailwindcss.com/blog/automatic-class-sorting-with-prettier>",
    "reply_count": 13,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-08-08 08:03:16"
      },
      {
        "time_stamp": "2023-08-08 08:05:35"
      },
      {
        "time_stamp": "2023-08-08 08:34:24"
      },
      {
        "time_stamp": "2023-08-08 08:35:48"
      },
      {
        "time_stamp": "2023-08-08 08:37:50"
      },
      {
        "time_stamp": "2023-08-08 08:38:04"
      },
      {
        "time_stamp": "2023-08-08 08:41:42"
      },
      {
        "time_stamp": "2023-08-08 08:41:51"
      },
      {
        "time_stamp": "2023-08-08 08:41:57"
      },
      {
        "time_stamp": "2023-08-08 08:42:22"
      },
      {
        "time_stamp": "2023-08-08 08:52:34"
      },
      {
        "time_stamp": "2023-08-08 09:25:16"
      },
      {
        "time_stamp": "2023-08-08 09:25:40"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 07:36:07",
    "text": "looks like it works without a config? I almost didn't notice",
    "reply_count": 32,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-08-08 08:36:51"
      },
      {
        "time_stamp": "2023-08-08 08:37:17"
      },
      {
        "time_stamp": "2023-08-08 08:38:00"
      },
      {
        "time_stamp": "2023-08-08 08:38:07"
      },
      {
        "time_stamp": "2023-08-08 08:38:16"
      },
      {
        "time_stamp": "2023-08-08 08:39:19"
      },
      {
        "time_stamp": "2023-08-08 08:39:24"
      },
      {
        "time_stamp": "2023-08-08 08:42:44"
      },
      {
        "time_stamp": "2023-08-08 08:45:01"
      },
      {
        "time_stamp": "2023-08-08 08:46:06"
      },
      {
        "time_stamp": "2023-08-08 08:46:51"
      },
      {
        "time_stamp": "2023-08-08 08:47:18"
      },
      {
        "time_stamp": "2023-08-08 08:49:02"
      },
      {
        "time_stamp": "2023-08-08 08:49:55"
      },
      {
        "time_stamp": "2023-08-08 08:50:29"
      },
      {
        "time_stamp": "2023-08-08 08:50:48"
      },
      {
        "time_stamp": "2023-08-08 08:52:19"
      },
      {
        "time_stamp": "2023-08-08 08:52:24"
      },
      {
        "time_stamp": "2023-08-08 08:53:10"
      },
      {
        "time_stamp": "2023-08-08 08:53:24"
      },
      {
        "time_stamp": "2023-08-08 08:54:52"
      },
      {
        "time_stamp": "2023-08-08 08:57:23"
      },
      {
        "time_stamp": "2023-08-08 08:59:03"
      },
      {
        "time_stamp": "2023-08-08 08:59:06"
      },
      {
        "time_stamp": "2023-08-08 08:59:44"
      },
      {
        "time_stamp": "2023-08-08 08:59:53"
      },
      {
        "time_stamp": "2023-08-08 09:00:20"
      },
      {
        "time_stamp": "2023-08-08 09:00:56"
      },
      {
        "time_stamp": "2023-08-08 09:01:10"
      },
      {
        "time_stamp": "2023-08-08 09:02:08"
      },
      {
        "time_stamp": "2023-08-08 09:03:14"
      },
      {
        "time_stamp": "2023-08-08 13:42:48"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 08:03:16",
    "text": "have you been able to get tailwind vscode intellisense working?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 08:05:35",
    "text": "yea, but via an extension"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 08:34:24",
    "edited": {
      "time_stamp": "2023-08-08 08:34:32"
    },
    "text": "would you mind sharing? :pray:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 08:35:48",
    "text": "sharing the extension? sure thing: <https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss>"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-08 08:36:51",
    "text": "i’m not sure our system cares either way about your use of prettier - since it’s just a local tool you should be able to install it as a `devDependency` and use a config as normal"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-08 08:37:17",
    "text": "i don’t think the dev server will try to interfere"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 08:37:50",
    "text": "yeah I have that but it’s not showing intellisense on the html files"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 08:38:00",
    "text": "the config file threw a warning/error in prettier"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 08:38:04",
    "text": "did you do any custom configs?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 08:38:07",
    "text": "but it wasn't actually necessary"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 08:38:16",
    "text": "which is double interesting....not sure how that's a thing"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-08 08:39:19",
    "text": "prettier should have default values but you should be able to override with a config"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-08 08:39:24",
    "text": "what was the error?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 08:41:42",
    "text": "I only use it with jsx files"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 08:41:51",
    "text": "that makes sense"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 08:41:57",
    "text": "appreciate the response"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 08:42:22",
    "text": "I do also happen to have tailwind for my regular theme files but I guess I wasn't using intellisense there...I'll let you know when/if I update that"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 08:42:44",
    "text": "let me retrigger, one sec"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 08:45:01",
    "text": "```Error [ERR_REQUIRE_ESM]: require() of ES Module /xxx/xxx/code/xxx-website/global-nav-project/cms-assets/prettier.config.js from /xxx/xxx/code/xxx-website/global-nav-project/cms-assets/node_modules/prettier/internal/internal.mjs not supported.\nprettier.config.js is treated as an ES module file as it is a .js file whose nearest parent package.json contains \"type\": \"module\" which declares all .js files in that package scope as ES modules.\nInstead rename prettier.config.js to end in .cjs, change the requiring code to use dynamic import() which is available in all CommonJS modules, or change \"type\": \"module\" to \"type\": \"commonjs\" in /xxx/xxx/code/xxx-website/global-nav-project/cms-assets/package.json to treat all .js files as CommonJS (using .mjs for all ES modules instead).```"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 08:46:06",
    "text": "this is the (apparently unnecessary config):\n```// prettier.config.js\nmodule.exports = {\n  plugins: [\"prettier-plugin-tailwindcss\"],\n};```\n"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-08 08:46:51",
    "text": "you need to change it to be ES module syntax, so in your case just changing to `export default`"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-08 08:47:18",
    "text": "since you have (and we require) `type: \"module\"` in your package.json"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-08 08:49:02",
    "text": "or as the error says you can change the file extension to .cjs"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 08:49:55",
    "text": "is this right?\n```// prettier.config.js\nexport default config = {\n  plugins: [\"prettier-plugin-tailwindcss\"],\n};```\n"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-08 08:50:29",
    "text": "just `export default {`"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-08 08:50:48",
    "text": "it works the same as ES modules in general"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 08:52:19",
    "text": "that doesn't seem to work:\n```[\"ERROR\" - 10:51:15 AM] require() of ES Module xxx/global-nav-project/cms-assets/prettier.config.js from xxx/global-nav-project/cms-assets/node_modules/prettier/internal/internal.mjs not supported.\nInstead change the require of prettier.config.js in xxx/global-nav-project/cms-assets/node_modules/prettier/internal/internal.mjs to a dynamic import() which is available in all CommonJS modules.\nError [ERR_REQUIRE_ESM]: require() of ES Module xxx/global-nav-project/cms-assets/prettier.config.js from xxx/global-nav-project/cms-assets/node_modules/prettier/internal/internal.mjs not supported.\nInstead change the require of prettier.config.js in xxx/global-nav-project/cms-assets/node_modules/prettier/internal/internal.mjs to a dynamic import() which is available in all CommonJS modules.```"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 08:52:24",
    "text": "I'll try .cjs"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 08:52:34",
    "text": "thx, I’m tinkering with the preferences, I’m also using the HubSpot vscode extension"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-08 08:53:10",
    "text": "hmm ok - make sure to change back to `module.exports` in that case"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 08:53:24",
    "text": "the `.cjs` version does work"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 08:54:52",
    "text": "actually..."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 08:57:23",
    "text": "I might have broken something somewhere along the line (or maybe just didn't notice this initially):\n```/xxx/global-nav-project/cms-assets/tailwind.config.js:5\nconst componentsDir = new URL(\"./components\", import.meta.url).pathname;\n                                                     ^^^^\n\nSyntaxError: Cannot use 'import.meta' outside a module\n    at new Script (node:vm:100:7)\n    at createScript (node:vm:265:10)\n    at Object.runInThisContext (node:vm:313:10)```"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 08:59:03",
    "text": "when I save some files (all within the same project)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 08:59:06",
    "text": "I get that error"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-08 08:59:44",
    "text": "hmm that config is probably now getting used by prettier in a CJS context"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-08 08:59:53",
    "text": "i can play around with what works/doesnt work today"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 09:00:20",
    "text": "ok, thanks, sorry I don't have better context to confirm the issue. Poking around now"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 09:00:56",
    "text": "it seems to only be happening in one file.."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 09:01:10",
    "text": "a pretty simple component with just an svg more or less"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 09:02:08",
    "edited": {
      "time_stamp": "2023-08-08 09:03:38"
    },
    "text": "happens with + without the .cjs config file"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-08 09:03:14",
    "text": "hmm interesting"
  },
  {
    "subtype": "thread_broadcast",
    "time_stamp": "2023-08-08 09:22:52",
    "text": "Ok, we have fixed this now. In future builds JS modules can be edited in the page editor (there was a bug in our build system that was setting all JS modules fields as `locked: true` which was preventing them from being shown in the page editor)"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 09:25:16",
    "edited": {
      "time_stamp": "2023-08-08 09:25:24"
    },
    "text": "finally got it working <https://HubSpotdev.slack.com/archives/CLJJXGTC0/p1691508033269879>"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-08-08 09:25:40",
    "text": "awesome, thanks for sharing"
  },
  {
    "poster": {
      "poster_name": "Federico Bartoli",
      "poster_handle": "federico.bartoli"
    },
    "time_stamp": "2023-08-08 09:26:48",
    "text": "Great!!!"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 09:52:03",
    "text": "is it possible to use the new beta rendering with multi-language pages?",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-08-08 09:52:56"
      },
      {
        "time_stamp": "2023-08-08 09:53:06"
      },
      {
        "time_stamp": "2023-08-08 09:53:13"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-08-08 09:52:56",
    "text": "Yep! data passed to js building blocks would go through the normal render flow as pages relative to multi-lang"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 09:53:06",
    "text": "oh nice"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 09:53:13",
    "text": "that should play nice with next i18n then"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 09:54:16",
    "text": "I understand this is “beta” and the estimated GA is 2023 — would you recommend this to be used in an upcoming production build? or do you anticipate any major api changes?",
    "reply_count": 44,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2023-08-08 09:54:53"
      },
      {
        "time_stamp": "2023-08-08 09:55:55"
      },
      {
        "time_stamp": "2023-08-08 09:56:12"
      },
      {
        "time_stamp": "2023-08-08 09:56:27"
      },
      {
        "time_stamp": "2023-08-08 09:57:04"
      },
      {
        "time_stamp": "2023-08-08 09:57:38"
      },
      {
        "time_stamp": "2023-08-08 09:58:03"
      },
      {
        "time_stamp": "2023-08-08 09:58:17"
      },
      {
        "time_stamp": "2023-08-08 09:58:38"
      },
      {
        "time_stamp": "2023-08-08 09:58:48"
      },
      {
        "time_stamp": "2023-08-08 09:59:17"
      },
      {
        "time_stamp": "2023-08-08 09:59:30"
      },
      {
        "time_stamp": "2023-08-08 10:19:58"
      },
      {
        "time_stamp": "2023-08-08 10:25:10"
      },
      {
        "time_stamp": "2023-08-08 10:26:08"
      },
      {
        "time_stamp": "2023-08-08 10:26:21"
      },
      {
        "time_stamp": "2023-08-08 10:27:09"
      },
      {
        "time_stamp": "2023-08-08 10:27:38"
      },
      {
        "time_stamp": "2023-08-08 10:28:04"
      },
      {
        "time_stamp": "2023-08-08 10:28:22"
      },
      {
        "time_stamp": "2023-08-08 10:29:07"
      },
      {
        "time_stamp": "2023-08-08 10:29:17"
      },
      {
        "time_stamp": "2023-08-08 10:29:40"
      },
      {
        "time_stamp": "2023-08-08 10:29:57"
      },
      {
        "time_stamp": "2023-08-08 10:30:02"
      },
      {
        "time_stamp": "2023-08-08 10:30:06"
      },
      {
        "time_stamp": "2023-08-08 10:30:27"
      },
      {
        "time_stamp": "2023-08-08 10:30:33"
      },
      {
        "time_stamp": "2023-08-08 10:30:42"
      },
      {
        "time_stamp": "2023-08-08 10:30:59"
      },
      {
        "time_stamp": "2023-08-08 10:31:41"
      },
      {
        "time_stamp": "2023-08-08 10:32:14"
      },
      {
        "time_stamp": "2023-08-08 10:32:46"
      },
      {
        "time_stamp": "2023-08-08 10:33:06"
      },
      {
        "time_stamp": "2023-08-08 10:33:18"
      },
      {
        "time_stamp": "2023-08-08 10:34:04"
      },
      {
        "time_stamp": "2023-08-08 10:36:56"
      },
      {
        "time_stamp": "2023-08-08 10:37:49"
      },
      {
        "time_stamp": "2023-08-08 10:38:08"
      },
      {
        "time_stamp": "2023-08-08 10:38:46"
      },
      {
        "time_stamp": "2023-08-08 10:40:15"
      },
      {
        "time_stamp": "2023-08-08 10:42:08"
      },
      {
        "time_stamp": "2023-08-08 10:43:32"
      },
      {
        "time_stamp": "2023-08-08 10:44:27"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-08-08 09:54:53",
    "text": "I would recommend this to be used in production. The current APIs documented are stable."
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-08-08 09:55:55",
    "text": "We intend to continue to iterate of course making sure new functionality is backward compatible."
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 09:56:12",
    "text": "that’s great to hear thank you"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 09:56:27",
    "text": "are there any showcase sites built with this I can look at?"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-08-08 09:57:04",
    "edited": {
      "time_stamp": "2023-08-08 09:57:48"
    },
    "text": "We actually rebuilt much of <https://designers.HubSpot.com/inspire> with JS building blocks."
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-08-08 09:57:38",
    "text": "The main page, as well as the search results and site detail pages all have JS Building blocks on them."
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 09:58:03",
    "text": "much appreciated <@UAYBXDG4U> - if I can buy you coffee lmk how lol"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-08-08 09:58:17",
    "text": "Build more :wink:"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 09:58:38",
    "text": "yeah we have a pretty cool client project coming, it would be a nice showcase I think"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 09:58:48",
    "text": "we’re also doing a headless shopify"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-08-08 09:59:17",
    "text": "Nice - keep us in the loop and let us know any rough edges you find and features that would improve the experience."
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 09:59:30",
    "text": "absolutely"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 10:19:58",
    "text": "one last question - is the beta rendering meant for HubSpot itself to render our react components OR could we render these components in our next.js app? (more like HubSpot drag n drop as a headless CMS)"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-08 10:25:10",
    "text": "interesting question - there are some APIs that are currently specific to our platform that wouldn’t work out of the box with next.js (<https://github.com/HubSpot/cms-js-building-block-examples/blob/main/docs/reference.md#islands|islands> being the most important one) and there are probably similar APIs missing in the opposite direction, but you could probably work around that in some way to share some base components between two systems if you wanted"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-08 10:26:08",
    "text": "also the model of an entry point is sort of different today between our JS components and next.js, where you’re building a full page with react with next.js and currently the entry point for HubSpot is subsections of a page via modules"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-08 10:26:21",
    "text": "so it can’t be a 1-1 match"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 10:27:09",
    "text": "I see, so it’s not as simple as swapping out vite in one of the examples and start wiring up the components "
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 10:27:38",
    "text": "yeah that makes sense because I kinda deduced that HubSpot is actually rendering the page"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 10:28:04",
    "text": "vs. us hitting HS blocks api and filling in on say a nextjs page"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 10:28:22",
    "text": "We’ve also been looking at <http://builder.io|builder.io> for a functionality like that"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-08 10:29:07",
    "text": "yeah currently the only supported end result of our JS rendering is a HubSpot-served page"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 10:29:17",
    "text": "that makes sense, thank you"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-08 10:29:40",
    "text": "so you could theoretically do something hacky by either requesting that page similar to how you would an API call and grabbing HTML, or use an iframe"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-08 10:29:57",
    "text": "but both kinda gross workarounds haha"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 10:30:02",
    "text": "haha all good"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 10:30:06",
    "text": "that clarifies it a lot"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 10:30:27",
    "text": "it’s still better than the classic way, I had to handroll a webpack setup to get the live reload and tailwind working"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 10:30:33",
    "text": "and still it’s a little wonky"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-08 10:30:42",
    "text": "i would lean towards extracting common code to share between systems as much as you can"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 10:30:59",
    "text": "good call^ turborepo should come in handy here"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 10:31:41",
    "edited": {
      "time_stamp": "2023-08-08 10:31:49"
    },
    "text": "but I think we might just let HS handle the rendering for now and just use the new blocks with react vs. the old hubl route"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-08 10:32:14",
    "text": ":+1: to understand the original problem you’re running into better, are you thinking about migrating an existing next.js site?"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 10:32:46",
    "text": "so it’s a new build"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 10:33:06",
    "edited": {
      "time_stamp": "2023-08-08 10:34:23"
    },
    "text": "I saw the beta rendering and thought it’s more of a headless CMS with drag and drop blocks"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 10:33:18",
    "text": "figured we can run next.js to render the components and also tie in shopify"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 10:34:04",
    "text": "but thanks to the info you provided, we will just build the blocks using the new JS rendering route, let HS handle rendering of the site and we will run shopify / next.js headless on a separate domain"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-08 10:36:56",
    "edited": {
      "time_stamp": "2023-08-08 10:37:23"
    },
    "text": ":+1: makes sense thank you! yeah maybe not quite headless but hoping to solve for that idea of a drag and drop layer with generic server-rendered react components that you build powering those pieces as we go"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 10:37:49",
    "text": "right, that makes sense"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 10:38:08",
    "text": "I know the use case I said is a tough nut to crack"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 10:38:46",
    "edited": {
      "time_stamp": "2023-08-08 10:38:54"
    },
    "text": "again really appreciate your insights <@U04DVL5T2TE> <@UAYBXDG4U> I’ll try not to bug you guys too much and provide feedback as we build"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-08 10:40:15",
    "text": "Oh, don’t you worry. We appreciate your help and feedback a ton! Both on the actual tools and APIs and what broad stuff you would like to have, be able to do, etc."
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 10:42:08",
    "edited": {
      "time_stamp": "2023-08-08 10:43:17"
    },
    "text": "absolutely - when I saw the `@HubSpot/cms-components` I was like oh this might be what I need and feed it API keys to render the components/pages :joy:"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-08 10:43:32",
    "text": "Totally fair assumption. We should clarify that more upfront in our docs."
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-08 10:44:27",
    "text": "no worries, thanks for being super responsive. this is a decent size build and we were at a crossroad"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-08 13:42:48",
    "edited": {
      "time_stamp": "2023-08-08 13:43:26"
    },
    "text": "ok got back to this - i think there’s a bit of thrash happening at the moment between prettier, its plugins, and ES module support. going off the advice here switching to a JSON prettier config worked: <https://github.com/tailwindlabs/prettier-plugin-tailwindcss/issues/191>"
  }
]