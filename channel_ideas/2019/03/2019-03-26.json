[
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-26 11:25:08",
    "text": "I think this was a discussion before but having the ability for there to be a \"include no_wrapper\" on Custom Modules would be awesome so when you add them to a flexible column, they wouldnt bring over outside wrapping"
  },
  {
    "text": "Something like:",
    "time_stamp": "2019-03-26 11:28:12"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-26 11:38:47",
    "text": "I don’t think they’re going to implement that, because that would kill the page editor"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-26 11:40:08",
    "text": "the wrapper is used by the page editor to overlay the editable regions and enable the change layout functionality etc."
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2019-03-26 11:40:43",
    "text": ":arrow_up:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-26 11:42:47",
    "text": "and to play devils advocate on it - aside from reducing code, what is the purpose of wanting it removed?\nif it’s to do what we used to do  back in the day to make horizontal flex columns, that’s no longer necessary because you could just use the new <#CDU990ECW|drag-n-drop-pages> feature for that"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-26 11:44:51",
    "text": "This is true, I havent tried it in a page itself (i've just been building a coded page), guess time to test lol"
  },
  {
    "text": "We really really REALLY need a \"built in\" way to get multi-step forms working out of the box...\n\nThe work arounds cause asinine issues and are a major time suck.\n\nPlease integrate this!!!",
    "time_stamp": "2019-03-26 11:45:12"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-26 11:54:13",
    "text": "so i found an issue with the wrappers, if i have two modules, I wouldnt be able to do something like:\n```\n.class + .item {\n// properties\n}\n```\nI mean i could, I just have to do a ton more CSS work lol"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-26 11:56:08",
    "text": "yea, I would argue what’ed be nicer is if we could add a class to that wrapper"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-26 11:56:21",
    "text": "Yes!"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-26 11:56:42",
    "text": "that would be nice, because the ID on it will change if you have multiple of those types correct?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-26 11:57:02",
    "text": "correct, the id is specific to that module on the page"
  },
  {
    "text": "Actually, it looks like it doesnt, but this still seems ehhhh",
    "time_stamp": "2019-03-26 11:58:19",
    "reply_count": 25,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2019-03-26 11:59:38"
      },
      {
        "time_stamp": "2019-03-26 12:00:12"
      },
      {
        "time_stamp": "2019-03-26 12:00:39"
      },
      {
        "time_stamp": "2019-03-26 12:19:15"
      },
      {
        "time_stamp": "2019-03-26 12:26:30"
      },
      {
        "time_stamp": "2019-03-26 12:27:01"
      },
      {
        "time_stamp": "2019-03-26 12:27:34"
      },
      {
        "time_stamp": "2019-03-26 12:36:55"
      },
      {
        "time_stamp": "2019-03-26 13:04:12"
      },
      {
        "time_stamp": "2019-03-26 13:07:26"
      },
      {
        "time_stamp": "2019-03-26 13:18:39"
      },
      {
        "time_stamp": "2019-03-26 13:19:22"
      },
      {
        "time_stamp": "2019-03-26 13:19:54"
      },
      {
        "time_stamp": "2019-03-26 13:25:53"
      },
      {
        "time_stamp": "2019-03-26 13:32:12"
      },
      {
        "time_stamp": "2019-03-26 13:32:28"
      },
      {
        "time_stamp": "2019-03-26 13:33:31"
      },
      {
        "time_stamp": "2019-03-27 03:36:40"
      },
      {
        "time_stamp": "2019-03-27 03:37:52"
      },
      {
        "time_stamp": "2019-03-27 03:38:15"
      },
      {
        "time_stamp": "2019-03-27 07:59:43"
      },
      {
        "time_stamp": "2019-03-27 08:12:23"
      },
      {
        "time_stamp": "2019-03-27 08:39:05"
      },
      {
        "time_stamp": "2019-03-27 08:39:57"
      },
      {
        "time_stamp": "2019-03-27 08:41:11"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-26 11:58:21",
    "edited": {
      "time_stamp": "2019-03-26 11:58:49"
    },
    "text": "another solution - convince the W3C this: <https://css-tricks.com/parent-selectors-in-css/>\nis a good idea\n\nThough css will be even more painful to inherit from others.",
    "reply_count": 24,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-03-26 12:58:50"
      },
      {
        "time_stamp": "2019-03-26 12:58:55"
      },
      {
        "time_stamp": "2019-03-26 12:59:02"
      },
      {
        "time_stamp": "2019-03-26 13:00:01"
      },
      {
        "time_stamp": "2019-03-27 09:45:07"
      },
      {
        "time_stamp": "2019-03-27 09:45:53"
      },
      {
        "time_stamp": "2019-03-27 09:46:29"
      },
      {
        "time_stamp": "2019-03-27 09:47:10"
      },
      {
        "time_stamp": "2019-03-27 09:47:44"
      },
      {
        "time_stamp": "2019-03-27 09:47:52"
      },
      {
        "time_stamp": "2019-03-27 09:47:58"
      },
      {
        "time_stamp": "2019-03-27 09:48:07"
      },
      {
        "time_stamp": "2019-03-27 09:48:16"
      },
      {
        "time_stamp": "2019-03-27 09:48:32"
      },
      {
        "time_stamp": "2019-03-27 09:48:38"
      },
      {
        "time_stamp": "2019-03-27 09:49:09"
      },
      {
        "time_stamp": "2019-03-27 09:49:10"
      },
      {
        "time_stamp": "2019-03-27 09:49:19"
      },
      {
        "time_stamp": "2019-03-27 09:49:31"
      },
      {
        "time_stamp": "2019-03-27 09:49:34"
      },
      {
        "time_stamp": "2019-03-27 09:49:34"
      },
      {
        "time_stamp": "2019-03-27 09:52:27"
      },
      {
        "time_stamp": "2019-03-27 09:54:08"
      },
      {
        "time_stamp": "2019-03-27 09:54:19"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-26 11:59:38",
    "text": "huh, that seems like a flaw"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-26 12:00:12",
    "text": "you can also use javascript to add the classes you need, done that before for a few projects"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-26 12:00:39",
    "text": "I try to avoid that though when possible."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-03-26 12:07:27",
    "text": "```\ndiv.container:daddy{\n  position:relative;\n}\n```"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-26 12:10:07",
    "text": "har har har"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-26 12:19:15",
    "text": "yea JS might do it but its odd"
  },
  {
    "poster": {
      "poster_name": "Chris Conant",
      "poster_handle": "conant_chris"
    },
    "time_stamp": "2019-03-26 12:26:30",
    "text": "I _believe_ you can add a class to the wrapper via ftp in the meta file using `extra_classes`. It’s been a while since I’ve played around with it, but may be a solution to your issue."
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-26 12:27:01",
    "edited": {
      "time_stamp": "2019-03-26 12:27:04"
    },
    "text": "hrmmm, thats per module correct?"
  },
  {
    "poster": {
      "poster_name": "Chris Conant",
      "poster_handle": "conant_chris"
    },
    "time_stamp": "2019-03-26 12:27:34",
    "text": "Correct"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-26 12:36:55",
    "text": ":eyes:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-03-26 12:58:50",
    "text": "i just read the css tricks title and about fell out of my seat thinking they had finally implemented this"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-03-26 12:58:55",
    "text": "thanks for getting my hopes up"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-26 12:59:02",
    "text": "haha"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-26 13:00:01",
    "text": "it’s one of those things that would be really cool until you think about inheriting a novice’s project some day and having it filled with those"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-26 13:04:12",
    "text": "This works <@U22PWJ41G>! thank you!"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-26 13:07:26",
    "text": "<@UH3RC6KQX> this should solve our issues"
  },
  null,
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-26 13:18:39",
    "edited": {
      "time_stamp": "2019-03-26 13:18:49"
    },
    "text": "scratch that <@U22PWJ41G> it looks like the extra classes aren't applied in the flexible column, then again, I am also getting this warning on different line (non-module line) when adding in the flexible column `Must specify either module_id or path, but not both` and having modules in it"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-26 13:19:22",
    "text": "hmm"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-26 13:19:54",
    "text": "if i strip out the flex column and add the modules without the no_wrap, the extra classes are added as expected"
  },
  {
    "poster": {
      "poster_name": "Chris Conant",
      "poster_handle": "conant_chris"
    },
    "time_stamp": "2019-03-26 13:25:53",
    "text": "I believe the reason that it’s stripping classes within a flex column is that we validate against classes on modules within a flex column as it could cause an unexpected behavior if a customer tries to add an additional instance of a module to the flex column.\nFor example, if a Rich Text module had a class such as `red-text` added to it and a customer tries to add an additional Rich Text module to the flex column at the page level, it wouldn’t inherit the `red-text` style."
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-26 13:32:12",
    "edited": {
      "time_stamp": "2019-03-26 13:32:16"
    },
    "text": "This is understandable that it wouldnt inherit and instead would most likely need to be a CM with that class added to it"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-26 13:32:28",
    "text": "I think I am just a bit confused, do you have a quick second for a sidebar chat on this?"
  },
  {
    "poster": {
      "poster_name": "Chris Conant",
      "poster_handle": "conant_chris"
    },
    "time_stamp": "2019-03-26 13:33:31",
    "text": "Sure thing"
  },
  {
    "poster": {
      "poster_name": "Lindsey Newman",
      "poster_handle": "lindseyn"
    },
    "time_stamp": "2019-03-26 15:02:25",
    "text": "Would love to see a true staging/dev environment where we could edit the actual templates without messing with the live site. Having to clone templates/css/js for staged pages that are shared with the live site can get pretty messy."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-03-26 15:10:14",
    "text": "staged templates"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2019-03-26 19:48:57",
    "text": "That's a big focus of our work these days. No ETA yet, we're working on it.",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-04-25 13:35:15"
      },
      {
        "time_stamp": "2019-04-25 19:52:51"
      }
    ]
  }
]