[
  {
    "poster": {
      "poster_name": "Bhréin Brannick",
      "poster_handle": "bhreinb"
    },
    "time_stamp": "2021-05-18 02:06:31",
    "text": "yeah so I know they have the default ones for example `containingall` , but I’m wondering is there a way to define a custom tests lets say `IsWholeNumber` …for example I can implement custom tags or functions or filters using this capability\n\n<https://github.com/HubSpot/jinjava#custom-tags-filters-and-functions>"
  },
  {
    "poster": {
      "poster_name": "Lars-Erik Aabech",
      "poster_handle": "lea184"
    },
    "time_stamp": "2021-05-18 03:33:02",
    "text": "Hi all,\nI just spewed out some pseudo-code for a colleague to use a form GET to set up some tag filters.\nIs there a nicer way to use the query-string than splitting it like such using filters?\n```&lt;form method=\"get\"&gt;\n&lt;input type=\"checkbox\" name=\"tags\" value=\"A\"&gt;\n&lt;input type=\"checkbox\" name=\"tags\" value=\"B\"&gt;\n&lt;button/&gt;\n&lt;/form&gt;\n{% set args = request.query|split('&amp;') %}\n{% set search = \"\" %}\n{% for arg in args %}\n  {% if (arg|truncate(4) = \"tags\") %}\n    {% set search = (arg|replace(\"tags=\", \"\")) %}\n  {% endif %}\n{% endfor %}\n{% set tags = search|split(',') %}\n// tags == [\"A\",\"B\"]```",
    "reply_count": 35,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2021-05-18 13:04:20"
      },
      {
        "time_stamp": "2021-05-18 13:04:56"
      },
      {
        "time_stamp": "2021-05-18 13:05:30"
      },
      {
        "time_stamp": "2021-05-18 13:05:49"
      },
      {
        "time_stamp": "2021-05-18 13:06:27"
      },
      {
        "time_stamp": "2021-05-18 13:07:18"
      },
      {
        "time_stamp": "2021-05-18 13:07:58"
      },
      {
        "time_stamp": "2021-05-18 13:08:19"
      },
      {
        "time_stamp": "2021-05-18 13:09:21"
      },
      {
        "time_stamp": "2021-05-18 13:18:24"
      },
      {
        "time_stamp": "2021-05-18 13:22:02"
      },
      {
        "time_stamp": "2021-05-18 13:28:06"
      },
      {
        "time_stamp": "2021-05-18 13:29:34"
      },
      {
        "time_stamp": "2021-05-18 13:30:38"
      },
      {
        "time_stamp": "2021-05-18 13:30:59"
      },
      {
        "time_stamp": "2021-05-18 13:31:44"
      },
      {
        "time_stamp": "2021-05-18 13:34:05"
      },
      {
        "time_stamp": "2021-05-18 13:34:48"
      },
      {
        "time_stamp": "2021-05-18 13:34:49"
      },
      {
        "time_stamp": "2021-05-18 13:36:19"
      },
      {
        "time_stamp": "2021-05-18 13:37:50"
      },
      {
        "time_stamp": "2021-05-18 13:38:03"
      },
      {
        "time_stamp": "2021-05-18 13:38:17"
      },
      {
        "time_stamp": "2021-05-18 13:40:24"
      },
      {
        "time_stamp": "2021-05-18 13:46:22"
      },
      {
        "time_stamp": "2021-05-18 13:47:26"
      },
      {
        "time_stamp": "2021-05-18 13:48:28"
      },
      {
        "time_stamp": "2021-05-18 13:49:20"
      },
      {
        "time_stamp": "2021-05-18 13:51:24"
      },
      {
        "time_stamp": "2021-05-18 13:52:01"
      },
      {
        "time_stamp": "2021-05-18 13:56:52"
      },
      {
        "time_stamp": "2021-05-18 14:05:36"
      },
      {
        "time_stamp": "2021-05-18 14:10:28"
      },
      {
        "time_stamp": "2021-05-18 14:12:20"
      },
      {
        "time_stamp": "2022-05-26 10:09:41"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey",
      "poster_handle": "andrey528"
    },
    "time_stamp": "2021-05-18 05:31:09",
    "text": "also a good idea to update the docs <https://developers.HubSpot.com/docs/cms/building-blocks/global-content>"
  },
  {
    "text": "",
    "time_stamp": "2021-05-18 05:31:30"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-05-18 07:14:21",
    "text": ":man-facepalming::skin-tone-2: Thank you, much appreciated Andrey we’ll get this updated!"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-05-18 13:04:20",
    "text": "{{ request.query_dict }}"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-05-18 13:04:56",
    "text": "<https://developers.HubSpot.com/docs/cms/hubl/variables#http-request-variables>"
  },
  {
    "poster": {
      "poster_name": "Lars-Erik Aabech",
      "poster_handle": "lea184"
    },
    "time_stamp": "2021-05-18 13:05:30",
    "text": ":man-facepalming:\ncan't believe I was that blind when reading the docs.\nthanks."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-05-18 13:05:49",
    "text": "Happens to everyone from time to time :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Lars-Erik Aabech",
      "poster_handle": "lea184"
    },
    "time_stamp": "2021-05-18 13:06:27",
    "text": "indeed. here's where I blame the quality of the docs instead of myself to get away with it without losing face. :innocent:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-05-18 13:07:18",
    "text": "haha well as one of the people who works on our docs - I’m going to update the doc to suggest that you use query_dict since it’s easier to work with. :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Lars-Erik Aabech",
      "poster_handle": "lea184"
    },
    "time_stamp": "2021-05-18 13:07:58",
    "text": "if you don't mind, how much of the jinja docs are relevant? i find them a bit more \"complete\" and easy to navigate. I would presume only the HubSpot specific functions are really \"unique\" to hs? or is only a subset of jinja available?"
  },
  {
    "poster": {
      "poster_name": "Lars-Erik Aabech",
      "poster_handle": "lea184"
    },
    "time_stamp": "2021-05-18 13:08:19",
    "text": "(they're not necessarily better. :wink: )"
  },
  {
    "poster": {
      "poster_name": "Lars-Erik Aabech",
      "poster_handle": "lea184"
    },
    "time_stamp": "2021-05-18 13:09:21",
    "text": "mentioning query_dict in the query description would certainly be good ux btw."
  },
  {
    "poster": {
      "poster_name": "Lars-Erik Aabech",
      "poster_handle": "lea184"
    },
    "time_stamp": "2021-05-18 13:18:24",
    "text": "what I like about other \"framework\" docs (if we can call hubl a framework), is that all data types, objects and functions are pretty much individually linked and documented. I kind of feel that hubl's docs. are more a \"User guide\" than a reference. While a \"reference\" section is there, it's also just a collection of \"articles\". Dunno if I make sense. I guess the target group is also evolving from more designers to more \"devs\" as well so interesting to follow the evolution of the docs."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-05-18 13:22:02",
    "text": "So HubL is HubSpot’s fork of Jinjava our open source project where we ported most of the Jinja templating language to run on Java.\n\nHubL doesn’t necessarily support every feature of Jinja, additionally we have a lot of our own concepts specific to the HubSpot platform. Some features of Jinja we may intentionally omit for security, performance, or simply because we may have a much better way of doing something.\n\nGenerally speaking most things are documented. If you encounter something that is in Jinja that is valuable to something you’re looking to do and you don’t see it documented on our site. We would immensely appreciate you sharing your feedback using the docs feedback tool (appears at the bottom of every developer doc)."
  },
  {
    "poster": {
      "poster_name": "Lars-Erik Aabech",
      "poster_handle": "lea184"
    },
    "time_stamp": "2021-05-18 13:28:06",
    "text": "Thanks for clearing that up. I didn't know it was a fork and open source. Awesome!\nThen at least I can read the tests and dig around in the code if I find the docs lacking. :smile:\nLearned more about Dict in 5-10 min by looking at the code than browsing all of the docs docs. :wink:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-05-18 13:29:34",
    "text": "Regarding the change in our documentation. We’ve been putting a lot of energy into thinking through the future of how we document things, documentation is always a living thing.\n\nAs we work on new documentation we’re getting better with every update. The hard part we’re always balancing is updating documentation that is older to fit a better structure and organization.\n\nChanging older documentation can cause developers who have muscle memory to become frustrated.\n\nSimilarly for new users, that older documentation is not necessarily as easy to digest.\n\nWe’re always straddling that balance and if you have feedback let us know. We’re listening and actively update the documentation based on the feedback we’re getting."
  },
  {
    "poster": {
      "poster_name": "Lars-Erik Aabech",
      "poster_handle": "lea184"
    },
    "time_stamp": "2021-05-18 13:30:38",
    "text": "Awesome. I think just publishing the javadocs and linking to them as reference would help peeps like me a lot. (Or make the link more prominent at the top level)"
  },
  {
    "poster": {
      "poster_name": "Lars-Erik Aabech",
      "poster_handle": "lea184"
    },
    "time_stamp": "2021-05-18 13:30:59",
    "text": "At least for things directly mapping to the DSL."
  },
  {
    "text": "like this test doc:",
    "time_stamp": "2021-05-18 13:31:44"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-05-18 13:34:05",
    "text": "These JinJavaDocs are actually directly integrated into the Design Manager and the VS Code extension."
  },
  {
    "poster": {
      "poster_name": "Lars-Erik Aabech",
      "poster_handle": "lea184"
    },
    "time_stamp": "2021-05-18 13:34:48",
    "text": "that's nice, but it would still be nice to have a generated reference to browse.\ni do think i need to check if my colleagues use the extension."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-05-18 13:34:49",
    "edited": {
      "time_stamp": "2021-05-18 13:35:18"
    },
    "text": "In the Design Manager you can access these docs using the reference button in the bottom right. In VS Code it’s used to help autocomplete functions filters and tags."
  },
  {
    "poster": {
      "poster_name": "Lars-Erik Aabech",
      "poster_handle": "lea184"
    },
    "time_stamp": "2021-05-18 13:36:19",
    "text": "I've been complaining for years until we get the CLI, so nobody use the design mgr any more. :wink:\nsaw the searchable reference now. I'd like that on the docs site, but as a browsable tree by modules or something."
  },
  {
    "poster": {
      "poster_name": "Lars-Erik Aabech",
      "poster_handle": "lea184"
    },
    "time_stamp": "2021-05-18 13:37:50",
    "text": "as a sidenote, I'm a 20 years xp microsoft asp net developer trying _not_ to work on our HubSpot projects, so mostly trying to help colleagues. though I suspect I can't not do more on HS going forward, so super happy to know more stuff than I knew is OSS."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-05-18 13:38:03",
    "text": "&gt; that’s nice, but it would still be nice to have a generated reference to browse.\nI understand and agree.  It will be a little bit before we’re able to do that."
  },
  {
    "poster": {
      "poster_name": "Lars-Erik Aabech",
      "poster_handle": "lea184"
    },
    "time_stamp": "2021-05-18 13:38:17",
    "text": "no worries."
  },
  {
    "poster": {
      "poster_name": "Lars-Erik Aabech",
      "poster_handle": "lea184"
    },
    "time_stamp": "2021-05-18 13:40:24",
    "text": "my appreciation of HubSpot have risen one point on the scale from this conversation, so all good. :grin::+1:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-05-18 13:46:22",
    "text": "&gt; so super happy to know more stuff than I knew is OSS.\nMe too :slightly_smiling_face:. We really see the power in open source software and enabling our community to help make tools, boilerplates, etc better. Our community has insights from their real world work that we can’t always intuit/predict, so it’s been immensely useful to help make tools that work great for everyone.\n\nWe have several open source projects that we own from the CLI, VS Code Extension, the boilerplate, API client, and example projects.\n<https://github.com/HubSpot>"
  },
  {
    "poster": {
      "poster_name": "Lars-Erik Aabech",
      "poster_handle": "lea184"
    },
    "time_stamp": "2021-05-18 13:47:26",
    "text": "Aye, have got one PR merged to the CLI. :nerd_face:"
  },
  {
    "poster": {
      "poster_name": "Lars-Erik Aabech",
      "poster_handle": "lea184"
    },
    "time_stamp": "2021-05-18 13:48:28",
    "text": "Every time somebody messes up encoding so our æøå doesn't work, expect one. :rolling_on_the_floor_laughing:\nWe scandinavians really really love working with dates and encoding."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-05-18 13:49:20",
    "edited": {
      "time_stamp": "2021-05-18 13:51:43"
    },
    "text": "&gt; as a sidenote, I’m a 20 years xp microsoft asp net developer trying _not_ to work on our HubSpot projects, so mostly trying to help colleagues. though I suspect I can’t not do more on HS going forward\nWell, I’m not going to lie to you. Our hope is that we can make the development experience so enjoyable, that you’ll prefer to work on HubSpot and HubSpot adjacent projects like integrations for the next phase of your career. :wink:\n\nYou keep letting us know where we’re not making it enjoyable, and we’ll keep chipping away at it."
  },
  {
    "poster": {
      "poster_name": "Lars-Erik Aabech",
      "poster_handle": "lea184"
    },
    "time_stamp": "2021-05-18 13:51:24",
    "text": "Well, the other CMS we use is 100% open source and we host it ourselves. I'm a 4xMVP for said CMS. HS will never be a 100% OSS project, and hence never as appealing to work with for hardcore devs.\nMy prediction is that HS will grab a fair bit of the website market, but never open up the backend enough due to it being SASS. IE. we can never extend it as much as with other platforms."
  },
  {
    "poster": {
      "poster_name": "Lars-Erik Aabech",
      "poster_handle": "lea184"
    },
    "time_stamp": "2021-05-18 13:52:01",
    "text": "The serverless addition is nice, but we'll never be able to do the same for serverside rendering. Which means there's always going to be a gaping hole in what HS can do as a CMS."
  },
  {
    "poster": {
      "poster_name": "Lars-Erik Aabech",
      "poster_handle": "lea184"
    },
    "time_stamp": "2021-05-18 13:56:52",
    "text": "That said, I flat out hated HS a few years ago. After the CLI, VS-code ext, serverless funcs. and a bit deeper knowledge of the tech behind, I've started to (at least) not hate working with it. Long way to go though. :smile:\n\nThe current thing I'm working on and planned on using serverless functions for now only use serverless to pass the message on to an azure logic app due to the other backend services out of our control possibly needing more than 10 secs to reply.\nThat's another reason why HS never will be a fully complete platform. All the caps you _will_ need to set.\n\nOh well, didn't mean to make this into a rant. Really appreciate the help and info."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-05-18 14:05:36",
    "text": "Never say never. While we certainly emphasize making both the content creator and developer experience as consistent and powerful as possible. There are a lot of ways of achieving more control for developers than making the whole system behind the scenes open source.\n\nThere are also things we can do that are hard for OSS to do. One example is having a unified crafted user experience vs a cobbled set of functionality that wasn’t designed to function together.\n\nWhile this sounds clichè there has never been a better time to get started with HubSpot development. We’ve got exciting things cookin’\n\nNo worries on the long convo, it was my pleasure. Hopefully over time we can turn “not hate” to “enjoy”. Keep giving us feedback, we’ll keep iterating."
  },
  {
    "poster": {
      "poster_name": "Lars-Erik Aabech",
      "poster_handle": "lea184"
    },
    "time_stamp": "2021-05-18 14:10:28",
    "text": "Hehe. We'll certainly see. I do like to have more than one tool available and the right tool for the job. Which means, I kind of hope HS will be around for small to medium sites fitting for a \"one-in-all\" SASS solution. While for more complex solutions we can fit together a not-so-cobbled set of OSS functionality that fit well together due to DI and other good practices. :wink:\nThe latter will likely push data to- and use data from HS using the APIs and JS integrations anyway, so again - best tool for the job, and even better if multiple tools work well together.\nAh, that's right, :man-facepalming: I'm in the MSFT camp. I know there's more chaos and incompatible tooling over there in Oracle-land. :man-shrugging::rolling_on_the_floor_laughing:\n(J/K with that last one)"
  },
  {
    "poster": {
      "poster_name": "Lars-Erik Aabech",
      "poster_handle": "lea184"
    },
    "time_stamp": "2021-05-18 14:12:20",
    "text": "(also throw the other rock in a glasshouse given that we use proprietary services on azure for quite a few things)"
  },
  {
    "poster": {
      "poster_name": "Lars-Erik Aabech",
      "poster_handle": "lea184"
    },
    "time_stamp": "2021-05-18 14:24:39",
    "text": "How 'bout using `{{ hubdb_table_rows(nnnn).objects | tojson }}`  in a base layout? It seems we have to publish the layout view to invalidate some cache.\nIs there a set timeout, or is this actually a requirement? (republishing layout)"
  }
]