[
  {
    "poster": {
      "poster_name": "Joe",
      "poster_handle": "joe"
    },
    "time_stamp": "2018-08-01 09:43:58",
    "text": "Would love for a way as a super admin user in a portal to get the meetings embed script of other users within that portal instead of only being able to access my own..."
  },
  {
    "poster": {
      "poster_name": "ΚΣΣGΛΠ ΒΓΘΨΠ",
      "poster_handle": "keegan"
    },
    "time_stamp": "2018-08-01 12:22:26",
    "text": "Random idea: HubSpot should consider open-sourcing the Local-Hubl-Server. If this tool is ever going to be a serious component of the dev toolbox, it needs to be made more flexible, and open sourcing it is a great way to get the community involved."
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-08-01 13:52:31",
    "text": "Idea: Give ability to select which wrapper element will be used. For example, I created a very semantic template outside of HubSpot COS and I am now converting it to custom modules. However, every field I have so far always renders a wrapper &lt;div&gt;. I understand the need for wrappers, though I prefer not to have them at all, but in some cases, spans are better than &lt;divs&gt;\n\nie. if I am trying to put field data INTO a &lt;span&gt;"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-08-01 14:00:45",
    "text": "having to write these kinds of extra rules:\n\n`span div {display:inline}`"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-08-01 14:03:25",
    "text": "have you tried the `no_wrapper=True` statement on the fields/tags?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-01 14:09:22",
    "text": "I think he has but he’s wanting to keep them for the future benefits  of the in-page editor, that’s how I understand it"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-08-01 14:10:57",
    "text": "no, I’m just a newbie and didn’t know about the no_wrapper property :slightly_smiling_face:\nThanks <@U2H3TT8F2> \n\nBut that is a good thought <@U7SL518D6> \n\nI’m more concerned about keeping my css as clean as possible."
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-08-01 14:11:19",
    "text": "adding no_wrapper true worked"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-01 14:14:23",
    "text": "just as a clarification of what I was saying - when you use no_wrapper=True you break the ability for HubSpot to make the field editable by live clicking on the element in the page editor.(the feature isn’t there right now but it’s been planned/talked about, and it’s something they had in the past for fields that were at the template level instead of module level.).\n\nThe tags it generates are used by the editor to make the regions editable.\n\nThere are times though when no_wrapper just makes sense like for attribute values and stuff like that where injecting the html doesn’t make any sense."
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-08-01 14:21:13",
    "text": "got it. thanks for the extra info"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-08-01 14:23:45",
    "text": "In THAT case, being able to choose the element that is the wrapper would be great. HubSpot rightly can’t guess the semantic nature of what developers are trying to do, but giving us that ability lets us do the right thing and keeps our code more future proof and readable by future developers"
  },
  {
    "poster": {
      "poster_name": "jim mikecz",
      "poster_handle": "jim.m"
    },
    "time_stamp": "2018-08-01 15:49:05",
    "text": "Idea: Ability to clone page-level modules. Ie after content has been changed at the page level, add the ability to clone it or (better yet) send it to another page.",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-08-01 21:56:51"
      },
      {
        "time_stamp": "2018-08-02 07:52:48"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-08-01 21:56:51",
    "text": "with duplicate content checking ability maybe? In case you did do that by accident."
  },
  null
]