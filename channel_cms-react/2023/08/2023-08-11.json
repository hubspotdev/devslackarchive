[
  {
    "text": "",
    "time_stamp": "2023-08-11 07:34:08",
    "reply_count": 39,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-08-11 07:44:13"
      },
      {
        "time_stamp": "2023-08-11 07:44:31"
      },
      {
        "time_stamp": "2023-08-11 07:47:27"
      },
      {
        "time_stamp": "2023-08-11 07:47:34"
      },
      {
        "time_stamp": "2023-08-11 07:51:49"
      },
      {
        "time_stamp": "2023-08-11 07:51:54"
      },
      {
        "time_stamp": "2023-08-11 07:53:01"
      },
      {
        "time_stamp": "2023-08-11 07:53:12"
      },
      {
        "time_stamp": "2023-08-11 07:54:19"
      },
      {
        "time_stamp": "2023-08-11 07:54:46"
      },
      {
        "time_stamp": "2023-08-11 07:55:44"
      },
      {
        "time_stamp": "2023-08-11 07:56:27"
      },
      {
        "time_stamp": "2023-08-11 07:59:46"
      },
      {
        "time_stamp": "2023-08-11 08:01:43"
      },
      {
        "time_stamp": "2023-08-11 08:04:00"
      },
      {
        "time_stamp": "2023-08-11 08:04:16"
      },
      {
        "time_stamp": "2023-08-11 08:04:38"
      },
      {
        "time_stamp": "2023-08-11 08:04:48"
      },
      {
        "time_stamp": "2023-08-11 08:05:08"
      },
      {
        "time_stamp": "2023-08-11 08:05:14"
      },
      {
        "time_stamp": "2023-08-11 08:06:12"
      },
      {
        "time_stamp": "2023-08-11 08:06:15"
      },
      {
        "time_stamp": "2023-08-11 08:06:35"
      },
      {
        "time_stamp": "2023-08-11 08:07:15"
      },
      {
        "time_stamp": "2023-08-11 08:07:33"
      },
      {
        "time_stamp": "2023-08-11 08:07:45"
      },
      {
        "time_stamp": "2023-08-11 08:08:31"
      },
      {
        "time_stamp": "2023-08-11 08:09:08"
      },
      {
        "time_stamp": "2023-08-11 08:09:40"
      },
      {
        "time_stamp": "2023-08-11 08:20:08"
      },
      {
        "time_stamp": "2023-08-11 08:20:37"
      },
      {
        "time_stamp": "2023-08-11 08:21:02"
      },
      {
        "time_stamp": "2023-08-11 08:21:35"
      },
      {
        "time_stamp": "2023-08-11 08:22:13"
      },
      {
        "time_stamp": "2023-08-11 08:22:45"
      },
      {
        "time_stamp": "2023-08-11 08:23:33"
      },
      {
        "time_stamp": "2023-08-11 08:24:59"
      },
      {
        "time_stamp": "2023-08-11 08:25:36"
      },
      {
        "time_stamp": "2023-08-11 08:26:23"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 07:34:33",
    "text": "Hi - hope you are having a nice friday!\nIs it not possible to drag and drop modules if you’re using the new beta?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-11 07:44:13",
    "text": "Sanity check, is there a D&amp;D area inside the template for that page?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-11 07:44:31",
    "text": "But yes, you should be able to drag in JS modules if there is a D&amp;D area on the page"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 07:47:27",
    "text": "aah I see - I found your post from before <https://HubSpotdev.slack.com/archives/C04AY1H2204/p1679595003289699>"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 07:47:34",
    "text": "that’s helpful, thank you"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 07:51:49",
    "edited": {
      "time_stamp": "2023-08-11 07:52:09"
    },
    "text": "I was looking at the classic way (growth theme) and but didn’t see\n`{% dnd_area %}`  in examples for beta, and I kept embedding partials lol so I couldn’t get the button to work"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 07:51:54",
    "edited": {
      "time_stamp": "2023-08-11 07:52:24"
    },
    "text": "but it all makes sense now, thank you"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-11 07:53:01",
    "edited": {
      "time_stamp": "2023-08-11 07:53:10"
    },
    "text": "Looking… it seems like none of our <https://github.com/HubSpot/cms-js-building-block-examples> have a template with a D&amp;D area. We should change that"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 07:53:12",
    "text": "right lol"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 07:54:19",
    "edited": {
      "time_stamp": "2023-08-11 07:54:30"
    },
    "text": "that’s why I was confused, thought maybe it’s not possible and I was not properly embedding a `dnd_area`  until I saw your slack post from march"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-11 07:54:46",
    "text": "Totally makes sense, we will fix this. Make sure it is mentioned in our docs and there is an example"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 07:55:44",
    "text": "another dumb question for you - I know the “theme” files basically are “Files and templates -&gt; Design Tools”, where do the JS files go?"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 07:56:27",
    "text": "I know `yarn deploy` builds/deploys, but where do those JS modules/partials go?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-11 07:59:46",
    "text": "Ah, where do they “live” after deploying a JS cms asset project?\n\nTechnically they live in a similar place in our infrastructure but we don’t expose them in Design Tools. Mostly because  we want to encourage the CI/CD style of development where there is a build, a deploy, deploys can be reverted to old versions, etc.\n\nSo in that model it is harder/different/surprising to make a small change to one file in the Design tools. Because each build kicked off locally (or via a github action) is an “immutable” package… i.e. all changes are grouped together and any other change needs to be a new, separate build."
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-11 08:01:43",
    "text": "So this makes it harder to do one off simple changes, but it makes maintenance, reverting, etc much easer and less messy.\n\nCurious to hear from you and others, would it be helpful to expose a read-only version of these JS modules (source code, built version?) in Design tools (even if to make a change you still needed to use the cli or github actions)?"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 08:04:00",
    "text": "that makes sense - I think it’s fine without having the readonly option"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 08:04:16",
    "text": "and the CI/CD workflow also makes sense now that you explained it with GH Actions"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 08:04:38",
    "text": "it would be nice to show a list of deployments similar to how heroku does it with rollback option"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 08:04:48",
    "text": "(unless that exists somewhere and I don’t know)"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-11 08:05:08",
    "edited": {
      "time_stamp": "2023-08-11 08:05:25"
    },
    "text": "Have you gone to <https://app.HubSpot.com/l/developer-projects/> yet? :wink:"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-11 08:05:14",
    "edited": {
      "time_stamp": "2023-08-11 08:05:28"
    },
    "text": "~Oops, not qa…~"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 08:06:12",
    "text": "that’s sick! nicely done"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 08:06:15",
    "text": "sorry I missed this"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-11 08:06:35",
    "edited": {
      "time_stamp": "2023-08-11 08:06:40"
    },
    "text": "Also hidden deep in the docs. Probably should surface a screenshot or little GIF of that UI"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 08:07:15",
    "text": "yeah that would be great"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 08:07:33",
    "edited": {
      "time_stamp": "2023-08-11 08:08:23"
    },
    "text": "one nitpick- and this took me a while to find is “changing the default theme”"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 08:07:45",
    "text": "I eventually figured it out, but kinda hidden"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-11 08:08:31",
    "text": "Yup, agreed. Good feedback"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-11 08:09:08",
    "text": "Keep it comin’ :wave:"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 08:09:40",
    "text": "absolutely - I’m trying not to bother you guys but the module piece, I was pulling my hair out :joy:"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 08:20:08",
    "text": "sorry on other thing I noticed- the `yarn deploy` seems to be very slow, it would be great to see SWC integration and also improve the speed overall. I’m using the `hello-world` and it takes 75s with blank starter"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 08:20:37",
    "text": "I know you mentioned it’s meant to live on CI/CD but just an observation"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 08:21:02",
    "text": "(sorry to repeat the obvious)"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-11 08:21:35",
    "text": "No, feedback that is obvious is also great…"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 08:22:13",
    "text": "also an FYI - I’m running it on M1 Max - MBP with 64GBs of ram. it’s not a netbook :joy:"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-11 08:22:45",
    "text": "Yup it should be faster. Not sure how much if it is actually is due to React/JS compilation and SWC helping rather than other things. We have a few things in progress that could shave 15-25 seconds off and hopefully will continue to make that better. But we haven’t dug very deep into those optimizations yet"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-11 08:23:33",
    "text": "Note we are actually not building on your machine but remotely (for consistency). Though if we can’t get the devex you/we need, that might be something for us to reconsider"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 08:24:59",
    "text": "oh interesting - that makes sense"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 08:25:36",
    "text": "so it’s uploading the raw files and building on the cloud?"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 08:26:23",
    "text": "might be nice to build local and upload. turborepo is doing a great job in this area"
  },
  {
    "text": "Is there a way (or a recommended) way to override styling for the built-in modules? for ex. language switcher, carousel, etc.\n\ncan these reference a custom react module (override)? or is it more like overriding the CSS classes/styling in the theme itself?",
    "time_stamp": "2023-08-11 08:59:24",
    "reply_count": 47,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-08-11 09:06:57"
      },
      {
        "time_stamp": "2023-08-11 09:07:50"
      },
      {
        "time_stamp": "2023-08-11 09:10:07"
      },
      {
        "time_stamp": "2023-08-11 09:10:57"
      },
      {
        "time_stamp": "2023-08-11 09:11:28"
      },
      {
        "time_stamp": "2023-08-11 09:11:38"
      },
      {
        "time_stamp": "2023-08-11 09:12:18"
      },
      {
        "time_stamp": "2023-08-11 09:13:28"
      },
      {
        "time_stamp": "2023-08-11 09:14:06"
      },
      {
        "time_stamp": "2023-08-11 09:14:49"
      },
      {
        "time_stamp": "2023-08-11 09:14:58"
      },
      {
        "time_stamp": "2023-08-11 09:15:04"
      },
      {
        "time_stamp": "2023-08-11 09:15:20"
      },
      {
        "time_stamp": "2023-08-11 09:15:46"
      },
      {
        "time_stamp": "2023-08-11 09:16:20"
      },
      {
        "time_stamp": "2023-08-11 09:16:44"
      },
      {
        "time_stamp": "2023-08-11 09:17:06"
      },
      {
        "time_stamp": "2023-08-11 09:17:38"
      },
      {
        "time_stamp": "2023-08-11 09:18:08"
      },
      {
        "time_stamp": "2023-08-11 09:19:05"
      },
      {
        "time_stamp": "2023-08-11 09:20:56"
      },
      {
        "time_stamp": "2023-08-11 09:22:32"
      },
      {
        "time_stamp": "2023-08-11 09:22:57"
      },
      {
        "time_stamp": "2023-08-11 09:24:00"
      },
      {
        "time_stamp": "2023-08-11 09:24:19"
      },
      {
        "time_stamp": "2023-08-11 09:24:53"
      },
      {
        "time_stamp": "2023-08-11 09:25:13"
      },
      {
        "time_stamp": "2023-08-11 09:28:33"
      },
      {
        "time_stamp": "2023-08-11 09:28:52"
      },
      {
        "time_stamp": "2023-08-11 09:30:20"
      },
      {
        "time_stamp": "2023-08-11 09:31:41"
      },
      {
        "time_stamp": "2023-08-11 09:32:03"
      },
      {
        "time_stamp": "2023-08-11 09:32:56"
      },
      {
        "time_stamp": "2023-08-11 09:33:54"
      },
      {
        "time_stamp": "2023-08-11 09:35:54"
      },
      {
        "time_stamp": "2023-08-11 09:36:46"
      },
      {
        "time_stamp": "2023-08-11 09:38:01"
      },
      {
        "time_stamp": "2023-08-11 09:38:29"
      },
      {
        "time_stamp": "2023-08-11 09:38:29"
      },
      {
        "time_stamp": "2023-08-11 09:38:50"
      },
      {
        "time_stamp": "2023-08-11 09:39:01"
      },
      {
        "time_stamp": "2023-08-11 09:40:23"
      },
      {
        "time_stamp": "2023-08-11 09:40:51"
      },
      {
        "time_stamp": "2023-08-11 09:41:43"
      },
      {
        "time_stamp": "2023-08-11 09:52:48"
      },
      {
        "time_stamp": "2023-08-11 09:53:39"
      },
      {
        "time_stamp": "2023-08-11 09:54:47"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-11 09:06:57",
    "text": "For styling default modules, I think the best you have is overriding CSS classes/styling in your theme CSS. Especially if it is too much or not reasonable/possible to build a new module that replaces it.\n\nBut if there was a better way, let’s say something with React components… you have any suggestion for what you’d like to be able to do specifically?"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:07:50",
    "text": "that makes sense, ty"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:10:07",
    "text": "obviously we can roll out our own carousel for example and tell our team to use our custom carousel.\n\npros/cons here- the override could be you exposing what the props are (and/or an example of react component). if the file exists in the project, it can override the built-in version"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:10:57",
    "text": "this would make it easier to have one version of carousel (since you’ve built repeater and all that good stuff already) and the team doesn’t have to think about using the “right” module. ex. carousel and carousel-custom"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:11:28",
    "text": "but the downside obviously is that it might limit you guys if you ever wanna change your first-party component’s prop types or anything else"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:11:38",
    "text": "it may break peoples’ custom components"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:12:18",
    "text": "by no means this is a must- just thinking out loud here"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-11 09:13:28",
    "text": "Some thought experiments:\n• What if you could (in your theme config) hide a default module and/or swap it out with one of your own modules?\n• What if (assuming all of our default modules are built on React which is not true yet) that you got access so some of the inner React components we use to build default modules and you could import and use those directly in your modules?"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:14:06",
    "text": "```What if you could (in your theme config) hide a default module and/or swap it out with one of your own modules?```\nthat would be a nice addition - to make it less confusing for avg. user"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:14:49",
    "text": "```What if (assuming all of our default modules are built on React which is not true yet) that you got access so some of the inner React components we use to build default modules and you could import and use those directly in your modules?```\nwould be very welcomed. especially because you guys can version it and just give a `hs-components`  package that can be embedded"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:14:58",
    "text": "this also opens the door to running HS headless"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:15:04",
    "text": "with next.js and other frameworks"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:15:20",
    "text": "because we can just tap in the API, fetch the components and call the renderer with the right components"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-11 09:15:46",
    "text": ":+1:, :ear:"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:16:20",
    "text": "that would be golden tbh"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:16:44",
    "text": "in one project we are working on we are also integrating shopify headless + next.js"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:17:06",
    "text": "so we are gonna have www -&gt; HubSpot and shop. -&gt; headless next.js"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:17:38",
    "text": "but if only we could tap in the api, static render the site from HS blocks and then products could tap in shopify, that would be really cool"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:18:08",
    "text": "<http://builder.io|builder.io> is doing something like that but the pricing is just insane for multi-lang"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:19:05",
    "text": "so our client prefers to stick with HS for CRM and CMS in this case"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-11 09:20:56",
    "edited": {
      "time_stamp": "2023-08-11 09:21:11"
    },
    "text": "&gt; this also opens the door to running HS headless\ni’m a little confused as to how opening up the default module presentational component primitives would open us up to be headless. is there something important in there that isn’t just the underlying data coming from blog/hubdb/CRM data to then render however you want that would make it truly headless?"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-11 09:22:32",
    "text": "or put another way for this example, my impression of a headless CMS would be just passing a language to get the relevant data rather than providing a more customizable language switcher - the switcher UI would be entirely up to the consumer"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:22:57",
    "text": "true"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:24:00",
    "text": "I’m thinking for example, if I start a next.js app and I have access to your primitive react components in a package, I can tap into your API, fetch the blocks for that page and render away"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:24:19",
    "text": "(and sorry if this exists and it’s my lack of knowledge of your APIs)"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:24:53",
    "text": "from my understanding, right now everyone is locked to HS’s SSR"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:25:13",
    "edited": {
      "time_stamp": "2023-08-11 09:25:46"
    },
    "text": "it can’t be run outside per se, if I were to do ISR with next.js for example"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-11 09:28:33",
    "text": "i see that makes total sense - i could see it either way but i do think something like you’re describing might be doable at the data layer rather than involving react components via the <https://developers.HubSpot.com/docs/api/overview|plain API>. there might be pieces i’m not thinking of that aren’t surfaced via APIs and you need to use HubL (and we’d eventually support in our JS building blocks)"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-11 09:28:52",
    "text": "but theoretically you could create an access token with the right scopes and use that to fetch data from wherever, not just HS"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-11 09:30:20",
    "text": "the main thing missing from doing that in vercel or something like that is the marketer-focused page editors, e.g. the drag and drop stuff you were using earlier"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:31:41",
    "text": "got it"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:32:03",
    "text": "yeah I meant the react components available could kinda speed up that sort of implementation "
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:32:56",
    "text": "because the rendered will know how to deal with that api and obviously any custom component is rendered however the client chooses"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:33:54",
    "edited": {
      "time_stamp": "2023-08-11 09:34:59"
    },
    "text": "again just thinking out loud here, but back to Timothy’s original message, I think exposing the first party components in react would be fantastic"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-11 09:35:54",
    "text": ":yesyes: gotcha. yeah i agree there’s a lot of potential in rather than CSS hackery to make our default modules fit your site, having the option of doing it from the ground up yourself using the primitives similar to a radix-ui or osmething"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:36:46",
    "text": "sounds like a plan"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-11 09:38:01",
    "text": "the separate-ish distinction i was hoping to make there was that likely those components wouldn’t actually have that much API integration. and that to further the headless metphor, the JS building blocks work going on here is primarily an alternative ‘head’"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:38:29",
    "text": "I think that is doable with the components being dumb"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-11 09:38:29",
    "text": "an alternative to the existing HubL rendering paradigm"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:38:50",
    "text": "and a renderer package that is aware of the API and assembling the components together"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:39:01",
    "text": "so the two are separate(ish)"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:40:23",
    "text": "or another way of looking at it would be expanding the APIs (unless it exists) to return the sections and everything"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:40:51",
    "text": "then you can just have a renderer with custom modules and/or builtin modules"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:41:43",
    "text": "there would still probably be a need to upload the “custom modules” json schema/specs to HS so the drag and drop builder has awareness of the fields"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:49:03",
    "edited": {
      "time_stamp": "2023-08-11 09:49:27"
    },
    "text": "shoutout to <@UCY83QS6Q> and <@U04DVL5T2TE>, thanks for your help and getting our team unblocked :pray: "
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-11 09:52:48",
    "text": "yeah i think there’s maybe some path of generalizing the inner page structure - i think we’d end up asking a lot of developers to support all of the things that go into previews, live editing, etc"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-08-11 09:53:39",
    "text": "appreciate the feedback/ideating! please don’t hold back"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 09:54:47",
    "text": "absolutely, just trying not to bug you all with every little thing "
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-11 10:26:40",
    "text": "Popping this out, but following up to some of ^ thread with <@U05LT5S9SRJ>. I checked and there are ways right now to hide some default modules from the editor based on the theme (I knew we talked about it internally but didn’t realize some of it was already shipped). There is:\n\n<https://developers.HubSpot.com/docs/cms/building-blocks/themes/hide-modules-and-sections> (`hidden_modules` in theme config)\n\nAlso, just released in the past week or two I think there is also `hide_all_default_modules: true` you can put in the theme.json to simply hiding _all_ default modules (instead of needed to specify every one in the ^ `hidden_modules` array.",
    "reply_count": 4,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-08-11 10:27:22"
      },
      {
        "time_stamp": "2023-08-11 10:28:35"
      },
      {
        "time_stamp": "2023-08-14 11:44:24"
      },
      {
        "time_stamp": "2023-08-14 12:00:22"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-11 10:27:22",
    "text": "that’s pretty cool, thank you for the follow up"
  },
  {
    "text": "To help tl;dr…",
    "time_stamp": "2023-08-11 10:28:35"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-08-11 13:06:02",
    "text": "QQ: What's the rationale on having to export modules as `Component`?",
    "reply_count": 16,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-08-11 13:48:11"
      },
      {
        "time_stamp": "2023-08-11 13:50:36"
      },
      {
        "time_stamp": "2023-08-11 17:25:12"
      },
      {
        "time_stamp": "2023-08-11 17:28:05"
      },
      {
        "time_stamp": "2023-08-11 17:29:38"
      },
      {
        "time_stamp": "2023-08-11 17:30:00"
      },
      {
        "time_stamp": "2023-08-11 17:32:09"
      },
      {
        "time_stamp": "2023-08-11 17:33:12"
      },
      {
        "time_stamp": "2023-08-11 17:33:32"
      },
      {
        "time_stamp": "2023-08-11 17:34:02"
      },
      {
        "time_stamp": "2023-08-11 17:34:41"
      },
      {
        "time_stamp": "2023-08-11 17:34:54"
      },
      {
        "time_stamp": "2023-08-11 17:37:07"
      },
      {
        "time_stamp": "2023-08-11 17:38:09"
      },
      {
        "time_stamp": "2023-08-11 17:38:50"
      },
      {
        "time_stamp": "2023-08-11 17:39:32"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-11 13:48:11",
    "text": "As compared to exporting as the default I assume?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-11 13:50:36",
    "text": "Some because there is some emerging patterns of various frameworks doing “export as API” kind of thing. I believe remix has that kind of thing and I believe folx like it (and I know there are other examples that I don’t remember).\n\nAlso, at least for me things tend to get confusing when you have modules with both named and default exports. And there is a set of people (arguable how big) think that you should avoid mixing named &amp; default exports. And there is another set of people that I believe generally dislike default imports and think everything should always be a named export."
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-08-11 17:25:12",
    "text": "Ya, I guess I'm really just wondering why you HAVE to name module exports \"`Component`\", as per your docs:\n\n&gt; Regardless of the path you chose, the file (i.e. either `ExampleModule/index.jsx` or `ExampleModule.jsx`) must contain the following named exports:\n&gt; • `Component`: A React component to be rendered. It may contain islands"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-11 17:28:05",
    "text": "To help me understand, what behavior would you prefer?"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-08-11 17:29:38",
    "text": "Oh, i'm just used to exporting whatever name I like, e.g. `export const MyComponentName = (props) =&gt; {`"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-08-11 17:30:00",
    "text": "Was really mostly curious"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-08-11 17:32:09",
    "text": "Also, do you recommend developing components separately, then importing them into modules and passing field values as props? Or jsx within the module itself... seems like the former"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-11 17:33:12",
    "text": "K, I see. So we already have other exports, like meta, fields, etc. if we opened up the door to use any exported component name… our build system gets tricky. If your module exports X and Y how do we know which one is your component? What if you name something Z but later we want to add a new feature with modules that export Z?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-11 17:33:32",
    "text": "Opened ended naming is tricky across API boundaries. "
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-08-11 17:34:02",
    "text": "ya, fair"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-08-11 17:34:41",
    "text": "And given your first response re: default exports, totally makes sense"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-11 17:34:54",
    "text": "As per your other question. I personally have no preference or strong opinion yet. I’m curious what more developers think and if recommendations emerge. "
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-08-11 17:37:07",
    "text": "Ya, that's what i'm toying with now. Currently have jsx in the module, but thinking if i'm ever wanting to import module jsx into another component, it'd need to be a presentational/dumb component. Also would need to import Component as Foo a lot :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-08-11 17:38:09",
    "text": "Now leaning towards migrating jsx out of the modules"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-08-11 17:38:50",
    "text": "Anyways, thanks for the insights. Honestly can't believe how responsive you guys are!! Friday beer time, have a good weekend!"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-11 17:39:32",
    "text": "Cheers! :beers: "
  }
]