[
  {
    "text": "Hey all, I'm working on a client HubSpot site that integrating with Commerce7 - a wine CMS. Were creating an isotope search where we fetch all products from Commerce7 rendering them on the search system page and use a filtering dependency based on the search term. This currently works but the way we are fetching the products from Commerce7 if via a JS fetch call. Their API requires basic auth and so storing the credentials in the js file is obviously  not ideal.\n\nIf there a way to maybe store the credentials in HubSpot are server variables, make the fetch call with a HubSpot api and bubble the results up to the front end? Or any other recommended methods?\n\nTrying to avoid this:",
    "time_stamp": "2022-08-04 06:40:04",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2022-08-04 10:32:25"
      },
      {
        "time_stamp": "2022-08-04 10:47:25"
      },
      {
        "time_stamp": "2022-08-04 13:21:43"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-08-04 10:32:25",
    "text": "you would need cms enterprise to do this in HubSpot with a serverless function"
  },
  {
    "poster": {
      "poster_name": "Justin Sacco",
      "poster_handle": "justin.sacco"
    },
    "time_stamp": "2022-08-04 10:47:25",
    "text": "We do have CMS Hub Enterprise"
  },
  {
    "text": "Having a really weird problem with getting my JS to work on my application. When I refresh the page, sometimes it works and sometimes it doesn't. When it doesn't work, this is what the console displays. Also, usually works when console is open..",
    "time_stamp": "2022-08-04 12:31:49",
    "reply_count": 37,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2022-08-04 12:32:39"
      },
      {
        "time_stamp": "2022-08-04 13:23:04"
      },
      {
        "time_stamp": "2022-08-04 13:23:43"
      },
      {
        "time_stamp": "2022-08-04 13:49:54"
      },
      {
        "time_stamp": "2022-08-04 13:50:51"
      },
      {
        "time_stamp": "2022-08-04 13:51:47"
      },
      {
        "time_stamp": "2022-08-04 13:51:50"
      },
      {
        "time_stamp": "2022-08-04 13:51:56"
      },
      {
        "time_stamp": "2022-08-04 13:52:24"
      },
      {
        "time_stamp": "2022-08-04 13:55:13"
      },
      {
        "time_stamp": "2022-08-04 13:55:29"
      },
      {
        "time_stamp": "2022-08-04 13:55:34"
      },
      {
        "time_stamp": "2022-08-04 13:55:37"
      },
      {
        "time_stamp": "2022-08-04 13:55:48"
      },
      {
        "time_stamp": "2022-08-04 13:55:53"
      },
      {
        "time_stamp": "2022-08-04 13:55:58"
      },
      {
        "time_stamp": "2022-08-04 13:56:15"
      },
      {
        "time_stamp": "2022-08-04 13:56:28"
      },
      {
        "time_stamp": "2022-08-04 15:04:24"
      },
      {
        "time_stamp": "2022-08-04 15:04:34"
      },
      {
        "time_stamp": "2022-08-04 15:04:55"
      },
      {
        "time_stamp": "2022-08-04 21:56:45"
      },
      {
        "time_stamp": "2022-08-04 22:13:44"
      },
      {
        "time_stamp": "2022-08-04 22:13:48"
      },
      {
        "time_stamp": "2022-08-04 22:16:32"
      },
      {
        "time_stamp": "2022-08-04 22:54:17"
      },
      {
        "time_stamp": "2022-08-04 22:54:51"
      },
      {
        "time_stamp": "2022-08-05 02:30:05"
      },
      {
        "time_stamp": "2022-08-05 06:34:20"
      },
      {
        "time_stamp": "2022-08-05 07:26:30"
      },
      {
        "time_stamp": "2022-08-05 07:30:16"
      },
      {
        "time_stamp": "2022-08-05 07:31:21"
      },
      {
        "time_stamp": "2022-08-05 07:31:31"
      },
      {
        "time_stamp": "2022-08-05 07:31:35"
      },
      {
        "time_stamp": "2022-08-05 07:31:42"
      },
      {
        "time_stamp": "2022-08-05 07:31:47"
      },
      {
        "time_stamp": "2022-08-05 07:36:24"
      }
    ]
  },
  {
    "text": "This is what it looks like when it does work... Seems pretty random to me...",
    "time_stamp": "2022-08-04 12:32:39"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-08-04 13:21:43",
    "text": "you can create a serverless function there, that you store the api keys away in an environment variable <https://developers.HubSpot.com/docs/cms/data/serverless-functions>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-08-04 13:23:04",
    "text": "can you paste your script in here?\n\nif you are using jquery, you might need to put the script behind document.ready\n\nif javascript, same type of thing --"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-08-04 13:23:43",
    "text": "also, it might be better to use a preview url instead of that to preview your pages"
  },
  {
    "poster": {
      "poster_name": "Danielle Neubauer",
      "poster_handle": "danineubauerr"
    },
    "time_stamp": "2022-08-04 13:49:54",
    "text": "Sure! Thanks!"
  },
  {
    "poster": {
      "poster_name": "Danielle Neubauer",
      "poster_handle": "danineubauerr"
    },
    "time_stamp": "2022-08-04 13:50:51",
    "text": "Here's the link to the JS file:\n<https://app.HubSpot.com/design-manager/4146755/code/75110518817>\n\nAnd here's the link to the preview:\n<https://4146755.HubSpotpreview-na1.com/_hcms/preview/template/multi?hs_preview_key=pxUSQk4l5Yopo1g49dhpYQ&amp;is_buffered_template_layout=true&amp;portalId=4146755&amp;tc_deviceCategory=undefined&amp;template_layout_id=77742179116&amp;updated=1659544013175|https://4146755.HubSpotpreview-na1.com/_hcms/preview/template/multi?hs_preview_key=pxUSQk4l5[…]&amp;template_layout_id=77742179116&amp;updated=1659544013175>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-08-04 13:51:47",
    "text": "I wobn’ tbe able to see if, if you copy the script in there\n\nthen on the keyboard do ` key three times that will open up a code block"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-08-04 13:51:50",
    "text": "```like this```"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-08-04 13:51:56",
    "text": "and then paste the code into the code block"
  },
  {
    "poster": {
      "poster_name": "Danielle Neubauer",
      "poster_handle": "danineubauerr"
    },
    "time_stamp": "2022-08-04 13:52:24",
    "text": "oh got it! Sorry about that"
  },
  {
    "poster": {
      "poster_name": "Danielle Neubauer",
      "poster_handle": "danineubauerr"
    },
    "time_stamp": "2022-08-04 13:55:13",
    "text": "window.addEventListener('load', function () {\n\n  //last child needs to be changed to the one at the bottom of the scroll hs-richtext\n  const lastTermsElement = document.querySelector('.hs-richtext p:last-child');\n\n  const acceptBtn = document.querySelector('.spacer-over-cta');\n\nconsole.log(lastTermsElement);\n\n\n  //callback function\n  const termsObserverCallback = (lastP, termsObserver) =&gt; {\n\n//           acceptBtn.classList.add('disabled');\n\n   console.log(lastP);\n\n    if(lastP[0].isIntersecting){\n\n      //action\n      acceptBtn.classList.add('enableBtn');\n\n      termsObserver.unobserve(lastTermsElement);\n\n      console.log(lastP[0].isIntersecting);\n    }\n  }\n\n  //options\n  const termsObserverOptions= {}\n\n  //observer\n  const termsObserver = new IntersectionObserver(termsObserverCallback, termsObserverOptions)\n\n  //call observers\n  termsObserver.observe(lastTermsElement);\n\n  //event listener\n\n   });\n\n\n\nconst selector = 'spacer-over-cta'; // class of the elements you want to animate\n\nconst animateClassName = 'animate'; // class of the animation to be applied\n\nconst animate = element =&gt; (\n  element.classList.add(animateClassName)\n);\n\nconst isAnimated = element =&gt; (\n  element.classList.contains(animateClassName)\n);\n\nconst intersectionObserver = new IntersectionObserver((entries, observer) =&gt; {\n  entries.forEach((entry) =&gt; {\n\n    // when element's is in viewport,\n    // animate it!\n    if (entry.intersectionRatio &gt; 0) {\n      animate(entry.target);\n    }\n\n  });\n});\n\n// // get only these elements,\n// which are not animated yet\nconst elements = [].filter.call(\n  document.querySelector(selector),\n//   changed from querySelectorAll\n  element =&gt; !isAnimated(element, animateClassName),\n);\n\n// start observing your elements\nelements.forEach((element) =&gt; intersectionObserver.observe(element));"
  },
  {
    "poster": {
      "poster_name": "Danielle Neubauer",
      "poster_handle": "danineubauerr"
    },
    "time_stamp": "2022-08-04 13:55:29",
    "text": "I'm having a hard time opening up a code block :see_no_evil:"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-08-04 13:55:34",
    "text": "lol its okay"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-08-04 13:55:37",
    "text": "this is good enough"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-08-04 13:55:48",
    "text": "but if you want to try, it is the key above tab and to the left of the #1"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-08-04 13:55:53",
    "text": "you press that three times"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-08-04 13:55:58",
    "text": "```then it makes this little box```"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-08-04 13:56:15",
    "text": "i’m about to jump on a call, so i’ll look into this when I get back"
  },
  {
    "poster": {
      "poster_name": "Danielle Neubauer",
      "poster_handle": "danineubauerr"
    },
    "time_stamp": "2022-08-04 13:56:28",
    "text": "Thanks so much!!! I really appreciate it. Need help"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-08-04 15:04:24",
    "text": "<https://gist.github.com/NickDeckerDevs/5ef67ffe69f86416b5a78410512eac28>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-08-04 15:04:34",
    "text": "I moved some of your code into the window load, so that it all starts after the window has been loaded"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-08-04 15:04:55",
    "text": "maybe past that in there and see if you have the same results"
  },
  {
    "poster": {
      "poster_name": "Danielle Neubauer",
      "poster_handle": "danineubauerr"
    },
    "time_stamp": "2022-08-04 21:56:45",
    "text": "So I'm getting the same issue and it seems to be completely random. I haven't been able to see a pattern...."
  },
  {
    "poster": {
      "poster_name": "Danielle Neubauer",
      "poster_handle": "danineubauerr"
    },
    "time_stamp": "2022-08-04 22:13:44",
    "text": "I also tried to add\n$(document).ready(function() {"
  },
  {
    "poster": {
      "poster_name": "Danielle Neubauer",
      "poster_handle": "danineubauerr"
    },
    "time_stamp": "2022-08-04 22:13:48",
    "text": "and it didn't work..."
  },
  {
    "poster": {
      "poster_name": "Danielle Neubauer",
      "poster_handle": "danineubauerr"
    },
    "time_stamp": "2022-08-04 22:16:32",
    "text": "This is what I'm getting:\n\nDevTools failed to load source map: Could not parse content for <https://cdn2.HubSpot.net/hub/4146755/hub_generated/template_assets/61215726352/1656459132874/Templates_/Custom/Page/Livable_February2018_Theme/TenantLandingPage.css>: Unexpected token '@', \"@import ur\"... is not valid JSON\n\nDevTools failed to load source map: Could not parse content for <https://cdn2.HubSpot.net/hub/7052064/hub_generated/template_assets/1659615085991/HubSpot/HubSpot_default/shared/responsive/layout.css>: Unexpected token '/', \"/* Respons\"... is not valid JSON\n\nTermsAndConditions.js:1 null\n\nTermsAndConditions.js:1 Uncaught TypeError: Failed to execute 'observe' on 'IntersectionObserver': parameter 1 is not of type 'Element'.\n    at TermsAndConditions.js:1:450"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-08-04 22:54:17",
    "text": "Are you a available at 11am est?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-08-04 22:54:51",
    "text": "Also after 3pm est I have some time "
  }
]