[
  {
    "text": "Good afternoon,\nI have deployed to production a page and everything looks smooth but in console I get these errors:\n• <https://react.dev/errors/422?invariant=422>\n• <https://react.dev/errors/418?invariant=418>\nIt is something that in the local environment and checking the components individually I do not receive but when putting all the components together in a page such errors appear (both in production and in the use of the proxy).\n\nI have two questions:\n- Does anyone know how I can debug these errors in the local environment?\n- Does anyone know what they are due to? I have analyzed them and I don't use any of the functions discussed there.",
    "time_stamp": "2024-08-21 11:31:40",
    "edited": {
      "time_stamp": "2024-08-21 11:32:11"
    }
  },
  {
    "poster": {
      "poster_name": "Jordan Helzer",
      "poster_handle": "jhelzer"
    },
    "time_stamp": "2024-08-21 12:27:47",
    "text": "_*Looking for some advice or dev track to help:*_\nWe built an entire React+TypeScript site for a client, placed it in an iOS app wrapper and it’s been deployed for over a year. The client is now asking if we can just port the web app into a HS custom page or host it on HS. Their HS account rep sent me to the cms-react page/repo and I got the Hello World demo working in a new Sand Box. This is a ok start, but ultimately I was hoping for some kind of guide where if you have an already built something, then how can I get that up and running in HS, or is that not really a feasible route.\n\nDo I need to look at just rebuilding the app from scratch utilizing best practices as outlined in the cms-react projects :thinking:",
    "reply_count": 14,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2024-08-21 13:40:36"
      },
      {
        "time_stamp": "2024-08-21 13:44:16"
      },
      {
        "time_stamp": "2024-08-21 13:45:18"
      },
      {
        "time_stamp": "2024-08-21 13:47:34"
      },
      {
        "time_stamp": "2024-08-21 13:52:37"
      },
      {
        "time_stamp": "2024-08-21 14:00:03"
      },
      {
        "time_stamp": "2024-08-21 14:00:34"
      },
      {
        "time_stamp": "2024-08-21 14:02:00"
      },
      {
        "time_stamp": "2024-08-21 14:59:18"
      },
      {
        "time_stamp": "2024-08-21 15:01:18"
      },
      {
        "time_stamp": "2024-08-21 15:10:20"
      },
      {
        "time_stamp": "2024-08-21 15:17:22"
      },
      {
        "time_stamp": "2024-08-21 15:20:39"
      },
      {
        "time_stamp": "2024-08-23 11:34:28"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon Miller",
      "poster_handle": "jon894"
    },
    "time_stamp": "2024-08-21 13:40:36",
    "text": "Hey <@U07HV1LCC6Q>, can you give me more details on your app that you are wanting to port over? What does the app do? Fully client side? Does it integrate with HubSpot right now or is it the customer's preference to host with us to keep it all in the same ecosystem?\n\nHappy to move this to DM's as well if you don't wish to share all this publicly."
  },
  {
    "poster": {
      "poster_name": "Jordan Helzer",
      "poster_handle": "jhelzer"
    },
    "time_stamp": "2024-08-21 13:44:16",
    "text": "Happy to have it be here if it helps someone else. So the site is in no way using anything from HubSpot. I believe the client just wants to centralize all of their training into one place. The app uses React Typescript &amp; vanilla JS, React-Redux for managing state of the users training session, React Router to navigate between training and learning modules, web workers to lazy load large image sequences for the modules, etc. It was never intended to live inside of HS. I’m just trying to see if this is a small LOE, or am I gonna have to rebuild a lot of things to get them working in HS…"
  },
  {
    "poster": {
      "poster_name": "Jordan Helzer",
      "poster_handle": "jhelzer"
    },
    "time_stamp": "2024-08-21 13:45:18",
    "text": "Right now, based on what I’m seeing. I would probably have to touch most all of my files, css, redux, and even figure out how I might get the lazy loading working."
  },
  {
    "poster": {
      "poster_name": "Jordan Helzer",
      "poster_handle": "jhelzer"
    },
    "time_stamp": "2024-08-21 13:47:34",
    "text": "Things like this:\n```this.worker = new Worker(`${process.env.PUBLIC_URL}/image_preload_webworker.js`);```\nI’m wondering how exactly will translate into a HS page. We’re keeping all of the image sequences and the web worker in the public folder of our standard React project. But I’m not sure how that would work because the web worker was required to live in the public folder for it also to work."
  },
  {
    "poster": {
      "poster_name": "Jordan Helzer",
      "poster_handle": "jhelzer"
    },
    "time_stamp": "2024-08-21 13:52:37",
    "text": "Sorry, I missed saying it’s fully client side. It was built to work completely in offline mode as the training may be conducted in a connectivity dead zone."
  },
  {
    "poster": {
      "poster_name": "Jordan Helzer",
      "poster_handle": "jhelzer"
    },
    "time_stamp": "2024-08-21 14:00:03",
    "text": "I should say that my research is showing me that this is a larger effort than me just changing my `homepage` property to indicate where the bundled app is hosted and then for HS to just render the web app as a public facing page."
  },
  {
    "poster": {
      "poster_name": "Jordan Helzer",
      "poster_handle": "jhelzer"
    },
    "time_stamp": "2024-08-21 14:00:34",
    "text": "I think that’s what our client was hoping I would say and they wouldn’t incur any additional development costs."
  },
  {
    "poster": {
      "poster_name": "Jordan Helzer",
      "poster_handle": "jhelzer"
    },
    "time_stamp": "2024-08-21 14:02:00",
    "edited": {
      "time_stamp": "2024-08-21 14:07:30"
    },
    "text": "We host a <https://infusemeddev.com/projects/Ethicon/AITATraining/|version> of it on our beta testing server"
  },
  {
    "poster": {
      "poster_name": "Jon Miller",
      "poster_handle": "jon894"
    },
    "time_stamp": "2024-08-21 14:59:18",
    "text": "Thanks for the info, Jordan!\n\nYea, there are likely gaps in our system to fully support this use case today (or at least make the process smoother), but hard to know exactly what those are without digging into your app code in greater detail than a slack would allow for :sweat_smile:.\n\nHowever, it might be worth it to check out out this <https://github.com/HubSpot/cms-react/tree/main/examples/routing/routing-project/routing-app|simplistic react router example> that may shed some light on how this might be organized at the highest level. Some key files to pay attention to would be <https://github.com/HubSpot/cms-react/blob/main/examples/routing/routing-project/routing-app/components/islands/App.tsx|this island>,\n<https://github.com/HubSpot/cms-react/blob/main/examples/routing/routing-project/routing-app/components/modules/Router/index.tsx|this module> that references the island, and how it would be added to a <https://github.com/HubSpot/cms-react/blob/main/examples/routing/routing-theme/router-page.hubl.html|page template>.\n\nI say all this to say that while supporting this use case is on our radar, we don't have a clear, battle tested path defined just yet that we'd recommend."
  },
  {
    "poster": {
      "poster_name": "Jordan Helzer",
      "poster_handle": "jhelzer"
    },
    "time_stamp": "2024-08-21 15:01:18",
    "text": "That’s kind of what I’m seeing. Client was hoping for a nice silver bullet, what I’m seeing is a breakdown of the existing app, and rewriting it to work inside of HubSpot. I’ll have to communicate this to my account manager who will see if they have the budget for this or would prefer to just keep it in the iOS App."
  },
  {
    "poster": {
      "poster_name": "Jon Miller",
      "poster_handle": "jon894"
    },
    "time_stamp": "2024-08-21 15:10:20",
    "text": "I can't speak to the specifics of what you'd need to adjust in the codebase especially considering the offline dependency you mentioned, but the example shared above does seem similar-ish to what you are wanting.\n\nWe've just never tested this use case fully to know if/where our system falls over considering the complexity that comes with production applications. So this would be semi-unchartered waters :boat:"
  },
  {
    "poster": {
      "poster_name": "Jon Miller",
      "poster_handle": "jon894"
    },
    "time_stamp": "2024-08-21 15:17:22",
    "text": "If you end up doing any testing here, I would be interested to hear how it goes! "
  },
  {
    "poster": {
      "poster_name": "Jordan Helzer",
      "poster_handle": "jhelzer"
    },
    "time_stamp": "2024-08-21 15:20:39",
    "text": "From a company perspective, we are a HS client ourselves, but we are a creative agency for hire, and so we are interested in expanding our capabilities. We build on top of Showpad, Salesforce, etc. So we’ve been meaning to look into HS development, but it’s always time permitting or client paying. And at one time Showpad was considering partnering with us to build out a better Showpad/HS integration similar to what they have for Salesforce. So in one way or another, I know we’ll probably be trying to learn more about how we can expand our skill sets."
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2024-08-21 17:23:20",
    "text": "Noticing the same :beetle:, just renders as a `select` .\n\nFlagging to <@U04DVL5T2TE> <@UCY83QS6Q> or <@UAYBXDG4U> as they're active here and may be able to issue a bug fix :slightly_smiling_face:"
  },
  {
    "text": "Is this behaviour, after deploying, already been looked into? :sweat_smile:Deploying updates to the live website and now the website is offline for minutes again. It just shows me the base.html I suppose",
    "time_stamp": "2024-08-21 19:55:31",
    "edited": {
      "time_stamp": "2024-08-21 19:55:43"
    },
    "reply_count": 12,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-08-22 11:35:44"
      },
      {
        "time_stamp": "2024-08-22 14:17:48"
      },
      {
        "time_stamp": "2024-08-22 14:18:05"
      },
      {
        "time_stamp": "2024-08-22 14:18:33"
      },
      {
        "time_stamp": "2024-08-22 14:18:54"
      },
      {
        "time_stamp": "2024-08-22 14:19:00"
      },
      {
        "time_stamp": "2024-08-22 14:19:21"
      },
      {
        "time_stamp": "2024-08-22 14:19:34"
      },
      {
        "time_stamp": "2024-08-22 14:30:33"
      },
      {
        "time_stamp": "2024-08-22 14:30:35"
      },
      {
        "time_stamp": "2024-08-22 17:39:29"
      },
      {
        "time_stamp": "2024-08-22 17:39:42"
      }
    ]
  }
]