[
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-05-09 06:01:57",
    "text": "Oh snap it does. What was happening for me was the for loop was not working with the `{{ range(1, 11) }}` function"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-09 06:02:49",
    "text": "Ahhh"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-05-09 06:03:25",
    "text": "but it works for a manual array – i.e. `{% set range = [1,2,3,4,5,6,7,8,9,10,11] %}`"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-05-09 06:03:56",
    "text": "not sure if this is by design or a bug"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-09 06:05:34",
    "text": "Yea not sure. What you're trying to do should theoretically be possible though. Maybe set to a var before putting in for loop?"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-05-09 06:07:08",
    "text": "dadgumit, I was using this function wrong… it works"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-09 06:08:43",
    "text": "Woo! Whats the correct way?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-09 06:09:35",
    "text": "I can see this being a great way to do the crankshaft grid"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-05-09 06:10:12",
    "text": "here’s what I am using currently,\n```{%- for i in range(1, 12) -%}\n  {%- set width = (i/12)|round(2, 'floor') -%}\n  .flex--has-gutter&gt;.flex__item.col-{{i}} {\n    width: calc({{ width * 100 }}% - {{ flex_gutter() }});\n    margin-left: {{ flex_gutter() }};\n    margin-right: {{ flex_gutter() }};\n  }\n  {%- endfor -%}```"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-05-09 06:11:17",
    "edited": {
      "time_stamp": "2019-05-09 06:11:36"
    },
    "text": "with this above\n```{# define the column grid gutter #}\n{% set flex_gutter =  '2.8vw' %}\n\n{# this macro example {{ flex_gutter(3.5) }} #}\n{%- macro flex_gutter(n) -%}\n{{ n/2 ~ 'vw' if n is defined else '1.4vw' }}\n{%- endmacro -%}```"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-05-09 06:12:15",
    "text": "we could definitely do something like that. I’d be willing to give a first draft of a flex grid in hubl"
  },
  {
    "subtype": "thread_broadcast",
    "time_stamp": "2019-05-09 06:17:11",
    "text": "We actually have flex grid css in the cs-grid file there's an issue up to convert that css to be hubl generated because it will make maintaining it easier"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-09 07:00:00",
    "text": "<https://github.com/TheWebTech/CrankShaft/issues/33>"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-09 09:16:28",
    "text": "specific use case:  i have a client who has a product status page.  the want a person to only be able to toggle a product status and then a separate person who is able to edit the text of the status.    i wanted to use a table for the status copy etc and link a another table to it with a toggle for on/off"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-09 11:14:28",
    "text": "bumping this again because we’re going to be starting on the boilerplate template files for <#CCQSQ2C6L|crankshaft> soon and, this feature would be huge."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-09 15:33:38",
    "text": "I realize this is really trivial, but Make the default for module fields when adding a new field, to simply be the type of field, without the word “field”\n\nso “image field” becomes “image”"
  }
]