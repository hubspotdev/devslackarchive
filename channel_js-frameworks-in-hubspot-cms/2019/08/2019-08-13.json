[
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-08-13 10:28:33",
    "text": "<@UL1S6TULB> That is pretty awesome! Thank you for sharing, and including me in one of the modules"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-08-13 10:29:34",
    "text": "I was able to do something similar with Vue over the weekend... I did a test build with vueds and was able to import those design system components into HS modules... it actually looks very similar to what you did here with stencil"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-08-13 10:38:20",
    "edited": {
      "time_stamp": "2019-08-13 11:00:41"
    },
    "text": "Like Jon McL mentioned though, the downside will be importing that global js file, so I'm still trying to get a sense of exactly how much of a downside that is, considering the huge upside that these approaches give."
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-08-13 10:53:33",
    "text": "And if there is a way to break that up with something like require js"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-08-13 11:05:07",
    "text": "general convention would be to have a minimal JS file that loads quickly then async defer the global one. That way TTI is as low as possible and you can cache the file for subsequent page loads. require JS would be a great way to do that on a per-page level, but unfortunately it doesn't bundle files together the way webpack would, so all of those smaller scripts would be separate requests"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-08-13 11:17:55",
    "text": "Interesting... even though it sounds like it won't work in HS, do you have a good reference article/example of that setup you're talking about? Or would that be a standard require JS setup?"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-08-13 11:19:09",
    "text": "the idea comes from Gatsby, hold on I'll see if I can find the lifecycle article"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-08-13 11:22:57",
    "text": "<https://www.freecodecamp.org/news/how-gatsby-is-so-blazing-fast-c99a6f2d405e/>"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-08-13 11:25:10",
    "text": "I don't think we could actually achieve results close to most Gatsby sites, but the basic concept of requiring only what's necessary for the first pageload and then getting the other stuff is what's valuable.\n\nI definitely recommend making a test Gatsby site to help wrap your head around it"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-08-13 11:26:53",
    "text": "Awesome, thanks!  I will do that just to get familiar with the concept... first glance though, this seems like this execution is something that's specific to an SPA generated with webpack?"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-08-13 11:30:45",
    "text": "Gatsby is a Static Site Generator, similar to Jekyll or VuePress in a lot of ways, but built on react and a modern approach to JS. Basically you build your templates, identify where you want your data to come from (can be simple markdown files, an API, a CMS, Google Sheet, pretty much anything) and it will build all the static assets for each page as well as the entire site PWA bundle. Then when a specific page is requested, the static assets are returned. Once loaded, the static assets request the rest of the PWA bundle and all further interactions are handled via React and React Router, so basically the whole site is downloaded with one request, then instead of new pages the content just transitions; that's how it's so fast"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-08-13 12:05:53",
    "text": "Wow, thank you for the elaborate summary! Very helpful."
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-08-13 12:06:40",
    "text": "And how does HS handle module JS files? It looks like they all get loaded as separate requests, but also I remember reading something on slack about how it's supposed to concatenate all the js files on a page, but that feature is currently disabled to fix bugs?",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-08-13 14:59:10"
      },
      {
        "time_stamp": "2019-08-13 15:01:27"
      },
      {
        "time_stamp": "2019-08-16 15:48:28"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-08-13 12:13:52",
    "text": "that's my understanding as well."
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-08-13 12:19:23",
    "text": "Great, thanks again <@U26BLKGE4> <@UL1S6TULB> &amp; <@U7SL518D6> this gives us a lot to explore!  I will be tied up with a couple other things for a while but will report back on what we find."
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-08-13 12:19:36",
    "text": ":thumbsup:"
  },
  {
    "poster": {
      "poster_name": "Gregory Cornelius",
      "poster_handle": "gcornelius"
    },
    "time_stamp": "2019-08-13 14:59:10",
    "edited": {
      "time_stamp": "2019-08-13 15:01:17"
    },
    "text": "One thing to keep in mind is that our CDN uses http/2 which reduces some of the benefits when it comes to concatenation / bundling."
  },
  {
    "poster": {
      "poster_name": "Gregory Cornelius",
      "poster_handle": "gcornelius"
    },
    "time_stamp": "2019-08-13 15:01:27",
    "text": "<https://deliciousbrains.com/performance-best-practices-http2/> has some info."
  }
]