[
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-08-28 09:17:04",
    "text": "Our team has run into a somewhat major problem... one of our devs was working on a module with the local dev tools, and had included it on several templates/pages. A couple days later, we notice the module was completely gone.  We just came to realize the dev working on it had switched git branches while the watch task was still running, to a branch that did not yet contain the module, therefore causing that new module to delete.  Of course we can be more diligent about not doing that. However, the major problem is that when we upload that exact same module from local to the portal, it doesn't reconnect as the same module, and all of its references are still broken.  Is there a way to reconnect this module to all of the references?",
    "reply_count": 14,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-08-28 09:28:50"
      },
      {
        "time_stamp": "2019-08-28 09:29:43"
      },
      {
        "time_stamp": "2019-08-28 09:48:16"
      },
      {
        "time_stamp": "2019-08-28 10:02:21"
      },
      {
        "time_stamp": "2019-08-28 10:07:16"
      },
      {
        "time_stamp": "2019-08-28 10:10:38"
      },
      {
        "time_stamp": "2019-08-28 10:11:27"
      },
      {
        "time_stamp": "2019-08-28 10:14:19"
      },
      {
        "time_stamp": "2019-08-29 08:26:09"
      },
      {
        "time_stamp": "2019-08-29 08:29:50"
      },
      {
        "time_stamp": "2019-08-29 08:31:15"
      },
      {
        "time_stamp": "2019-08-29 10:26:17"
      },
      {
        "time_stamp": "2019-08-29 15:58:57"
      },
      {
        "time_stamp": "2019-09-05 10:56:11"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2019-08-28 09:28:50",
    "text": "Hey Doug, sorry for the unfortunate scenario."
  },
  {
    "text": "The connection issue should be resolved if you restore the deleted module. You might need to delete the one you just uploaded first so there is not a path/name conflict",
    "time_stamp": "2019-08-28 09:29:43"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-08-28 09:48:16",
    "text": "Ah, good to know, thanks Will!  Oddly it didn't include fields with it, but I was able to restore that from local."
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-08-28 10:02:21",
    "text": "For future reference though, if a module is deleted from the DM, then replaced with the exact same files from local (including the 2 json files containing IDs), should that work seamlessly in terms of restoring all dependencies, or is it expected that would break?"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-08-28 10:07:16",
    "text": "(but obviously remedied with your above fix)"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2019-08-28 10:10:38",
    "text": "I am guessing the issue was that the new module did not have a the same module ID (which is actually omitted locally from meta.json).\n\nWe are generally moving towards a path based world, and relying less on the obscure IDs to help prevent issues like this in the future."
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-08-28 10:11:27",
    "text": "beautiful, thank you!"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2019-08-28 10:14:19",
    "text": "More work to come and in progress on the id &gt; path based world"
  }
]