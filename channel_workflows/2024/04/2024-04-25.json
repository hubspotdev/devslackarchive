[
  {
    "poster": {
      "poster_name": "Tony Koehn",
      "poster_handle": "tony641"
    },
    "time_stamp": "2024-04-25 06:51:39",
    "text": "Is there a way to send it to the person who modified the record?  if Susie is the owner of the record but Bob modified something, I want to send it the email to Bob, not Susie."
  },
  {
    "poster": {
      "poster_name": "Christensen Magtoto",
      "poster_handle": "chris858"
    },
    "time_stamp": "2024-04-25 06:58:12",
    "text": "Yes, using the updatedByUserId property."
  },
  {
    "text": "I agree, I use \"is known\" all the time to see if a property changed.  If will be true when a record is first created and then anytime the property changes thereafter.  Not positive on using is_known on the property of a custom object.  There are some properties that can not be used on re-enrollment (properties of an associated object for example).  I mention reenrollment because you will also need to go into that and allow the properties to reenroll your objects - otherwise they won't reenroll when the property changes (see screenshot)",
    "time_stamp": "2024-04-25 09:57:40",
    "edited": {
      "time_stamp": "2024-04-25 09:58:56"
    }
  },
  {
    "poster": {
      "poster_name": "Jorge Roch",
      "poster_handle": "jorge180"
    },
    "time_stamp": "2024-04-25 10:25:30",
    "text": "i am trying to build a custom code and get the timestamp of the moment when this custom code is activated. Coding in python i would do it through the datetime library calling .now(). Do you know if is there a way to do it in HubSpot custom code in a workflow? Thanks a lot in advance!",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-04-25 12:12:15"
      },
      {
        "time_stamp": "2024-05-01 02:16:58"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "James Kupczak",
      "poster_handle": "jimmykup"
    },
    "time_stamp": "2024-04-25 10:27:26",
    "text": "We want to automate some emails with workflows in HubSpot. We’re currently setup with Operations Hub and we’re using it to write custom code that will pull data down from our private API so that we can use it in a HubSpot email. The problem we’re facing now is that we don’t want 200,000 contacts running through a workflow and triggering 200,000 separate private API calls.\n\nThe data that we’d be pulling down from our API isn’t going to need to be different for each contact. The data we get from a single API call can be re-used for every email we send that day to every contact that runs through a workflow. So we feel like being able to do just one call and then separately send 200,000 emails with that data would work just fine for us.\n\nThe problem is that we have no idea how to do that or if it’s even possible. Does anyone have any experience doing something like that?\n\n_(If there’s a a more relevant channel for this question please let me know!)_",
    "reply_count": 7,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2024-04-25 12:25:09"
      },
      {
        "time_stamp": "2024-04-25 12:32:51"
      },
      {
        "time_stamp": "2024-04-25 13:40:02"
      },
      {
        "time_stamp": "2024-04-25 13:55:25"
      },
      {
        "time_stamp": "2024-04-25 14:23:19"
      },
      {
        "time_stamp": "2024-04-26 02:10:26"
      },
      {
        "time_stamp": "2024-04-26 05:46:11"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Maria Matos",
      "poster_handle": "maria.matos"
    },
    "time_stamp": "2024-04-25 10:42:53",
    "text": "<@U04512YU6GH> Any ideas? :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Kenny Buckles",
      "poster_handle": "kenny962"
    },
    "time_stamp": "2024-04-25 11:05:16",
    "text": "I ended up using: `HubSpotClient.crm.associations.v4.basicApi.getPage(objectType, objectId, toObjectType, after, limit);`"
  },
  {
    "poster": {
      "poster_name": "Kenny Buckles",
      "poster_handle": "kenny962"
    },
    "time_stamp": "2024-04-25 11:05:39",
    "text": "the `getAll()` method isn't even showing as an option in IntelliSense."
  },
  {
    "poster": {
      "poster_name": "Scott Marion",
      "poster_handle": "scott943"
    },
    "time_stamp": "2024-04-25 12:12:15",
    "text": "I am not a Python developer but in the custom code in a workflow you can choose your language to be Python so it should allow you to do it the same way I would imagine."
  },
  {
    "poster": {
      "poster_name": "Scott Marion",
      "poster_handle": "scott943"
    },
    "time_stamp": "2024-04-25 12:25:09",
    "text": "Hmmmm...  I don't know if this is really a good use case for a custom object or not - but you could theoretically create a custom object to store your data from your private API and then use that object to populate what you need in the emails.  Again, not sure this would be the best way to do it.  You could create a separate workflow for refreshing that data in the custom object by running the workflow once per day on a schedule."
  },
  {
    "poster": {
      "poster_name": "James Kupczak",
      "poster_handle": "jimmykup"
    },
    "time_stamp": "2024-04-25 12:32:51",
    "text": "Thanks for the suggestion!\n\nI’ve had that one suggested recently from someone else. I’v also heard…\n\n• Use HubDB\n• Use a fake contact and store it on their record"
  },
  {
    "poster": {
      "poster_name": "Euler Gonzalez",
      "poster_handle": "euler"
    },
    "time_stamp": "2024-04-25 12:49:02",
    "text": "Hi everyone,\nI'm currently using custom code in workflows, the goal of my code is to change the owner of contacts based on the owner of a custom object. Here’s how it works:\n1. The code scans for a property within a contact.\n2. It then searches for a corresponding custom object and identifies its owner.\n3. The owner of the custom object is then assigned as the owner of the contact.\nI am encountering frequent errors such as \"too many requests\" and \"custom code wasn't able to execute, but will retry soon.\" These errors occur especially when the workflow handles large volumes of contacts.\nI have attempted to manage these issues by implementing delays, but it seems this approach hasn’t been effective in controlling the workflow execution flow.\nDoes anyone have insights, strategies, or similar experiences in managing the number of API calls or improving the efficiency of such workflows? Any advice or shared experiences would be incredibly helpful.\nThank you in advance for your assistance!",
    "reply_count": 3,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2024-04-25 12:56:51"
      },
      {
        "time_stamp": "2024-04-26 08:05:25"
      },
      {
        "time_stamp": "2024-04-29 10:43:58"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-04-25 12:56:51",
    "text": "Hey Euler - Happy to provide some insight.\n\nWhat is the trigger of your workflow?"
  },
  {
    "poster": {
      "poster_name": "James Kupczak",
      "poster_handle": "jimmykup"
    },
    "time_stamp": "2024-04-25 13:40:02",
    "text": "I seem to be running into the (potential) issue of making too many calls. I’m able to eliminate thousands of calls by calling my private API once and saving it to HubDB or a custom object.\n\nBut once I need to use that data in a contact-based workflow, I’m still calling for that data thousands and thousands of times.\n\nIs there a way for a workflow to just remember the data I pulled the first time and then use it for every contacts that comes through?"
  },
  {
    "poster": {
      "poster_name": "Christensen Magtoto",
      "poster_handle": "chris858"
    },
    "time_stamp": "2024-04-25 13:55:25",
    "text": "Hey James, try to make a branch and follow the progression below.\n1. Workflow triggered\n2. Check HubDB if data exist (I'll probably add an expiration date to make sure I get the up-to-date data from the private API)\n3. (Branch: Yes) If no data OR the data has reached the expiration date then do an API call to the private API and save the result to HubDB\n4. (Branch: No) else use the data from HubDB\n5. Converge from branch and continue your workflow....."
  },
  {
    "poster": {
      "poster_name": "James Kupczak",
      "poster_handle": "jimmykup"
    },
    "time_stamp": "2024-04-25 14:23:19",
    "text": "In this example, in the best case scenario, I’d still be making an API call to HubDB for every contact that runs through the workflow. And that could be over a hundred thousand calls in a very short period of time."
  }
]