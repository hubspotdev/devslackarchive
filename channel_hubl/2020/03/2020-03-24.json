[
  {
    "poster": {
      "poster_name": "Erik Rorstrom",
      "poster_handle": "erik.rorstrom"
    },
    "time_stamp": "2020-03-24 07:56:50",
    "text": "There’s a limitation right now in the CMS where you can’t use the `{% import … %}`tag in custom modules. This is causing some real issues and makes for alot of code duplication in projects.\n\nIs there any way to change this and allow it?",
    "reply_count": 7,
    "reply_users_count": 5,
    "replies": [
      {
        "time_stamp": "2020-03-24 08:10:01"
      },
      {
        "time_stamp": "2020-03-24 08:23:57"
      },
      {
        "time_stamp": "2020-03-24 08:28:31"
      },
      {
        "time_stamp": "2020-03-24 08:29:58"
      },
      {
        "time_stamp": "2020-03-24 08:30:43"
      },
      {
        "time_stamp": "2020-03-24 08:43:57"
      },
      {
        "time_stamp": "2020-03-24 09:46:27"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-03-24 08:09:13",
    "text": "in the module css file or a css file?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-03-24 08:10:01",
    "text": "can you include? I include my macro pages in my custom modules and that works fine. I believe I'm using include"
  },
  {
    "poster": {
      "poster_name": "Talia Swartz",
      "poster_handle": "tswartz"
    },
    "time_stamp": "2020-03-24 08:23:57",
    "text": "Hi Erik! Are you just seeing a warning for the `import` tag? Or is it throwing errors that are blocking you from publishing? In general we do try to warn against using `import`/`include` because ideally modules are self-contained and don't rely on other files. For marketplace modules, we don't allow those tags because any module on there should be 100% self-contained. But if you're seeing errors for `import` that are blocking publish, that could be a bug (unless you're trying to share the module on the marketplace) because I believe it should just be throwing a _warning_"
  },
  {
    "poster": {
      "poster_name": "Erik Rorstrom",
      "poster_handle": "erik.rorstrom"
    },
    "time_stamp": "2020-03-24 08:28:31",
    "text": "Oh, just tried using an absolute path to the file. Then it worked, awesome! For some reason i thought i’d seen it be “not allowed” before?\n\nWhen importing a file `{% import \"../macros/macro.html\" as macro %}` i get an error, but saying `{% import \"/theme/macros/macro.html\" as macro %}` works"
  },
  {
    "poster": {
      "poster_name": "Gregory Cornelius",
      "poster_handle": "gcornelius"
    },
    "time_stamp": "2020-03-24 08:29:58",
    "text": "fwiw, we have been working on fixing some issues with relative paths in module.html. we’ll make sure that `import` is also working as expected. cc <@UBDMV6Y9Y>"
  },
  {
    "poster": {
      "poster_name": "Erik Rorstrom",
      "poster_handle": "erik.rorstrom"
    },
    "time_stamp": "2020-03-24 08:30:43",
    "text": "Thanks all"
  },
  {
    "poster": {
      "poster_name": "Liam Harwood",
      "poster_handle": "lharwood"
    },
    "time_stamp": "2020-03-24 08:43:57",
    "text": "You need to use the relative path based on the local file structure, meaning from `/blah.module/module.html` instead of from `/blah.module`. So it might be you need `../../macros/macro.html`"
  },
  {
    "poster": {
      "poster_name": "Steve Kanter",
      "poster_handle": "steve.kanter"
    },
    "time_stamp": "2020-03-24 09:23:44",
    "text": "<@U25PYL3Q8> the module’s css file"
  },
  {
    "poster": {
      "poster_name": "Erik Rorstrom",
      "poster_handle": "erik.rorstrom"
    },
    "time_stamp": "2020-03-24 09:46:27",
    "text": "<@UBDMV6Y9Y> That’s what i did. Still “Could not resolve property” error"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-03-24 10:36:52",
    "text": "You can’t have hubl in the module css or js sections"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-03-24 10:39:29",
    "edited": {
      "time_stamp": "2020-03-24 10:42:12"
    },
    "text": "If you want to do that, you'd need to put it in the html/hubl section and then `{% require_css %}` &lt;style&gt;/* css */&lt;/style&gt; `{% end_require_css %}`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-03-24 11:37:40",
    "text": "Can macros be used to create arrays? I seem to be getting the array as a string from what I can tell:\n```{% macro navigation() -%}\n{% set navigation = ['Home', 'About'] %}\n{% do navigation.append('Contact Us') %}\n{{navigation}}\n{%- endmacro %}```"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-03-24 11:37:54",
    "text": "can’t loop through navigation"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-03-24 11:38:13",
    "text": "well, I can but it returns [Home, About, Contact Us]"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-03-24 11:38:17",
    "text": "as the first iterm"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-03-24 11:52:39",
    "text": "yea, it’s definitely a string",
    "reply_count": 7,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2020-03-24 11:55:17"
      },
      {
        "time_stamp": "2020-03-24 11:55:29"
      },
      {
        "time_stamp": "2020-03-24 11:55:41"
      },
      {
        "time_stamp": "2020-03-24 11:55:47"
      },
      {
        "time_stamp": "2020-03-24 11:56:13"
      },
      {
        "time_stamp": "2020-03-24 11:56:29"
      },
      {
        "time_stamp": "2020-03-24 21:13:01"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2020-03-24 11:55:17",
    "text": "Macros only return strings unfortunately"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-03-24 11:55:29",
    "text": "ah, bummer"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2020-03-24 11:55:41",
    "text": "One work around is to `|tojson` the result and then `|fromjson` the returned string"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-03-24 11:55:47",
    "text": "just started using them, very cool for some stuff"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-03-24 11:56:13",
    "text": "cool, I’ll see if I can get that to work"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2020-03-24 11:56:29",
    "text": "As a templating language, HubL isn’t as powerful as a first-class language"
  },
  {
    "poster": {
      "poster_name": "Steve Kanter",
      "poster_handle": "steve.kanter"
    },
    "time_stamp": "2020-03-24 12:47:54",
    "text": "hmmm that’s a bummer and seems unnecessary but ok"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-03-24 12:48:20",
    "text": "its because of the way css and js are prepped"
  },
  {
    "poster": {
      "poster_name": "Steve Kanter",
      "poster_handle": "steve.kanter"
    },
    "time_stamp": "2020-03-24 12:48:23",
    "text": "I guess cause the same CSS file is used for multiple instances of a single module. I get it, just annoying. thanks for letting me know"
  },
  {
    "poster": {
      "poster_name": "Steve Kanter",
      "poster_handle": "steve.kanter"
    },
    "time_stamp": "2020-03-24 12:48:35",
    "text": "yeah. the editor doesn’t throw any errors or anything with it"
  },
  {
    "poster": {
      "poster_name": "Steve Kanter",
      "poster_handle": "steve.kanter"
    },
    "time_stamp": "2020-03-24 12:48:37",
    "text": "nor does local dev"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-03-24 12:48:48",
    "text": "on save of the module, it is saved, concated and then cache"
  },
  {
    "poster": {
      "poster_name": "Steve Kanter",
      "poster_handle": "steve.kanter"
    },
    "time_stamp": "2020-03-24 12:48:54",
    "text": "would’ve been helpful to have it say something, so that it’s clear :wink:"
  },
  {
    "poster": {
      "poster_name": "Steve Kanter",
      "poster_handle": "steve.kanter"
    },
    "time_stamp": "2020-03-24 12:48:57",
    "text": "right"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-03-24 12:49:06",
    "text": "lol"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-03-24 12:49:07",
    "text": "I mean"
  },
  {
    "text": "",
    "time_stamp": "2020-03-24 12:49:16"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-03-24 12:49:20",
    "text": "its the only one that says hubl"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-03-24 12:49:44",
    "text": "but you aren't wrong"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-03-24 13:02:11",
    "edited": {
      "time_stamp": "2020-03-24 13:02:17"
    },
    "text": "I think it makes sense - it stops modules having a dependency on a particular theme. It’d get quite messy otherwise"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-03-24 13:03:04",
    "edited": {
      "time_stamp": "2020-03-24 13:07:47"
    },
    "text": "I would think of your module as the skeleton/structural foundation, maybe include base styles and then any theme specific information include that in your global stylesheet. I may be completely missing the point though! :smile: For background images, etc I’ve generally always used inline styles for background-images, of the CMS solutions/dev patterns I’ve used before it’s  quite common - particularly because by including dynamic variables into your css the cache-ability plummets."
  },
  {
    "poster": {
      "poster_name": "Steve Kanter",
      "poster_handle": "steve.kanter"
    },
    "time_stamp": "2020-03-24 13:06:34",
    "text": "for context, I’m converting a site that was originally built in Angular to have angular “components” turn into Hub Modules. because of the way this site is structured, the modules ARE very “theme” specific, but that’s by design"
  },
  {
    "poster": {
      "poster_name": "Steve Kanter",
      "poster_handle": "steve.kanter"
    },
    "time_stamp": "2020-03-24 13:07:00",
    "text": "it’s fine if I can’t use HubL inside of a module’s CSS, but a) it should be documented and b) the tooling should be yelling and screaming if I *DO*, rather than silently failing :wink:"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-03-24 13:09:11",
    "text": "Man, what kinda saas products do you use that document and work properly all the way across?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-03-24 13:09:12",
    "text": "lol"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-03-24 13:09:16",
    "text": "super high expectation"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-03-24 13:09:45",
    "text": "How about setting a JS / using data attribute in  hubl/html with the base asset path"
  },
  {
    "poster": {
      "poster_name": "Steve Kanter",
      "poster_handle": "steve.kanter"
    },
    "time_stamp": "2020-03-24 13:40:35",
    "text": "<@U25PYL3Q8> :stuck_out_tongue:"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-03-24 13:41:09",
    "text": "LOL I feel you though, you aren't wrong. It should scream at you. I believe it did at one time, which makes this whole conversation so weird"
  },
  {
    "poster": {
      "poster_name": "Steve Kanter",
      "poster_handle": "steve.kanter"
    },
    "time_stamp": "2020-03-24 13:41:25",
    "text": "<@UQERM7BLY> yeah that’d work fine. to be honest, I’ve figured out workarounds - either by having the CSS be inline, or using `require_css` - I just didn’t know this was a limitation, just thought it was a bug"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-03-24 13:42:50",
    "text": "I guess when you have been developing on this since it came out, this stuff just seems like baked into you as you saw it roll out and were puzzled about it because it didnt' work and they yelled and told us 100 times it didnt' work for the first month of the new design manager"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-03-24 13:43:03",
    "text": "you kinda forget that other people just walking into this would have no idea"
  },
  {
    "poster": {
      "poster_name": "Steve Kanter",
      "poster_handle": "steve.kanter"
    },
    "time_stamp": "2020-03-24 13:44:21",
    "text": "fair enough! so with that, where is the proper location to file a bug/suggestion?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-03-24 13:50:29",
    "text": "<@U7SL518D6> What is our best route with this? Is it support? I feel like I remember a place but i'm forgetting it rn"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-03-24 13:50:47",
    "text": "Steve -- usually we hope someone from HS jumps in on our conversations and takes note"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-03-24 13:51:01",
    "text": "I generally see a response to these types of things in 24 horus"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-03-24 13:51:23",
    "text": "cc: <@U6GNQ7JBU>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-03-24 13:55:06",
    "text": "Hi so the short story is, it doesn’t currently work.\n\nWe are talking about it internally, we’ll let you know more when it does or a solution/workaround is available."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-03-24 13:55:32",
    "edited": {
      "time_stamp": "2020-03-24 13:55:36"
    },
    "text": "are you saying the error reporting doesn't work?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-03-24 13:55:41",
    "text": "or that bug reporting doesn't work"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-03-24 13:55:47",
    "text": "what is it :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-03-24 13:58:37",
    "text": "module.CSS HubL for get_asset_url does not work."
  },
  {
    "poster": {
      "poster_name": "Trey",
      "poster_handle": "trey185"
    },
    "time_stamp": "2020-03-24 21:13:01",
    "text": "I've also started to use a pattern where I pass a common dictionary around to various macros as an alternative to using the to/fromjson.  the macros can then each add new properties or update existing properties of the dict"
  }
]