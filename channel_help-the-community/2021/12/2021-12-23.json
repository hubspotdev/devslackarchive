[
  {
    "poster": {
      "poster_name": "Habeebu Rahman",
      "poster_handle": "habi"
    },
    "time_stamp": "2021-12-23 07:46:42",
    "text": "Hey All,\nWe actually have a situation were the pages and templates are already built. now when it comes to performance we would like to implement lazy load on all images. doing it manually on each images is very time consuming because the count is huge. Is there any way to implement lazy load on all blog posts/pages/templates/theme in one step/code.",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2021-12-23 23:20:35"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Dustin Perolio",
      "poster_handle": "dustin305"
    },
    "time_stamp": "2021-12-23 23:20:35",
    "text": "I replied to you in the other channel, but I'll post it here as well in case it can help someone:\n\nEhm, you could try adding\n```(() =&gt; { \n function onDOMReady (callback) {\n    if (['interactive', 'complete'].indexOf(document.readyState) &gt;= 0) {\n      callback();\n    } else {\n      document.addEventListener('DOMContentLoaded', callback);\n    }\n  }\n\n  /**\n   * Run our scripts when the document is ready.\n   */\n  onDOMReady(() =&gt; {\n    /**\n     * An extra failsafe to make sure body exists.\n     */\n    if (!document.body) {\n      return;\n    }\n\n    document.querySelectorAll('img')?.forEach(img =&gt; img.setAttribute('loading', 'lazy'));\n  });\n})();```\nI’m not 100% sure it will work, I’ve never tried it, but it should theoretically work since it’s called on `DOMContentLoaded` event which is before images have been loaded I think, but it may not. You’re but you can give it a shot if you want."
  }
]