[
  {
    "text": "",
    "time_stamp": "2019-05-14 07:32:07"
  },
  {
    "poster": {
      "poster_name": "Steven Hambleton",
      "poster_handle": "steven994"
    },
    "time_stamp": "2019-05-14 07:43:20",
    "edited": {
      "time_stamp": "2019-05-14 07:43:32"
    },
    "text": "Does anyone have an email example of extending a template (a base template and the one calling the extend)?\n\nI'm curious to see how you've used it.",
    "reply_count": 19,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-05-14 07:48:25"
      },
      {
        "time_stamp": "2019-05-16 05:53:10"
      },
      {
        "time_stamp": "2019-05-16 05:53:44"
      },
      {
        "time_stamp": "2019-05-16 05:53:58"
      },
      {
        "time_stamp": "2019-05-16 06:00:25"
      },
      {
        "time_stamp": "2019-05-16 06:01:42"
      },
      {
        "time_stamp": "2019-05-16 06:03:48"
      },
      {
        "time_stamp": "2019-05-16 06:05:21"
      },
      {
        "time_stamp": "2019-05-16 06:07:21"
      },
      {
        "time_stamp": "2019-05-16 06:14:42"
      },
      {
        "time_stamp": "2019-05-16 06:15:28"
      },
      {
        "time_stamp": "2019-05-16 06:20:28"
      },
      {
        "time_stamp": "2019-05-16 06:21:48"
      },
      {
        "time_stamp": "2019-05-16 06:22:04"
      },
      {
        "time_stamp": "2019-05-16 06:24:04"
      },
      {
        "time_stamp": "2019-05-16 06:24:42"
      },
      {
        "time_stamp": "2019-05-16 06:25:29"
      },
      {
        "time_stamp": "2019-05-16 06:27:24"
      },
      {
        "time_stamp": "2019-05-16 06:32:56"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-14 07:48:25",
    "text": "Explain your intent when you say extend. The answer is probably yes, but I can see a couple different possible intents here."
  },
  {
    "poster": {
      "poster_name": "Sam McKinney",
      "poster_handle": "sam"
    },
    "time_stamp": "2019-05-14 09:59:33",
    "text": "Hi Everyone, I am curious if anyone has done something with HubDB or Hubl that would basically be an ‘events’ module. We dont need registration type functionality, but I was thinking more of some custom fields that display how i want them, and sorting by date with past events falling off. The sorting by date with past events falling off is my biggest hurdle. Has anyone done that before?",
    "reply_count": 12,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-05-14 10:13:03"
      },
      {
        "time_stamp": "2019-05-14 10:15:14"
      },
      {
        "time_stamp": "2019-05-14 10:15:34"
      },
      {
        "time_stamp": "2019-05-14 10:17:20"
      },
      {
        "time_stamp": "2019-05-14 10:17:26"
      },
      {
        "time_stamp": "2019-05-14 10:17:37"
      },
      {
        "time_stamp": "2019-05-14 10:17:46"
      },
      {
        "time_stamp": "2019-05-14 10:18:57"
      },
      {
        "time_stamp": "2019-05-14 10:19:06"
      },
      {
        "time_stamp": "2019-05-14 10:20:11"
      },
      {
        "time_stamp": "2019-05-14 10:22:11"
      },
      {
        "time_stamp": "2019-05-14 10:23:45"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-14 10:13:03",
    "text": "this is probably the most common thing done with HubDB. it’s a little complicated and can completely vary based on the needs of your project. <@U2H3TT8F2> or <@U38EZFVFE> have either of you posted or know of some blog posts  with a good rundown of this?\n\nI just figure it’s a lot to try to explain"
  },
  {
    "poster": {
      "poster_name": "Sam McKinney",
      "poster_handle": "sam"
    },
    "time_stamp": "2019-05-14 10:15:14",
    "text": "totally fair"
  },
  {
    "poster": {
      "poster_name": "Sam McKinney",
      "poster_handle": "sam"
    },
    "time_stamp": "2019-05-14 10:15:34",
    "text": "I assume its pulling in the hub db, looping over it with a sort, but wasnt for sure how to have that cutoff date of ‘now’"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-14 10:17:20",
    "text": "you’re assumption is correct, the method for it if I remember correct is you set `today()` to a var, and you add to your query end_date__gte=todayvar"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-14 10:17:26",
    "text": "that’s basically your goal"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-05-14 10:17:37",
    "text": "dont know of any blog posts, but I can def write one up on how to do this, we've built this a few times for clients. As Jon stated, def the most complicated one to build."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-14 10:17:46",
    "text": "end_date being the column in your hubdb with the end date/time of the event"
  },
  {
    "poster": {
      "poster_name": "Sam McKinney",
      "poster_handle": "sam"
    },
    "time_stamp": "2019-05-14 10:18:57",
    "text": "I assumed that was the basic principal. I will play around with it. I would love a blog post or any type of guidelines for this though if you do want to write that up."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-14 10:19:06",
    "text": "another thing that may affect you, and is confusing as all hell when testing this is time-zones. The less you have to convert timezones the better for everyones sanity lol"
  },
  {
    "poster": {
      "poster_name": "Sam McKinney",
      "poster_handle": "sam"
    },
    "time_stamp": "2019-05-14 10:20:11",
    "text": "ha! absolutely. I was planning on just using a single timezone as their events are all local, for now"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-14 10:22:11",
    "edited": {
      "time_stamp": "2019-05-14 10:22:46"
    },
    "text": "I had a project where they required me to calculate the display of the items based on a timezone.\n\nI thought to myself “I get why people freaked out about Y2K, the logic for the clocks probably hadn’t actually been touched by anyone since the invention of computers, because everyone’s like “I don’t want to rebuild that” so everyone just referenced older code, causing people to feel like “clocks on computers are black magic. when they roll over the worlds gonna end”"
  },
  {
    "poster": {
      "poster_name": "Sam McKinney",
      "poster_handle": "sam"
    },
    "time_stamp": "2019-05-14 10:23:45",
    "text": "hahaha"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-14 10:24:54",
    "text": "Update for any interested person on this...\nThe following was the desired logic to be followed:\n```The context of this dev is that I am being asked to insert a card into a specific card structure on the home page that pulls from 2 sources within a custom module.\n 1. 2 cards are generated from custom module fields\n 2. 1 card from a blog from our portal\n\nfor the blog card, the logic ask is this:\n\nFor all blog posts in BLOG:\n1. Find if there are matching posts for TODAY.\n    a. If 1 matching post -- pull that content and post\n    b. if &gt;1 matching posts -- select a random item from the posts that match for today\n2. If no matching posts for TODAY -- find posts from within the past WEEK\n   a. Select random post from list of posts from within past week\n3. If no matching posts from past week, Repeat this logic for posts within past month```\n\nAt this time, I still have been unable to solve for this logic using the blog functions.  I did attempt the related blog post tags, but it doesn't allow for randomization of the returned items and more complex logic controlling when the content is dumped into the macro"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2019-05-14 11:51:59",
    "text": "Hello Everyone, I' m using the Shopify Integration, and I was wondering if there is a way to call the product library from a Hubl custom email template? Has someone used this before? I want to send monthly email and get my latest products directly from the product library."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-14 12:12:37",
    "text": "Havent tried that one yet."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-14 12:12:58",
    "text": "me neither. interested to know the answer though"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-14 12:13:10",
    "text": ":eyes:"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-05-14 13:35:16",
    "text": "When updating modules through FTP, upon upload, that shouldn't destroy anything right? lol"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-05-14 13:36:15",
    "text": "I am basically adding new fields to a module and some html, just want to make sure when I upload the new files (JSON and HTML) it wont go \"Awesome, let's default content and wipe 100+ pages clean\""
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-05-14 13:54:46",
    "text": "looks like it doesnt :partyparrot:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-14 13:57:00",
    "text": "it’s intelligent :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-14 14:16:05",
    "text": "can you image if you saw that pop up \"Awesome, let's default content and wipe 100+ pages clean\""
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-14 14:25:58",
    "text": "oh god. the horror"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-14 14:26:11",
    "text": "<@UD53A9UUR> why do you even put these thoughts in peoples heads?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-14 14:26:34",
    "text": "aj did it"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-14 14:26:39",
    "text": "i just followed through"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-14 14:26:46",
    "text": "i am always living in fear"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-05-14 14:45:03",
    "text": "likewise <@UD53A9UUR> likewise, my life is one giant nightmare on elmstreet dream"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-14 14:45:40",
    "text": "and that is why we are in the biz"
  },
  {
    "time_stamp": "2019-05-14 14:46:03",
    "text": ""
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2019-05-14 20:11:52",
    "text": "Is there any flexibility in your requirements? If you can use the tag, this is going to be a 5 minute job. Otherwise, you're going to spend many many hours trying to do this on top of what you've already spent for something that's pretty similar to the logic above."
  }
]