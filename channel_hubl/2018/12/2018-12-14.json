[
  null,
  {
    "poster": {
      "poster_name": "Jurjen Sytsma",
      "poster_handle": "jurjen"
    },
    "time_stamp": "2018-12-14 05:54:43",
    "text": "does anyone has a wicked hack to mimic a while or a for loop (not the `for-in`, but the oldschool `for`)?"
  },
  {
    "text": "",
    "time_stamp": "2018-12-14 06:19:06"
  },
  {
    "poster": {
      "poster_name": "Jurjen Sytsma",
      "poster_handle": "jurjen"
    },
    "time_stamp": "2018-12-14 08:03:12",
    "text": "wicked enough :stuck_out_tongue: That'll do"
  },
  {
    "poster": {
      "poster_name": "Jurjen Sytsma",
      "poster_handle": "jurjen"
    },
    "time_stamp": "2018-12-14 08:03:18",
    "text": "tx <@UDC5GRX6E>!"
  },
  null,
  {
    "poster": {
      "poster_name": "Kyle Geiste",
      "poster_handle": "kg"
    },
    "time_stamp": "2018-12-14 09:58:24",
    "text": "Hey all! If we haven’t met — I’m Kyle, and I’m a Product Designer at HubSpot, currently working on the Editor Platform. I have a kind of quick-fire research question for you…",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-12-14 10:37:43"
      },
      {
        "time_stamp": "2018-12-14 10:38:53"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-14 09:59:10",
    "text": "whats the prize?",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2018-12-14 10:19:19"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Kyle Geiste",
      "poster_handle": "kg"
    },
    "time_stamp": "2018-12-14 09:59:36",
    "edited": {
      "time_stamp": "2018-12-14 10:07:05"
    },
    "text": "Let’s say you buy a module from a provider, through the Marketplace. The provider is called ‘Really Great Devs’. The module is called ‘Hero Banner’. You want to use that module in a coded template. How would you use it? Fill in the blank:\n\n`{% module \"module_instance_name\" ____________________________ %}`\n\nFor the sake of this question, I’m mostly curious about what you would consider the ‘ideal’ way of referencing a purchased module. Respond in this thread if you have thoughts :point_down:",
    "reply_count": 63,
    "reply_users_count": 5,
    "replies": [
      {
        "time_stamp": "2018-12-14 09:59:42"
      },
      {
        "time_stamp": "2018-12-14 10:01:24"
      },
      {
        "time_stamp": "2018-12-14 10:01:32"
      },
      {
        "time_stamp": "2018-12-14 10:01:43"
      },
      {
        "time_stamp": "2018-12-14 10:02:12"
      },
      {
        "time_stamp": "2018-12-14 10:02:20"
      },
      {
        "time_stamp": "2018-12-14 10:02:21"
      },
      {
        "time_stamp": "2018-12-14 10:02:49"
      },
      {
        "time_stamp": "2018-12-14 10:03:14"
      },
      {
        "time_stamp": "2018-12-14 10:03:17"
      },
      {
        "time_stamp": "2018-12-14 10:03:49"
      },
      {
        "time_stamp": "2018-12-14 10:03:55"
      },
      {
        "time_stamp": "2018-12-14 10:04:09"
      },
      {
        "time_stamp": "2018-12-14 10:04:18"
      },
      {
        "time_stamp": "2018-12-14 10:04:35"
      },
      {
        "time_stamp": "2018-12-14 10:04:45"
      },
      {
        "time_stamp": "2018-12-14 10:05:35"
      },
      {
        "time_stamp": "2018-12-14 10:05:35"
      },
      {
        "time_stamp": "2018-12-14 10:06:09"
      },
      {
        "time_stamp": "2018-12-14 10:06:28"
      },
      {
        "time_stamp": "2018-12-14 10:06:32"
      },
      {
        "time_stamp": "2018-12-14 10:07:21"
      },
      {
        "time_stamp": "2018-12-14 10:08:13"
      },
      {
        "time_stamp": "2018-12-14 10:08:14"
      },
      {
        "time_stamp": "2018-12-14 10:08:46"
      },
      {
        "time_stamp": "2018-12-14 10:09:06"
      },
      {
        "time_stamp": "2018-12-14 10:09:29"
      },
      {
        "time_stamp": "2018-12-14 10:09:33"
      },
      {
        "time_stamp": "2018-12-14 10:10:19"
      },
      {
        "time_stamp": "2018-12-14 10:10:44"
      },
      {
        "time_stamp": "2018-12-14 10:13:01"
      },
      {
        "time_stamp": "2018-12-14 10:14:24"
      },
      {
        "time_stamp": "2018-12-14 10:15:54"
      },
      {
        "time_stamp": "2018-12-14 10:15:55"
      },
      {
        "time_stamp": "2018-12-14 10:17:02"
      },
      {
        "time_stamp": "2018-12-14 10:17:25"
      },
      {
        "time_stamp": "2018-12-14 10:17:43"
      },
      {
        "time_stamp": "2018-12-14 10:18:19"
      },
      {
        "time_stamp": "2018-12-14 10:20:33"
      },
      {
        "time_stamp": "2018-12-14 10:20:38"
      },
      {
        "time_stamp": "2018-12-14 10:20:58"
      },
      {
        "time_stamp": "2018-12-14 10:23:22"
      },
      {
        "time_stamp": "2018-12-14 10:23:54"
      },
      {
        "time_stamp": "2018-12-14 10:25:05"
      },
      {
        "time_stamp": "2018-12-14 10:25:08"
      },
      {
        "time_stamp": "2018-12-14 10:25:36"
      },
      {
        "time_stamp": "2018-12-14 10:26:39"
      },
      {
        "time_stamp": "2018-12-14 10:27:25"
      },
      {
        "time_stamp": "2018-12-14 10:32:40"
      },
      {
        "time_stamp": "2018-12-14 10:32:56"
      },
      {
        "time_stamp": "2018-12-14 10:33:22"
      },
      {
        "time_stamp": "2018-12-14 10:33:44"
      },
      {
        "time_stamp": "2018-12-14 10:35:59"
      },
      {
        "time_stamp": "2018-12-14 10:37:02"
      },
      {
        "time_stamp": "2018-12-14 10:47:00"
      },
      {
        "time_stamp": "2018-12-14 10:48:43"
      },
      {
        "time_stamp": "2018-12-14 10:50:44"
      },
      {
        "time_stamp": "2018-12-14 10:52:56"
      },
      {
        "time_stamp": "2018-12-14 11:03:13"
      },
      {
        "time_stamp": "2018-12-14 11:07:22"
      },
      {
        "time_stamp": "2018-12-14 11:08:46"
      },
      {
        "time_stamp": "2018-12-14 11:10:01"
      },
      {
        "time_stamp": "2018-12-14 11:23:46"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Kyle Geiste",
      "poster_handle": "kg"
    },
    "time_stamp": "2018-12-14 09:59:42",
    "text": "THREAD!"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-14 10:01:24",
    "text": "a purchased module or any?"
  },
  {
    "poster": {
      "poster_name": "Kyle Geiste",
      "poster_handle": "kg"
    },
    "time_stamp": "2018-12-14 10:01:32",
    "text": "Specifically purchased."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-14 10:01:43",
    "text": "Well I’d use the attributes for the fields already in the module(these already exist) to pre-populate the content just like any other module."
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-14 10:02:12",
    "text": "add a marketplace attribute?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-14 10:02:20",
    "text": "if I didnt need to prepopulate the fields I’d just leave it as it was `{% module \"module_instance_name\" %}`"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-14 10:02:21",
    "text": "`{% module “module_instance_name” hero_background=\"{{defaultIMG}}\"  %}`\nwhy would you do a different way to manage the purchased and the other?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-14 10:02:49",
    "text": "attribution to creator?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-14 10:03:14",
    "text": "i have never purchased anything so maybe i am not the right person for this survey"
  },
  {
    "poster": {
      "poster_name": "Kyle Geiste",
      "poster_handle": "kg"
    },
    "time_stamp": "2018-12-14 10:03:17",
    "text": "Do you consider that to be ideal, <@U7SL518D6>? Pretend the only requirement is the beginning of that snippet. The blank is entirely up to you."
  },
  {
    "poster": {
      "poster_name": "Kyle Geiste",
      "poster_handle": "kg"
    },
    "time_stamp": "2018-12-14 10:03:49",
    "text": "<@U7ADCU3BM> Perfectly valid opinion. But that’s why I’m curious! Lots of platforms do this differently, so I’m curious what comes to mind."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-14 10:03:55",
    "text": "I don’t think there is value in it being different for marketplace modules, the only reason it’d be nice for it to be different would simply be to indicate it’s a marketplace module so we know when editing the code that it is different"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-14 10:04:09",
    "text": "atmost I’d see it being like"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-14 10:04:18",
    "text": "when you purchase a module, do they autoupdate if developer pushes a new version?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-14 10:04:35",
    "text": "`{% market_module \"module_instance_name\" %}`"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-14 10:04:45",
    "text": "if not, maybe an version label?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-14 10:05:35",
    "text": "if marketplace modules can be updated by the devs- and those updates would affect the versions already in pages, it would be nice if we could specify versions or manage versions used throughout a site in some way"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-14 10:05:35",
    "edited": {
      "time_stamp": "2018-12-14 10:05:42"
    },
    "text": "well, I am \"okay\" with the current way but sometimes it becomes really crazy long line to manage.\nSo I would suggest to add something similar to `{% widget block %}` so you have an expanded way to manage for complex/long populated CMs"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-14 10:06:09",
    "text": "would be useful especially for repeaters"
  },
  {
    "poster": {
      "poster_name": "Kyle Geiste",
      "poster_handle": "kg"
    },
    "time_stamp": "2018-12-14 10:06:28",
    "text": "So just to clarify one thing, today the module has a snippet that looks like:"
  },
  {
    "poster": {
      "poster_name": "Kyle Geiste",
      "poster_handle": "kg"
    },
    "time_stamp": "2018-12-14 10:06:32",
    "text": "`{% module \"module_154480714572569\" module_id=\"3507460\" label=\"Field display testing\" %}`"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-14 10:07:21",
    "text": "`{% module \"module_154480714572569\" module_id=\"3507460\" label=\"Field display testing\" version=\"1.0\" %}`"
  },
  {
    "poster": {
      "poster_name": "Kyle Geiste",
      "poster_handle": "kg"
    },
    "time_stamp": "2018-12-14 10:08:13",
    "text": "So, just to be sure I understand, you’d want to continue to use the `module_id` in an ideal scenario, perfect world?"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-14 10:08:14",
    "text": "well, right now. We have a version hardcoded text inside the HTML tab.\nI would like to have a real option in HS to send the info.\n\nRegarding auto update... I would say: yes until someone actually edit the module (then you have to manually push the update, but then you also need to warn us about new updates :slightly_smiling_face: )"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-14 10:08:46",
    "edited": {
      "time_stamp": "2018-12-14 10:09:08"
    },
    "text": "ideally, we should be able to setup an alias for the ID"
  },
  {
    "poster": {
      "poster_name": "Kyle Geiste",
      "poster_handle": "kg"
    },
    "time_stamp": "2018-12-14 10:09:06",
    "edited": {
      "time_stamp": "2018-12-14 10:10:08"
    },
    "text": "Tell me more about that <@U7ADCU3BM>. What would you imagine using as a custom ID/alias?"
  },
  {
    "poster": {
      "poster_name": "Kyle Geiste",
      "poster_handle": "kg"
    },
    "time_stamp": "2018-12-14 10:09:29",
    "text": "And, then, to push it a bit further, how would that custom ID work for modules acquired from the Marketplace?"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-14 10:09:33",
    "text": "I can imagine a perfect world about that :smile:"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-14 10:10:19",
    "text": "well, if we are able to set alias for the modules, we could use similar as we do for defaults in HS `{% text %}`"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-14 10:10:44",
    "text": "so it could be:\n`{% module hero %}`"
  },
  {
    "poster": {
      "poster_name": "Kyle Geiste",
      "poster_handle": "kg"
    },
    "time_stamp": "2018-12-14 10:13:01",
    "text": "Okay, so let’s say that you create a module called/aliased as `hero`, and you want to buy a module from the marketplace that is also called `hero`. How might you imagine those snippets being different, in an ideal world?"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-14 10:14:24",
    "edited": {
      "time_stamp": "2018-12-14 10:36:35"
    },
    "text": "expanding the prev. comment about the widget block:\nit could be like:\n`{% module_block hero %}`\n` {% basic_text_field= \"default content %}`\n` {% group group_slug %}`\n`    {% field my_field_inside_a_group = \"default content\" %}`\n` {% endgroup %}`\n`{% end_module_block %}`"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-14 10:15:54",
    "text": "<@U7ADCU3BM> you are my `{% module hero %}` lol I agree with everything you’ve suggested"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-14 10:15:55",
    "edited": {
      "time_stamp": "2018-12-14 10:35:12"
    },
    "text": "that way we can see and edit easily a huge group with several fields.\nif its more simple we could do something like:\n\n`{% module_block hero %}`\n `{% basic_text_field= \"default content %}`\n `{% group group_slug my_customfield = \"default content\" %}`\nor\n `{% group_slug.my_customfield = \"default content\" %}`\n`{% end_module_block %}`"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-14 10:17:02",
    "text": "regarding the custom module id, I see those not attached to the module itself but to the portal"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-14 10:17:25",
    "text": "so you ideally have a settings page where can add your custom snippet for each existing CM"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-14 10:17:43",
    "text": "if you want to add a default one inside the CM (which its okay too)"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-14 10:18:19",
    "edited": {
      "time_stamp": "2018-12-14 10:18:53"
    },
    "text": "what will happens is the new one coming from the marketplace will generate an alias like `{% module hero2 %}`"
  },
  {
    "poster": {
      "poster_name": "Kyle Geiste",
      "poster_handle": "kg"
    },
    "time_stamp": "2018-12-14 10:19:19",
    "text": "Hopefully a better product. :wink:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-14 10:20:33",
    "text": "Everything he said"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-14 10:20:38",
    "text": "That sounds ideal"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-14 10:20:58",
    "edited": {
      "time_stamp": "2018-12-14 10:21:06"
    },
    "text": "just hire me guys, gonna be easier :rolling_on_the_floor_laughing:"
  },
  {
    "poster": {
      "poster_name": "Kyle Geiste",
      "poster_handle": "kg"
    },
    "time_stamp": "2018-12-14 10:23:22",
    "edited": {
      "time_stamp": "2018-12-14 10:23:29"
    },
    "text": "Got it, so <@U7ADCU3BM>, you would buy a module from a marketplace, and if a module with the same name already exists, you’d append in incrementing number to the end of the name, which could inevitably be customized by the end-user/developer?"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-14 10:23:54",
    "text": "correct"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-14 10:25:05",
    "text": "and ideally, the suggested snippet by HS (in the right sidebar) will be updated with that alias too"
  },
  {
    "poster": {
      "poster_name": "Kyle Geiste",
      "poster_handle": "kg"
    },
    "time_stamp": "2018-12-14 10:25:08",
    "text": "Got it. Good to know. If anyone else has different ideas, feel free to continue to share."
  },
  {
    "poster": {
      "poster_name": "Kyle Geiste",
      "poster_handle": "kg"
    },
    "time_stamp": "2018-12-14 10:25:36",
    "text": "We’re just thinking a lot about this question right now, so it’s always good to see how you all think about it."
  },
  {
    "poster": {
      "poster_name": "Kyle Geiste",
      "poster_handle": "kg"
    },
    "time_stamp": "2018-12-14 10:26:39",
    "text": "And to the earlier question, we don’t really have a mechanism for automatic updating of modules yet, but are also thinking a lot about that question. Versioning is tricky. :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-14 10:27:25",
    "text": "Let us know when you hire <@U7ADCU3BM> "
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-14 10:32:40",
    "edited": {
      "time_stamp": "2018-12-14 10:32:50"
    },
    "text": "another really interesting feature could be:\nattach different default contents (JSON?) for demos."
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-14 10:32:56",
    "edited": {
      "time_stamp": "2018-12-14 10:34:17"
    },
    "text": "CMs &amp; templates"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-14 10:33:22",
    "text": "(right now I am dealing with it :smile: )"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-14 10:33:44",
    "edited": {
      "time_stamp": "2018-12-14 10:34:05"
    },
    "text": "and the only solution is have several clones of the template with the CMs with the prepopulated content"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-14 10:35:59",
    "edited": {
      "time_stamp": "2018-12-14 10:37:05"
    },
    "text": "and please, remove the duplicated module keyword on this call :sweat_smile::\n`{% module_block module \"module_id\" %}`"
  },
  {
    "poster": {
      "poster_name": "Kyle Geiste",
      "poster_handle": "kg"
    },
    "time_stamp": "2018-12-14 10:37:02",
    "text": "cc <@U22PNRAJD> ^^"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2018-12-14 10:37:43",
    "text": "Whats up Kyle. Nice to see a fellow Designer here. :facepunch:"
  },
  {
    "poster": {
      "poster_name": "Kyle Geiste",
      "poster_handle": "kg"
    },
    "time_stamp": "2018-12-14 10:38:53",
    "text": "Good to meet you, Kevin! :wave:"
  },
  {
    "text": "Curious if any of you have run into this. I have two of the same exact custom modules that have been added to a page. One get the style option, the other doesn’t.   Is there a way to turn on this style option that I’m completely missing?",
    "time_stamp": "2018-12-14 10:45:00"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2018-12-14 10:47:00",
    "text": "{% module.really_great_devs.hero_banner %}\n\nAppending the provider name would make it easier to organize and reference should you be using multiple modules from the marketplace."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-14 10:48:43",
    "edited": {
      "time_stamp": "2018-12-14 10:49:05"
    },
    "text": "awesome difficult to add feature suggestion: whenever there’s a {%module %} tag it’d be cool if we could double click/right click the id or something to open that module up in the editor"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-14 10:50:44",
    "edited": {
      "time_stamp": "2018-12-14 10:53:59"
    },
    "text": "ugh, I am too lazy Kevin. I am against doing them even longer xD\nMaybe:\n`{% really_great_devs.hero_banner %}` ?\nbut don't see the point to keep the provider in the tag"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-14 10:52:56",
    "text": "I don’t honestly think there’s much value in the  provider name being required to instantiate the module.  it’d be nice for reference purposes but not functionality purposes"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2018-12-14 11:03:13",
    "text": "<@U7ADCU3BM> I’m forward looking a bit in thinking of using the provider name. If i’m simply managing one single HubSpot account, then yes, it’s a bit pointless.\n\nHowever, for those managing multiple account, jumping into new accounts, etc. having that frame of quick reference would be helpful."
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-14 11:07:22",
    "edited": {
      "time_stamp": "2018-12-14 11:08:39"
    },
    "text": "Even with several accounts.\nIf you want to do lets say an snippet that you can copy&amp;paste in your client portals after you bought a CM, you can just give an ID to you module that won't be easily repeated.  I already use a prefix for most of my CM and templates to easily locate them on the portals.\nI think this should be the same:\n`{% ls_lp_hero %}`"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-14 11:08:46",
    "text": "You can buy a template or module once and copy to several portals?"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-12-14 11:10:01",
    "edited": {
      "time_stamp": "2018-12-14 11:11:03"
    },
    "text": "no, I mean.\nIn the hypothetical situation where you have an snippet (macro, coded template or whatever) that calls one of the CM that need to be bought by the client (for each client/portal)"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-14 11:23:46",
    "text": "Gotchya"
  },
  null,
  null
]