[
  {
    "poster": {
      "poster_name": "Muralidharan Arivagaran",
      "poster_handle": "muralidharan"
    },
    "time_stamp": "2022-03-04 03:22:32",
    "text": "Hello,\nHow can we get HubSpot sitemap in this format '<https://domainname.com/something/sitemap.xml>' ?",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2022-07-11 01:09:16"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Romans Konoplovs",
      "poster_handle": "romankonoplov"
    },
    "time_stamp": "2022-03-04 04:51:32",
    "edited": {
      "time_stamp": "2022-03-04 04:57:39"
    },
    "text": "Hi!\nQuick question.\nAs I understood there is two ways to declare *CSS variables:*\n_CSS Syntax_\n```:root {\n\n--main-background-color: red;\n\n}```\n_Hubl Syntax_\n```{% set mainBackgroundColor = \"red\" %} ```\nWhich one is better to use when I develop custom modules?\n\n_P.S:_ \n_I am wondering how Hubl applies those variables to styles compared to CSS Syntax (which I believe may not be supported across older browsers)._ ",
    "reply_count": 8,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2022-03-04 06:04:26"
      },
      {
        "time_stamp": "2022-03-04 06:05:20"
      },
      {
        "time_stamp": "2022-03-04 06:06:27"
      },
      {
        "time_stamp": "2022-03-04 07:57:19"
      },
      {
        "time_stamp": "2022-03-04 10:02:58"
      },
      {
        "time_stamp": "2022-03-04 10:06:14"
      },
      {
        "time_stamp": "2022-03-04 10:10:28"
      },
      {
        "time_stamp": "2022-03-04 10:17:03"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2022-03-04 06:04:26",
    "text": "I would highly recommend using custom CSS properties (your first example) because it is more flexible at the client-side level and more debugging friendly. However, these methods are also not mutually exclusive; you could do something like this:"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2022-03-04 06:05:20",
    "text": "```{% set main_background_color = \"red\" %}\n\n:root {\n    --main-background-color : {{ main_background_color }};\n}```"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2022-03-04 06:06:27",
    "text": "This is how I personally handle theme variables, taking them from HubL and assigning them to CSS Properties for more flexible theming."
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2022-03-04 07:57:19",
    "text": "same ^"
  },
  {
    "poster": {
      "poster_name": "Romans Konoplovs",
      "poster_handle": "romankonoplov"
    },
    "time_stamp": "2022-03-04 10:02:58",
    "edited": {
      "time_stamp": "2022-03-04 10:04:45"
    },
    "text": "Ok, that looks interesting.\nBut can I do something like this in CSS?\n`{% set main_background_color = module.style.color_field %}`\nAnd then in CSS...\n`:root {`\n`--main-background-color: {{ main_background_color }};`\n`}`\nOr it cannot be used with CSS like that? Only with HTML+Hubl?"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2022-03-04 10:06:14",
    "text": "Only in HTML+Hubl.\n\nyou could set inline css variables, that you can reference in the CSS pane\n\n```&lt;div class=\"elem\" style=\"--background: {{ main_background_color }};\"&gt;&lt;/div&gt;```\n```.elem {\n    background: var(--background);\n}```"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2022-03-04 10:10:28",
    "text": "You can also wrap a style tag in a ‘require_css’ block within the HTML window and it will be automatically added to the head"
  },
  {
    "poster": {
      "poster_name": "Romans Konoplovs",
      "poster_handle": "romankonoplov"
    },
    "time_stamp": "2022-03-04 10:17:03",
    "text": "I will go try out both options. I try to build as customizable modules as possible and I hoped to have all CSS related things within CSS window. Not everything goes as planned, but good there is a workaround :slightly_smiling_face:\n\nThank you for your help :slightly_smiling_face:"
  }
]