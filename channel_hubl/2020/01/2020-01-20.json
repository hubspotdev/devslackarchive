[
  {
    "poster": {
      "poster_name": "Jaydip Suvagiya",
      "poster_handle": "jaydip"
    },
    "time_stamp": "2020-01-20 01:20:39",
    "text": "I used this Hubl for getting recent tag post but not getting anything.\n```{% set recent_posts = blog_recent_tag_posts( 5361864424, content.topic_list, 4) %}```\nam i doing something wrong or how can i fixed this ??",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2020-01-20 02:22:17"
      },
      {
        "time_stamp": "2020-01-20 02:31:06"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Dhiraj Pandey",
      "poster_handle": "dhiraj"
    },
    "time_stamp": "2020-01-20 02:22:17",
    "text": "content.topic_list will return a dict not array of topics.\nYou have to create an array before getting tag posts."
  },
  {
    "poster": {
      "poster_name": "Jaydip Suvagiya",
      "poster_handle": "jaydip"
    },
    "time_stamp": "2020-01-20 02:31:06",
    "text": "Thanks, will try :simple_smile:"
  },
  {
    "poster": {
      "poster_name": "Cory Dymond",
      "poster_handle": "cory218"
    },
    "time_stamp": "2020-01-20 08:57:46",
    "text": "I'm not sure why this is stumping me, but I've never actually run across this issue. Is there a quick way of changing the amount of blog posts displayed on mobile vs desktop?",
    "reply_count": 19,
    "reply_users_count": 5,
    "replies": [
      {
        "time_stamp": "2020-01-20 08:59:26"
      },
      {
        "time_stamp": "2020-01-20 09:02:15"
      },
      {
        "time_stamp": "2020-01-20 09:08:45"
      },
      {
        "time_stamp": "2020-01-20 09:51:47"
      },
      {
        "time_stamp": "2020-01-20 09:53:17"
      },
      {
        "time_stamp": "2020-01-20 09:54:20"
      },
      {
        "time_stamp": "2020-01-20 09:55:45"
      },
      {
        "time_stamp": "2020-01-20 09:56:31"
      },
      {
        "time_stamp": "2020-01-20 13:18:38"
      },
      {
        "time_stamp": "2020-01-20 18:01:54"
      },
      {
        "time_stamp": "2020-01-21 15:05:46"
      },
      {
        "time_stamp": "2020-01-21 15:06:51"
      },
      {
        "time_stamp": "2020-01-21 15:07:54"
      },
      {
        "time_stamp": "2020-01-21 15:09:32"
      },
      {
        "time_stamp": "2020-01-21 15:09:36"
      },
      {
        "time_stamp": "2020-01-21 15:09:38"
      },
      {
        "time_stamp": "2020-01-21 15:09:40"
      },
      {
        "time_stamp": "2020-01-21 15:09:46"
      },
      {
        "time_stamp": "2020-01-22 15:26:54"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Cory Dymond",
      "poster_handle": "cory218"
    },
    "time_stamp": "2020-01-20 08:59:26",
    "text": "I need my nav to work still, so i don't really want to do this on the front end. I'd prefer to check browser width and only spit out 5 per page or so."
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2020-01-20 09:02:15",
    "text": "I think front end is the only way you’re going to be able to do this.  Can’t check viewport width serverside"
  },
  {
    "poster": {
      "poster_name": "Cory Dymond",
      "poster_handle": "cory218"
    },
    "time_stamp": "2020-01-20 09:08:45",
    "text": "i figured as much. it's honestly just a \"not gonna happen\" thing if i have to do it on the front end lol."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-01-20 09:51:47",
    "text": "you could use CSS with a media query.\n\n```.blog-listing article:nth-child(n+6){display:none;}```\nYou would then probably want to display the difference in articles between desktop and mobile,  on the paginated pages, just for mobile.\n\nKinda convoluted, though"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2020-01-20 09:53:17",
    "text": "Pagination would get tricky though"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-01-20 09:54:20",
    "text": "it does, the idea I had was basically on mobile you would have the previous X entries show in the pagination. On desktop you wouldn’t see those entries as you’d have seen them on the previous page."
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2020-01-20 09:55:45",
    "text": "hmmm… not the best for performance, but you could write two loops, one for desktop and one for mobile and then just show/hide with a media qurey"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-01-20 09:56:31",
    "text": "Yeah that’d be easier to keep the logic straight in your head. You’re right about performance though."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-20 10:40:51",
    "text": "you could use something like\n`.primary-color { color: red; }`\n\nand then if you wanted to change it on a broad level you would add \"blue\" to the body class\n`.blue .primary-color { color: blue; }`"
  },
  {
    "poster": {
      "poster_name": "Trey",
      "poster_handle": "trey185"
    },
    "time_stamp": "2020-01-20 10:56:06",
    "text": "Are there any type of \"reflection\" capabilities in hubl?  for example, i would like to be able to programmatically know the macro the code is currently running in.   i know i can use varargs and kwargs to find information on params, and i can assign a variable to a macro name and then inspect it's params, etc., but i was wondering if there was an equivalent to \"this\" or \"self\"  or anything that i could inspect a call stack or any other ways to read meta data about the current macro?",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2020-01-20 18:03:07"
      },
      {
        "time_stamp": "2020-01-20 19:49:09"
      },
      {
        "time_stamp": "2020-01-21 12:59:01"
      },
      {
        "time_stamp": "2020-01-22 07:45:47"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Cory Dymond",
      "poster_handle": "cory218"
    },
    "time_stamp": "2020-01-20 13:18:38",
    "text": "Yeah, I'm looking to keep unnecessary markup off of my page. If this ends up being necessary, I'm just going to utilize the fake API I just built to pull the appropriate amount of blogs after page load. Hiding with CSS simply won't work with pagination."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-20 18:01:54",
    "text": "Whats the purpose of changing the amount of blogs between the two different views?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-01-20 18:03:07",
    "text": "not sure this will help, when viewing each page you can click on the HubSpot logo menu in the top right, click developer info, and then there is a mess load of json data that you can review/access on page."
  },
  {
    "poster": {
      "poster_name": "Trey",
      "poster_handle": "trey185"
    },
    "time_stamp": "2020-01-20 19:49:09",
    "text": "thanks nicholas... would be great if i could access some of this programmatically"
  }
]