[
  {
    "poster": {
      "poster_name": "Chiedu Agborh",
      "poster_handle": "chiedu.agborh"
    },
    "time_stamp": "2024-01-18 05:02:08",
    "edited": {
      "time_stamp": "2024-01-18 05:10:45"
    },
    "text": "Hi all, is it possible to use typescript for the js partial\n\n `{% js_partial`\n      `path=\"@projects/react-project/app/components/partials/Header.jsx\",`\n      `brandColor=\"#FF7A59\",`\n      `no_wrapper=True %}`\n\nI want to use a ts file instead, is this possible or i have to stick with jsx when it comes to partial files\n\n\ni get these errors\n\n`Error when server rendering @projects/react-project/app/components/partials/well/Top.jsx`\n`Error: Entry point @projects/react-project/app/components/partials/well/Top.jsx not found in React project`\n\nThanks",
    "reply_count": 5,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2024-01-18 06:26:04"
      },
      {
        "time_stamp": "2024-01-18 07:20:11"
      },
      {
        "time_stamp": "2024-01-18 07:54:45"
      },
      {
        "time_stamp": "2024-01-18 07:56:59"
      },
      {
        "time_stamp": "2024-01-18 07:57:38"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-18 05:53:08",
    "text": "Hey Byron, going to send you the link in a DM"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-18 06:18:41",
    "text": "it would be nice if there was a way to hide the \"Theme\" category. In my use case, I'm using a mix of regular and react modules and I think it'll end up being confusing if some module can appear under \"Theme\" but others cannot"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-01-18 06:26:04",
    "edited": {
      "time_stamp": "2024-01-18 06:26:53"
    },
    "text": "You should be able to use `tsx`"
  },
  {
    "poster": {
      "poster_name": "Chiedu Agborh",
      "poster_handle": "chiedu.agborh"
    },
    "time_stamp": "2024-01-18 07:20:11",
    "text": "hmmmm do i still use the notation js_partial?"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-01-18 07:54:45",
    "text": "`{% js_partial`\n      `path=\"@projects/react-project/app/components/partials/Header.tsx\",`\n      `brandColor=\"#FF7A59\",`\n      `no_wrapper=True %}`\n\n\nShould work where that file is called `Header.tsx`"
  },
  {
    "poster": {
      "poster_name": "George Grigorita",
      "poster_handle": "george.grigorita"
    },
    "time_stamp": "2024-01-18 07:56:27",
    "text": "Is it possible to change the graphQL query params from an island component? Specific use case: the user selects an option from a dropdown. That selected option should update the query to fetch HubDB data.",
    "reply_count": 5,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2024-01-18 07:59:32"
      },
      {
        "time_stamp": "2024-01-18 08:00:14"
      },
      {
        "time_stamp": "2024-01-18 08:02:55"
      },
      {
        "time_stamp": "2024-01-18 08:12:41"
      },
      {
        "time_stamp": "2024-01-18 09:20:56"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Chiedu Agborh",
      "poster_handle": "chiedu.agborh"
    },
    "time_stamp": "2024-01-18 07:56:59",
    "text": "ok thanks, and if i get the server rendering error, what are my options?"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-18 07:57:38",
    "text": "there should be an additional log below the server rendering error that you can expand that will show all the valid options we detect"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-18 07:59:32",
    "edited": {
      "time_stamp": "2024-01-18 07:59:44"
    },
    "text": "to keep the same graphql for a module system intact, since the request is on the server side you’ll need to kick off a new page load with maybe a query param including the user selection. that may not be ideal performance-wise for a usecase like that so you may want to swap over to client-side requests within the island based on user input after the initial server-side fetch"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-18 08:00:14",
    "edited": {
      "time_stamp": "2024-01-18 08:00:30"
    },
    "text": "it may require some sort of serverless function usage to wrap the graphql call from the client, not 100% sure"
  },
  {
    "poster": {
      "poster_name": "George Grigorita",
      "poster_handle": "george.grigorita"
    },
    "time_stamp": "2024-01-18 08:02:55",
    "text": "okay, thanks"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-01-18 08:12:41",
    "text": "Yeah calls to the public `collector` endpoint require an auth with required scopes"
  },
  {
    "poster": {
      "poster_name": "Sam Ducker",
      "poster_handle": "sam958"
    },
    "time_stamp": "2024-01-18 08:42:17",
    "text": "<@UAYBXDG4U> is it possible to clarify what the benefit of using a partial vs a module is. I couldn't really understand this from the guides linked."
  },
  {
    "poster": {
      "poster_name": "Sam Ducker",
      "poster_handle": "sam958"
    },
    "time_stamp": "2024-01-18 08:44:34",
    "text": "In the starter boilerplate I have the concept of\n\n• Templates (ok I assume this is used as the default for a page, but then you can override this with drag and drop?)\n• Modules: described as components in the docs, and seems to make sense to me\n• Sections and partials I'm not really such why you would use these? "
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-18 08:45:23",
    "text": "Originally there were some things a partial could do but a module couldn’t, but that is no longer the case.\n\nThe only real differences is how you reference then via HubL (different tags), how you define them (file vs folder, different expected `export`s), and partials cannot show up as a “thing” for someone using the page editor UI to drag into the page."
  },
  {
    "poster": {
      "poster_name": "Sam Ducker",
      "poster_handle": "sam958"
    },
    "time_stamp": "2024-01-18 08:45:29",
    "text": "Also is there any workflow where I can get hotreload / preview changes locally or do I need to manually refresh the design manager every time I make a change.\n\nI already have the watch / upload workflow going."
  },
  {
    "poster": {
      "poster_name": "Sam Ducker",
      "poster_handle": "sam958"
    },
    "time_stamp": "2024-01-18 08:46:43",
    "text": "&gt; Originally there were some things a partial could do but a module couldn’t, but that is no longer the case.\n&gt; \n&gt; The only real differences is how you reference then via HubL (different tags), how you define them (file vs folder, different expected `export`s), and partials cannot show up as a “thing” for someone using the page editor UI to drag into the page.\nSo if I want basically everything to be a thing that the content editor can reuse then I can just make essentially almost everything a module? and maybe just like the header and footer as page partials."
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-18 08:46:54",
    "text": "Yup :+1:"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-18 08:50:13",
    "text": "Re hotreload, there are some subtleties whether you are viewing `/module/…` local dev server endpoint (best/closest to real hot reloading experience I believe), vs a local “proxy” pages, vs other  (be back later, in a meeting)"
  },
  {
    "text": "Honestly I am considering just to make some html css js project atm, locally then integrate the cms in after.\n\nAs it is quite annoying workflow to have to continuously refresh the page in the design manager. So I am just wondering how I can get around that really.\n\nAlso there are all these props like this in Hubl for styling in the cms boilerplate.\n\nCan I just write regular css or tailwind and ignore having to learn all these HubSpot specific props.\n\nI just essentially want to get data from the module props and ignore the rest if possible, but I don't really have a need for a load of hubl specific styling props most likely?\n\nIf I can't is there a reference to all of these dnd_section props and such.\n\nAs it is not particularly clear from the codebase.",
    "time_stamp": "2024-01-18 08:55:17"
  },
  {
    "poster": {
      "poster_name": "George Grigorita",
      "poster_handle": "george.grigorita"
    },
    "time_stamp": "2024-01-18 09:20:56",
    "text": "I tried it like this, using a query param `country`.\n```export const query = `\n# $country_name: \"{{ request.query_dict.country }}\"\nquery CalculatorCountries($country_name: String! = \"United States\") {\n  HUBDB {\n   employment_calculator_taxes_collection(filter: {country_name__eq: $country_name }) {\n      items {\n        country_name\n      }\n    }\n  }\n}`;```\nBut `$country_name` seems to be always empty."
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-18 10:48:16",
    "text": "Docs for D&amp;D area tags (and those styling parameters) is available at <https://developers.HubSpot.com/docs/cms/hubl/tags/dnd-areas>\n\nTotally fair criticism on the workflow with HubL changes, we do have something in progress that will make that better (make some parts of HubL editing more similar to the local dev server used for React changes).\n\nYou totally can ignore D&amp;D areas, sections, section styling etc if you want. The main reason those are there is to enable re-useable sections (i.e. whole rows in a layout) to be dragged in by someone in the page editor (and give styling defaults that can be customized in the UI per page, per row). But if that is less or not a need, you can style how ever you’d like.\n\nOur docs <https://developers.HubSpot.com/docs/cms/building-blocks/templates/drag-and-drop-areas|on D&amp;D areas> and <https://developers.HubSpot.com/docs/cms/building-blocks/templates/drag-and-drop-areas/sections|D&amp;D sections> are much better at giving context. Also, if it isn’t clear our HubL docs &amp; capabilities and <https://github.HubSpot.com/cms-js-building-block-examples/|React docs &amp; capabilities> are quite distinct. At this point our React building blocks are a supplement to add in, rather than a replacement of HubL functionality."
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-01-18 10:49:03",
    "text": "I'd also offer the local CLI tool `hs watch`  command for quicker iteration when working with HubL files."
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-01-18 10:49:35",
    "text": "You give that command a local directory and a target directory in our files system, and it will auto upload the file as you make edits."
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-01-18 10:50:07",
    "edited": {
      "time_stamp": "2024-01-18 10:50:10"
    },
    "text": "though you still need to refresh any page to see changes as you make them ... it's gets you out of the Design Manager and has a more \"local dev\" feel."
  },
  {
    "text": "Though I believe if you open the “Live preview” of a template from the Design manager in a new tab…  then you can see watch changes come in live-ish (there is background polling for updates which will refresh the page)",
    "time_stamp": "2024-01-18 10:51:37"
  }
]