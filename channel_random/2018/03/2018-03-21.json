[
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-03-21 07:08:18",
    "text": "What are you all doing with retina images? Are you using them at all? Are you ignoring them? Do you have any metrics on why you should do or not do?"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2018-03-21 07:38:34",
    "text": "Hopefully you don’t need to think about them at all because automatic image resizing generates them for you"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2018-03-21 07:48:56",
    "edited": {
      "time_stamp": "2018-03-21 07:50:11"
    },
    "text": "yeah, as long as you have the width attribute on your image, the srcset autopopulates, which is pretty sweet! The only issue I've run into is when you're trying to lazy load images, the automatic srcset can cause problems"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-03-21 08:14:17",
    "edited": {
      "time_stamp": "2018-03-21 08:15:31"
    },
    "text": "<@U22PJPGK0> because you said automatic generates them for you. When you use the hubl resize image url  it will pop in the images at the sizes you define, any idea of plans to somehow detect if a user’s screen resolution is high enough for retina images, and make it so there’s a boolean in the function that if it’s known that the person’s resolution is a certain size, it will serve a higher resolution version(2x).\n\nI realize that there is some technical challenges there, like I don’t think you can detect server side screen resolution, so you’d have to use JS to log that data for future views of a site."
  },
  {
    "poster": {
      "poster_name": "Josh Ames",
      "poster_handle": "josh.ames"
    },
    "time_stamp": "2018-03-21 08:19:40",
    "text": "I know with the CTA beta I'm in that we just need to upload a high-res image into File Manager and then when the CTA renders on the page, HubSpot is automatically rending either a 1x, 2x or 4x version of the image based on the 1 image file. Not sure if this is the case with just normal images on a website though."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-03-21 08:20:04",
    "text": "<@U22PJPGK0> So should we be uploading image at the retina dpi or regular dpi to HubSpot?"
  },
  {
    "poster": {
      "poster_name": "Josh Ames",
      "poster_handle": "josh.ames"
    },
    "time_stamp": "2018-03-21 08:20:35",
    "text": "Retina is what I was told <@U25PYL3Q8>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-03-21 08:20:37",
    "text": "<@U25PYL3Q8> my experience has been upload retina, and use HS to downsize"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-03-21 08:22:35",
    "text": "Okay, that makes sense"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2018-03-21 09:07:10",
    "text": "for img tags, we automatically generate the srcsets so the browser can determine the optimal image to load give the display’s DPI"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2018-03-21 09:07:55",
    "text": "when you upload an image to File Manager, we always convert it down to 72 dpi. It’s the size that’s different for each screen resolution."
  }
]