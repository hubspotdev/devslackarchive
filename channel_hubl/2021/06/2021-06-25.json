[
  {
    "poster": {
      "poster_name": "Japo Mendoza",
      "poster_handle": "japo.mendoza"
    },
    "time_stamp": "2021-06-25 05:02:24",
    "text": "Hi how do I get the blog id",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2021-06-25 06:54:25"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Japo Mendoza",
      "poster_handle": "japo.mendoza"
    },
    "time_stamp": "2021-06-25 05:02:28",
    "text": "not the blog post id"
  },
  {
    "poster": {
      "poster_name": "Bhréin Brannick",
      "poster_handle": "bhreinb"
    },
    "time_stamp": "2021-06-25 05:09:17",
    "text": "Hello there\n\nI have a package and function like so\n```assert:equals(actual, expected)```\nthe jinjava engine is configured to throw on interpreter errors\n```jinJavaInterpreter.getContext().setThrowInterpreterErrors(true);```\nthe construct works ok for normal jinjava statements like so:\n```{{assert:equals(actual, expected)}}```\nand fires an exception to the caller however when the same statement is used within the context of a macro it does not\n```{% macro verifyEquals(actual, expected) %}\n    {{assert:equals(actual, expected)}}\n{% endmacro %}```\nthat said the `interpreter.errors` list has an entry to account for the failed validation? Do I need further configuration in order for an interpreter error in a macro to be fired? Thanks in advance.",
    "reply_count": 20,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2021-06-25 05:15:52"
      },
      {
        "time_stamp": "2021-06-25 05:23:46"
      },
      {
        "time_stamp": "2021-06-25 07:50:10"
      },
      {
        "time_stamp": "2021-06-25 08:32:13"
      },
      {
        "time_stamp": "2021-07-01 10:31:05"
      },
      {
        "time_stamp": "2021-07-02 07:38:57"
      },
      {
        "time_stamp": "2021-07-05 04:29:02"
      },
      {
        "time_stamp": "2021-07-09 05:31:17"
      },
      {
        "time_stamp": "2021-09-07 05:09:09"
      },
      {
        "time_stamp": "2021-09-07 05:10:40"
      },
      {
        "time_stamp": "2021-09-07 08:39:56"
      },
      {
        "time_stamp": "2021-09-07 09:38:23"
      },
      {
        "time_stamp": "2021-09-07 09:59:25"
      },
      {
        "time_stamp": "2021-09-07 10:03:36"
      },
      {
        "time_stamp": "2021-09-07 10:08:00"
      },
      {
        "time_stamp": "2021-09-07 10:08:17"
      },
      {
        "time_stamp": "2021-09-07 10:12:55"
      },
      {
        "time_stamp": "2021-09-07 13:24:39"
      },
      {
        "time_stamp": "2021-09-07 13:28:28"
      },
      {
        "time_stamp": "2021-09-07 16:05:56"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Bhréin Brannick",
      "poster_handle": "bhreinb"
    },
    "time_stamp": "2021-06-25 05:15:52",
    "text": "Also note we are using the macro like so\n\n```{% import 'com/&lt;companyName&gt;/macros/validation.jinja' as validation %}\n\n{{ validation.verifyEquals(\"ireland\", \"usa\") }}```\n"
  },
  {
    "poster": {
      "poster_name": "Bhréin Brannick",
      "poster_handle": "bhreinb"
    },
    "time_stamp": "2021-06-25 05:23:46",
    "text": "I’m of the thinking that the global setting\n\n```jinJavaInterpreter.getContext().setThrowInterpreterErrors(true);```\nisn’t being propagated down to child contexts perhaps?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-06-25 06:54:25",
    "text": "<@U02162GK9SP>  how to get blog id"
  },
  {
    "time_stamp": "2021-06-25 06:54:26",
    "edited": {
      "time_stamp": "2021-06-25 06:54:28"
    },
    "text": "There are few ways to get a blog's id depending on what you're trying to do. If you're building a module that uses one of the blog functions - it's recommended to use the blog field, which returns the blog id. \n\n<https://developers.HubSpot.com/docs/cms/building-blocks/module-theme-fields#blog>\n\nAdditionally you can get the blog id from the blog API or by going to the blog settings for that blog. That blog's ID will be in the URL.. It will be the second number after the account's ID.",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2021-06-25 06:54:55"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-06-25 06:54:55",
    "text": "<@U01J6V54PFH>"
  },
  {
    "poster": {
      "poster_name": "Jack Smith",
      "poster_handle": "jasmith"
    },
    "time_stamp": "2021-06-25 07:50:10",
    "text": "Yeah, that was originally added it for single expression execution, but I can make it so that it passes down to child contexts"
  },
  {
    "poster": {
      "poster_name": "Bhréin Brannick",
      "poster_handle": "bhreinb"
    },
    "time_stamp": "2021-06-25 08:32:13",
    "text": "Hi Jack thanks for the reply…yes it would be super helpful to have it passed down if you don’t mind making that change?"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2021-06-25 13:39:13",
    "text": "Did something happen recently with the HS rendering lifecycle, specifically in regards to CTAs in rich text? I used to be able to do some string manipulation on the CTA function (`{{ cta('12345678') }}`) but now I'm getting the full embed code already printed by the time my HubL runs",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2021-06-29 03:27:43"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2021-06-25 13:39:48",
    "text": "sound like the lazy loading",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2021-06-25 13:48:42"
      },
      {
        "time_stamp": "2021-06-25 14:47:38"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2021-06-25 13:48:42",
    "text": "CTAs are lazy loaded now? Not seeing anything in the changelog on that"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2021-06-25 14:47:38",
    "text": "lol.. i was just trying to derail your argument.. lol"
  }
]