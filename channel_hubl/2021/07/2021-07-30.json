[
  {
    "poster": {
      "poster_name": "Paul Cass",
      "poster_handle": "webmaster737"
    },
    "time_stamp": "2021-07-30 02:24:23",
    "text": "Hi, I was hoping someone would be able to explain to me when you’d choose a HubL tag vs a default module.\n\n`{% rich_text \"main_content\" %}`\n\nor\n\n`{% module \"main_content\" path=\"@HubSpot/rich_text\" %}`",
    "reply_count": 7,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2021-07-30 04:20:38"
      },
      {
        "time_stamp": "2021-07-30 04:26:50"
      },
      {
        "time_stamp": "2021-07-30 07:35:08"
      },
      {
        "time_stamp": "2021-07-30 07:38:06"
      },
      {
        "time_stamp": "2021-07-30 07:39:09"
      },
      {
        "time_stamp": "2021-07-30 07:48:46"
      },
      {
        "time_stamp": "2021-07-30 07:51:45"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Sami Sundberg",
      "poster_handle": "sami.sundberg"
    },
    "time_stamp": "2021-07-30 04:20:38",
    "edited": {
      "time_stamp": "2021-07-30 04:21:13"
    },
    "text": "At least in drag&amp;drop templates, you can’t use tags. I’m excited to see what other differences people have found. In my use, they have work quite similarly."
  },
  {
    "poster": {
      "poster_name": "Paul Cass",
      "poster_handle": "webmaster737"
    },
    "time_stamp": "2021-07-30 04:26:50",
    "text": "Yes that’s what’s got me a little confused about when to use each method.\n\nIt does say in the docs that most of the HubL tags have default module equivalents, and that they can be used in `dnd_area` and flexible columns, so I’m assuming tags can’t be used in those.\n\nI’m happy enough just going with the default modules but for some tags such as the `choice` tag there doesn’t seem to be a module equivalent so I guess in those situations I have to go with tags."
  },
  {
    "poster": {
      "poster_name": "Bhréin Brannick",
      "poster_handle": "bhreinb"
    },
    "time_stamp": "2021-07-30 05:54:22",
    "text": "Actually <@UCJANAW1Y> come to think I have a question regarding implementation detail now that the `set` assignment block is added. Can one have another tag construct within a  `set` assignment block?\nFor example\n```{% for %}\n  {% if %}\n  {% endif %}\n{% endfor %}```\nis supported, would something like this work with set assignment blocks?\n```{% set %}\n  {% if %}\n  {% endif %}\n{% endset %}```"
  },
  {
    "poster": {
      "poster_name": "Chris Knowles",
      "poster_handle": "chris.knowles"
    },
    "time_stamp": "2021-07-30 06:29:30",
    "edited": {
      "time_stamp": "2021-07-30 06:30:22"
    },
    "text": "Hello! Looking for some help with how to check for an item in a nested array for use in a HubDB template and append if it's not there. With a simple array I would just do something like this:\n\n```{% for row in table %}  \n  {% unless row[\"name\"] in array %} \n      {% do array.append(row[\"name\"]) %}\n  {% endunless %}\n{% endfor %}```\nHowever for this particular case I need the array to have multiple nested details against it such as:\n\n```{% set array = [\n        {\n            id: \"1\",\n            name: \"name 1\"\n        }, \n        {\n            id: \"2\",\n            name: \"name 2\"\n        }, \n        {\n            id: \"3\",\n            name: \"name 3\"\n        }\n    ] %}```\nI'm struggling to figure out how to access those name elements with a similar command to:\n\n```{% unless row[\"name\"] in array %} ```\nCould anybody point me in the right direction?",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2021-07-30 07:32:41"
      },
      {
        "time_stamp": "2021-07-30 08:06:39"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jack Smith",
      "poster_handle": "jasmith"
    },
    "time_stamp": "2021-07-30 07:26:10",
    "text": "Yep!\nIt functions very similar to setting something to the result of a macro function\n```{% macro macro_x() %}\n....\n{% endmacro %}\n{% set x = macro_x() %}```\n```{% set x %}\n....\n{% endset %}```\nWould do the same thing"
  },
  {
    "poster": {
      "poster_name": "Jack Smith",
      "poster_handle": "jasmith"
    },
    "time_stamp": "2021-07-30 07:32:41",
    "edited": {
      "time_stamp": "2021-07-30 07:33:29"
    },
    "text": "try\n```{% unless row['name'] in array|map('name') %}```"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-07-30 07:35:08",
    "text": "Most of the HubL tags were what we had prior to the module system we have now. It’s an older way of doing things before drag and drop existed.\n\nGenerally using modules is the better option. In many cases you can also clone our default modules to create your own variations.\n\nThere are some default modules that are like a proxy to the HubL tag. Even in that case they tend to work in a more consistent predictable manner across the board because they are built using the module system. So they are using module fields which have predictable structures etc."
  },
  {
    "poster": {
      "poster_name": "Paul Cass",
      "poster_handle": "webmaster737"
    },
    "time_stamp": "2021-07-30 07:38:06",
    "text": "Thanks for the clarification <@U7SL518D6> it’s exactly what I needed to know :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Paul Cass",
      "poster_handle": "webmaster737"
    },
    "time_stamp": "2021-07-30 07:39:09",
    "text": "Am I right in thinking there isn’t a default  `choice` module?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-07-30 07:48:46",
    "edited": {
      "time_stamp": "2021-07-30 07:49:22"
    },
    "text": "Correct, there isn’t. The right path to take would be to create a custom module. Drastically more versatile, you would have the ability to change the labels for the choice field, have conditional other fields, render HTML CSS or JS based on that choice field etc. It would work in dnd_area and flexible columns"
  },
  {
    "poster": {
      "poster_name": "Bhréin Brannick",
      "poster_handle": "bhreinb"
    },
    "time_stamp": "2021-07-30 07:49:08",
    "text": "That’s interesting I’m thinking now about how I could leverage that"
  },
  {
    "poster": {
      "poster_name": "Paul Cass",
      "poster_handle": "webmaster737"
    },
    "time_stamp": "2021-07-30 07:51:45",
    "text": "Yeah cool, thanks for that, still getting my head around all the terminology. HubSpot CMS is really flexible which is great, but I sometimes struggle when to reach for certain features, but I’ll get there :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Chris Knowles",
      "poster_handle": "chris.knowles"
    },
    "time_stamp": "2021-07-30 08:06:39",
    "text": "Genius! Thank you, that's exactly what I needed"
  }
]