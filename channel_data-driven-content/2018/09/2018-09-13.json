[
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-09-13 07:58:17",
    "text": "Hey <@UC2J7BPA7> sorry for the delay, we have company events going on at the moment. try this:\n```\n{% set table = hubdb_table_rows(848813, \"&amp;orderBy=resource-order\"~\"&amp;resource-type=\"~request.query_dict.type) %}\n```"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2018-09-13 09:16:36",
    "text": "Hi, is HubDB included in the Standalone CMS version ?"
  },
  {
    "poster": {
      "poster_name": "Jeffrey Vocell",
      "poster_handle": "jvocell"
    },
    "time_stamp": "2018-09-13 09:17:12",
    "text": "Yes, it's included in standalone CMS.",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2018-09-13 09:22:14"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-09-13 09:21:01",
    "text": "I’m attempting to create a table with a foreign key, but it’s not showing me any tables in the ‘select table’ dropdown"
  },
  {
    "text": "",
    "time_stamp": "2018-09-13 09:21:08"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-09-13 09:21:13",
    "text": "I have two tables"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-09-13 09:21:18",
    "text": "in hubdb"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-13 09:21:28",
    "text": "Is the other table published?"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2018-09-13 09:22:14",
    "text": "Great, amazing ! I will set my first for a client :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-09-13 09:22:46",
    "text": "it’s not published, but actually thats another question I have …"
  },
  {
    "text": "",
    "time_stamp": "2018-09-13 09:22:51"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-09-13 09:23:17",
    "text": "‘public API’ is throwing me off — does that mean anyone can access it witout authentication?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-13 09:23:45",
    "text": "The information will be public through the API"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-13 09:23:53",
    "text": "But no one can manipulate or change any data"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-13 09:24:12",
    "text": "We don't currently have the feature to have a table only accessable through HubL"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-13 09:24:26",
    "text": "But it something that I am looking at"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-09-13 09:25:10",
    "text": "i mean, the ‘API’ still needs authentication right?\nanyone off  the internet can’t just query the portal’s hub DB — is that right?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-13 09:27:14",
    "text": "Not until that information is published"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-13 09:28:12",
    "text": "With authentication, you can read tables that have not been published, and write to all tables"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-09-13 09:28:18",
    "text": "<@U38EZFVFE> is that an ecommerce site built on HubSpot COS CRM?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-13 09:28:50",
    "text": "Do you have sensitive data in this table?"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-09-13 09:29:04",
    "text": "yes."
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-09-13 09:29:12",
    "text": "so without the table’s being published, we can’t use the foreign tables?",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2018-09-13 09:32:15"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-13 09:29:14",
    "text": "No Payment Gateway. But yeah kinda"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-13 09:29:37",
    "text": "seems more like a part lookup type thing and you’d order through another method kinda deal"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-13 09:29:59",
    "text": "<@U7SL518D6> You are right"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-13 09:30:12",
    "text": "We just call it a catalog."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-13 09:30:28",
    "text": "it is pretty complex under the hood."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-13 09:30:30",
    "text": "pretty accurate description"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-13 09:30:59",
    "text": "yea based on the multiple hubdb thing I already could tell it’s gotta be a crazy beast under there"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-13 09:31:35",
    "text": "#spaghetti"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-09-13 09:31:36",
    "text": "yeah"
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-09-13 09:31:52",
    "text": "algolia for search?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-13 09:31:58",
    "text": "nope."
  },
  {
    "poster": {
      "poster_name": "Parag Jagdale",
      "poster_handle": "parag"
    },
    "time_stamp": "2018-09-13 09:32:07",
    "text": "i mean, can you solve your problem that way.?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-13 09:32:15",
    "text": "What is the use case for this table"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-13 09:44:11",
    "text": "the problame is getting all of that info into algolia or fuse.js at the same time. It is a LOT of info."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-09-13 09:44:29",
    "text": "6 DB pulling 27K lines every page load is a lot."
  },
  {
    "text": "",
    "time_stamp": "2018-09-13 12:44:38",
    "reply_count": 4,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2018-09-13 12:46:18"
      },
      {
        "time_stamp": "2018-09-13 12:47:28"
      },
      {
        "time_stamp": "2018-09-13 12:49:02"
      },
      {
        "time_stamp": "2018-09-13 13:13:34"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-09-13 12:45:28",
    "text": "^ I have a for loop where I’m checking if any of the names in a row is equal to another hubl variable. If there is a match, do X, but if there isn’t a match, I want to show something else, but I want whats in the else only to show once, not every time the forloop fails, any ideas?",
    "reply_count": 16,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-09-13 12:46:28"
      },
      {
        "time_stamp": "2018-09-13 12:47:00"
      },
      {
        "time_stamp": "2018-09-13 12:47:10"
      },
      {
        "time_stamp": "2018-09-13 12:47:30"
      },
      {
        "time_stamp": "2018-09-13 12:47:38"
      },
      {
        "time_stamp": "2018-09-13 12:48:58"
      },
      {
        "time_stamp": "2018-09-13 12:50:22"
      },
      {
        "time_stamp": "2018-09-13 12:50:40"
      },
      {
        "time_stamp": "2018-09-13 13:01:17"
      },
      {
        "time_stamp": "2018-09-13 13:02:20"
      },
      {
        "time_stamp": "2018-09-13 13:03:41"
      },
      {
        "time_stamp": "2018-09-13 13:04:10"
      },
      {
        "time_stamp": "2018-09-13 13:04:53"
      },
      {
        "time_stamp": "2018-09-13 13:05:20"
      },
      {
        "time_stamp": "2018-09-13 13:05:24"
      },
      {
        "time_stamp": "2018-09-13 13:10:32"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-13 12:46:18",
    "text": "What is `name`?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-13 12:46:28",
    "text": "is name a multiselect?"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-09-13 12:47:00",
    "text": "No, ‘name’ is just the name of the column Im looping through"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-09-13 12:47:10",
    "text": "in the database"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-09-13 12:47:28",
    "text": "Looks like a string (probably) — You can set a flag = something on the first else… being met, then check if flag == whatever each time under the else"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-13 12:47:30",
    "text": "Confused about \"any of the names in a row \" then"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-13 12:47:38",
    "text": "Shouldn't there only be one name per row"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-09-13 12:48:58",
    "edited": {
      "time_stamp": "2018-09-13 12:49:22"
    },
    "text": "Sorry, Im looping through all names in a HubDB column. The name of that column is ‘name’. If any of those names equal my variable, then I’ll execute X, if none of them are equal, then execute Y, but only execute Y once, not everytime the loop fails"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-09-13 12:49:02",
    "text": "Try this ```{% set flag = 0 %}\n{% for name in row['name'] %}                                   \n    {% if myVar == name %}\n        // show this code \n    {% else %}\n    \t{% unless flag == 1 %}\n       \t\t// nothing is equal... show this instead, but only show it once!\n       \t\t{% set flag = 1 %}\n       \t{% endunless %}\n    {% endif %}    \n{% endfor %}```"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-13 12:50:22",
    "text": "A column doesn't have any values associated with it, it just defines the structure of the table"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-13 12:50:40",
    "text": "Each row will have a value for that column"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-09-13 13:01:17",
    "text": "I’m running through each row, and checking only the name column"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-13 13:02:20",
    "text": "Ok you will want to do `rows|selectattr(\"name\", value)`"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-13 13:03:41",
    "text": "Which will return all rows with a name = to the desired value"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-09-13 13:04:10",
    "text": "Can you show how that would be used in this instance?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-13 13:04:53",
    "text": "`{% if rows|selectattr(\"name\", value)|length &gt; 0 %}`"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-13 13:05:20",
    "text": "Assuming you already have all your rows loading it"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-13 13:05:24",
    "text": "*in"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-09-13 13:10:32",
    "text": "That doesnt seem to be working either, ill link the code outside of this"
  },
  {
    "text": "This is the full loop <@U6GNQ7JBU>",
    "time_stamp": "2018-09-13 13:11:48",
    "reply_count": 11,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2018-09-13 13:17:03"
      },
      {
        "time_stamp": "2018-09-13 13:17:59"
      },
      {
        "time_stamp": "2018-09-13 13:18:36"
      },
      {
        "time_stamp": "2018-09-13 13:18:50"
      },
      {
        "time_stamp": "2018-09-13 13:19:37"
      },
      {
        "time_stamp": "2018-09-13 13:19:53"
      },
      {
        "time_stamp": "2018-09-13 13:20:05"
      },
      {
        "time_stamp": "2018-09-13 13:20:16"
      },
      {
        "time_stamp": "2018-09-13 13:20:41"
      },
      {
        "time_stamp": "2018-09-13 13:34:57"
      },
      {
        "time_stamp": "2018-09-14 08:41:10"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-09-13 13:13:34",
    "text": "This doesnt seem to work either <@U4RP6AGV9>"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-09-13 13:17:03",
    "text": "What I don’t understand is why you have an issue with the else condition firing multiple times. Can you describe the actual use case… I see “Author” , are you checking for an author and if there isn’t one you want it to show some default value?"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-09-13 13:17:59",
    "text": "Yes"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-09-13 13:18:36",
    "text": "The reason it’s firing multiple times is that you’re checking EVERY row in your results from the table"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-09-13 13:18:50",
    "text": "add a query to the hubdb_table_rows() call"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-09-13 13:19:37",
    "text": "```{% set teamAuthor = hubdb_table_rows(1111111,\"&amp;name=\"~MyVar)[0] %}```"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-09-13 13:19:53",
    "text": "^^ in the above, it asks for rows where name equals your variable"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-09-13 13:20:05",
    "text": "there is a chance it will return multiple rows, so the [0] will take the FIRST result"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-09-13 13:20:16",
    "text": "you really don’t need a for loop at all"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-09-13 13:20:41",
    "text": "you just need to check that the teamAuthor variable has a value, and if it doesn’t… return your default “no author” text"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-09-13 13:22:10",
    "edited": {
      "time_stamp": "2018-09-13 13:22:32"
    },
    "text": "<@U7AU6414J> try this ```{% set MyVar = 'cookie' %}\n{% set teamAuthor = hubdb_table_rows(1111111,\"&amp;name=\"~MyVar)[0] %}\n{% if teamAuthor is mapping %}\n\t{# render your author stuff... most likely teamAuthor.name #}\n{% else %}\n\t{# your default no author stuff #}\n{% endif %}```",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-09-13 13:24:03"
      },
      {
        "time_stamp": "2018-09-13 13:24:29"
      },
      {
        "time_stamp": "2018-09-13 13:25:05"
      },
      {
        "time_stamp": "2018-09-13 13:25:51"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-09-13 13:24:03",
    "text": "Dumb question, what is the ‘is mapping’?"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-09-13 13:24:29",
    "edited": {
      "time_stamp": "2018-09-13 13:24:37"
    },
    "text": "checks if it’s a dictionary object that is able to be read"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-09-13 13:25:05",
    "text": "<https://designers.HubSpot.com/docs/hubl/operators-and-expression-tests#mapping>"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-09-13 13:25:51",
    "text": "in this case, if the hubdb call returns a valid row, it will be “True” otherwise it will return false"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-09-13 13:34:57",
    "text": "`{% set hasAuthor = hubdb_table_rows(1111111,\"&amp;name=\"~MyVar~\"&amp;limit=1\")|length == 1 %}`"
  }
]