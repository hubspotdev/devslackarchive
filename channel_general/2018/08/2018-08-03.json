[
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-08-03 02:10:44",
    "text": "fly included? :joy:"
  },
  null,
  {
    "poster": {
      "poster_name": "Furqan Asghar",
      "poster_handle": "mfa213"
    },
    "time_stamp": "2018-08-03 06:09:04",
    "text": "Is it possible to upload a file at the root domain and be able to access it ? I'm trying to verify my Facebook business manager page access and doing it via uploading html file coz I don't have access to domain hosting"
  },
  {
    "poster": {
      "poster_name": "Furqan Asghar",
      "poster_handle": "mfa213"
    },
    "time_stamp": "2018-08-03 06:09:34",
    "text": "So I need to access this file via my <http://domain.com/fb-file.html|domain.com/fb-file.html>"
  },
  {
    "poster": {
      "poster_name": "Furqan Asghar",
      "poster_handle": "mfa213"
    },
    "time_stamp": "2018-08-03 06:09:57",
    "text": "Or would a 301 work in this case if it's not possible ?"
  },
  {
    "text": "Hey Guys, I need some help. I'm still new to the designer and stuff so and I'm pretty sure, that I'm doing something wrong.\n\nI have a form that I wanna style  and I need to style the form tag specifically. Styling the label and the input fields works fine but I'm not able to make changes to the outer part. Any suggestions?",
    "time_stamp": "2018-08-03 07:37:58"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-03 07:39:23",
    "text": "what you’re doing should work - you can see the classes that HubSpot injects using the previewer so you can get more control"
  },
  {
    "poster": {
      "poster_name": "Christoph Klepke",
      "poster_handle": "christoph.klepke"
    },
    "time_stamp": "2018-08-03 07:40:17",
    "text": "Had the idea, too"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-03 07:41:23",
    "text": "kind of related, I see in your css all your code appears to really be doing is lining the form field wrappers up vertically, and matching their width. (that is assuming that .hs-form is right before the field wrapper classes, I think there’s actually a form of row class if I rember right just before that"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-03 07:41:48",
    "text": "so you might not be targeting the children you’re intending to change\n\n(that sentence on it’s own sounds really weird)"
  },
  {
    "poster": {
      "poster_name": "Christoph Klepke",
      "poster_handle": "christoph.klepke"
    },
    "time_stamp": "2018-08-03 07:42:42",
    "text": "Thanks for the help Jon. Really appreciate it. Just need a moment to process what you are saying :see_no_evil: hold on...."
  },
  {
    "poster": {
      "poster_name": "Christoph Klepke",
      "poster_handle": "christoph.klepke"
    },
    "time_stamp": "2018-08-03 07:43:52",
    "text": "So yeah... lining everything up is exactly the intention"
  },
  {
    "text": "I think that I'm targeting the right element ... but I'm not so sure",
    "time_stamp": "2018-08-03 07:47:08"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-03 07:47:15",
    "edited": {
      "time_stamp": "2018-08-03 07:47:33"
    },
    "text": "if you’re using the HS boilerplate as a starting point, you shouldn’t actually need to do that, because they will already be lined up and the fieldsets are block elements so they’re already 100% width.  so that css wouldn’t really do anything too noticeable other than maybe add spacing at the top and bottom of the form is what I’m getting at."
  },
  {
    "poster": {
      "poster_name": "Christoph Klepke",
      "poster_handle": "christoph.klepke"
    },
    "time_stamp": "2018-08-03 07:49:13",
    "text": "The problem I think I could encounter here is, that we have other forms on the website that are styled differently (an agency did them for us). As far as I understand, using or changing the boilerplate would result in changes across all other forms, right?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-03 07:51:04",
    "text": "you are correct, unless you use a wrapper class like you’re using now, to make your specific tweaks for this form yes"
  },
  {
    "poster": {
      "poster_name": "Christoph Klepke",
      "poster_handle": "christoph.klepke"
    },
    "time_stamp": "2018-08-03 07:52:05",
    "text": "At least I made the right assumptions lol"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-03 07:52:23",
    "text": "what I’m getting at though is the css you added, if the site is using the default form styles from the boilerplate for the structure of the form, then your css will not do anything significant that you can see."
  },
  {
    "poster": {
      "poster_name": "Christoph Klepke",
      "poster_handle": "christoph.klepke"
    },
    "time_stamp": "2018-08-03 07:54:36",
    "text": "Thanks for your patience with me, Jon. Just so understand correctly: The way I do it now doesn't really _override_ the settings made in the boilerplate"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-03 07:57:19",
    "edited": {
      "time_stamp": "2018-08-03 07:58:31"
    },
    "text": "uh let me clarify - what you are doing the styles you’re adding simply tell the browser to lay those fields out, basically in the way they already will be (in a column, with equal widths) The boilerplate already does that but without using flexbox.\nIf you added styles that caused something different appearance wise like say a background color, it will only affect the form you’re working on, not the rest of the site.",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2018-08-03 10:12:14"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Christoph Klepke",
      "poster_handle": "christoph.klepke"
    },
    "time_stamp": "2018-08-03 07:57:29",
    "text": "We have a .css file in our file manager just for forms. With this :\n\n```form {\n  max-width: 800px;\n  margin: auto;\n  display: flex;\n  flex-direction: column;\n}```\n\nDeleted my bit I had before... no change"
  },
  {
    "poster": {
      "poster_name": "Emeline Bulcourt",
      "poster_handle": "emeline_impala"
    },
    "time_stamp": "2018-08-03 08:26:38",
    "text": "Hey there! Is there a way to know which page a visitor comes from just before submitting a contact form, and register this data as a hidden field in the contact form ? we have several “product” pages, all leading to the same contact form, but we’d like to know which product our visitor is contacting us about."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-03 08:28:10",
    "text": "The CTA on your product pages should be tracking that right?"
  },
  {
    "poster": {
      "poster_name": "Emeline Bulcourt",
      "poster_handle": "emeline_impala"
    },
    "time_stamp": "2018-08-03 08:30:37",
    "text": "we’re not using HubSpot CTAs on the product pages actually (we have a lot of products, and we thought it would be a big work to create one for each, but there may be a better way I guess...)"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-03 08:35:40",
    "text": "You could use local storage to snag the url on the product pages then access it on your contact page. Are you familiar with local storage?"
  },
  {
    "poster": {
      "poster_name": "Emeline Bulcourt",
      "poster_handle": "emeline_impala"
    },
    "time_stamp": "2018-08-03 08:37:49",
    "text": "absolutely not, but I will check the documentation if there’s one :wink:"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-03 08:38:03",
    "text": "It’s fun and easy! I’ll show you an example"
  },
  {
    "poster": {
      "poster_name": "Emeline Bulcourt",
      "poster_handle": "emeline_impala"
    },
    "time_stamp": "2018-08-03 08:38:38",
    "text": ":pray: thanks a lot"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-03 08:40:00",
    "text": "So on the product pages you would have something like ```localStorage.setItem('product-page-url',window.location.href);```",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-08-03 10:12:54"
      },
      {
        "time_stamp": "2018-08-03 10:20:01"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-03 08:41:11",
    "text": "That will create a property called product-page-url in the user’s local storage and set the value to their current url"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-03 08:41:56",
    "text": "Then when they go to the next page you can snag that property using ```localStorage.getItem('product-page-url');```"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-03 08:43:30",
    "text": "Then you could do something like,\n```if(localStorage.getItem('product-page-url') != null){\n    var productURL = localStorage.getItem('product-page-url');\n    $('.hidden-field').val(productURL);\n}```"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-03 08:46:26",
    "text": "^ that would be on the contact form page"
  },
  {
    "poster": {
      "poster_name": "Emeline Bulcourt",
      "poster_handle": "emeline_impala"
    },
    "time_stamp": "2018-08-03 08:53:50",
    "text": "alright! Great! Can I find somewhere what kind of values am I able to store? If I want to store another type of information? (not the url for instance, but the page title or something else?)"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-03 08:55:10",
    "text": "You can get the title with ```document.title```"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-03 08:55:58",
    "text": "The information that it stores always comes out as a string so be aware of that if you’re ever using it to grab booleans or numbers or whatever"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-03 08:58:34",
    "text": "Also with local storage the values remain until cleared manually so if you want something to expire (like if the same user is engaging with your site many times and the locally stored value might feed false data to your form) you could consider using session storage or a cookie which work pretty similarly.",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-08-03 09:02:59"
      },
      {
        "time_stamp": "2018-08-03 09:04:00"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-08-03 09:01:15",
    "text": "For Blog listing pages and their canonicals, i know there are currently two options in HS to set these:\n- Set each listing to its first page in series\n- dont add canonical to any listing pages\n\nIs it possible to get a 3rd option allows the canonical of the page to be set to itself for each page in its listing? According to Yoast: <https://yoast.com/pagination-seo-best-practices/> \n&gt;Google is very clear now: each page within a paginated series should canonicalize to itself, so /page/2/ has a canonical pointing to /page/2/."
  },
  {
    "poster": {
      "poster_name": "Emeline Bulcourt",
      "poster_handle": "emeline_impala"
    },
    "time_stamp": "2018-08-03 09:02:59",
    "text": "Alright, thank you so much <@U26DA9CQ0>!"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-03 09:04:00",
    "text": "You’re welcome <@U4F0XJWGM>!"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-08-03 09:18:49",
    "edited": {
      "time_stamp": "2018-08-03 09:19:34"
    },
    "text": "I've got a project where a client wants six blogs aimed at different audiences (US/New Zealand/Australia and an \"agent blog\" and a \"consumer blog\" for each), but some of the blogs share posts (like an agent post might be posted to both Australia and New Zealand, but not to the US). It would be nice if we could have one blog that is filtered, but we don't want the urls to include /topic/, we want each one to appear as a blog home page. My first thought was to do blog_recent_topic_posts to build a feed, but that's limited to 100 posts and they have more than that."
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-08-03 09:19:02",
    "text": "Any other ideas on how I could accomplish something like this?"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-08-03 09:20:50",
    "text": "My other thought was to use the blog posts api, but that's a whole can of worms"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-08-03 09:21:25",
    "text": "It would be nice if there was something like `get_posts` in Wordpress, where I could just pull posts from a blog with a more complete set of filter arguments."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-03 09:23:22",
    "text": "I think I was talking to someone about this yesterday but I’ve handled something similar by having the multi-lingual content all on the same page but show/hide certain stuff based on url/local storage values."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-03 09:24:01",
    "text": "It wasn’t an entire blog post, just some trust mark stuff so I’m not sure how that may affect SEO"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-03 09:24:28",
    "text": "Also it doesn’t really help if you want the same post to have different URLs based on the language"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-03 09:25:17",
    "text": "But it can be nice from the content creator’s perspective because they can have all of their content in one place"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-08-03 09:25:59",
    "text": "I don't think we need to worry about the urls on blog posts, just as long as the links on the page go back to the blog the user came from"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-08-03 09:26:03",
    "text": "And I can think of ways to do that"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-08-03 09:27:42",
    "text": "The only real problem is getting the dang posts"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-08-03 09:29:05",
    "text": "On an actual blog page I think you can get up to something like 10000 (I tested this once), but then we'd have to use query strings in the url or something to hide the posts for the other audiences, and that's not ideal."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-03 09:40:50",
    "text": "Yeah that’s a pain. I think we did something at one point where we snagged posts with AJAX for a ‘load more’ style pagination but it was a while back"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-03 09:41:42",
    "text": "maybe you could do something like that where the posts are tagged with a language unless they don’t have a variant, in which case it becomes a default"
  },
  {
    "poster": {
      "poster_name": "Luke Summerfield",
      "poster_handle": "lukesummerfield"
    },
    "time_stamp": "2018-08-03 10:11:22",
    "text": "haha I wish. Maybe someday :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Luke Summerfield",
      "poster_handle": "lukesummerfield"
    },
    "time_stamp": "2018-08-03 10:12:14",
    "text": "LOVE LOVE LOVE the help and leadership here Jon! Thanks for helping share the wisdom :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Luke Summerfield",
      "poster_handle": "lukesummerfield"
    },
    "time_stamp": "2018-08-03 10:12:54",
    "text": "THANK YOU FOR HELPING - this is great stuff Pete. Great to see you helping lead the community and share knowledge. Keep going!"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-03 10:20:01",
    "text": "Happy to help! :slightly_smiling_face:"
  },
  null,
  null,
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-03 14:53:03",
    "text": "Anyone have much experience with doing a multi-lingual HS site?\n\nthe design I’m working with doesn’t lend itself quite well enough to work easily with the default language switcher module. Anyone know what the language switcher’s links look like (since I don’t have multi-lingual set up yet i can’t see the links)",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2018-08-04 05:38:30"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-03 14:53:47",
    "text": "basically I just want to know if it’s just adding a query param to the URL or if it adds a language path to the url  like <http://example.com/de/|example.com/de/>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-03 14:55:00",
    "text": "ideally i want to add the links to a dropdown in a menu"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-03 15:14:12",
    "text": "I think I used the baked in language selector for <http://talmundo.com|talmundo.com>"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-03 15:14:55",
    "text": "```&lt;span id=\"hs_cos_wrapper_language_switcher\" class=\"hs_cos_wrapper hs_cos_wrapper_widget hs_cos_wrapper_type_language_switcher\" style=\"\" data-hs-cos-general-type=\"widget\" data-hs-cos-type=\"language_switcher\"&gt;&lt;div class=\"lang_switcher_class\"&gt;\n&lt;div class=\"globe_class\" onclick=\"\"&gt;\n&lt;ul class=\"lang_list_class\"&gt;\n&lt;li&gt;\n&lt;a class=\"lang_switcher_link\" data-language=\"en\" href=\"<https://www.talmundo.com>\" style=\"background-image: url(&amp;quot;https://www.talmundo.com/hubfs/Website_Assets/Images/lang-en.png&amp;quot;);\"&gt;English&lt;/a&gt;\n&lt;/li&gt;\n&lt;li&gt;\n&lt;a class=\"lang_switcher_link\" data-language=\"fr\" href=\"<https://www.talmundo.com/fr/>\" style=\"background-image: url(&amp;quot;https://www.talmundo.com/hubfs/lang-fr.png&amp;quot;);\"&gt;Français&lt;/a&gt;\n&lt;/li&gt;\n&lt;li&gt;\n&lt;a class=\"lang_switcher_link\" data-language=\"nl\" href=\"<https://www.talmundo.com/nl/>\" style=\"background-image: url(&amp;quot;https://www.talmundo.com/hubfs/Website_Assets/Images/lang-nl.png&amp;quot;);\"&gt;Nederlands&lt;/a&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;\n&lt;/div&gt;&lt;/span&gt;```"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-03 15:46:41",
    "text": "ahhh, thank you for pasting that that answered my question exactly"
  },
  {
    "poster": {
      "poster_name": "Steve Kenley",
      "poster_handle": "skenley"
    },
    "time_stamp": "2018-08-03 15:54:53",
    "text": "How can I get the url to a page, if I have the page id?"
  },
  {
    "poster": {
      "poster_name": "Steve Kenley",
      "poster_handle": "skenley"
    },
    "time_stamp": "2018-08-03 16:01:40",
    "text": "I've tried this:\n```\n{% set page = page_by_id(xxxxxxx) %}\n{% set url = page.absolute_url %}\n```\nWhich returns <HTTPS://WWW.YOUTHRANCH.ORG/-TEMPORARY-SLUG-C90D3961-8D76-44A5-856F-46F43A60D831>, and results in a 404."
  },
  {
    "poster": {
      "poster_name": "Steve Kenley",
      "poster_handle": "skenley"
    },
    "time_stamp": "2018-08-03 16:28:10",
    "text": "Found the problem. ^^ the pages I was testing against were all unpublished. Might be a good idea to limit the list of pages in a page field, to pages that are actually published."
  },
  null
]