[
  {
    "poster": {
      "poster_name": "Ahmed Jamal Tariq",
      "poster_handle": "ahmed.jamal.tariq"
    },
    "time_stamp": "2023-10-03 01:32:01",
    "text": "How can we add `HelpText` or `InlineHelpText` to the fields in `Fields.jsx`?",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-10-03 06:13:34"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Goran",
      "poster_handle": "goran.berggren"
    },
    "time_stamp": "2023-10-03 06:13:34",
    "text": "inlineHelpText=“”"
  },
  {
    "text": "How do we use `HubdbRowField` &amp; `HubdbTableField` ? both causes build error",
    "time_stamp": "2023-10-03 06:15:14",
    "reply_count": 10,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-10-03 06:35:29"
      },
      {
        "time_stamp": "2023-10-03 06:36:51"
      },
      {
        "time_stamp": "2023-10-03 06:36:52"
      },
      {
        "time_stamp": "2023-10-03 06:37:10"
      },
      {
        "time_stamp": "2023-10-03 06:56:20"
      },
      {
        "time_stamp": "2023-10-06 03:06:35"
      },
      {
        "time_stamp": "2023-10-06 07:30:30"
      },
      {
        "time_stamp": "2023-10-06 08:57:21"
      },
      {
        "time_stamp": "2023-10-06 14:21:35"
      },
      {
        "time_stamp": "2023-10-10 07:08:39"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Marcus Shannon",
      "poster_handle": "mshannon"
    },
    "time_stamp": "2023-10-03 06:35:29",
    "text": "I think you may have a typo here:\nShould be: `HubDbTableField` &amp; `HubDbRowField`"
  },
  {
    "text": "Ah okay, then there's a typo in the documentation as well since we just copied it from there :slightly_smiling_face:",
    "time_stamp": "2023-10-03 06:36:51"
  },
  {
    "poster": {
      "poster_name": "Marcus Shannon",
      "poster_handle": "mshannon"
    },
    "time_stamp": "2023-10-03 06:36:52",
    "text": "I see that it's incorrect in our docs, will update"
  },
  {
    "poster": {
      "poster_name": "Marcus Shannon",
      "poster_handle": "mshannon"
    },
    "time_stamp": "2023-10-03 06:37:10",
    "text": "Thanks for report!"
  },
  {
    "poster": {
      "poster_name": "Ulrika Alm",
      "poster_handle": "ulrika.alm"
    },
    "time_stamp": "2023-10-03 06:56:20",
    "text": "How do we use the `HubDbTableField` to loop through the rows?"
  },
  {
    "poster": {
      "poster_name": "Ahmed Jamal Tariq",
      "poster_handle": "ahmed.jamal.tariq"
    },
    "time_stamp": "2023-10-03 07:11:25",
    "text": "The `inlineHelpText` is not working on the `FieldGroup` and `RepeatFieldGroup`. It only works on individual fields in `fields.jsx` file. When can we expect it to work on `FieldGroup` .etc as well? :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Marcelo Candil",
      "poster_handle": "marcelo.candil"
    },
    "time_stamp": "2023-10-03 07:14:31",
    "text": "Thanks for the response Ben, I think I’m going with the approach of placing the svg inside a react component, since manipulating the styles in an img tag is not the best."
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-03 11:27:59",
    "text": ":+1: just as a note we don’t currently support developers adding in their own vite plugins but may in the future"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-10-03 12:24:55",
    "edited": {
      "time_stamp": "2023-10-03 12:25:15"
    },
    "text": "I'm also interested in the ability to import svg markup directly and not having to make it react. Agreed that img is not the best..."
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-10-03 12:27:32",
    "text": "They are portable, it's really more of CSS variables being available to the module within the iframe. That's pretty much what constitutes global, as well as a pared down normalize which I can work around."
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-10-03 12:30:45",
    "text": "I think a lot of devs will have a similar approach given that the current dev xp for production pages leverages hubl and not a full SSR SPA"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-10-03 12:30:55",
    "text": "(if that makes sense)"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-03 12:32:58",
    "text": "yeah that does make sense - would integrating JS modules/partials into themes solve some of that problem?"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-03 12:33:24",
    "text": "so that that configuration is available to use directly, and i think also making sure those CSS variables are already in place could be something that the dev server could handle for you"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-03 12:34:15",
    "text": "i’m not totally ruling out custom decorators, but want to nail down the exact use cases"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-10-03 12:36:02",
    "text": "So currently i've got a base hubl template where I dump a styles partial w/ those variables and normalize (i.e. global styles) - works well.\n\nI'd simply like to mimic that within storybook 1:1. I'm not tied to any specific approach, just getting creative due to current constraints."
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-10-03 12:36:44",
    "text": "So it's both css variable + some global styles"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-10-03 12:37:02",
    "text": "variables being the key"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-03 12:38:28",
    "text": ":thank-you: makes sense. i think there may be some future where rather than dumping those in a hubl template that could be more directly integrated into a theme configuration, and if react modules could be included in themes then they could more directly pick those up rather than relying on just being on the same page as the template"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-03 12:38:35",
    "edited": {
      "time_stamp": "2023-10-03 12:38:40"
    },
    "text": "and the same could be true for storybook views"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-03 12:39:57",
    "text": "in the meantime, are you relying on the server rendering behavior that `moduleStoryWithIsland` gets you in storybook? or would `moduleStory` work just as well"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-10-03 12:40:02",
    "text": "Ya, that'd be ideal as currently trying our best to keep as much within the js app, but need to obviously leverage hubl"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-10-03 12:41:48",
    "text": "&gt; are you relying on the server rendering behavior\nNot particularly, just noticed they don't work at parity for this use-case w/ decorators"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-10-03 12:43:04",
    "text": "We're using it really as QA/Testing and a visual repository of both components and the modules that use them. We've got everything from base button elements to full components comprising of many elements and other components"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-03 12:44:00",
    "edited": {
      "time_stamp": "2023-10-03 12:44:15"
    },
    "text": "in the short term then you should be able to do something like\n```export const MyStory = {\n...moduleStory(...),\ndecorators: StorybookCommonDecorators,\n}```"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-10-03 12:44:01",
    "text": "(I mostly noticed this cause we had the todo example that you guys built, and it wasn't getting global styles applied)"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-03 12:44:33",
    "text": "good catch!"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-10-03 12:48:07",
    "text": "I'll try the above"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-10-03 12:48:36",
    "text": "I must just not use `moduleStoryWithIsland` at all. Not sure what the benefits are with our usecases"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-03 12:49:34",
    "text": "yeah the main issues are if you have complicated client side effects they may run more often than you expect, or if you have specific usage of SSR lifecycle related hooks: `useIsAfterHydration` etc"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-03 12:49:54",
    "text": "`usePageUrl` behavior is also different but also was never going to work great in a storybook context"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-03 12:50:48",
    "text": "the entire tree gets run in the client, regardless of island boundaries, so if your components make assumptions about being on the server, then that could behave differently"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-10-03 12:50:51",
    "text": "Ahh. So really more QA of the island bahaviour"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-03 12:51:23",
    "text": "if you don’t have a strong need for it i would say avoid `moduleStoryWithIsland`, because that correctness comes at the cost of hot reloading"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-10-03 12:52:03",
    "text": "some WIP docs here: <https://github.com/HubSpot/cms-js-building-block-examples/pull/25/files#diff-e210870c197f23a0840de87fbe37e0803aaa4c48ac5108fb14e2bcee8855199bR489>"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-10-03 12:52:16",
    "text": "Ya, I guess if we've got complicated components/modules we could have instances that use both for QA/testing"
  }
]