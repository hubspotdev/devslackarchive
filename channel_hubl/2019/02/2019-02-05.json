[
  {
    "poster": {
      "poster_name": "Moadh Agoubi",
      "poster_handle": "moadh"
    },
    "time_stamp": "2019-02-05 02:25:34",
    "text": "HubSpot should not accept AMP tags"
  },
  {
    "poster": {
      "poster_name": "Moadh Agoubi",
      "poster_handle": "moadh"
    },
    "time_stamp": "2019-02-05 02:26:22",
    "text": "It will have to be confirmed on HubSpot, if it is"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-02-05 02:28:42",
    "text": "you can try wrapping it with\n`{% raw %}`\n`{% endraw %}`\nbut not sure if that will work tho"
  },
  {
    "poster": {
      "poster_name": "mvillalobos",
      "poster_handle": "mvillalobos"
    },
    "time_stamp": "2019-02-05 08:42:58",
    "text": "how would I share that info? It's in a client portal"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-02-05 08:53:13",
    "text": "The hubl expression you are using and why the output isn’t what you expect"
  },
  {
    "poster": {
      "poster_name": "mvillalobos",
      "poster_handle": "mvillalobos"
    },
    "time_stamp": "2019-02-05 09:02:14",
    "text": "The expression is:\n`&lt;div class=\"case-studiebg\" style=\"background-image:url({{ item.field_group.team_box_image.src|replace('hubfs','hub/285855/hubfs') }}?height=267)\"&gt;&lt;/div&gt;`\n\nIn other instances the \"hubs\" is replaced correctly so the image can be uploaded as the correct resize, in this instance it is not replacing and the \"hubfs\" still appears in the live html"
  },
  {
    "poster": {
      "poster_name": "mvillalobos",
      "poster_handle": "mvillalobos"
    },
    "time_stamp": "2019-02-05 09:33:29",
    "text": "Forgot to mention also tried to replace with `hs-fs/hubfs` and that also didn't work"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-02-05 09:37:27",
    "text": "Can you DM me the example?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-02-05 09:37:37",
    "text": "Of this not working"
  },
  {
    "poster": {
      "poster_name": "mvillalobos",
      "poster_handle": "mvillalobos"
    },
    "time_stamp": "2019-02-05 09:53:19",
    "text": "sure thing, sending now"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-05 10:18:15",
    "text": "<@U6GNQ7JBU> checking in, has this started rolling out yet?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-02-05 10:23:34",
    "text": "It should be deployed"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-02-05 10:23:43",
    "text": "If it doesn’t work let me know"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-05 10:25:13",
    "text": "<https://spin.d.pr/Xsxezs+>\n\n<https://spin.d.pr/yqiLbp+>\n\n<https://spin.d.pr/lY4edk+>\n\nI can DM the file link if that helps"
  },
  {
    "poster": {
      "poster_name": "Ben Fitzgerald",
      "poster_handle": "ben.f"
    },
    "time_stamp": "2019-02-05 10:26:47",
    "text": "Hey is there a way to get the markup of a form you’ve created? - I want to add boostrap classes to things and structure it slightly different to what’s outputted",
    "reply_count": 7,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-02-05 10:29:11"
      },
      {
        "time_stamp": "2019-02-05 10:29:45"
      },
      {
        "time_stamp": "2019-02-05 10:29:47"
      },
      {
        "time_stamp": "2019-02-05 10:30:00"
      },
      {
        "time_stamp": "2019-02-05 10:31:35"
      },
      {
        "time_stamp": "2019-02-05 10:32:04"
      },
      {
        "time_stamp": "2019-02-05 10:33:07"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-05 10:29:11",
    "text": "no, the HubL generates a script tag to be inserted. the script tag generates the html and is a react instance"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-05 10:29:45",
    "text": "you can’t easily manipulate it’s html but you can still use css to style it, and if you absolutely have to have it look a special way you can use a dummy form and map the fields"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-05 10:29:47",
    "text": "only way to do this would be JS to remove default classes and add classes onto the form"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-05 10:30:00",
    "text": "which is a HUGE pain"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-05 10:31:35",
    "text": "well i mean if you want to remove the default classes they have a thing to strip  default styling now, still has the structure classes I think though"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-05 10:32:04",
    "text": "correct, it will remove the stylesheet reference but classes stay :disappointed:"
  },
  {
    "poster": {
      "poster_name": "Ben Fitzgerald",
      "poster_handle": "ben.f"
    },
    "time_stamp": "2019-02-05 10:33:07",
    "text": "Thanks, I have a form layout request with two columns, fine…. then a header to each of the columns (not sure if possible) given the form builder maybe the HubL ref?\n\nThen one field on the left column not to spread over the two guess I’d need to work of the standard structure classes and adjust with css nth-child etc"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-02-05 10:53:02",
    "text": "Remove the quotes around 10000"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-02-05 10:53:18",
    "text": "Since you are formatting a number not a string"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-05 11:27:52",
    "text": "ahh derp that should have been obvious to me"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-05 11:28:02",
    "text": "Thank you Matt"
  }
]