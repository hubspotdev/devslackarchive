[
  {
    "text": "Hi guys, any idea how to fix the placement? I tried this code but it doesn't work. <https://news.walpolepartnership.com/> . I'm referring to Popular tab post.\nli .hs-postlisting-item {\n  display:flex !important;\n  padding:25px!important;\n}\n\nli .hs-postlisting-item a {\n  flex-basis:68%;\n  align-self: baseline!important;\n}",
    "time_stamp": "2018-08-28 01:33:22"
  },
  {
    "poster": {
      "poster_name": "Alexander Hjelmqwist",
      "poster_handle": "alexander.hjelmqwist"
    },
    "time_stamp": "2018-08-28 03:30:36",
    "text": "<@UAWS6182Z> Using Flex-box it can help to use max-width. If you want it to look like the recent posts i'd try working with: width: 40%; and float: left; as it is set in the recent posts and skipping the ul li replacing them with a div container for the &lt;img&gt; and &lt;a&gt;.",
    "reply_count": 2,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2018-08-28 04:39:26"
      },
      {
        "time_stamp": "2018-08-28 05:20:31"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Alexander Hjelmqwist",
      "poster_handle": "alexander.hjelmqwist"
    },
    "time_stamp": "2018-08-28 03:31:43",
    "text": "Look at the markup for the recent post tab and copy that for the popular post listing"
  },
  {
    "text": "hey there! i built a little form for our blog, and attached it to the blog's banner section (which is a custom module) via a HUBL `{% form %}` tag. i would love for the submit button to appear to the right of the email field, not below it. is there a way of achieving this, either via the form designer or through clever styling? we came up with a pretty shaky solution using jquery, but i'd rather have a more canonical solution.  i've also tried creating a multi-column form using the form builder, but the submit button itself can't be dragged into the second column. any pointers appreciated, thanks!",
    "time_stamp": "2018-08-28 03:59:57",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2018-09-03 09:54:21"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Angelic Sanoy",
      "poster_handle": "angie"
    },
    "time_stamp": "2018-08-28 04:39:26",
    "text": "Thank you Alex. Would that be\n\nli .hs-postlisting-item img {\n  float: left;\n}\n\nli .hs-postlisting-item a{\n  float: right;\n}"
  },
  null,
  {
    "poster": {
      "poster_name": "Angelic Sanoy",
      "poster_handle": "angie"
    },
    "time_stamp": "2018-08-28 05:20:31",
    "text": "It's fixed now. Thank u so much again Alex!"
  },
  null,
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-28 09:47:57",
    "text": "Any ideas on how I could get this working? I have a HubDB table of events and I need to pull the first one whose date is still in the future. This isn’t working but shows what I’m thinking:\n```\n{% set events = hubdb_table_rows(849008,\"&amp;orderBy=event_date\") %}\n{% set time_now = local_dt|datetimeformat('%e %B %Y') %}\n        {% for event in events|selectattr(\"time_now is &gt; event.event_date\") %}\n        \t{% if loop.first %}\n```",
    "reply_count": 25,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-08-28 09:50:06"
      },
      {
        "time_stamp": "2018-08-28 09:50:56"
      },
      {
        "time_stamp": "2018-08-28 09:51:31"
      },
      {
        "time_stamp": "2018-08-28 09:53:57"
      },
      {
        "time_stamp": "2018-08-28 09:55:05"
      },
      {
        "time_stamp": "2018-08-28 09:55:37"
      },
      {
        "time_stamp": "2018-08-28 09:56:36"
      },
      {
        "time_stamp": "2018-08-28 10:01:03"
      },
      {
        "time_stamp": "2018-08-28 10:10:54"
      },
      {
        "time_stamp": "2018-08-28 10:13:24"
      },
      {
        "time_stamp": "2018-08-28 10:48:14"
      },
      {
        "time_stamp": "2018-08-28 10:49:31"
      },
      {
        "time_stamp": "2018-08-28 10:49:33"
      },
      {
        "time_stamp": "2018-08-28 10:49:41"
      },
      {
        "time_stamp": "2018-08-28 10:50:46"
      },
      {
        "time_stamp": "2018-08-28 10:51:22"
      },
      {
        "time_stamp": "2018-08-28 10:53:51"
      },
      {
        "time_stamp": "2018-08-28 10:55:43"
      },
      {
        "time_stamp": "2018-08-28 11:04:01"
      },
      {
        "time_stamp": "2018-08-28 11:04:25"
      },
      {
        "time_stamp": "2018-08-28 12:30:44"
      },
      {
        "time_stamp": "2018-08-28 12:31:11"
      },
      {
        "time_stamp": "2018-08-28 12:31:42"
      },
      {
        "time_stamp": "2018-08-28 12:32:46"
      },
      {
        "time_stamp": "2018-08-28 12:37:00"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-28 09:50:06",
    "text": "First I would add the filter directly in the table query"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-28 09:50:56",
    "edited": {
      "time_stamp": "2018-08-28 09:51:15"
    },
    "text": "`event_date__gte=time_now&amp;orderBy=event_date&amp;limit=1`"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-28 09:51:31",
    "text": "Will be the easiest and most efficient"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-28 09:53:57",
    "text": "Thanks Matt, I’ll try plugging this in."
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-28 09:55:05",
    "text": "`time_now` needs to be the actual value by the way"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-28 09:55:37",
    "text": "So `\"event_date__gte=\" ~ {{time_now}} ~ \"&amp;orderBy=event_date&amp;limit=1\"`"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-28 09:56:36",
    "text": "Oh wait do both the hubdb date picker and local_dt both spit out epoch format?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-28 10:01:03",
    "text": "nm HubDB spits out epoch but local_dt doesn’t"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-08-28 10:02:41",
    "text": "Is there any way to get the length of posts in {{ blog_recent_author_posts(‘NumberHere’, authorName) }} without having to enter a loop? I want to use the number for some conditional statements"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-28 10:04:43",
    "text": "try `yourBlogPostsVar|length`",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2018-08-28 10:35:27"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-28 10:10:54",
    "text": "So since there isn’t a way to convert 2018-08-28 12:08:03 to epoch I can’t do a comparison test between the two in HUBL right?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-28 10:13:24",
    "text": "I can convert both into a number without special characters then compare those. Okay I think I can figure this out. Sorry for thinking out loud at you."
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-08-28 10:35:27",
    "text": "That worked! I knew I was missing something obvious, thanks"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-28 10:48:14",
    "text": "I’m still struggling. The filter on the table query throws an error if I have the brackets around the present time variable and if I don’t have them I can save it and an event will display but it isn’t filtered properly. This is what I have in there:\n```{% set timenow = local_dt|datetimeformat('%y%m%d') %}\n{% set events = hubdb_table_rows(849008,\"event_date__gte=\" ~ timenow ~ \"&amp;orderBy=event_date&amp;limit=1\") %}```"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-28 10:49:31",
    "text": "That should be right"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-28 10:49:33",
    "text": "It's not working?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-28 10:49:41",
    "text": "My thought is that I would need to format `event_date` like `timenow` but I can’t do that within the filter, unless maybe I can escape the string"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-28 10:50:46",
    "text": "Yeah it didn’t work with the curly braces around the variable"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-28 10:51:22",
    "text": "`{% set events = hubdb_table_rows(849008,\"event_date__gte=\" ~ timenow ~ \"&amp;orderBy=\" ~ event_date|datetimeformat('%y%m%d') ~ \"&amp;limit=1\") %}` didn’t work either"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-28 10:53:51",
    "text": "Can you format `timenow` into `event_date`?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-28 10:55:43",
    "text": "I’ll try that, I wonder if the hyphens and colons in the output will be able to compare"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-28 11:04:01",
    "text": "```{% set timenow = local_dt|datetimeformat('%Y-%m-%d %H:%M:%S') %}\n{% set events = hubdb_table_rows(849008,\"event_date__gte=\" ~ timenow ~ \"&amp;orderBy=event_date&amp;limit=1\") %}```"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-28 11:04:25",
    "text": "I’m getting “Error invoking function ’hub_table_rows`”"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-08-28 12:29:22",
    "text": "I'm using the related_blog_posts HubL tag on my blog reader page here: <http://blog.luxurysimplified.com/renovation-downtown-charleston-challenges-st-phillip-project>"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-08-28 12:30:19",
    "text": "and what I would like to do is have two post with the same tag (as the tag for the current article) showcased at the bottom of the blog article."
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-08-28 12:30:28",
    "text": "Is there a best practice on how to do this?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-28 12:30:44",
    "text": "<@U6GNQ7JBU> Got it!!!"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-08-28 12:31:01",
    "text": "Here is my code as it stands right now"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-28 12:31:11",
    "text": "```{% set timenow = ((local_dt|datetimeformat('%Y') - 1970) * 31556926000) + (local_dt|datetimeformat('%m') * 2629743000) + (local_dt|datetimeformat('%d') * 86400000) %}\n{% set events = hubdb_table_rows(849008,\"event_date__gte=\" ~ timenow ~ \"&amp;orderBy=event_date&amp;limit=1\") %}```"
  },
  {
    "text": "",
    "time_stamp": "2018-08-28 12:31:17"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-28 12:31:42",
    "text": "Just ended up going the long way around and converting current time to epoch"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-08-28 12:32:06",
    "text": "is there a way to only pull in posts that have the the same tag as the current article?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-28 12:32:46",
    "text": "I’m a little off somewhere but I’ll figure that out"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-28 12:37:00",
    "text": "Ah I had to subtract one from the month and the day"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-08-28 14:02:21",
    "text": "add the param `tags=\"\"` to your related_blog_posts function"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-08-28 14:02:33",
    "text": "then put the tag/topic name in there"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-08-28 14:02:53",
    "text": "example: `{% related_blog_posts blog_ids=\"2632013477\", limit=2, post_formatter=\"blog_post_formatter\" tags=\"insider\" %}`"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-08-28 14:03:06",
    "text": "that should pull just from the \"insider\" tag."
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-08-28 14:03:41",
    "text": "with that be dynamic though?"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-08-28 14:03:44",
    "text": "you can also do this dynamically. See my article here"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-08-28 14:03:45",
    "edited": {
      "time_stamp": "2018-09-20 07:56:50"
    },
    "text": "<https://blog.wsol.com/in-beta-HubSpots-related-posts-tag-explained-and-extended>",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-09-20 05:06:34"
      },
      {
        "time_stamp": "2018-09-20 07:56:30"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-08-28 14:03:56",
    "text": "oh ok"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-08-28 14:04:00",
    "text": "thanks <@U2H3TT8F2>"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-08-28 14:04:11",
    "edited": {
      "time_stamp": "2018-08-28 14:04:24"
    },
    "text": "should be this code:\n```\n{#\tAssign our content.tag_names array to a variable\t#}\n{% set tagNames = content.tag_names %}\n{#\tAdd this to the function and use HubSpot's JOIN filter to turn the array into a comma separated string\t#}\n{% related_blog_posts blog_ids=\"2718545028\" limit=\"3\", tags=\"{{tagNames|join(',')}}\" %}\n```"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-08-28 14:04:55",
    "text": "there is also a <#CBXTNHPEZ|related-posts-module> channel for things about it"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-08-28 14:05:38",
    "text": "awesome this is exactly what I needed"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-08-28 14:05:49",
    "text": "thank you :pray:"
  },
  null,
  null
]