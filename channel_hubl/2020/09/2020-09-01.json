[
  {
    "poster": {
      "poster_name": "Vesa Poikajärvi",
      "poster_handle": "vesa.poikajarvi"
    },
    "time_stamp": "2020-09-01 01:25:15",
    "text": "Are there any plans to add new filters or functions to HubL? We need to use an external API which requires a shared secret based authentication (because the request leaves from client browser), and the secret value needs to be calculated in HubL obviously to keep the shared secret safe. But, HubL only has MD5 support which is pretty old, a SHA256 HMAC would be superior.\n\nWould love to see something like this `{% set signature = \"signature+payload\"|hmac('shared secret', 'sha256') %}`",
    "reply_count": 5,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2020-09-01 03:12:00"
      },
      {
        "time_stamp": "2020-09-01 03:13:50"
      },
      {
        "time_stamp": "2020-09-01 05:07:34"
      },
      {
        "time_stamp": "2020-09-01 05:22:55"
      },
      {
        "time_stamp": "2020-09-01 05:36:29"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Joe O'Hara",
      "poster_handle": "johara"
    },
    "time_stamp": "2020-09-01 03:12:00",
    "text": "Hi <@U0149PQC0HK>! You could contribute to the Jinjava project which powers HubL -&gt; <https://github.com/HubSpot/jinjava>"
  },
  {
    "poster": {
      "poster_name": "Joe O'Hara",
      "poster_handle": "johara"
    },
    "time_stamp": "2020-09-01 03:13:50",
    "edited": {
      "time_stamp": "2020-09-01 03:14:05"
    },
    "text": "I read your message as is there a way to instead of is there plans to. Not that I know of at the moment but even opening an issue over there would flag it with the team who maintain Jinjava"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-09-01 05:07:34",
    "text": "Hi Vesa, we do update the HubL language when there is a good use case and demand for a feature. As Joe stated you can also contribute yourself too the jinjava repo.\n\nI am a little confused about what you are saying though. Sounds like you are trying to get an API endpoint using HubL which isn't possible. We do have serverless functions which you can use to execute authenticated calls from and do support secrets."
  },
  {
    "poster": {
      "poster_name": "Vesa Poikajärvi",
      "poster_handle": "vesa.poikajarvi"
    },
    "time_stamp": "2020-09-01 05:22:55",
    "edited": {
      "time_stamp": "2020-09-01 05:23:50"
    },
    "text": "OK cool. I would only need to calculate the signature using a hashing function for the external endpoint to verify, and then perform the call from the user browser (ie. in HubL we can get the shared secret and calculate payload verification checksum, render the request parameters to eg. `&lt;template&gt;` tag, read with JS from there and then pass these via browser XHR request to the endpoint and they'd know the request has not been tampered with, and also can do timestamp based limitation that the params cannot be reused over and over again)\n\nServerless functions would be an option too, but looks to me that the serverless function endpoint has no session restrictions or such, ie. I can just call our serverless functions from the command line with cURL with no restrictions?"
  },
  {
    "poster": {
      "poster_name": "Vesa Poikajärvi",
      "poster_handle": "vesa.poikajarvi"
    },
    "time_stamp": "2020-09-01 05:36:29",
    "edited": {
      "time_stamp": "2020-09-01 05:36:59"
    },
    "text": "ie. could have\n```&lt;input type=\"hidden\" name=\"timestamp\" value=\"2020-09-01T14:34:00Z\" /&gt;\n&lt;input type=\"hidden\" name=\"somevar\" value=\"somevalue\" /&gt;\n&lt;input type=\"hidden\" name=\"signature\" value=\"{{ \"2020-09-01T14:34:00Z+somevalue\"|hmac('SHARED SECRET', 'sha256') }}\" /&gt;```\non the rendered page. this is pretty normal for example form online payment requests"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 08:31:24",
    "text": "Hello! is there a way to bring the latest related posts? cos this is brining me the related posts with a tag but it brings posts from 2016\n```{% related_blog_posts %}```\n",
    "reply_count": 68,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2020-09-01 08:35:45"
      },
      {
        "time_stamp": "2020-09-01 08:36:58"
      },
      {
        "time_stamp": "2020-09-01 08:37:05"
      },
      {
        "time_stamp": "2020-09-01 08:38:21"
      },
      {
        "time_stamp": "2020-09-01 08:39:10"
      },
      {
        "time_stamp": "2020-09-01 08:39:15"
      },
      {
        "time_stamp": "2020-09-01 08:39:19"
      },
      {
        "time_stamp": "2020-09-01 08:39:37"
      },
      {
        "time_stamp": "2020-09-01 08:39:41"
      },
      {
        "time_stamp": "2020-09-01 08:40:06"
      },
      {
        "time_stamp": "2020-09-01 08:40:41"
      },
      {
        "time_stamp": "2020-09-01 08:40:42"
      },
      {
        "time_stamp": "2020-09-01 08:42:17"
      },
      {
        "time_stamp": "2020-09-01 08:42:18"
      },
      {
        "time_stamp": "2020-09-01 08:42:37"
      },
      {
        "time_stamp": "2020-09-01 08:43:19"
      },
      {
        "time_stamp": "2020-09-01 08:43:26"
      },
      {
        "time_stamp": "2020-09-01 08:43:49"
      },
      {
        "time_stamp": "2020-09-01 08:44:42"
      },
      {
        "time_stamp": "2020-09-01 08:45:01"
      },
      {
        "time_stamp": "2020-09-01 08:45:27"
      },
      {
        "time_stamp": "2020-09-01 08:47:08"
      },
      {
        "time_stamp": "2020-09-01 08:47:08"
      },
      {
        "time_stamp": "2020-09-01 08:47:15"
      },
      {
        "time_stamp": "2020-09-01 08:47:28"
      },
      {
        "time_stamp": "2020-09-01 08:47:35"
      },
      {
        "time_stamp": "2020-09-01 08:48:01"
      },
      {
        "time_stamp": "2020-09-01 08:48:30"
      },
      {
        "time_stamp": "2020-09-01 08:48:33"
      },
      {
        "time_stamp": "2020-09-01 08:48:42"
      },
      {
        "time_stamp": "2020-09-01 08:49:56"
      },
      {
        "time_stamp": "2020-09-01 08:50:22"
      },
      {
        "time_stamp": "2020-09-01 08:50:58"
      },
      {
        "time_stamp": "2020-09-01 08:51:27"
      },
      {
        "time_stamp": "2020-09-01 08:54:02"
      },
      {
        "time_stamp": "2020-09-01 08:57:12"
      },
      {
        "time_stamp": "2020-09-01 08:57:44"
      },
      {
        "time_stamp": "2020-09-01 08:58:20"
      },
      {
        "time_stamp": "2020-09-01 08:58:51"
      },
      {
        "time_stamp": "2020-09-01 08:59:21"
      },
      {
        "time_stamp": "2020-09-01 09:00:24"
      },
      {
        "time_stamp": "2020-09-01 09:05:13"
      },
      {
        "time_stamp": "2020-09-01 09:06:07"
      },
      {
        "time_stamp": "2020-09-01 09:07:48"
      },
      {
        "time_stamp": "2020-09-01 09:07:54"
      },
      {
        "time_stamp": "2020-09-01 09:08:03"
      },
      {
        "time_stamp": "2020-09-01 09:08:53"
      },
      {
        "time_stamp": "2020-09-01 09:09:01"
      },
      {
        "time_stamp": "2020-09-01 09:09:07"
      },
      {
        "time_stamp": "2020-09-01 09:09:25"
      },
      {
        "time_stamp": "2020-09-01 09:12:43"
      },
      {
        "time_stamp": "2020-09-01 09:14:39"
      },
      {
        "time_stamp": "2020-09-01 09:14:41"
      },
      {
        "time_stamp": "2020-09-01 09:19:27"
      },
      {
        "time_stamp": "2020-09-01 09:19:35"
      },
      {
        "time_stamp": "2020-09-01 09:20:09"
      },
      {
        "time_stamp": "2020-09-01 09:20:11"
      },
      {
        "time_stamp": "2020-09-01 09:20:20"
      },
      {
        "time_stamp": "2020-09-01 09:21:03"
      },
      {
        "time_stamp": "2020-09-01 09:21:30"
      },
      {
        "time_stamp": "2020-09-01 09:21:33"
      },
      {
        "time_stamp": "2020-09-01 09:23:08"
      },
      {
        "time_stamp": "2020-09-01 09:24:05"
      },
      {
        "time_stamp": "2020-09-01 09:24:33"
      },
      {
        "time_stamp": "2020-09-01 09:54:45"
      },
      {
        "time_stamp": "2020-09-01 09:55:48"
      },
      {
        "time_stamp": "2020-09-01 10:38:21"
      },
      {
        "time_stamp": "2020-09-01 10:59:11"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-01 08:35:45",
    "text": "<https://developers.HubSpot.com/docs/cms/guides/creating-a-related-post-listing#:~:text=The%20related_blog_posts%20HubL%20tag%20can,post%20paths%20and%20publish%20dates>., there are plenty of options in there to make adjustments.\n\nIt could also be using a tag that only has blog posts from 2016… so this might not be an actual error"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 08:36:58",
    "text": "But if I go to the archive of that tag, i have posts from 2020. In the options there isnt a setting to order by date or something, just to add a start and end date, and I dont want to be updating that all the time"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 08:37:05",
    "text": ":thinking_face:"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-01 08:38:21",
    "text": "you have a page url?"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 08:39:10",
    "text": "<http://kuzneski-6680537.hs-sites.com/>"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 08:39:15",
    "text": "<http://kuzneski-6680537.hs-sites.com/blog/tag/featured/page/1>"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 08:39:19",
    "text": "the tag is featured"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 08:39:37",
    "text": "the module is being used in the home page"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 08:39:41",
    "text": "under Questions about Insurance and HR? title"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-01 08:40:06",
    "text": "where is the related blog posts module, thats the page i’m looking for"
  },
  {
    "text": "",
    "time_stamp": "2020-09-01 08:40:41"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-01 08:40:42",
    "text": "that right there?"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 08:42:17",
    "text": "yes"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-01 08:42:18",
    "text": "Can you share your module code?"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 08:42:37",
    "text": "`{% related_blog_posts limit=2, callback=\"blog_post_formatter\", blog_ids=\"default\", no_wrapper=True, tags={{ module.tag }} , blog_authors= {{ module.author }} %}`"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-01 08:43:19",
    "text": "have you tried removing authors?"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 08:43:26",
    "text": "let me try that"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-01 08:43:49",
    "text": "This seems really weird"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 08:44:42",
    "text": "I removed the author section of the code and it still brings the same"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 08:45:01",
    "text": "I'll try to manually add the tag instead of in the module to see if that works"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-01 08:45:27",
    "text": "see abotu hard coding the blog id as well"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-01 08:47:08",
    "text": "how come these blog posts have another level in them"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-01 08:47:08",
    "edited": {
      "time_stamp": "2020-09-01 08:47:18"
    },
    "text": "<http://kuzneski-6680537.hs-sites.com/blog/insurance/medicare/new-medicare-cards-issued-april-2018>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-01 08:47:15",
    "edited": {
      "time_stamp": "2020-09-01 08:47:21"
    },
    "text": "<http://kuzneski-6680537.hs-sites.com/blog/cybersecurity/data-business-ransomeware-explained>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-01 08:47:28",
    "text": "the /insurance/ and /cybersecurity/"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-01 08:47:35",
    "text": "Are those separate blogs setup in HubSpot?"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 08:48:01",
    "text": "Let me check that"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 08:48:30",
    "text": "No, there is one blog setup"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 08:48:33",
    "text": "that has all the posts"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-01 08:48:42",
    "text": "this is super weird"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 08:49:56",
    "text": ":woman-facepalming:"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 08:50:22",
    "text": "I'm going to test other tags to see if i have the same issue with those"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-01 08:50:58",
    "text": "what happens i fyou use this: <https://developers.HubSpot.com/docs/cms/hubl/functions#blog-recent-tag-posts>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-01 08:51:27",
    "text": "This is for “recent” and maybe that other function is setup to do something different that we don’t understand (or that doesn’t make sense lol)"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 08:54:02",
    "text": "I was trying to have the feature to be able to filter by tag and author. but I´ll review all the other options available to see if I can change it"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-01 08:57:12",
    "text": "If that doesn’t work out for you I would go ahead and reach out to support. It doesn’t make sense what is going on where there are clearly blog posts that are newer.\n\n“Posts are selected based off of their relevance to the set parameters.” Seems like you have it setup properly…"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 08:57:44",
    "text": "Yes, I dont understand why its brining the old ones, it doesnt make sense"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 08:58:20",
    "text": "did you have any issues like this one? who did you contact? Maybe I can just DM someone specific in this channel"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-01 08:58:51",
    "text": "If this was somethign I needed to do right away, I’d likely bring in like 30 posts, use the javascript call back and sort them by date, or use the post formatter and use flexbox to display the newer ones.  somewhat complicated work around"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-01 08:59:21",
    "text": "I’ve never had an issue like this… not sure if <@U2H3TT8F2> could put you in touch with someone"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2020-09-01 09:00:24",
    "text": "reading the thread now, one second :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2020-09-01 09:05:13",
    "text": "Have you tried using the `start_date` parameter with the related posts tag?"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2020-09-01 09:06:07",
    "text": "also <@UCDEM8T63> are you ok with me hopping into the portal/module to take a closer look"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 09:07:48",
    "text": "no, i havent tried the start_date"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 09:07:54",
    "text": "of course, login"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 09:08:03",
    "text": "do you need me to give you access or something?"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2020-09-01 09:08:53",
    "text": "Nope I can hop right in, just needed your ok first :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 09:09:01",
    "text": "sure, go ahead"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 09:09:07",
    "text": "we are using the kuz-theme"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 09:09:25",
    "text": "the module is called rss-listing-subscribe"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2020-09-01 09:12:43",
    "text": "is it ok if i clone the module to test some things out? That way i dont end up blowing up the current one on accident"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 09:14:39",
    "text": "of course"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 09:14:41",
    "text": "go ahead"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2020-09-01 09:19:27",
    "text": "ok yep, if you add the start_date param in, you can set it to be something like `start_date=\"2020-01-01\"` which will only pull posts that are posted after that date"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2020-09-01 09:19:35",
    "text": "see here: <https://app.HubSpot.com/design-manager/6680537/modules/34354058699?tfid=30602087698>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-01 09:20:09",
    "text": "SO… That will start on that date, now that they add 3 more blog posts to the tag, they won’t be showing up"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-01 09:20:11",
    "text": "right?"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 09:20:20",
    "text": "I was going to ask the same thing"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-01 09:21:03",
    "text": "This just seems like there is no rhyme or reason that they are starting from the beginning of time for the module"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-01 09:21:30",
    "text": "Unless there is some sort of weighting that is causing older posts to show up — this seems like maybe something that was overlooked?"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 09:21:33",
    "text": "yeah, I'm guessing if there is no order option, it should by default bring the last ones"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2020-09-01 09:23:08",
    "text": "I believe there is a weighting but I am not 100% sure, let me dig around internally to ask about how this module chooses the proper posts."
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 09:24:05",
    "text": "Thanks"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-01 09:24:33",
    "text": "thanks aj"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2020-09-01 09:54:45",
    "text": "Alrighty, so the tag takes the page you placed it on and will then compare the content on that page to other pages using a “more like this” type of query in elasticsearch within the parameters you set.\n\nThe pages it searches are then provided a score based on most relevant. The order it is returned in are from most relevant to least relevant.\n\nWith this, if you publish a new post, you would want to give the site some time to be re-indexed so that the new posts would most likely show (if relevant to the page they are on and depending on your params)."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2020-09-01 09:55:48",
    "text": "did you put this on a blank page and get different results? I guess that would happen"
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2020-09-01 10:38:21",
    "text": "how is that most relevant score reached?"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2020-09-01 10:59:11",
    "text": "The score is reached through keyword matching. The pages are compared and all relevant keywords are identified and matched up against each other. The pages with the higher matches are more relevant."
  },
  {
    "poster": {
      "poster_name": "Mohammed Mogasbe",
      "poster_handle": "mogasbekelani"
    },
    "time_stamp": "2020-09-01 22:06:15",
    "text": "can you set a hubl variable to bold"
  },
  {
    "poster": {
      "poster_name": "Mohammed Mogasbe",
      "poster_handle": "mogasbekelani"
    },
    "time_stamp": "2020-09-01 22:06:47",
    "text": "or add/remove a class"
  },
  {
    "poster": {
      "poster_name": "Mohammed Mogasbe",
      "poster_handle": "mogasbekelani"
    },
    "time_stamp": "2020-09-01 22:14:29",
    "edited": {
      "time_stamp": "2020-09-01 22:15:07"
    },
    "text": "nm nm got it I didn't need to do that but to be honest ill still take an answer if anyones got one!!"
  },
  {
    "poster": {
      "poster_name": "Vesa Poikajärvi",
      "poster_handle": "vesa.poikajarvi"
    },
    "time_stamp": "2020-09-02 00:16:51",
    "text": "I've noticed some oddities with custom module relative import paths when used inside macro calls. The path is different than outside the macro, and also in the macro calls the two modules we use need to be imported with different path. Details to follow in the thread.",
    "reply_count": 15,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2020-09-02 00:23:00"
      },
      {
        "time_stamp": "2020-09-02 00:23:25"
      },
      {
        "time_stamp": "2020-09-02 00:25:09"
      },
      {
        "time_stamp": "2020-09-02 00:26:35"
      },
      {
        "time_stamp": "2020-09-02 00:27:15"
      },
      {
        "time_stamp": "2020-09-02 00:31:22"
      },
      {
        "time_stamp": "2020-09-02 05:35:56"
      },
      {
        "time_stamp": "2020-09-02 05:36:02"
      },
      {
        "time_stamp": "2020-09-02 05:44:11"
      },
      {
        "time_stamp": "2020-09-02 07:30:10"
      },
      {
        "time_stamp": "2020-09-02 07:30:32"
      },
      {
        "time_stamp": "2020-09-02 11:31:17"
      },
      {
        "time_stamp": "2020-09-02 11:34:05"
      },
      {
        "time_stamp": "2020-09-03 06:46:59"
      },
      {
        "time_stamp": "2020-09-03 06:47:16"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Vesa Poikajärvi",
      "poster_handle": "vesa.poikajarvi"
    },
    "time_stamp": "2020-09-02 00:23:00",
    "edited": {
      "time_stamp": "2020-09-02 00:27:51"
    },
    "text": "So we have the following structure in the module\n```/templates/blogs/blog/index.html\n/templates/layout.html\n/modules/module1\n/modules/module2\n/modules/module3\n/macros/page-wrapper```"
  },
  {
    "poster": {
      "poster_name": "Vesa Poikajärvi",
      "poster_handle": "vesa.poikajarvi"
    },
    "time_stamp": "2020-09-02 00:23:25",
    "text": "The `page-wrapper` macro is something like this\n```{% macro use(heading) %}\n  &lt;main&gt;\n    &lt;div&gt;\n      {% if heading %}{{ use_heading(heading) }}{% endif %}\n      {{ caller() }}\n    &lt;/div&gt;\n  &lt;/main&gt;\n{% endmacro %}```"
  },
  {
    "poster": {
      "poster_name": "Vesa Poikajärvi",
      "poster_handle": "vesa.poikajarvi"
    },
    "time_stamp": "2020-09-02 00:25:09",
    "text": "In the `templates/blogs/blog/index.html` the call the macro:\n```{% extends '../../layout.html' %}\n\n{% block body %}\n  {# Three folders up here #}\n  {% module \"module3\" path=\"../../../modules/module3\" %}\n\n  {% call page_wrapper.use(content.name) %}\n    {{ content.post_body }}\n\n    {# \n      Here not the same path than outside macro but also not same \n      path for both modules. Order of these two does not affect how they \n      need to be imported\n    #}\n    {% module \"module1\" path=\"../modules/module1\" %}\n    {% module \"module2\" path=\"../../modules/module2\" %}\n    \n  {% endcall %}\n{% endblock %}```"
  },
  {
    "poster": {
      "poster_name": "Vesa Poikajärvi",
      "poster_handle": "vesa.poikajarvi"
    },
    "time_stamp": "2020-09-02 00:26:35",
    "text": "so even if the file system structure is as above, we have three different relative import paths from the same template file which seems oddish.\n\nThis works so it's not a problem, but I'd like to understand why, and also to understand if there is a chance that something outside the templates could cause a breakdown"
  },
  {
    "poster": {
      "poster_name": "Vesa Poikajärvi",
      "poster_handle": "vesa.poikajarvi"
    },
    "time_stamp": "2020-09-02 00:27:15",
    "text": "If we just get rid of the macro and apply that HTML from there directly to the template, all three modules are imported with same relative path `../../../modules/moduleX`"
  },
  {
    "poster": {
      "poster_name": "Vesa Poikajärvi",
      "poster_handle": "vesa.poikajarvi"
    },
    "time_stamp": "2020-09-02 00:31:22",
    "text": "also not sure if this is <#C2YH119N2|hubl> or <#CFPRTEGTX|modules> related question"
  }
]