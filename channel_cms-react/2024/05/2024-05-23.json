[
  {
    "poster": {
      "poster_name": "Marcus Shannon",
      "poster_handle": "mshannon"
    },
    "time_stamp": "2024-05-23 07:53:55",
    "text": "Looking into this :eyes:"
  },
  {
    "poster": {
      "poster_name": "Josh GH",
      "poster_handle": "joshgh"
    },
    "time_stamp": "2024-05-23 10:46:00",
    "edited": {
      "time_stamp": "2024-05-23 10:49:15"
    },
    "text": "Generated types bugs we’re struggling with:\n• All fields in a custom component get set to required, regardless of how they’re actually defined.\n• Adding a default makes a field required, but shouldn’t.\nThese are making us modify the generated type, instead of using it directly.\n```const CustomNavField = () => {\n  return (\n    <FieldGroup name=\"nav_item\" label=\"Custom Nav\">\n      <TextField name=\"nav_id\" label=\"ID\"></TextField>\n      <ChoiceField name=\"nav_type\" label=\"Type\"\n        choices={[\n          ['link', 'Link'],\n          ['button', 'Button'],\n        ]}\n      ></ChoiceField>\n    </FieldGroup>\n  )\n}\n\nexport const fields = (\n  <ModuleFields>\n    <TextField\n      label=\"Text\"\n      name=\"text\"\n      default=\"A default should be provided, but also removable if not needed.\"\n    ></TextField>\n    <CustomNavField />\n  </ModuleFields>\n)\n\n// generated type:\ntype CtaBannerFieldsType = DefaultValues<{\n  text: Required<TextFieldType>;  // should be optional\n  nav_item: Override<GroupFieldType, {\n      children: {\n          nav_id: TextFieldType;  // should be optional\n          nav_type: \"link\" | \"button\";  // should be optional\n      };\n  }>;\n}>;\nexport default CtaBannerFieldsType;```",
    "reply_count": 38,
    "reply_users_count": 5,
    "replies": [
      {
        "time_stamp": "2024-05-23 11:27:20"
      },
      {
        "time_stamp": "2024-05-23 13:03:31"
      },
      {
        "time_stamp": "2024-05-23 14:15:07"
      },
      {
        "time_stamp": "2024-05-23 14:18:07"
      },
      {
        "time_stamp": "2024-05-23 14:48:52"
      },
      {
        "time_stamp": "2024-05-23 14:51:18"
      },
      {
        "time_stamp": "2024-05-23 14:59:21"
      },
      {
        "time_stamp": "2024-05-23 15:09:09"
      },
      {
        "time_stamp": "2024-05-23 15:14:26"
      },
      {
        "time_stamp": "2024-05-23 15:14:50"
      },
      {
        "time_stamp": "2024-05-23 15:19:44"
      },
      {
        "time_stamp": "2024-05-23 15:25:03"
      },
      {
        "time_stamp": "2024-05-23 15:25:42"
      },
      {
        "time_stamp": "2024-05-23 15:27:48"
      },
      {
        "time_stamp": "2024-05-23 15:35:32"
      },
      {
        "time_stamp": "2024-05-23 15:39:00"
      },
      {
        "time_stamp": "2024-06-04 09:25:55"
      },
      {
        "time_stamp": "2024-06-04 13:49:42"
      },
      {
        "time_stamp": "2024-06-04 14:01:49"
      },
      {
        "time_stamp": "2024-06-04 14:08:08"
      },
      {
        "time_stamp": "2024-06-04 14:09:15"
      },
      {
        "time_stamp": "2024-07-12 15:12:25"
      },
      {
        "time_stamp": "2024-07-12 15:26:17"
      },
      {
        "time_stamp": "2024-07-12 15:33:45"
      },
      {
        "time_stamp": "2024-07-12 16:44:26"
      },
      {
        "time_stamp": "2024-07-12 16:46:00"
      },
      {
        "time_stamp": "2024-07-15 09:08:50"
      },
      {
        "time_stamp": "2024-07-15 09:10:15"
      },
      {
        "time_stamp": "2024-07-15 09:10:51"
      },
      {
        "time_stamp": "2024-07-15 09:12:06"
      },
      {
        "time_stamp": "2024-07-15 09:12:53"
      },
      {
        "time_stamp": "2024-07-15 09:17:07"
      },
      {
        "time_stamp": "2024-07-15 09:24:09"
      },
      {
        "time_stamp": "2024-07-15 09:26:20"
      },
      {
        "time_stamp": "2024-07-15 09:42:11"
      },
      {
        "time_stamp": "2024-07-15 10:53:05"
      },
      {
        "time_stamp": "2024-07-15 10:58:18"
      },
      {
        "time_stamp": "2024-07-15 11:02:49"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Josh GH",
      "poster_handle": "joshgh"
    },
    "time_stamp": "2024-05-23 11:27:20",
    "edited": {
      "time_stamp": "2024-05-23 11:28:27"
    },
    "text": "& in general, is it possible for the generated types to explicitly type optional fields as optional?\nJust found another problem in our code where typescript should have told us the return from a textfield is optional, but it didn’t so we wrote code as if it was required. The lack of  `Required<Type>` doesn’t actually make a property optional, it only affects the `Type` inside it. Optional properties should be written with a `?` like `text?: TextFieldType` . This would also solve the problems mentioned in the original post.\n\nSidenote: will fields always return an empty string when not required or filled out by editors?"
  },
  {
    "text": "Hi, what are the possible values for the UrlTypes? can't see them in the docu",
    "time_stamp": "2024-05-23 13:03:12",
    "edited": {
      "time_stamp": "2024-05-23 13:03:32"
    },
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2024-05-23 13:06:14"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jesse Maltese",
      "poster_handle": "jmaltese"
    },
    "time_stamp": "2024-05-23 13:03:31",
    "text": "Yeah, I think setting anything based on the existence of a default is incorrect, and `Required&lt;T&gt;` is probably the wrong type for the job in any case.\n\nWhat we’ll probably do is check for `required={true}` and wrap the field in a `NonNullable&lt;T&gt;` if it is, which I believe is more accurate to what the type will actually be.\n\nIs the ask with the optional thing to make _every_ field that isn’t set as required to be marked as optional?"
  },
  {
    "poster": {
      "poster_name": "Jesse Maltese",
      "poster_handle": "jmaltese"
    },
    "time_stamp": "2024-05-23 13:06:14",
    "edited": {
      "time_stamp": "2024-05-23 13:06:28"
    },
    "text": "Huh, weird that’s not showing. The possible types are\n``` 'EXTERNAL' | 'CONTENT' | 'FILE' | 'EMAIL_ADDRESS' | 'BLOG' | 'CALL_TO_ACTION' | 'WHATSAPP_NUMBER' | 'PHONE_NUMBER' | 'PAYMENT';```\n<https://developers.HubSpot.com/docs/cms/building-blocks/module-theme-fields#:~:text=false%2C%0A%20%20%20%20%22user_generated_content%22%20%3A%20false%0A%20%20%7D-,supported_types,-Array|You can see the types on the HubSpot dev docs as well (under the “Link” field)>"
  },
  {
    "poster": {
      "poster_name": "Josh GH",
      "poster_handle": "joshgh"
    },
    "time_stamp": "2024-05-23 14:15:07",
    "text": "&gt; Is the ask with the optional thing to make _every_ field that isn’t set as required to be marked as optional?\nYes.\n\nIt would also work to have the fields’ `required` property be a boolean we can set to false for optional.\n\n_If it wasnt already in prod_ with folks using `required`, I’d suggest having required be the default &amp; have fields accept an `optional` property instead of `required` . That’d be more like how typescript is setup, with required as the default."
  },
  {
    "poster": {
      "poster_name": "Jesse Maltese",
      "poster_handle": "jmaltese"
    },
    "time_stamp": "2024-05-23 14:18:07",
    "text": "Gotcha. I think optional-by-default is a fair request. I’ll talk it over with the team. Thanks!"
  },
  {
    "poster": {
      "poster_name": "Josh GH",
      "poster_handle": "joshgh"
    },
    "time_stamp": "2024-05-23 14:48:52",
    "text": "To be clear, I don’t think you need either `Required&lt;T&gt;` or `NonNullable&lt;T&gt;`. those don’t make the `text` in `text: Required&lt;TextFieldType&gt;` required, they change the props inside TextFieldType.\n• `Required&lt;TextFieldType&gt;` changes the \n```type TextFieldType = BaseField &amp; {\n    type: 'text';\n    default?: string;\n    validationRegex?: string;\n    allowNewLine?: boolean;\n    showEmojiPicker?: boolean;\n}```\nto\n```type TextFieldType = BaseField &amp; {\n    type: 'text';\n    default: string;\n    validationRegex: string;\n    allowNewLine: boolean;\n    showEmojiPicker: boolean;\n}```\n(or whatever the equivalent is after `DefaultValues` does it’s magic("
  },
  {
    "poster": {
      "poster_name": "Josh GH",
      "poster_handle": "joshgh"
    },
    "time_stamp": "2024-05-23 14:51:18",
    "edited": {
      "time_stamp": "2024-05-23 14:53:31"
    },
    "text": "The difference between required & optional is the `?`\n• `text: TextFieldType`  makes `text` required\n• `text?: TextFieldType` makes `text` optional\n`Required<T>` & `NonNullable<T>` only make the props inside `T`  required & non-null, respectively."
  },
  {
    "poster": {
      "poster_name": "Josh GH",
      "poster_handle": "joshgh"
    },
    "time_stamp": "2024-05-23 14:59:21",
    "text": "I believe that all the generated types are currently required. At least the ones that we’ve used."
  },
  {
    "poster": {
      "poster_name": "Jesse Maltese",
      "poster_handle": "jmaltese"
    },
    "time_stamp": "2024-05-23 15:09:09",
    "edited": {
      "time_stamp": "2024-05-23 15:11:12"
    },
    "text": "`TextField` is a bit of a special case because it can never be null, if the user leaves it empty it should render with the value “”, not `null`. Thats why it’s default has `default?: string` instead of `default?: string | null`.\n\nBut, for example `NumberField` has type `number | number[] | null`, so `NonNullable<NumberFieldType>` will infer as `number | number[]`, which feels more correct to what `required` actually does."
  },
  {
    "poster": {
      "poster_name": "Josh GH",
      "poster_handle": "joshgh"
    },
    "time_stamp": "2024-05-23 15:14:26",
    "text": "Gotcha. removing the null options makes perfect sense and would be great!\n\nHowever, whether you remove those or not, does not make `NumberField` itself required. I’m specifically meaning to talk about little “r” required, not `Required&lt;T&gt;`."
  },
  {
    "poster": {
      "poster_name": "Josh GH",
      "poster_handle": "joshgh"
    },
    "time_stamp": "2024-05-23 15:14:50",
    "text": "(Right now I hate typescript’s naming sense :melting_face: )"
  },
  {
    "poster": {
      "poster_name": "Jesse Maltese",
      "poster_handle": "jmaltese"
    },
    "time_stamp": "2024-05-23 15:19:44",
    "text": "Yep, I think I understand what you’re saying. I think the plan in my mind right now is that writing this:\n\n```export const fields = (\n  &lt;ModuleFields&gt;\n    &lt;NumberField name=\"number\" label=\"Number\" /&gt;\n    &lt;NumberField name=\"required_number\" label=\"Number\" required /&gt;\n    &lt;TextField name=\"text\" label=\"Text\" /&gt;\n    &lt;TextField name=\"required_text\" label=\"Text\" required /&gt;\n  &lt;/ModuleFields&gt;\n)```\nwould give you\n\n```type modulesFieldsType = DefaultValues&lt;{\n  number?: NumberFieldType\n  // ^? number | number[] | null | undefined\n  requiredNumber: NonNullable&lt;NumberFieldType&gt;;\n  // ^? number | number[]\n  text?: TextFieldType;\n  // ^? string | undefined\n  requiredText: NonNullable&lt;TextFieldType&gt;;\n  // ^? string\n}&gt;;```\n"
  },
  {
    "poster": {
      "poster_name": "Josh GH",
      "poster_handle": "joshgh"
    },
    "time_stamp": "2024-05-23 15:25:03",
    "text": "That’s the perfect explanation!"
  },
  {
    "poster": {
      "poster_name": "Rich McNeary",
      "poster_handle": "rich960"
    },
    "time_stamp": "2024-05-23 15:25:42",
    "edited": {
      "time_stamp": "2024-05-23 15:26:32"
    },
    "text": "Yes, and to take it a step further the shape of a  `moduleFieldsType` object:\n```// pseudo code\nmodulesFieldsType = {\n  number?: number;\n  requiredNumber: number;\n  text?: string;\n  requiredText: string;\n}```"
  },
  {
    "poster": {
      "poster_name": "Jesse Maltese",
      "poster_handle": "jmaltese"
    },
    "time_stamp": "2024-05-23 15:27:48",
    "text": "Sweet, glad to hear we’re all on the same page! Will keep you posted on the status of this change :smile:"
  },
  {
    "poster": {
      "poster_name": "Josh GH",
      "poster_handle": "joshgh"
    },
    "time_stamp": "2024-05-23 15:35:32",
    "text": "Teammate just brought up: why does NumberField accept an array of numbers?"
  },
  {
    "poster": {
      "poster_name": "Jesse Maltese",
      "poster_handle": "jmaltese"
    },
    "time_stamp": "2024-05-23 15:39:00",
    "edited": {
      "time_stamp": "2024-05-23 15:39:12"
    },
    "text": "Hm, I think that’s actually an issue with the `NumberFieldType`. I was just basing my message on what we have in our internal types but that doesn’t make sense. I’ll look into changing that. Thanks for pointing it out!"
  }
]