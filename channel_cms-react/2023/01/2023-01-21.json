[
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-21 09:59:48",
    "text": "Hey, can I request that a new portal is given access to this beta? I'd like to try using my personal (free) account—are there any limitations?",
    "reply_count": 2,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-01-21 11:25:37"
      },
      {
        "time_stamp": "2023-01-21 11:26:12"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-21 11:25:37",
    "text": "We can set that up. Currently there are some enterprise requirements, but we can setup a free trial of those."
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-21 11:26:12",
    "text": "Send me your hub ID of that personal account and I’ll try and set you up when I have a chance."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-21 17:10:39",
    "text": "question for Monday: is there any way to avoid the `div` that wraps islands? It's breaking a sticky element for me and I'm not sure how to work around it",
    "reply_count": 18,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-01-21 17:11:48"
      },
      {
        "time_stamp": "2023-01-21 17:13:06"
      },
      {
        "time_stamp": "2023-01-21 17:13:45"
      },
      {
        "time_stamp": "2023-01-21 17:14:27"
      },
      {
        "time_stamp": "2023-01-21 17:14:56"
      },
      {
        "time_stamp": "2023-01-21 17:15:24"
      },
      {
        "time_stamp": "2023-01-21 17:15:30"
      },
      {
        "time_stamp": "2023-01-21 17:15:36"
      },
      {
        "time_stamp": "2023-01-21 17:16:27"
      },
      {
        "time_stamp": "2023-01-21 17:16:33"
      },
      {
        "time_stamp": "2023-01-21 17:17:25"
      },
      {
        "time_stamp": "2023-01-21 17:18:35"
      },
      {
        "time_stamp": "2023-01-21 17:20:22"
      },
      {
        "time_stamp": "2023-01-21 17:20:52"
      },
      {
        "time_stamp": "2023-01-21 17:21:03"
      },
      {
        "time_stamp": "2023-01-21 17:25:40"
      },
      {
        "time_stamp": "2023-01-21 17:28:11"
      },
      {
        "time_stamp": "2023-01-21 17:33:42"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-01-21 17:11:48",
    "text": "Can you send the element structure as it is, and how you would like it to be?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-21 17:13:06",
    "text": "not sure what you mean by the first part. I think I'd like it to use `&lt;&gt;` if some kind of wrapper is required"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-21 17:13:45",
    "text": "<@UAYBXDG4U> do you mean can I send you an example of the current setup?"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-01-21 17:14:27",
    "text": "Yes I’m trying to understand what element is the “wrapper”"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-21 17:14:56",
    "text": "the island looks like this:\n```&lt;Island module={NavBar} id=\"navbar-island\" hydrateOn=\"load\" /&gt;```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-21 17:15:24",
    "text": "and the `NavBar` component is wrapped in a `&lt;div id=\"navbar-island\"&gt;`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-21 17:15:30",
    "text": "when it is rendered"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-01-21 17:15:36",
    "text": "Ah. "
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-21 17:16:27",
    "text": "I'm using tailwind, the first top-level div needs to be `&lt;div _ref_={navBarRef} _className_=\"sticky top-0 z-50\"&gt;`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-21 17:16:33",
    "text": "I'm still learning about `ref`"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-21 17:17:25",
    "text": "I suspect we need to set up the island component to “forward” refs"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-21 17:18:35",
    "text": "(Or enable a no wrapper mode where the developer is responsible to output a single element with the island’s id?)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-21 17:20:22",
    "text": "not sure which is better / easier....I understand `useRef` to be a way to keep the same element even if stuff is re-rendering"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-21 17:20:52",
    "text": "I could definitely add my own id to that div"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-21 17:21:03",
    "text": "but I'm not all that sure I really understand how forwarding anything might work"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-21 17:25:40",
    "text": "No worries, not on you to figure this out… if you could share us your component source (both the one with the island and the one inside the island) then we could try various approaches on our side to best accomplish what you want. "
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-21 17:28:11",
    "text": "yup, I'll send that over in some way shape or form"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-21 17:33:42",
    "text": "the \"quick fix\" for this is to separately add the tailwind classes using @apply instead of removing that div"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-21 17:42:01",
    "text": "Another question for Monday:\nAny chance this kind of setup would work to more easily import components—in `jsconfig.json`\n```{\n    \"compilerOptions\": {\n      \"baseUrl\": \".\",\n      \"paths\": {\n        \"@/*\": [\"cms-assets/*\"]\n      }\n    }\n  }\n  ```\nand then import like: `import Container from '@/components/Container';`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-21 17:42:26",
    "text": "(that setup as is does not work but I'm probably missing something )"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-21 17:43:45",
    "edited": {
      "time_stamp": "2023-01-21 17:43:52"
    },
    "text": "Yeah, that config will only make the TS compiler (your red squiggles in the editor) happy, but won’t actually make running the code in Vite work"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-21 17:44:50",
    "text": "Sounds like you’d like to change Vite `resolve.alias` config: <https://vueschool.io/articles/vuejs-tutorials/import-aliases-in-vite/>"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-21 17:45:33",
    "text": "For now I’d recommend trying out relative paths (`../` and `./` more), but we can look at enabling aliases",
    "reply_count": 2,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-01-22 05:56:34"
      },
      {
        "time_stamp": "2023-01-22 05:59:45"
      }
    ]
  }
]