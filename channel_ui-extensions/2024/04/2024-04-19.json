[
  {
    "poster": {
      "poster_name": "Jeff",
      "poster_handle": "jeff.adawag"
    },
    "time_stamp": "2024-04-19 01:23:59",
    "text": "<@U01QVR44MEY> hi I've tried using this `refreshObjectProperties` and it did refreshes the properties on the middle panel but not on the right panel or I'm I missing something to setup to make that work?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-04-19 05:28:25",
    "text": "Yeah I didn’t really think that would work because they’re associations and not properties. <@U03FJQPSC0Y> maybe you have an idea for this or it might be something you and the team are thinking about"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas689"
    },
    "time_stamp": "2024-04-19 12:20:07",
    "text": "hey all, is there a way to run runServerless on a child componnent? Do you have to do a HubSpot extension again?",
    "reply_count": 7,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2024-04-19 12:33:50"
      },
      {
        "time_stamp": "2024-04-19 12:35:46"
      },
      {
        "time_stamp": "2024-04-19 13:44:04"
      },
      {
        "time_stamp": "2024-04-19 13:45:09"
      },
      {
        "time_stamp": "2024-04-19 13:45:57"
      },
      {
        "time_stamp": "2024-04-19 23:36:14"
      },
      {
        "time_stamp": "2024-04-23 13:28:19"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Sejal Parikh (HubSpot PM)",
      "poster_handle": "sparikh"
    },
    "time_stamp": "2024-04-19 12:33:50",
    "text": "It is but not easy. We have a different API in progress to solve this better. HubSpot.serverless(). I can send an example of you want to try. It's not officially available yet"
  },
  {
    "poster": {
      "poster_name": "Sejal Parikh (HubSpot PM)",
      "poster_handle": "sparikh"
    },
    "time_stamp": "2024-04-19 12:35:10",
    "text": "Hey Jason, we are looking into this one. I will take up your use case internally. Carter, never say never :)"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas689"
    },
    "time_stamp": "2024-04-19 12:35:46",
    "text": "Yeah if you don't mind! :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-04-19 12:36:18",
    "edited": {
      "time_stamp": "2024-04-19 12:36:39"
    },
    "text": "it would be so awesome, I ~never~ don't bet against HubSpot product teams."
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas689"
    },
    "time_stamp": "2024-04-19 13:24:37",
    "text": "I'm actually getting a weird error also ; everything works fine up until I hit a button that goes back to my state machine (although it works every other time?) that produces this error:\n\n```react-reconciler.production.min.js:103 TypeError: t is not a function\n    at _a (<http://react-reconciler.pro|react-reconciler.pro>…tion.min.js:149:251)\n    at Na (<http://react-reconciler.pro|react-reconciler.pro>…tion.min.js:151:302)\n    at oi (<http://react-reconciler.pro|react-reconciler.pro>…tion.min.js:193:386)\n    at <http://react-reconciler.pro|react-reconciler.pro>…tion.min.js:191:391\n    at x (scheduler.production.min.js:13:203)\n    at MessagePort.I (scheduler.production.min.js:14:128)\ncreateWorker.ts:22 Refused to create a worker from 'blob:<https://static.HubSpot-extensions.com/aea916f8-d456-4f8a-a3a1-53f9d050fefd>' because it violates the following Content Security Policy directive: \"script-src 'self' <http://hslocal.net>:* <http://hslocal.net:*|hslocal.net:*> *.<http://hsappstatic.net|hsappstatic.net> <http://localhost>:* <http://ext-na1.HubSpot-extensions.com/prod/|ext-na1.HubSpot-extensions.com/prod/>\". Note that 'worker-src' was not explicitly set, so 'script-src' is used as a fallback.\ncreateWorker.ts:22 Refused to create a worker from 'blob:<https://static.HubSpot-extensions.com/9d49bba4-de99-41da-a4d2-1308f24fcd0b>' because it violates the following Content Security Policy directive: \"script-src 'self' <http://hslocal.net>:* <http://hslocal.net:*|hslocal.net:*> *.<http://hsappstatic.net|hsappstatic.net> <http://localhost>:* <http://ext-na1.HubSpot-extensions.com/prod/|ext-na1.HubSpot-extensions.com/prod/>\". Note that 'worker-src' was not explicitly set, so 'script-src' is used as a fallback.```\nwhich if you stack trace gets you to this line of code\n\n```   worker = new Worker(blobUrl, {\n      credentials: 'include',\n      name: getWorkerName(options.cardTitle)\n    });```\nanyone have any idea what it could be",
    "reply_count": 35,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-04-19 13:27:26"
      },
      {
        "time_stamp": "2024-04-19 13:37:59"
      },
      {
        "time_stamp": "2024-04-19 13:39:26"
      },
      {
        "time_stamp": "2024-04-19 13:40:06"
      },
      {
        "time_stamp": "2024-04-19 13:40:08"
      },
      {
        "time_stamp": "2024-04-19 13:40:08"
      },
      {
        "time_stamp": "2024-04-19 13:40:26"
      },
      {
        "time_stamp": "2024-04-19 13:40:42"
      },
      {
        "time_stamp": "2024-04-19 13:40:46"
      },
      {
        "time_stamp": "2024-04-19 13:40:47"
      },
      {
        "time_stamp": "2024-04-19 13:40:55"
      },
      {
        "time_stamp": "2024-04-19 13:41:02"
      },
      {
        "time_stamp": "2024-04-19 13:41:03"
      },
      {
        "time_stamp": "2024-04-19 13:41:16"
      },
      {
        "time_stamp": "2024-04-19 13:41:30"
      },
      {
        "time_stamp": "2024-04-19 13:41:50"
      },
      {
        "time_stamp": "2024-04-19 13:42:35"
      },
      {
        "time_stamp": "2024-04-19 14:13:07"
      },
      {
        "time_stamp": "2024-04-19 14:14:55"
      },
      {
        "time_stamp": "2024-04-19 14:37:05"
      },
      {
        "time_stamp": "2024-04-19 14:37:18"
      },
      {
        "time_stamp": "2024-04-19 14:37:24"
      },
      {
        "time_stamp": "2024-04-19 14:38:07"
      },
      {
        "time_stamp": "2024-04-19 14:38:24"
      },
      {
        "time_stamp": "2024-04-19 15:06:22"
      },
      {
        "time_stamp": "2024-04-19 15:10:49"
      },
      {
        "time_stamp": "2024-04-19 16:50:11"
      },
      {
        "time_stamp": "2024-04-19 16:52:05"
      },
      {
        "time_stamp": "2024-04-19 16:59:26"
      },
      {
        "time_stamp": "2024-04-19 16:59:34"
      },
      {
        "time_stamp": "2024-04-19 17:00:24"
      },
      {
        "time_stamp": "2024-04-19 17:03:11"
      },
      {
        "time_stamp": "2024-04-19 17:03:39"
      },
      {
        "time_stamp": "2024-04-19 17:03:50"
      },
      {
        "time_stamp": "2024-04-19 17:05:48"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas689"
    },
    "time_stamp": "2024-04-19 13:27:26",
    "text": "actually I think this might be related to using runServerless in a child component"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas689"
    },
    "time_stamp": "2024-04-19 13:37:59",
    "text": "hmmm changed to the HubSpot.serverless() function but same thing :cry:"
  },
  {
    "poster": {
      "poster_name": "Ben Anderson",
      "poster_handle": "banderson"
    },
    "time_stamp": "2024-04-19 13:39:26",
    "text": ":eyes:"
  },
  {
    "poster": {
      "poster_name": "Ben Anderson",
      "poster_handle": "banderson"
    },
    "time_stamp": "2024-04-19 13:40:06",
    "text": "Is it possible to share the code via DM?"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas689"
    },
    "time_stamp": "2024-04-19 13:40:08",
    "text": "I think its actually due to my dispatcher, but oddly it works everywheres else"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas689"
    },
    "time_stamp": "2024-04-19 13:40:08",
    "text": "sure"
  },
  {
    "poster": {
      "poster_name": "Ben Anderson",
      "poster_handle": "banderson"
    },
    "time_stamp": "2024-04-19 13:40:26",
    "text": "What are you using for dispatcher?"
  },
  {
    "poster": {
      "poster_name": "Ben Anderson",
      "poster_handle": "banderson"
    },
    "time_stamp": "2024-04-19 13:40:42",
    "text": "I hear dispatcher and state machines and you piqued my interest, ha"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas689"
    },
    "time_stamp": "2024-04-19 13:40:46",
    "text": "lol"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas689"
    },
    "time_stamp": "2024-04-19 13:40:47",
    "text": "zotai"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas689"
    },
    "time_stamp": "2024-04-19 13:40:55",
    "text": "jotai&amp;"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas689"
    },
    "time_stamp": "2024-04-19 13:41:02",
    "text": "wait lmao"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas689"
    },
    "time_stamp": "2024-04-19 13:41:03",
    "text": "zustand"
  },
  {
    "poster": {
      "poster_name": "Ben Anderson",
      "poster_handle": "banderson"
    },
    "time_stamp": "2024-04-19 13:41:16",
    "text": "They all made sense to me when you wrote them"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas689"
    },
    "time_stamp": "2024-04-19 13:41:30",
    "text": "knew it started with a Z or a J lol"
  },
  {
    "poster": {
      "poster_name": "Ben Anderson",
      "poster_handle": "banderson"
    },
    "time_stamp": "2024-04-19 13:41:50",
    "text": "I lump that whole group of libraries together in my mind, so I get ya"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas689"
    },
    "time_stamp": "2024-04-19 13:42:35",
    "text": "both are great anywho thanks for helping i'll send a zip over since its quite chunky"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-04-19 13:44:04",
    "text": "I like checking out things that aren't available yet, hahaha. Need a willing volunteer?"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas689"
    },
    "time_stamp": "2024-04-19 13:45:09",
    "edited": {
      "time_stamp": "2024-04-19 13:45:32"
    },
    "text": "i think sejal is talking about this call\n\n``` HubSpot.serverless(\"get-template-products\", {parameters: {sent_template: selected_template}}).then((result) => {\n                console.log(\"RESULT:\")\n                console.log(result)\n\n        }```\nbut i could be wrong"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-04-19 13:45:57",
    "text": "ah"
  },
  {
    "poster": {
      "poster_name": "Ben Anderson",
      "poster_handle": "banderson"
    },
    "time_stamp": "2024-04-19 14:13:07",
    "text": "You mentioned clicking a button, what actions should go through to see this issue?"
  },
  {
    "text": "oh yeah that would help lmao,\n\nit should show this  if the deal has associated tickets, so select a ticket, then a supplier, then select OC-Steep Slope Roofing then hit next, then let that load and hitting \"Go to Delivery Screen\" is what breaks; located in the Pricing.jsx file\n\nalthough i dunno if itll work without being in the portal ?",
    "time_stamp": "2024-04-19 14:14:55"
  },
  {
    "poster": {
      "poster_name": "Ben Anderson",
      "poster_handle": "banderson"
    },
    "time_stamp": "2024-04-19 14:37:05",
    "text": "I was going to fake out all the data but there's a lot there, so that might be too hard."
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas689"
    },
    "time_stamp": "2024-04-19 14:37:18",
    "text": "lol yeah"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas689"
    },
    "time_stamp": "2024-04-19 14:37:24",
    "text": "do you want me to invite you to the portal?"
  },
  {
    "poster": {
      "poster_name": "Ben Anderson",
      "poster_handle": "banderson"
    },
    "time_stamp": "2024-04-19 14:38:07",
    "text": "That will probably help, You can just send me the link to the portal"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas689"
    },
    "time_stamp": "2024-04-19 14:38:24",
    "text": ":scream: sweet i'll do that, thank you again"
  },
  {
    "poster": {
      "poster_name": "Ben Anderson",
      "poster_handle": "banderson"
    },
    "time_stamp": "2024-04-19 15:06:22",
    "text": "I can repro now, so that's great, thank you :pray:  I;ll let you know what I find"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas689"
    },
    "time_stamp": "2024-04-19 15:10:49",
    "text": "Awesome thank you!!"
  },
  {
    "poster": {
      "poster_name": "Ben Anderson",
      "poster_handle": "banderson"
    },
    "time_stamp": "2024-04-19 16:50:11",
    "text": "<@U04N6N424MB> it's a very common and classic React gotcha with `useEffect` and `async` functions."
  },
  {
    "poster": {
      "poster_name": "Ben Anderson",
      "poster_handle": "banderson"
    },
    "time_stamp": "2024-04-19 16:52:05",
    "text": "It should work just fine if you remove the async keyword from the useEffect in Pricing.tsx, or converting it as <https://stackoverflow.com/a/71175450|this post shows> (I didn't dig deep on that SO post, but that should be the right idea)"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas689"
    },
    "time_stamp": "2024-04-19 16:59:26",
    "text": "Oh jeeze figures it's something stupid on my end lmao."
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas689"
    },
    "time_stamp": "2024-04-19 16:59:34",
    "text": "Thabk you so much"
  },
  {
    "poster": {
      "poster_name": "Ben Anderson",
      "poster_handle": "banderson"
    },
    "time_stamp": "2024-04-19 17:00:24",
    "edited": {
      "time_stamp": "2024-04-19 17:02:05"
    },
    "text": "_*(verbose explanation for posterity)*_\n\nIt actually makes sense when you think through the useEffect API, specifically the bit about <https://react.dev/reference/react/useEffect#useeffect:~:text=Your%20setup%20function,your%20cleanup%20function.|cleanup functions and when they run>. If you return a cleanup function from your useEffect callback, react handles invoking that for you at the proper time, just to reiterate for those reading this in the future :slightly_smiling_face:\n\nSo, why did this break?\n\nWhen you convert a function to be `async` , that function now must return a promise per the async/await rules, and the JS engine has some syntactic sugar where it handles the boilerplate for you, and returns the promise for you if you don't handle it yourself.\n\nBut now React is confused, because it thinks that promise you returned is a cleanup function, since that's the only return value it's looking for! So it starts trying to invoke a promise object as if it were a function, and voila, that's the error message you were getting"
  },
  {
    "poster": {
      "poster_name": "Ben Anderson",
      "poster_handle": "banderson"
    },
    "time_stamp": "2024-04-19 17:03:11",
    "text": "It's brutal though, because the stack trace and error message are 1000% vague and don't even hint at the real problem, which is a bummer. We'll see if there's any way we can detect this or somehow intercept the error and make it more helpful"
  },
  {
    "poster": {
      "poster_name": "Ben Anderson",
      "poster_handle": "banderson"
    },
    "time_stamp": "2024-04-19 17:03:39",
    "text": "But in some cases we can't do that because the browser won't let us... so fingers crossed we can find a way to make this clearer"
  },
  {
    "poster": {
      "poster_name": "Ben Anderson",
      "poster_handle": "banderson"
    },
    "time_stamp": "2024-04-19 17:03:50",
    "text": "Thanks for sharing your example!"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas689"
    },
    "time_stamp": "2024-04-19 17:05:48",
    "text": "I'm actually surprised webstorm didn't pick it up!"
  },
  {
    "poster": {
      "poster_name": "Bashir",
      "poster_handle": "ayo_idan"
    },
    "time_stamp": "2024-04-19 23:36:14",
    "text": "You want to call a serverless function from a child component? \n\nYou might need to use context hooks. The child component can easily use serverless and other actions stored inside context this way. "
  }
]