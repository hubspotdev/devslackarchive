[
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-02-15 03:38:47",
    "text": "So I'm currently using isotype to filter my posts and I'm creating the filter, I'm trying to render out all of the tags for the filter and it looks to be duplicating some of the tags for some reason"
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-02-15 03:38:55",
    "text": "Currently I'm using ```&lt;div class=\"blog-filters\"&gt;\n            &lt;button data-filter=\"*\" class=\"active\"&gt;All&lt;/button&gt;            \n            {% set rec_posts = blog_recent_posts('default') %}\n            {% for rec_post in rec_posts %}\n              {% for topic in rec_post.topic_list %}\n                &lt;button data-filter=\".{% for topic in rec_post.topic_list %}{{ topic.slug }} {% endfor %}\"&gt;{{ topic.name }}&lt;/button&gt;\n              {% endfor %}\n            {% endfor %}\n          &lt;/div&gt;```"
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-02-15 03:39:45",
    "text": "This is what is being outputted <https://gyazo.com/20165e7787402f204ebbba76159bd43f>"
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-02-15 03:47:01",
    "text": "Or am I just rendering them wrong?"
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-02-15 03:47:11",
    "text": "I only want to render out the tags used"
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-02-15 04:00:41",
    "text": "I think it's showing the amount of tags based on the amount of articles is there anyway to show each tag once?"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2019-02-15 06:55:23",
    "text": "The issue is your are printing the tags for each blog post returned in the `blog_recent_post` function, so if blog posts have the same tags, they get printed again. I would just used the `blog_tags` function to get all the tags from a certain blog. Like `{{ blog_tags('default') }}`",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-02-15 07:11:12"
      },
      {
        "time_stamp": "2019-02-15 07:48:13"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2019-02-15 07:11:12",
    "text": "```{% set tags = blog_tags(\"default\") %}\n{% for tag in tags %}\n    &lt;button data-filter=\".{{ tag.slug }}\"&gt;{{ tag.name }}&lt;/button&gt;\n{% endfor %}```"
  },
  {
    "poster": {
      "poster_name": "Akin Ekici",
      "poster_handle": "akin.ekici"
    },
    "time_stamp": "2019-02-15 07:31:43",
    "text": "Hi, when I have following settings: exclude domain stylesheet, Linked stylesheet: main.css in my template, and have some css in a module that I am using in the template, is there a way to force that module css will be included after main.css (I see that module css is printing first and then comes main.css)"
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-02-15 07:48:13",
    "text": "Ah ok, thanks, I did try looking for something like this but couldn't find anything. Still new to HubL so I'll bare this in mind"
  },
  {
    "text": "Any idea why my `link_field` isn't functioning? Trying to give each image in the repeater group a link... Thanks",
    "time_stamp": "2019-02-15 08:25:14"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-15 08:32:17",
    "text": "if it is in a repeater, probably need to update module to item"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-15 08:32:45",
    "text": "assuming you used `{% for item in items %}`"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-15 08:32:55",
    "text": "that is the default"
  },
  {
    "poster": {
      "poster_name": "Chandler Ives",
      "poster_handle": "cives"
    },
    "time_stamp": "2019-02-15 08:33:40",
    "text": "` {% for item in module.logo_adder %}`"
  },
  {
    "poster": {
      "poster_name": "Chandler Ives",
      "poster_handle": "cives"
    },
    "time_stamp": "2019-02-15 08:34:02",
    "text": "is that what you're referencing?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-15 08:34:15",
    "text": "yeah"
  },
  {
    "poster": {
      "poster_name": "Chandler Ives",
      "poster_handle": "cives"
    },
    "time_stamp": "2019-02-15 08:34:21",
    "text": "That needs to be changed?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-15 08:34:25",
    "text": "no"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-15 08:34:51",
    "text": "hold please"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-15 08:35:14",
    "text": "didnt expand your code block initially"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-15 08:36:07",
    "text": "is this part of the repeater: `module.link_field.url.href`"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-15 08:38:07",
    "text": "basically, anything that is repeatable needs to have module replaced with item."
  },
  {
    "poster": {
      "poster_name": "Chandler Ives",
      "poster_handle": "cives"
    },
    "time_stamp": "2019-02-15 08:50:13",
    "text": "that just \"sets\" the url field"
  },
  {
    "poster": {
      "poster_name": "Chandler Ives",
      "poster_handle": "cives"
    },
    "time_stamp": "2019-02-15 08:50:18",
    "text": "should it be inside of the for ?"
  },
  {
    "poster": {
      "poster_name": "Patrick Eng",
      "poster_handle": "patrick404"
    },
    "time_stamp": "2019-02-15 09:25:14",
    "text": "Can anyone confirm whether or not we have the ability to access a video field variable for custom Modules or if that is something that is in the works?",
    "reply_count": 3,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-02-15 09:28:52"
      },
      {
        "time_stamp": "2019-02-15 09:29:59"
      },
      {
        "time_stamp": "2019-02-15 09:57:05"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 09:28:52",
    "text": "video HubL is still a little in flux, safest way to work with HubSpot hosted videos is to either use the file field and roll your own video player or to use a rich text field for the video and have the user click insert video from there."
  },
  {
    "poster": {
      "poster_name": "Patrick Eng",
      "poster_handle": "patrick404"
    },
    "time_stamp": "2019-02-15 09:29:59",
    "text": "Rock on, thanks Jon. We thought about the rich text option but wanted to check before we implemented anything just yet"
  },
  {
    "poster": {
      "poster_name": "Michele Herzog",
      "poster_handle": "mherzog"
    },
    "time_stamp": "2019-02-15 09:57:05",
    "text": "Video field is in the works though, just fyi!"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-02-15 12:09:14",
    "text": "Hello guys,\n\nDoes anyone ever encounter the following issue?\n\nWhen a user is in the page editor the \"teal pen\" icon isn't appearing while hovering modules and is therefore in need to use the module list instead"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 12:12:35",
    "text": "I've had that happen a few times, it depends on how the module is being used or the styling for it. For example, if its a hover module or has certain effects to it, that might cause issues with the page editor"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 12:13:12",
    "text": "we also had a tracking script from an analytics service that was interfering with it as well and caused our editor to never be clicked into"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-02-15 12:14:43",
    "text": "I'm a having the problem with an existing template in which everything was working perfectly before today..."
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 12:16:17",
    "edited": {
      "time_stamp": "2019-02-15 12:16:24"
    },
    "text": "can you check the template revision history to see what updates were made to it (if any)?"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-02-15 14:36:54",
    "text": "Stupid 4:30 Friday HubL question, is there a variable available for the current page url?",
    "reply_count": 24,
    "reply_users_count": 7,
    "replies": [
      {
        "time_stamp": "2019-02-15 14:38:19"
      },
      {
        "time_stamp": "2019-02-15 14:38:33"
      },
      {
        "time_stamp": "2019-02-15 14:38:37"
      },
      {
        "time_stamp": "2019-02-15 14:38:54"
      },
      {
        "time_stamp": "2019-02-15 14:39:19"
      },
      {
        "time_stamp": "2019-02-15 14:39:22"
      },
      {
        "time_stamp": "2019-02-15 14:40:01"
      },
      {
        "time_stamp": "2019-02-15 14:40:18"
      },
      {
        "time_stamp": "2019-02-15 14:41:19"
      },
      {
        "time_stamp": "2019-02-15 14:41:25"
      },
      {
        "time_stamp": "2019-02-15 14:41:58"
      },
      {
        "time_stamp": "2019-02-15 14:41:59"
      },
      {
        "time_stamp": "2019-02-15 14:42:15"
      },
      {
        "time_stamp": "2019-02-15 14:42:18"
      },
      {
        "time_stamp": "2019-02-15 14:42:26"
      },
      {
        "time_stamp": "2019-02-15 14:42:30"
      },
      {
        "time_stamp": "2019-02-15 14:42:53"
      },
      {
        "time_stamp": "2019-02-15 14:43:16"
      },
      {
        "time_stamp": "2019-02-15 14:43:18"
      },
      {
        "time_stamp": "2019-02-15 14:43:34"
      },
      {
        "time_stamp": "2019-02-15 14:43:40"
      },
      {
        "time_stamp": "2019-02-15 14:52:58"
      },
      {
        "time_stamp": "2019-02-15 15:02:04"
      },
      {
        "time_stamp": "2019-02-19 20:38:24"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2019-02-15 14:38:19",
    "text": "Yes, `{{ content.absolute_url }}`"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-02-15 14:38:33",
    "text": "damn.. beat me to it"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-02-15 14:38:37",
    "text": "idk why in my head that was meant for emails. duh."
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2019-02-15 14:38:54",
    "edited": {
      "time_stamp": "2019-02-15 14:42:18"
    },
    "text": "Confirmed for my own sanity, this is documented here: <https://designers.HubSpot.com/docs/hubl/hubl-supported-variables#general-variables>"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 14:39:19",
    "edited": {
      "time_stamp": "2019-02-15 14:39:25"
    },
    "text": "Gheesh <@U26BLKGE4> I mean its right there :wink:"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-02-15 14:39:22",
    "text": "I think I've only ever used it in a loop, not at the actual page level. thanks guys"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-02-15 14:40:01",
    "text": "My brain is already at emmet's"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-02-15 14:40:18",
    "text": "I was messing around with URL parameters in hubl the other day... trying to find that to find this"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2019-02-15 14:41:19",
    "text": "Sorry I did not mean that as in you should have seen it - just wanted to note to myself this was not a secret HubL variable which was not documented (which there is many of which I am working on fixing)"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2019-02-15 14:41:25",
    "text": ":smile_cat:"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 14:41:58",
    "text": "no no, its ok Will, he def should of seen it lol"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-02-15 14:41:59",
    "text": "lol, I'll never be offended by documentation links Will :wink:"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-02-15 14:42:15",
    "text": "AJ's just a jerk"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-02-15 14:42:18",
    "text": ":wink:"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 14:42:26",
    "text": ":heart:"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2019-02-15 14:42:30",
    "text": ":sweat_smile: :heart:"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 14:42:53",
    "text": "it's chats like these that make me love being apart of this community"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 14:43:16",
    "text": "new documentation page pops up <@U26BLKGE4> “you should be offended, very offended”"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-02-15 14:43:18",
    "text": "why are you apart? you should join dude"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 14:43:34",
    "text": "syntax error"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-02-15 14:43:40",
    "text": "lool"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-15 14:52:58",
    "text": "re <@U2H3TT8F2> last comment.  i was reflecting on this yesterday.  i am in many slack groups and this group is easily the most friendly, helpful that i am part of.  thanks HubSpot and <@U22PKFRU5> for making it happen"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-02-15 15:02:04",
    "text": "I agree with <@UD53A9UUR> This group is excellent.  I used to rely heavily on another slack group of alumni from a school I attended, but this one is beating it hands down."
  }
]