[
  {
    "poster": {
      "poster_name": "Scott Brown",
      "poster_handle": "scott.brown"
    },
    "time_stamp": "2020-04-09 03:04:48",
    "edited": {
      "time_stamp": "2020-04-09 03:05:26"
    },
    "text": "Morning guys, any ideas on this\n\n? *Enter a unique name to reference your account:* &lt;reference name added here &gt;\n? *When you’re ready, we’ll open a secure page in your default browser where you can view and copy your personal CMS access key, which you*\n*’ll need to complete the next step.*\n*&lt;Press enter when you are ready to continue&gt;* \n? *Enter your personal CMS access key:* &lt; key added here &gt;\n[SUCCESS] HubSpot.config.yml created with Personal Access Key.\nScotts-iMac:fhl scott$ npx hscms watch --portal=6992389 css fhl/css\nThe “css” is not a path to a directory\nScotts-iMac:fhl scott$ cd fhl\nScotts-iMac:fhl scott$ npx hscms watch --portal=6992389 css fhl/css\n[ERROR] The portalId 6992389 is missing authentication configuration\nScotts-iMac:fhl scott$",
    "reply_count": 13,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2020-04-09 04:13:19"
      },
      {
        "time_stamp": "2020-04-09 04:22:34"
      },
      {
        "time_stamp": "2020-04-09 04:22:58"
      },
      {
        "time_stamp": "2020-04-09 04:23:03"
      },
      {
        "time_stamp": "2020-04-09 04:24:39"
      },
      {
        "time_stamp": "2020-04-09 04:25:07"
      },
      {
        "time_stamp": "2020-04-09 04:32:27"
      },
      {
        "time_stamp": "2020-04-09 04:34:02"
      },
      {
        "time_stamp": "2020-04-09 04:51:00"
      },
      {
        "time_stamp": "2020-04-09 04:53:09"
      },
      {
        "time_stamp": "2020-04-09 04:55:44"
      },
      {
        "time_stamp": "2020-04-09 04:56:12"
      },
      {
        "time_stamp": "2020-04-09 05:06:14"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Scott Brown",
      "poster_handle": "scott.brown"
    },
    "time_stamp": "2020-04-09 03:14:47",
    "edited": {
      "time_stamp": "2020-04-09 03:43:11"
    },
    "text": "I can’t fetch, watch or anything, I’ve never had issues with previous local installs. I’ve followed the docs to the letter."
  },
  {
    "poster": {
      "poster_name": "Teun Rutten",
      "poster_handle": "teun"
    },
    "time_stamp": "2020-04-09 04:13:19",
    "text": "Can you show us your complete folder structure?"
  },
  {
    "poster": {
      "poster_name": "Scott Brown",
      "poster_handle": "scott.brown"
    },
    "time_stamp": "2020-04-09 04:22:34",
    "edited": {
      "time_stamp": "2020-04-09 04:22:45"
    },
    "text": "I’ve managed to sort this via using oauth2"
  },
  {
    "poster": {
      "poster_name": "Teun Rutten",
      "poster_handle": "teun"
    },
    "time_stamp": "2020-04-09 04:22:58",
    "text": "So the issue only exists when using the personal auth?"
  },
  {
    "poster": {
      "poster_name": "Teun Rutten",
      "poster_handle": "teun"
    },
    "time_stamp": "2020-04-09 04:23:03",
    "text": "Good to know!"
  },
  {
    "text": "Yes if I didn’t use oauth2 I couldn’t get it to work. Local folder structure here",
    "time_stamp": "2020-04-09 04:24:39",
    "edited": {
      "time_stamp": "2020-04-09 04:26:13"
    }
  },
  {
    "poster": {
      "poster_name": "Scott Brown",
      "poster_handle": "scott.brown"
    },
    "time_stamp": "2020-04-09 04:25:07",
    "edited": {
      "time_stamp": "2020-04-09 04:26:29"
    },
    "text": "HubSpot.config.yml created with Personal Access Key was a success. I’ve always used oauth2 method but couldn’t find it on HubSpot docs. Had to grab it from github."
  },
  {
    "poster": {
      "poster_name": "Teun Rutten",
      "poster_handle": "teun"
    },
    "time_stamp": "2020-04-09 04:32:27",
    "text": "Is it deprecated? Would love to hear something from a HubSpot employee"
  },
  {
    "poster": {
      "poster_name": "Scott Brown",
      "poster_handle": "scott.brown"
    },
    "time_stamp": "2020-04-09 04:34:02",
    "text": "No. And when running the watch command I got [ERROR] The portalId XXXX is missing authentication configuration"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-04-09 04:51:00",
    "text": "Personal cms access keys are the best auth method for local development. The cli does currently still support api key and oauth2 but we strongly recommend personal access keys. Personal cms access keys are scoped to your user in the HubSpot account, providing more granular security, and all actions taken from that key are attributed to the user.\n\nThey have the convenience that API keys have but security under the hood like oauth2."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-04-09 04:53:09",
    "edited": {
      "time_stamp": "2020-04-09 04:54:27"
    },
    "text": "Scott i would ensure you are using the latest cli version the reference doc shows the command under upgrade. and also your commands only need to start with `hs`"
  },
  {
    "poster": {
      "poster_name": "Scott Brown",
      "poster_handle": "scott.brown"
    },
    "time_stamp": "2020-04-09 04:55:44",
    "text": "<@U7SL518D6> Yes I’m using the most updated version"
  },
  {
    "poster": {
      "poster_name": "Scott Brown",
      "poster_handle": "scott.brown"
    },
    "time_stamp": "2020-04-09 04:56:12",
    "edited": {
      "time_stamp": "2020-04-09 04:56:40"
    },
    "text": "I’ve tried hs/hscms neither worked until I used oauth2"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-04-09 05:06:14",
    "text": "I'm currently away from my computer Scott but if you don't mind DMing me what's in your HubSpot.config.yml file i will take a look when i get on in a couple hours. *Please obfiyscate any api keys  oauth credentials and personal access keys(replace with x's or something).*  "
  },
  {
    "poster": {
      "poster_name": "Gregory Cornelius",
      "poster_handle": "gcornelius"
    },
    "time_stamp": "2020-04-09 08:11:53",
    "text": "assuming that `hero_img` is the name of an IMAGE field in the module, this should work. if you want to DM me a template where you are seeing the issue, i can help out"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2020-04-09 09:58:23",
    "text": "I'm getting `Error while retrieving new access token: internal error.`  this morning. I've tried going through `hs auth personalaccesskey` again but got the same error. Was definitely working yesterday. Any ideas?",
    "reply_count": 8,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2020-04-09 10:12:01"
      },
      {
        "time_stamp": "2020-04-09 10:16:12"
      },
      {
        "time_stamp": "2020-04-09 10:17:15"
      },
      {
        "time_stamp": "2020-04-09 10:17:18"
      },
      {
        "time_stamp": "2020-04-09 10:17:52"
      },
      {
        "time_stamp": "2020-04-09 10:18:17"
      },
      {
        "time_stamp": "2020-04-09 10:18:24"
      },
      {
        "time_stamp": "2020-04-09 10:54:35"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Remington Begg",
      "poster_handle": "remingtonbegg"
    },
    "time_stamp": "2020-04-09 10:01:15",
    "text": "worked for me this am"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2020-04-09 10:12:01",
    "text": "cc <@U22VBL87M>"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2020-04-09 10:16:12",
    "edited": {
      "time_stamp": "2020-04-09 10:16:22"
    },
    "text": "I added a console.log in to personalAccessKey.js and I did a request with correlationId `3060b7a3-2aec-4470-a4dd-27af9823797e` and requestId `bf409997-f8c0-40d1-8760-6c9556bbfd90`, if any of that helps."
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2020-04-09 10:17:15",
    "text": "Status Code 500"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2020-04-09 10:17:18",
    "text": "<@U3A4KEWK1> you actually should not need to worry about the refreshing of tokens, so we would love to look into what caused this to happen for you. So, if you would not mind leaving things in their current failing state, we can definitely take a look to get to the bottom of it."
  },
  {
    "poster": {
      "poster_name": "Gregory Cornelius",
      "poster_handle": "gcornelius"
    },
    "time_stamp": "2020-04-09 10:17:52",
    "text": "a+ debugging :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Gregory Cornelius",
      "poster_handle": "gcornelius"
    },
    "time_stamp": "2020-04-09 10:18:17",
    "text": "someone is looking into the issue with the BE service"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2020-04-09 10:18:24",
    "text": "Thanks!"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2020-04-09 10:30:08",
    "text": "So quick question. How does one go about fetching a specific file from HS when there is a lovely space in the name. I've attempted using `%`  to represent the space.... but it just created an entirely separate folder"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2020-04-09 10:31:45",
    "text": "if you put your path in quotes it works"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2020-04-09 10:32:08",
    "text": "... I was just exploring the chat history. I'm so happy that is a thing now."
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2020-04-09 10:32:29",
    "text": "It’s definitely a nice feature"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2020-04-09 10:54:35",
    "text": "So I tried it with another portal and that portal seems to be working. I also discovered that serverless functions seem to not be working anymore on the portal I'm trying to work on."
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2020-04-09 12:19:51",
    "text": "i was just in the CMS and made a quick change to a CSS file while I was in there. Published it, change propagated to the website, all is good there.\n\nCame back to my local dev a while later, ran npx hs fetch to pull the change before doing a bigger batch of updates, and my changes did not come through to local. Every file was skipped, including the css file that was published an hour ago.\n\nI don’t have any of the files locked to “local dev only,” because we have various teams doing adjustments to files. (I don’t love that, but it’s not my decision to make.)\n\nIsn’t fetch supposed to pull files from remote?"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2020-04-09 12:27:47",
    "text": "Fetch doesn't overwrite stuff by default, so if you already have a local copy it won't get overwritten. Set the `--overwrite` option to change that behavior."
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2020-04-09 12:28:45",
    "text": "AH"
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2020-04-09 12:28:52",
    "text": "somehow, i missed that."
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2020-04-09 12:28:55",
    "text": "thanks Ian"
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2020-04-09 12:30:15",
    "text": "i swear i’ve seen fetch replace files in the past without that flag"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-04-09 12:40:46",
    "edited": {
      "time_stamp": "2020-04-09 12:40:55"
    },
    "text": "`--overwrite` seems to be a frequently overlooked parameter I will see about making it clearer in our docs."
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2020-04-09 12:41:41",
    "text": "<@U7SL518D6> — is there a flag to just overwrite the changed files? or is there no comparison mechanism?",
    "reply_count": 19,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2020-04-09 12:42:09"
      },
      {
        "time_stamp": "2020-04-09 12:42:18"
      },
      {
        "time_stamp": "2020-04-09 12:42:20"
      },
      {
        "time_stamp": "2020-04-09 12:42:21"
      },
      {
        "time_stamp": "2020-04-09 12:42:22"
      },
      {
        "time_stamp": "2020-04-09 12:42:27"
      },
      {
        "time_stamp": "2020-04-09 12:42:39"
      },
      {
        "time_stamp": "2020-04-09 12:42:40"
      },
      {
        "time_stamp": "2020-04-09 12:43:29"
      },
      {
        "time_stamp": "2020-04-09 12:45:11"
      },
      {
        "time_stamp": "2020-04-09 12:46:21"
      },
      {
        "time_stamp": "2020-04-09 12:50:54"
      },
      {
        "time_stamp": "2020-04-09 12:51:39"
      },
      {
        "time_stamp": "2020-04-09 12:56:54"
      },
      {
        "time_stamp": "2020-04-09 12:57:52"
      },
      {
        "time_stamp": "2020-04-09 12:58:07"
      },
      {
        "time_stamp": "2020-04-09 12:58:11"
      },
      {
        "time_stamp": "2020-04-09 12:58:55"
      },
      {
        "time_stamp": "2020-04-09 13:04:32"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2020-04-09 12:42:09",
    "text": "“overwrite if changed, ignore if not” is so common, in git and such, that it’s kind of assumed that that’s how things work"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-04-09 12:42:09",
    "text": "Yes, that’s what the `--overwrite` flag does"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-04-09 12:42:18",
    "text": "oh"
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2020-04-09 12:42:20",
    "text": "hmmmmmmmmm"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-04-09 12:42:21",
    "text": "i see what you mean"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-04-09 12:42:22",
    "text": "well"
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2020-04-09 12:42:27",
    "text": "hahahahahaha"
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2020-04-09 12:42:39",
    "text": "i used the overwrite flag and it overwrote everything"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-04-09 12:42:40",
    "text": "theoretically it would have the same effect"
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2020-04-09 12:43:29",
    "text": "i would love to do everything through the command line and VSCode, but sometimes I’m in the CMS and it’s so much less time to just open the file and change the one line"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-04-09 12:45:11",
    "text": "your local and developer file system copy you should be trying to keep in sync anyways. So for example if you’re working on a module, then you make a change to it in the DM, you’d want to fetch those changes. The only changes would be the ones that you made.\n\nA tip too is if you use git you can isolate your changes more easily too"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-04-09 12:46:21",
    "edited": {
      "time_stamp": "2020-04-09 12:47:24"
    },
    "text": "so for example say you only care to update a module and you have no idea if anyone updated any other files.\n\nIf you use git you can fetch your changes from the design manager, and commit just those changes, ignoring ones elsewhere. and trash all the other uncommitted changes. then  you don’t have whatever other junk was edited in the DM locally, just the stuff you care about."
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2020-04-09 12:50:54",
    "text": "the first situation is more of what i’m looking at. i’d like to keep them in sync without having to overwrite every file on fetch. it just takes a lot of time. i’m the primary manager of all of this, so I want to be able to see everything that’s in publication locally, but I hate having to wait for many many many files to overwrite"
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2020-04-09 12:51:39",
    "text": "i keep the master branch as the entire, current DM"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-04-09 12:56:54",
    "text": "ahh if that’s all, here’s a tip, while slightly less convenient you can just specifiy a more specific path and fetch to that same sub path on your local machine, then you’re not syncing all of the files anyways."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-04-09 12:57:52",
    "edited": {
      "time_stamp": "2020-04-09 12:57:59"
    },
    "text": "so for example navigate in the terminal to your `/modules/` folder then go `hs fetch /modules/mycoolmodule.module mycoolmodule.module`"
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2020-04-09 12:58:07",
    "text": "yeah. as long as i know what’s been touched, I’ll do that. probably I’ll just have to learn patience though.\n\nclient has five agencies working in the portal, and they’re not supposed to touch the DM but…. they do sometimes."
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2020-04-09 12:58:11",
    "text": "thanks"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-04-09 12:58:55",
    "text": "lol well if they’re not supposed to be touching the DM lay down the law, lock the folder in the DM :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2020-04-09 13:04:32",
    "text": "i might have to"
  },
  {
    "poster": {
      "poster_name": "Christopher Mathieu",
      "poster_handle": "christopher.mathieu"
    },
    "time_stamp": "2020-04-09 13:09:14",
    "text": "are most of you still using the GUI to add fields or are you actually manipulating the JSON files... that seems like the one thing that's really fragile to do locally",
    "reply_count": 4,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2020-04-09 13:10:18"
      },
      {
        "time_stamp": "2020-04-09 13:11:56"
      },
      {
        "time_stamp": "2020-04-09 13:33:40"
      },
      {
        "time_stamp": "2020-04-09 14:35:36"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2020-04-09 13:10:18",
    "text": "I’ve toyed with using the JSON but then just went back to the GUI. agreed it seems fragile, and I’ve never wanted to risk it"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2020-04-09 13:11:56",
    "text": "I find writing it out in JSON kind of cumbersome, but it does have a couple of advantages. It's a _lot_ easier in the JSON to do bulk updates to a bunch of things, for one."
  },
  {
    "poster": {
      "poster_name": "Josh A",
      "poster_handle": "josh307"
    },
    "time_stamp": "2020-04-09 13:33:40",
    "text": "Definitely been using the GUI here, just much easier and quicker."
  },
  {
    "poster": {
      "poster_name": "Will Brueske",
      "poster_handle": "will.brueske"
    },
    "time_stamp": "2020-04-09 14:35:36",
    "text": "Learning it was tricky sometimes (\"visibility\" specifically since the documentation on it is/was incorrect), but I've found that it's worth it to learn.  The ability to copy &amp; paste entire sets of fields between modules is pretty valuable for my company's setup.  Also, now that I have it down, it takes less time to write out a field in JSON than it does to stop `hs watch`, create the field in the Design Tools, `hs fetch` the module, and restart `hs watch`."
  }
]