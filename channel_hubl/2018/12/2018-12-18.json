[
  null,
  null,
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2018-12-18 04:00:59",
    "text": "Does someone know how to personalize the meta name content ?\n&lt;meta name=\"author\" content=\"my_name\"&gt;"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2018-12-18 07:12:55",
    "text": "Any ideas ?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 07:31:04",
    "text": "I think if it’s a blog post author is auto set by the post author in HubSpot"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 07:31:45",
    "text": "if you have a coded template you can override the default author by putting yours above the other one(Think search engines only listen to the first one in the html)"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-18 07:40:51",
    "text": "<@U3TR96G84> is it a blog post?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-18 07:40:59",
    "text": "is it a coded file?"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2018-12-18 07:41:41",
    "text": "blog list also"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 07:43:50",
    "text": "why would you want to set a blog listing page to have an author? or are you doing an author listing page?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-18 07:45:01",
    "text": "you can do it with jquery"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-18 07:45:11",
    "text": "`$('meta[name=author]').attr('content', 'new value');`"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-18 07:49:28",
    "text": "i am curious about your need for this :slightly_smiling_face:",
    "reply_count": 13,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2018-12-18 08:07:47"
      },
      {
        "time_stamp": "2018-12-18 08:08:22"
      },
      {
        "time_stamp": "2018-12-18 08:11:57"
      },
      {
        "time_stamp": "2018-12-18 08:13:15"
      },
      {
        "time_stamp": "2018-12-18 08:13:50"
      },
      {
        "time_stamp": "2018-12-18 08:20:25"
      },
      {
        "time_stamp": "2018-12-18 08:20:47"
      },
      {
        "time_stamp": "2018-12-18 08:21:58"
      },
      {
        "time_stamp": "2018-12-18 08:22:57"
      },
      {
        "time_stamp": "2018-12-18 08:26:16"
      },
      {
        "time_stamp": "2018-12-18 08:29:29"
      },
      {
        "time_stamp": "2018-12-18 08:29:59"
      },
      {
        "time_stamp": "2018-12-18 09:00:57"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2018-12-18 07:51:23",
    "text": "does hubl have an `intersect` filter? For example\nTo get the intersection of 2 lists (unique list of all items in both):\n```{{ list1 | intersect(list2) }}```"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2018-12-18 07:52:06",
    "text": "I found this on the googles but it doesn’t seem to work in HubSpot’s environment"
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2018-12-18 07:52:16",
    "text": "<@UD53A9UUR> if doing this with js, will anything that wants to read that tag actually see the new content since it's after the page render?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-18 07:52:41",
    "text": "i was told by <@U2H3TT8F2> that google reads it"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-18 07:52:49",
    "text": "they are smart that way"
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2018-12-18 07:52:52",
    "text": "well, that's all that matters :smile:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-18 07:53:10",
    "text": "i think i am remembering that right…"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-12-18 07:53:16",
    "text": "correct"
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2018-12-18 07:53:31",
    "text": "what about lycos though?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-18 07:53:35",
    "text": "HA!"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-18 07:53:44",
    "text": "yes.  askjeeves"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-12-18 07:54:05",
    "text": "im writing a blog post now about all the SEO stuff I was doing when it came to SEO issues from things like SEMRush and Moz and HS' listing pages (and now dynamic pages lol)"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-18 07:54:27",
    "text": "share the post when you are done"
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2018-12-18 07:54:33",
    "text": "I have a feeling that will be a living document AJ"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2018-12-18 07:54:35",
    "text": "yeah def share it"
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2018-12-18 07:54:45",
    "text": "hope you're commited"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-12-18 07:54:56",
    "text": "<https://stackoverflow.com/questions/2568760/is-it-possible-to-use-javascript-to-change-the-meta-tags-of-the-page>"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-12-18 07:55:00",
    "text": "oh it will be lol"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-12-18 07:55:29",
    "text": "I am already working with people at HS on doing some quick fixes for changing stuff to fix those issues"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-12-18 07:55:58",
    "text": "i'll post it here once I finish writing it up and its live"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-12-18 07:56:40",
    "text": "also this: <https://www.simoahava.com/seo/dynamically-added-meta-data-indexed-google-crawlers/>"
  },
  {
    "time_stamp": "2018-12-18 07:56:48",
    "text": ""
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-12-18 07:57:17",
    "text": "wait wrong link, this one: <https://searchengineland.com/tested-googlebot-crawls-javascript-heres-learned-220157>"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2018-12-18 08:00:47",
    "text": "I didn’t mean to jump in on an ongoing convo earlier! Now that it has quieted down I’ll re-ask the question\nIs it possible to get the intersection of 2 lists like so in hubl: `{{ list1 | intersect(list2) }}`?"
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2018-12-18 08:02:25",
    "text": "are you trying to concat the lists? or find out if there are duplicates in the list?"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2018-12-18 08:04:04",
    "text": "check two lists against each other and output their common values\n```list1 = [ 'a', 'b', 'c' ]\nlist2 = [ 'c', 'd' ]```\nthe output would be `['c']`",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2018-12-18 08:17:07"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2018-12-18 08:05:01",
    "text": "oh, i think i did this before, hang on"
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2018-12-18 08:05:44",
    "text": "although, i think i just removed the duplicates"
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2018-12-18 08:05:54",
    "text": "do you actually need to do something with the duplicates?"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2018-12-18 08:07:12",
    "text": "<https://www.geeksforgeeks.org/python-intersection-two-lists/>"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2018-12-18 08:07:47",
    "text": "<@U7SL518D6> <@UD53A9UUR> by default HubSpot add &lt;meta name=\"author\" content=\"XXX\"&gt; on each page of blog (blog list, blog author, blog post...) with the Company Name (I guess)\n\nI would like to change it without using JS to facilitate explore"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2018-12-18 08:07:55",
    "text": "<https://ansible-docs.readthedocs.io/zh/stable-2.0/rst/playbooks_filters.html#set-theory-filters>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 08:08:22",
    "text": "that seems like placeholder content they forgot to clear"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-18 08:11:57",
    "text": "if you look at the default HubSpot code in the head, it looks like this `&lt;meta name=\"author\" content=\"{{ meta_author }}\"&gt;`"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 08:13:15",
    "edited": {
      "time_stamp": "2018-12-18 08:13:29"
    },
    "text": "could do `|replace(\"XXX\",\"YOUR CUSTOM AUTHOR HERE\")`"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-18 08:13:50",
    "text": "i just looked at a listing page on a site i work on and it has teh company name in that field"
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2018-12-18 08:14:09",
    "text": "gotcha, yea, it wasn't the same thing"
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2018-12-18 08:14:14",
    "text": "i can help look though"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-12-18 08:17:07",
    "text": "Put up an issue <https://github.com/HubSpot/jinjava/issues> and it will get implemented pretty quickly"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2018-12-18 08:17:23",
    "edited": {
      "time_stamp": "2018-12-18 08:17:30"
    },
    "text": "Basically, if one or more of a blog post’s tags are in a certain list, I need to do xyz. I want to do something like so\n\n```{% set section_active = false %}\n{% set tags = content.tagList|map('slug') %}\n{% set list2 =  [ 'foo','poo', 'doo', 'boo' ] %}\n{% set joined =  tags|intersect(list2) %}\n{% unless joined == [] %}\n  {% set section_active = true %}\n{% endunless %}```"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2018-12-18 08:20:25",
    "text": "yes all websites I'm working on have Company Name on every page of blog"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-18 08:20:47",
    "text": "even the individual posts?"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2018-12-18 08:21:58",
    "text": "nope on the individual post it's the author name"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-18 08:22:57",
    "text": "apologies, but i am confused what the problem is :disappointed:"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2018-12-18 08:26:16",
    "text": "I'm on an Entreprise licence with multiple domains\nThe name of company is BeMove\nbut the blog I'm working on is <http://blog.ariase.com|blog.ariase.com>\n\nOn blog list and blog author the author name is BeMove. My question was to change the author name with Ariase instead of BeMove (sorry if I'm not clear)"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-12-18 08:28:30",
    "text": "If you put up an issue <https://github.com/HubSpot/jinjava/issues> it can be added",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2018-12-18 08:38:34"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-18 08:29:29",
    "text": "and you dont want to use javascript"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2018-12-18 08:29:59",
    "text": "I would like to avoid but if I have no choice I will do it :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2018-12-18 08:38:34",
    "text": "Done, thanks <@U6GNQ7JBU>"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2018-12-18 09:00:57",
    "text": "Thanks <@UD53A9UUR> and <@U7SL518D6> for your answers :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Akin Ekici",
      "poster_handle": "akin.ekici"
    },
    "time_stamp": "2018-12-18 09:47:23",
    "text": "I have an array and a variabel. Is there a filter to test if the variabel exists in the array?",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2018-12-18 09:49:11"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Akin Ekici",
      "poster_handle": "akin.ekici"
    },
    "time_stamp": "2018-12-18 09:48:34",
    "text": "maybe myarray|map(myvar)"
  },
  {
    "poster": {
      "poster_name": "Akin Ekici",
      "poster_handle": "akin.ekici"
    },
    "time_stamp": "2018-12-18 09:48:42",
    "text": "is that right?"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2018-12-18 09:49:11",
    "text": "This isn’t a filter but it will work:\n`{% if variable in array %}markup{% endif %}`"
  },
  {
    "text": "",
    "time_stamp": "2018-12-18 09:52:00"
  },
  null,
  null,
  {
    "poster": {
      "poster_name": "Theresa Weaver",
      "poster_handle": "theresa.weaver"
    },
    "time_stamp": "2018-12-18 13:22:02",
    "text": "Hey guys, I am not sure if this is the right place to ask this, but I am working with a blog template and have created a custom module using fields so that content can be put in on the page level, but is there a way to duplicate this page level content to all pages that are using the blog template?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-18 13:25:14",
    "text": "have the custom module on each blog post - yes, but the content will be on a per page basis"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-18 13:25:35",
    "text": "you could use hubdb",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-12-18 13:52:56"
      },
      {
        "time_stamp": "2018-12-18 13:53:20"
      },
      {
        "time_stamp": "2018-12-18 13:53:31"
      },
      {
        "time_stamp": "2018-12-18 13:53:47"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-18 13:25:45",
    "text": "reference  that in your module"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 13:25:46",
    "text": "you could also use a global module",
    "reply_count": 6,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-12-18 13:53:25"
      },
      {
        "time_stamp": "2018-12-18 13:56:33"
      },
      {
        "time_stamp": "2018-12-18 13:57:07"
      },
      {
        "time_stamp": "2018-12-18 13:57:22"
      },
      {
        "time_stamp": "2018-12-18 13:58:13"
      },
      {
        "time_stamp": "2018-12-19 07:40:28"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-18 13:25:50",
    "text": "woah now"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-18 13:26:09",
    "text": "jon coming in hot with his fresh from vscode love"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-18 13:26:17",
    "text": ":slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 13:27:20",
    "text": "that plus being right on the verge of being a zombie from lack of sleep - that’s right at the point I get more chatty and more easily distracted by everything"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-18 13:28:17",
    "text": "welcome home :balloon:"
  },
  {
    "poster": {
      "poster_name": "Theresa Weaver",
      "poster_handle": "theresa.weaver"
    },
    "time_stamp": "2018-12-18 13:52:56",
    "text": "this I think could work. :thumbsup:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-18 13:53:20",
    "text": ":slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Theresa Weaver",
      "poster_handle": "theresa.weaver"
    },
    "time_stamp": "2018-12-18 13:53:25",
    "text": "would the global module be editable from the page level?"
  },
  {
    "poster": {
      "poster_name": "Theresa Weaver",
      "poster_handle": "theresa.weaver"
    },
    "time_stamp": "2018-12-18 13:53:31",
    "text": "thank you!"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-18 13:53:47",
    "text": "no worries.  good luck out there!"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 13:56:33",
    "text": "Not currently.\n\nIt would require editing in the design manager for now. but the module does show in the editor and says that it’s a global module.\n\nPretty sure they plan to add the capability to edit them as that was a feature a couple years ago."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 13:57:07",
    "text": "but you would edit it in one place, and the field values would be the same for all of the blog pages"
  },
  {
    "poster": {
      "poster_name": "Theresa Weaver",
      "poster_handle": "theresa.weaver"
    },
    "time_stamp": "2018-12-18 13:57:22",
    "text": "great thank you!!"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 13:58:13",
    "text": "Dennis’s solution of using a HubDB is effectively the same thing but move the interface for editing it to be the HubDB’s spreadsheet like interface. So kinda depends who needs to edit the content, and if the design manager is scary to them."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-12-18 15:16:25",
    "edited": {
      "time_stamp": "2018-12-18 15:23:24"
    },
    "text": "anyone seen this before or use this hubl method?  `{{ \"&lt;a href='\" ~ slide.page_url ~\"'&gt;\" if slide.page_url }}`"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-12-18 15:17:57",
    "edited": {
      "time_stamp": "2018-12-18 15:23:34"
    },
    "text": "same as `{% if slide.page_url %}&lt;a href=\"{{ slide.page_url }}\"&gt;{% endif %}`"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 15:21:32",
    "text": "I have"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 15:21:48",
    "text": "it’s shorthand, use it all the time in variables and in modules to condense the code"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-12-18 15:21:55",
    "text": "interesting"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 15:22:00",
    "text": "you can also use else"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 15:22:01",
    "text": "in there"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 15:22:53",
    "edited": {
      "time_stamp": "2018-12-18 15:23:12"
    },
    "text": "`{{\"you're honest\" if telling_truth else \"liar liar pants on fire\"}}`"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-12-18 15:23:55",
    "text": "interesting"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 15:24:46",
    "edited": {
      "time_stamp": "2018-12-18 15:26:13"
    },
    "text": "think I’ve also seen this wizardry\n```\n{% set othervar =\"shrivled\" %}\n{% set flowers = \"bloom\" || othervar %}\n{{flowers}} prints shrivled\n```"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-12-18 15:24:53",
    "text": "I go more with `{{ telling_truth ? \"you're honest\" : \"liar liar pants on fire\" }}`"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 15:24:56",
    "text": "though i dont personally use that"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 15:25:14",
    "edited": {
      "time_stamp": "2018-12-18 15:25:25"
    },
    "text": "does using symbols actually work? didn’t think it did"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-12-18 15:26:14",
    "text": "That's how I do most of my query strings"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 15:26:25",
    "text": "ahh good to know"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-12-18 15:26:49",
    "text": "that way I don't need to do all the ifs and just have a nice few lines"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-12-18 15:27:34",
    "text": "ternary operator if anyone isn't aware of the term"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-12-18 15:27:44",
    "text": "I say that but I could be wrong"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-12-18 15:28:04",
    "text": "I learned how to do that 6 years ago and my life changed"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 15:28:29",
    "text": "no you’re correct. I just thought HubL didn’t support it quite like that, thought only the syntax I showed above was possible"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 15:28:37",
    "text": ":need a level up emote:"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-12-18 15:30:02",
    "text": "a database guy showed me that one day when my if statements were outta control. I had never looked it up. One of those pieces of information I just listened to and never thought about again"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 15:32:55",
    "text": "yea, it’s a super useful tool. It can be abused though. if used too much it can make it harder to read sometimes"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-12-18 15:33:04",
    "text": "I've abused it nesting them"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 15:33:16",
    "text": "yea, that’s usually when it gets rough"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-12-18 15:33:27",
    "text": "returning functions inside these, nested"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-12-18 15:33:33",
    "text": "And just smiling at myself"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-12-18 15:33:41",
    "text": "MY PROJECT NO ONE WILL EVER TOUCH"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-12-18 15:33:51",
    "text": "I dismantled it when I had to go back into it a year later"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-12-18 15:36:25",
    "text": "still really wish I could not see red when I do stuff like this"
  },
  {
    "text": "",
    "time_stamp": "2018-12-18 15:36:31"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-12-18 15:36:45",
    "text": "`{% set container = item.hover_type != 'normal-hover' ? 'a' : 'div' %}`"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-12-18 15:36:54",
    "text": "`{% set container = container == 'a' &amp;&amp; item.hover_type == 'no-hover' ? 'div' : 'a' %}`",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-01-08 14:27:54"
      },
      {
        "time_stamp": "2019-01-09 09:50:39"
      },
      {
        "time_stamp": "2019-01-09 09:51:53"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-12-18 15:37:06",
    "text": "there is an example Jon"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-12-18 15:37:19",
    "text": "Probably not the easiest to understand to someone just looking"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 15:45:11",
    "text": "I 100%agree with the red highlighting stuff when you put hubl in html it drives me a little nutty"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 15:45:26",
    "text": "and I’ve done the exact thing you did"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-12-18 15:46:16",
    "text": "I haven't tried it with the `&lt;` being replaced, figured that would break everything"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 16:35:36",
    "text": "Yea i mean you could inject the whole element itself, like make it a string var and pop it in that might make the editor more happy"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-12-18 16:36:28",
    "text": "Heck probably dont even need to set a var just print the whole string plus your vars and whatnot"
  }
]