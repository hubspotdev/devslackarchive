[
  {
    "poster": {
      "poster_name": "Scott Brown",
      "poster_handle": "scott.brown523"
    },
    "time_stamp": "2024-01-12 01:29:26",
    "text": "This article should help you out. <https://developers.HubSpot.com/blog/creating-a-HubSpot-website-with-tailwind-css>"
  },
  {
    "poster": {
      "poster_name": "Chiedu Agborh",
      "poster_handle": "chiedu.agborh"
    },
    "time_stamp": "2024-01-12 02:26:29",
    "text": "Hi all, running a typescript project is there a types `'@HubSpot/cms-components/fields';`?\nThanks",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-01-12 04:12:33"
      },
      {
        "time_stamp": "2024-01-12 04:14:03"
      },
      {
        "time_stamp": "2024-01-12 06:56:08"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Mattis Rosenkranz",
      "poster_handle": "m.rosenkranz"
    },
    "time_stamp": "2024-01-12 04:12:33",
    "text": "Hey, yeah there is. I think I also had a problem with that at first. I don’t know what I did exactly to fix it but I think it was the tsconfig.json."
  },
  {
    "poster": {
      "poster_name": "Mattis Rosenkranz",
      "poster_handle": "m.rosenkranz"
    },
    "time_stamp": "2024-01-12 04:14:03",
    "text": "This is what mine looks like right now:\n```{\n  \"compilerOptions\": {\n    \"target\": \"ES2022\",\n    \"module\": \"nodenext\",\n    \"moduleResolution\": \"NodeNext\",\n    \"baseUrl\": \".\",\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"skipLibCheck\": true,\n    \"jsx\": \"react-jsx\"\n  },\n}```\n"
  },
  {
    "poster": {
      "poster_name": "Mattis Rosenkranz",
      "poster_handle": "m.rosenkranz"
    },
    "time_stamp": "2024-01-12 04:15:47",
    "text": "If you want to use it with the react cms building blocks, which is what this channel is about, you can follow this example app\n<https://github.com/HubSpot/cms-js-building-block-examples/tree/main/styling/styling-project/styling-app>"
  },
  {
    "text": "I believe the islands and graphql-storybook examles in <https://github.com/HubSpot/cms-js-building-block-examples> are examples of a working TS setup (though not all files those examples are TS)",
    "time_stamp": "2024-01-12 06:56:08"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-12 06:58:59",
    "text": "Can you be more specific about the id you are looking for? I’m getting a little thrown off by `content_id`… maybe the module “name” that ends up set by `{% module \"unique_module_name\" … %}`?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-12 07:02:09",
    "text": "We do not have a good answer here yet (like some `&lt;Menu … /&gt;` React component). The is something we’re working on (and nearly ready?) that could help here, but I’d need to check back."
  },
  {
    "poster": {
      "poster_name": "T. Roberts",
      "poster_handle": "direstardb"
    },
    "time_stamp": "2024-01-12 07:03:52",
    "text": "Thank you both for your responses :slightly_smiling_face:   I apologize if I posted this question in the wrong channel <@U061NQ66Y6S>  I don't want to use react so which channel should I have posted this question in?\n\n<@U06DDNTH9DE> I had seen that article, but that looks like it's about building the Tailwind css file from scratch.  I already have the tailwind css file from the original site.   Can I just copy it over to the HubSpot site as is?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:03:57",
    "text": "is there any reason I can't nest folders into the `modules` folder?\n```project\n- app\n-- components\n--- modules \n---- home-page\n----- hero-module-folder\n------ index.jsx\n---- contact-us-page```",
    "reply_count": 42,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2024-01-12 08:07:51"
      },
      {
        "time_stamp": "2024-01-12 08:08:49"
      },
      {
        "time_stamp": "2024-01-12 08:09:13"
      },
      {
        "time_stamp": "2024-01-12 08:09:59"
      },
      {
        "time_stamp": "2024-01-12 08:10:58"
      },
      {
        "time_stamp": "2024-01-12 08:17:38"
      },
      {
        "time_stamp": "2024-01-12 08:19:05"
      },
      {
        "time_stamp": "2024-01-12 08:20:06"
      },
      {
        "time_stamp": "2024-01-12 08:20:14"
      },
      {
        "time_stamp": "2024-01-12 08:21:11"
      },
      {
        "time_stamp": "2024-01-12 08:22:23"
      },
      {
        "time_stamp": "2024-01-12 08:22:41"
      },
      {
        "time_stamp": "2024-01-12 08:23:18"
      },
      {
        "time_stamp": "2024-01-12 08:23:31"
      },
      {
        "time_stamp": "2024-01-12 08:25:11"
      },
      {
        "time_stamp": "2024-01-12 08:25:24"
      },
      {
        "time_stamp": "2024-01-12 08:25:41"
      },
      {
        "time_stamp": "2024-01-12 08:26:03"
      },
      {
        "time_stamp": "2024-01-12 08:26:22"
      },
      {
        "time_stamp": "2024-01-12 08:26:44"
      },
      {
        "time_stamp": "2024-01-12 08:26:53"
      },
      {
        "time_stamp": "2024-01-12 08:26:57"
      },
      {
        "time_stamp": "2024-01-12 08:27:12"
      },
      {
        "time_stamp": "2024-01-12 08:27:26"
      },
      {
        "time_stamp": "2024-01-12 08:28:23"
      },
      {
        "time_stamp": "2024-01-12 08:28:42"
      },
      {
        "time_stamp": "2024-01-12 08:29:10"
      },
      {
        "time_stamp": "2024-01-12 08:29:22"
      },
      {
        "time_stamp": "2024-01-12 08:29:28"
      },
      {
        "time_stamp": "2024-01-12 08:30:30"
      },
      {
        "time_stamp": "2024-01-12 08:31:55"
      },
      {
        "time_stamp": "2024-01-12 08:37:42"
      },
      {
        "time_stamp": "2024-01-12 08:50:31"
      },
      {
        "time_stamp": "2024-01-12 08:51:30"
      },
      {
        "time_stamp": "2024-01-12 09:05:28"
      },
      {
        "time_stamp": "2024-01-12 09:05:35"
      },
      {
        "time_stamp": "2024-01-12 09:07:57"
      },
      {
        "time_stamp": "2024-01-12 09:13:47"
      },
      {
        "time_stamp": "2024-01-12 09:14:11"
      },
      {
        "time_stamp": "2024-01-12 09:27:45"
      },
      {
        "time_stamp": "2024-01-12 09:28:07"
      },
      {
        "time_stamp": "2024-01-12 09:28:25"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-12 08:07:51",
    "text": "Right now our logic that looks for all the modules to output from a build only looks at `modules/X.jsx` and `modules/&lt;child&gt;/index.jsx` (and not deeper nested things)."
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-12 08:08:49",
    "edited": {
      "time_stamp": "2024-01-12 08:08:57"
    },
    "text": "The counter question for you is how could/should our dev server and build logic know the difference between what a “module” is and what is some utility/helper JS file"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-12 08:09:13",
    "text": "(There are some options, but asking broadly first)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:09:59",
    "text": "I guess it would be based on a naming convention"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:10:58",
    "text": "but if it's not possible now then I can stick with the standard approach. I'm reorganizing everything at the moment and realizing I'll have a ton of modules"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-12 08:17:38",
    "text": "It certainly is possible, but I think it could be a little more complicated than allowing any JS/TS file in `modules/` to be module (like having to parse every file in the directory recursively, see all the ones that export the required stuff, etc). Some thoughts:\n• What if nested folders could be used, but they had to follow a convention (like `*-modules`)?\n• What if you had to list all of the nested folders some configurations somewhere (like `moduleFolders: [ … ]` in some JSON file)?\nAnywho, good feedback. We’ll think on it more. (And I’d love to know the number of modules you have and the number of sub-directories you’d ideally like to have)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:19:05",
    "text": "I essentially bumped into this issue with my traditional HubSpot setup previously. One sec, while I see what's useful there"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:20:06",
    "text": "I had to define entry files in my webpack config like this:\n```const entryFiles = [\n  {\n    entryFiles: glob.sync('./src/modules/**/*/module.js'),\n    outputName(item) {\n      return item.replace('./src/', '').replace('.js', '')\n    },\n  },\n  {\n    entryFiles: ['./src/index.js'],\n    outputName(item) {\n      return item.replace('./src/', 'js/').replace('.js', '')\n    },\n  },\n] ```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:20:14",
    "text": "blog post about it: <https://fasterbetter.dev/blog/HubSpot-webpack/add-glob>"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:21:11",
    "text": "I gather these are issues you're facing when thinking about the combo project + theme approach"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:22:23",
    "text": "^ essentially this would be like the JSON config option you mentioned"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:22:41",
    "text": "but I think the naming convention approach might be more straightforward"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:23:18",
    "text": "and might have the benefit of limiting certain modules to specific pages or maybe templates"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:23:31",
    "text": "really interesting problem though"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:25:11",
    "text": "another potential tweak would be to allow renaming the \"components\" folder"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:25:24",
    "text": "or maybe just rename it for everyone"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-12 08:25:41",
    "text": "Or configure multiple component folders?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:26:03",
    "text": "hmm..."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:26:22",
    "text": "yea, but \"purposeful\" configuring maybe or another set of standard folders?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:26:44",
    "text": "in my case, I have `app &gt; components &gt; hooks`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:26:53",
    "text": "and `app &gt; components &gt; lib`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:26:57",
    "text": "but those aren't \"components\""
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:27:12",
    "text": "so if it was `app &gt; hooks` , `app &gt; lib`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:27:26",
    "text": "that would be much cleaner IMO"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-12 08:28:23",
    "text": "You can have lib and hooks at the top level now, right? (And do relative paths to them from components?)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:28:42",
    "text": "can I? I didn't think so"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:29:10",
    "text": "I thought that everything had to be in the components folder"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:29:22",
    "text": "I can try now though"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:29:28",
    "text": "that would be great"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:30:30",
    "text": "I just made a different change that I want to confirm works first but I'll try in a bit and let you know."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:31:55",
    "text": "the change happens to be relevant too, it might have been you that suggested this but I've been trying to keep only the relevant HubSpot configuration inside of the `modules` folder and then a separate folder with the main implementation—but I ended up not liking that. Combining them back into the `modules` folder"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:37:42",
    "text": "let me throw one more thing at you, I'm refactoring now and redoing these paths is definitely a pain:\n`import { cn } from \"../../../../lib/utils\";`\n\nI'd love:\n`import { cn } from \"@/lib/utils\";`"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-12 08:50:31",
    "text": "I here ya. A few months ago I was messing with making our stuff fully support <https://learn.saleor.io/setup/typescript-path-aliases/|Typescript path aliases>, so we could rely on those and not need to add our own custom config… but I ran into some issues. Probably should revisit that"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 08:51:30",
    "text": "^ yup, that would be perfect"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 09:05:28",
    "text": "a hooks folder outside of the components folder works just fine"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 09:05:35",
    "text": "not sure why I thought otherwise, but that's way better"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 09:07:57",
    "text": "and this is a dumb question...but to avoid too much back and fourth, I can use an absolute path to import right? like `import { cn } from '/app/lib/utils.ts``"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-12 09:13:47",
    "text": "i believe that won’t work, which is why the `@/` shortcut feature exists"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 09:14:11",
    "text": "ok, yea, I tried a few variations and it doesn't seem to work"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-12 09:27:45",
    "text": "If you did absolute it would have to be from the root of your filesystem on your computer (but that wouldn’t work during the full build)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 09:28:07",
    "text": "right, yea, makes sense"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 09:28:25",
    "edited": {
      "time_stamp": "2024-01-12 09:28:31"
    },
    "text": "almost done refactoring out the lib and hooks folder though...not too bad all things considered"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 10:55:39",
    "text": "should I not use typescript for this meta export?\n```export { meta } from \"./meta.ts\";```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 10:55:45",
    "text": "I'm getting `An import path can only end with a '.ts' extension when 'allowImportingTsExtensions' is enabled.`",
    "reply_count": 16,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-01-12 10:56:46"
      },
      {
        "time_stamp": "2024-01-12 10:57:10"
      },
      {
        "time_stamp": "2024-01-12 10:57:27"
      },
      {
        "time_stamp": "2024-01-12 10:58:00"
      },
      {
        "time_stamp": "2024-01-12 10:58:19"
      },
      {
        "time_stamp": "2024-01-12 10:58:51"
      },
      {
        "time_stamp": "2024-01-12 10:59:16"
      },
      {
        "time_stamp": "2024-01-12 10:59:45"
      },
      {
        "time_stamp": "2024-01-12 11:00:09"
      },
      {
        "time_stamp": "2024-01-12 11:01:25"
      },
      {
        "time_stamp": "2024-01-12 11:01:45"
      },
      {
        "time_stamp": "2024-01-12 11:01:47"
      },
      {
        "time_stamp": "2024-01-12 11:01:51"
      },
      {
        "time_stamp": "2024-01-12 11:01:58"
      },
      {
        "time_stamp": "2024-01-12 11:02:06"
      },
      {
        "time_stamp": "2024-01-12 11:02:21"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-12 10:56:46",
    "text": "this is more a general issue with ESM/typescript, where the default behavior is imports aren’t supposed to actually use `.ts` or `.tsx` in them and instead should be `.js` or `.jsx`"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-12 10:57:10",
    "text": "you may say ‘but the actual file there is `.ts` !’ and you would be right and i would agree with you that it doesn’t make much sense"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-12 10:57:27",
    "edited": {
      "time_stamp": "2024-01-12 10:57:33"
    },
    "text": "you can turn on that option it mentions in `tsconfig`, they added that after a bunch of negative feedback"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 10:58:00",
    "text": "ok, cool, I'll give that a shot, and also just updated my `tsconfig.json` to match the boilerplate just in case"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 10:58:19",
    "text": "refactoring a typescript component to see if it really helps..."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 10:58:51",
    "text": "also, in the boilerplate `tsconfig.json`, it shows:\n```Option 'module' must be set to 'Node16' when option 'moduleResolution' is set to 'Node16'.ts```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 10:59:16",
    "text": "any thoughts on that?"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-12 10:59:45",
    "text": "sounds right"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 11:00:09",
    "edited": {
      "time_stamp": "2024-01-12 11:00:16"
    },
    "text": "k, I only mention it because the example uses `commonjs`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 11:01:25",
    "text": "rabbit hole:\n```Option 'allowImportingTsExtensions' can only be used when either 'noEmit' or 'emitDeclarationOnly' is set.ts```\n"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-12 11:01:45",
    "text": "oh hmm"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-12 11:01:47",
    "text": "ok then i would use `.js`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 11:01:51",
    "text": "cool"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-12 11:01:58",
    "text": "or whatever vscode autosuggests"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 11:02:06",
    "text": "happy to just do whatever you recommend as I figure this out"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-12 11:02:21",
    "text": "unfortunately to some degree the entire TS ecosystem is collectively figuring it out as well haha"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2024-01-12 12:04:49",
    "text": "Just looking for a unique identifier for a module instance in the CMS. Use case is a global component that once closed, that state persists persists through sessions... thinking localstorage w/ id as key"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-12 12:30:25",
    "edited": {
      "time_stamp": "2024-01-12 12:31:37"
    },
    "text": "Oh, so the _module_ definition ID and not the _module instance_ ID. Because I think you want this ID to be the same… even if different pages include the same module?\n\n(Though if it is a global module than the instance ID would work too I believe)"
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2024-01-12 12:31:47",
    "text": "I need the instance ID. If I use the definition ID, the local storage key would persist for other instances in future. "
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2024-01-12 12:33:29",
    "text": "So for instance, if it was a modal, any new modal in future would also be hidden using the def ID"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-12 12:36:35",
    "text": "Ok."
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-12 12:37:20",
    "text": "Right now I _think_ that `props.hublParameters` on your JS module will have various extra info attached inlcuding the module name (instance ID). We should have a better API for it, but I think it can do the trick for now"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 13:37:41",
    "text": "is placeholder text not available when using a `&lt;TextField/&gt;`?",
    "reply_count": 4,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2024-01-12 15:07:30"
      },
      {
        "time_stamp": "2024-01-12 15:52:26"
      },
      {
        "time_stamp": "2024-01-12 15:55:01"
      },
      {
        "time_stamp": "2024-01-12 15:56:06"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 13:38:15",
    "text": "just noticed in the example that `default` is used but that's not quite the same"
  },
  {
    "poster": {
      "poster_name": "Chris Stone",
      "poster_handle": "chris.stone603"
    },
    "time_stamp": "2024-01-12 15:07:30",
    "text": "I don't think that field supports placeholder or help text. I believe you can set a <https://developers.HubSpot.com/docs/cms/building-blocks/module-theme-fields#text|default value> though."
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-12 15:52:26",
    "text": "Huh `inline_help_text` and `help_text` don’t work with `&lt;TextField/&gt;?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 15:55:01",
    "text": "both of those work, it's just `placeholder` that doesn't exist/work"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-12 15:56:06",
    "text": "```Type '{ name: string; placeholder: string; label: string; default: string; inlineHelpText: string; helpText: string; }' is not assignable to type 'IntrinsicAttributes &amp; AdaptChildren&lt;AdaptChildren&lt;Omit&lt;TextFieldType, \"type\"&gt;&gt;&gt;'.\n  Property 'placeholder' does not exist on type 'IntrinsicAttributes &amp; AdaptChildren&lt;AdaptChildren&lt;Omit&lt;TextFieldType, \"type\"&gt;&gt;&gt;'.```\n"
  }
]