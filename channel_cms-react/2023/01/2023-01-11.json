[
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 06:04:59",
    "text": "<@UCY83QS6Q> double backflipping to tailwind, any chance you could add this into the beta sooner than later? I'm happy to test to see if it causes a ruckus."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 06:12:23",
    "text": "<@UCY83QS6Q> although, it's a bit unclear how exactly we can connect our index.css file to our template html file without access to the build process"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 06:14:53",
    "text": "nevermind—like this:\n```import '../../../styles/index.css';```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 06:15:08",
    "text": "everything seems to work"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 06:15:39",
    "edited": {
      "time_stamp": "2023-01-11 06:15:52"
    },
    "text": "only relevant setup was including the `hello-world-project` in the taillwind config file for where to look"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 06:17:02",
    "text": "it would be nice to include global styles. Right now it looks like I can only use tailwind with a JS module"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 06:17:29",
    "text": "and couldn't (for example) add a global css file to `base.hubl.html`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 06:25:28",
    "text": "are third party imports blocked altogether? I was hoping to include `import { Switch } from '@headlessui/react';` from react"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 06:25:58",
    "text": "I'm getting this error in console:\n```react_devtools_backend.js:4012 Warning: Prop `id` did not match. Server: \"headlessui-switch-:Rl:\" Client: \"headlessui-switch-:island-1-Ra:\"```\n",
    "reply_count": 6,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-01-11 06:31:21"
      },
      {
        "time_stamp": "2023-01-11 06:32:24"
      },
      {
        "time_stamp": "2023-01-11 06:33:33"
      },
      {
        "time_stamp": "2023-01-11 06:33:57"
      },
      {
        "time_stamp": "2023-01-11 06:34:10"
      },
      {
        "time_stamp": "2023-01-11 06:34:22"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-01-11 06:31:21",
    "edited": {
      "time_stamp": "2023-01-11 06:33:12"
    },
    "text": "3rd party deps will work locally, however when you `hs project upload` , the deployed build will not have the 3rd party deps and imports to those packages will fail."
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-01-11 06:32:24",
    "text": "As far as the error you are seeing there, I'm not familiar with `headlessui` ... however it looks at first glance to be some ID generation missmatch re: client/server"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 06:33:33",
    "edited": {
      "time_stamp": "2023-01-11 06:33:42"
    },
    "text": "any rough idea if 3rd party deps will be allowed sooner than later?"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-01-11 06:33:57",
    "text": "We are actively working on a solution for 3rd party deps and it's of high priority for us."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 06:34:10",
    "text": "awesome, thank you"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 06:34:22",
    "text": "I'll try to get it working then"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 06:52:41",
    "text": "there might actually be a weird caching issue...not really sure what it is. Some of the classes are applied...the ones I added first I think"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 06:52:46",
    "text": "now it's hard to get it to update"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 07:13:33",
    "text": "it seems to be related to where content actually lives. If I use `content: ['./**/*.{js,ts,jsx,tsx}'],` (which you should never do) —I can actually get it to work after a few minute wait"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 07:14:01",
    "text": "pointing that to the `hello-world-project`  folder does not seem to work"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 07:18:11",
    "text": "after all that it might have been a typo: `content: ['./hello-world-project/cms-assets/components/**/*.{js,ts,jsx,tsx}'],` works"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 07:20:15",
    "text": "sorry for the stream of consciousness posts"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-11 07:32:14",
    "text": "No worries, love the feedback any way it comes"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-11 07:35:41",
    "text": "Going to take one of the points above and make it a new thread and then come back to the caching/`content` stuff…"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-11 07:37:36",
    "text": "Pulling out from the <https://HubSpotdev.slack.com/archives/C04AY1H2204/p1673443022807819?thread_ts=1673036495.424399&amp;cid=C04AY1H2204|thread above>.\n\nThat is an interesting use case that we haven’t considered yet. :thread:…",
    "reply_count": 12,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-01-11 07:37:56"
      },
      {
        "time_stamp": "2023-01-11 07:39:38"
      },
      {
        "time_stamp": "2023-01-11 07:40:10"
      },
      {
        "time_stamp": "2023-01-11 07:41:27"
      },
      {
        "time_stamp": "2023-01-11 07:42:04"
      },
      {
        "time_stamp": "2023-01-11 07:42:14"
      },
      {
        "time_stamp": "2023-01-11 07:43:27"
      },
      {
        "time_stamp": "2023-01-11 07:44:10"
      },
      {
        "time_stamp": "2023-01-11 07:45:05"
      },
      {
        "time_stamp": "2023-01-11 07:49:44"
      },
      {
        "time_stamp": "2023-01-11 07:52:57"
      },
      {
        "time_stamp": "2023-01-11 07:53:40"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-11 07:37:56",
    "text": "It is heavy-handed, but you could have a JS partial that renders no HTML (`return null` in a component), but imports a CSS file. I don’t think that will really work if you want to put something in the HEAD, but it gets the job done (I think).\n\nMaybe there could be some kind of `{{ refer_to_js_built_asset_url(path) }}` function we could consider :thinking_face:"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-11 07:39:01",
    "text": "What specifically are you referring to with `content`… I assume that is a configuration option for tailwind?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 07:39:38",
    "text": "maybe even as a bigger picture idea you could allow the Vite build process everywhere (kind of like I normally use Webpack)"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-11 07:39:41",
    "text": "And for the “no update” problem is that a think where you are not seeing the change in the local dev server? Or not seeing it after a deploy?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-11 07:40:10",
    "text": "Could you give me more details on that? What do you mean by “everywhere”?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 07:41:27",
    "text": "in my normal CMS projects, I use webpack to use postcss, run babel, etc."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 07:42:04",
    "text": "I have an entry index.js file, import modules, etc."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 07:42:14",
    "text": "It would be nice if I could have a similar set up but with Vite"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 07:43:27",
    "text": "I have a few blog posts about the setup. This is the latest (a little bit out of date): <https://fasterbetter.dev/blog/HubSpot-webpack/add-glob>"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-11 07:44:10",
    "edited": {
      "time_stamp": "2023-01-11 07:44:16"
    },
    "text": "So is that both…\n• Being able to customize the Vite configuration? (that we have under the covers but you cannot currently access)\n• Being able to control all of the page’s HTML from Vite and JS components?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 07:45:05",
    "text": "yes (although not sure about \"from JS components\" in the last point)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 07:47:27",
    "text": "yea, the `content` is part of the tailwind config. I'm pretty sure I had a typo and none of this is relevant anymore"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 07:47:38",
    "text": "all of this is running on localhost so far...have not tried deploying"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-11 07:49:44",
    "text": "I was trying not to ask a more leading question, but not very well :laughing:… basically I’m trying to ask if to do what you want you need to be able to fully product the whole HTML output (head, body, etc) from the JS built rather than only plug in JS modules &amp; partials into HubL.\n\nSaid another way how far can you get with “just” JS modules &amp; partials before it becomes too limiting?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-11 07:51:15",
    "text": "When you’ve got things working locally, could you share your package.json… to see if we can whip up some hack/workaround to get those packages in your project build (before we have full npm dep support)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 07:52:57",
    "text": "yea, I wouldn't mind producing the whole html output. The only true limitation I've run into so far is this global CSS in the head issue"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 07:53:40",
    "text": "but now when I work on regular CMS projects I feel like I would 100% be missing out if I couldn't also use a build process with my regular JS/CSS files"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 07:55:43",
    "text": "sure thing, the last issue I'm having is this warning:\n```Warning: Prop `id` did not match. Server: \"headlessui-disclosure-button-:R5b:\" Client: \"headlessui-disclosure-button-:island-1-R2l:\"```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 07:55:56",
    "text": "I don't think I actually can fix that"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 07:56:19",
    "text": "I don't manage that id, I'm not sure why it's dynamic"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 07:57:10",
    "text": "I was hoping to use TailwindUI for some of my components: <https://tailwindui.com/>"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-11 07:57:29",
    "text": "they import from `@headlessui` for pretty much everything"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-11 08:13:14",
    "text": "The `*:island-1-R2l:` ID mismatch is probably something with the IDs we generate on the island wrapper element (and how react’s `useId` is going to return something different on the client &amp; server for components _inside_ an island).\n\nProbably will need to look a bit closer at some specifics to have a better recommendation"
  }
]