[
  {
    "poster": {
      "poster_name": "Stacey Thomas",
      "poster_handle": "stacey.thomas"
    },
    "time_stamp": "2024-07-12 03:28:44",
    "text": "Could it be something as simple as quote permissions allowed for the user accessing that particular portal?\n\nDoes the quote you're trying to patch definitely exist in that portal? (not accidentally using an ID for the quote in a different portal?)\n\nDoes that specific portal use the properties you are trying to update in a different way (different data-input type or some validation on those properties set by them?)\n\nYou may have considered those things already, in which case I hope someone comes along with the answer :)"
  },
  {
    "text": "I can use fully qualified CO names in API endpoints, right? Like this? Or do I always need to use the ID instead, i.e. 2-etc. ?",
    "time_stamp": "2024-07-12 06:35:27",
    "reply_count": 3,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2024-07-12 08:03:36"
      },
      {
        "time_stamp": "2024-07-12 08:03:55"
      },
      {
        "time_stamp": "2024-07-12 18:34:17"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Brad Ahrens",
      "poster_handle": "accounts110"
    },
    "time_stamp": "2024-07-12 07:25:43",
    "text": "Thanks Dennis! :raised_hands:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2024-07-12 08:03:36",
    "text": "the FQN will look something like\n`p21751048_addresses`\nyou can do a quick look at the schema to see what it is\n`<https://api.hubapi.com/crm/v3/schemas/>`"
  },
  {
    "poster": {
      "poster_name": "Bob Balm",
      "poster_handle": "bob209"
    },
    "time_stamp": "2024-07-12 08:03:55",
    "text": "Aha, that explains"
  },
  {
    "poster": {
      "poster_name": "Ryan Huff",
      "poster_handle": "ryan687"
    },
    "time_stamp": "2024-07-12 08:11:11",
    "text": "No… I’ve tried it with a personal access token and an OAuth token with all the possible scopes"
  },
  {
    "poster": {
      "poster_name": "Ryan Huff",
      "poster_handle": "ryan687"
    },
    "time_stamp": "2024-07-12 08:11:27",
    "text": "It works with the same scopes in a different portal. Same request"
  },
  {
    "poster": {
      "poster_name": "Ryan Huff",
      "poster_handle": "ryan687"
    },
    "time_stamp": "2024-07-12 08:11:59",
    "text": "Are there portal-level permissions I’m overlooking?"
  },
  {
    "poster": {
      "poster_name": "Stephen Hominick",
      "poster_handle": "never.go.hollow.trill"
    },
    "time_stamp": "2024-07-12 12:26:09",
    "edited": {
      "time_stamp": "2024-07-12 12:27:14"
    },
    "text": "Yeah, that was my thought as well despite the types and docs saying otherwise:\n\n> publishDate: _Date_\n> The date (ISO8601 format) the page is to be published at.\nAnd sure enough, that doesn't work, won't even reach the point of making the request:\n```return data.toISOString();\n                            ^\n\nTypeError: data.toISOString is not a function\n    at ObjectSerializer.serialize (/Users/stephen.hominick/dev/engineering-HubSpot/node_modules/@HubSpot/api-client/lib/codegen/cms/pages/models/ObjectSerializer.js:263:29)```"
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2024-07-12 18:34:17",
    "text": "I’ve always used the ID instead."
  }
]