[
  {
    "poster": {
      "poster_name": "Thomas Dodds",
      "poster_handle": "thomas.dodds"
    },
    "time_stamp": "2019-03-22 07:31:35",
    "text": "Hi team\n\nI am working on emails and coded my own drag and drop modules\n\nI have recently had to replace all the image select fields with rich text snippets in order to add ?noresize param to stop the images resizing and becoming blurry\n\nHowever the rich text snippet automatically puts the contents in a div.\n\nIs there away to get the content of thr rich text snippet without using the default html div mark up it pulls in?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-03-22 07:33:42",
    "text": "barnacling on to the above from <@UFQ5JDYCF>.  i feel the image field should have an option to add the noresize param.  email templates are where i use this the most"
  },
  {
    "poster": {
      "poster_name": "Thomas Dodds",
      "poster_handle": "thomas.dodds"
    },
    "time_stamp": "2019-03-22 07:34:36",
    "text": "thanks <@UD53A9UUR> but from I can see the image select fields do not provide access to the url directly but lets yous elect an image from the media library."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-22 07:35:22",
    "text": "they allow you both while setting the image. there’s just no way to edit the URL of an image already placed without basically just setting it fresh"
  },
  {
    "poster": {
      "poster_name": "Thomas Dodds",
      "poster_handle": "thomas.dodds"
    },
    "time_stamp": "2019-03-22 07:35:25",
    "text": "i did ask for this to be updated but didnt get a response"
  },
  {
    "poster": {
      "poster_name": "Thomas Dodds",
      "poster_handle": "thomas.dodds"
    },
    "time_stamp": "2019-03-22 07:35:42",
    "text": "maybe they will work on it on the next release of updates"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-03-22 07:35:56",
    "text": "i mean as a toggle in the dm when selecting an image",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-03-22 07:36:23"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Thomas Dodds",
      "poster_handle": "thomas.dodds"
    },
    "time_stamp": "2019-03-22 07:36:23",
    "text": "yeah got you…. would make sense right"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-03-22 08:13:49",
    "text": "Can HubSpot just natively double image sizes in email? Since `srcset` gets stripped by major clients. So if a user set the width to 300px, an image with a width of 600px would be served to users."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-22 08:17:42",
    "text": "Yes, I’ve used srcset in HubSpot sent emails before."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-22 08:18:43",
    "text": "though you haven’t control the image tag yourself. For example if you want that image to display 300px wide set the src to that, but include srcsets for higher res and lower res"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-22 08:19:07",
    "text": "the reason is outlook likes to display images at their actual resolution. Cuz word."
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-03-22 08:30:05",
    "text": "My question above was more of an idea to have hs automatically serve images at double their size, but keep dimensions set at half.\n\nFor example, If I set an image to 500px wide, currently HubSpot resizes it to 500px. I want them to resize it to 1000px and still have the markup for 500px. Most emails are read on retina screens, so why not just send images at twice their width?"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-03-22 08:30:43",
    "text": "Instead of forcing users to add `?noresize`"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-22 08:38:49",
    "text": "I would say Yes your idea is good. I’d just prefer the output code look like:\n```\n&lt;img src=\"ResizeImgUrlAtDisplayedWidth.png\" srcset=\"resizeUrls for 600px, 1200px and smaller etc.\"&gt;\n```"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-22 08:38:58",
    "text": "oh"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-22 08:39:19",
    "text": "and width and style attributes that follow this as default:<https://templates.mailchimp.com/development/responsive-email/fluid-images/>",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-03-22 13:23:40"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Shay Redmond",
      "poster_handle": "shay"
    },
    "time_stamp": "2019-03-22 13:02:06",
    "text": "Hi Joe, thanks for the feedback, sorry for the delay getting back to you on this, my notification settings got a little skewy and I didn't see the activity in here.\n\nRe 1. taking a look at things on our side it looks like the original underlying issue has been resolved, but checking on your support ticket it seems like there may be some outstanding investigating needed. I just ran a test with one of the examples provided and it appears to work inside my gmail:"
  },
  {
    "text": "",
    "time_stamp": "2019-03-22 13:02:13"
  },
  {
    "poster": {
      "poster_name": "Shay Redmond",
      "poster_handle": "shay"
    },
    "time_stamp": "2019-03-22 13:03:01",
    "text": "Working with Sam from our support team to run some more tests, and we'll make sure and re-open our engineering investigation if we can reproduce"
  },
  {
    "poster": {
      "poster_name": "Shay Redmond",
      "poster_handle": "shay"
    },
    "time_stamp": "2019-03-22 13:04:17",
    "text": "re 2. the lack of image insertion within rich text is currently intended. This model of editor is known as \"block-first\" and within email it means we can ensure that the email itself is mobile responsive. When images are included within text, the results on mobile can be really unpredictable."
  },
  {
    "poster": {
      "poster_name": "Shay Redmond",
      "poster_handle": "shay"
    },
    "time_stamp": "2019-03-22 13:05:52",
    "text": "In saying that, we know that there's a deep interest in this capability, so we're planning on investing some time to find workarounds for this in the future."
  },
  {
    "poster": {
      "poster_name": "Shay Redmond",
      "poster_handle": "shay"
    },
    "time_stamp": "2019-03-22 13:07:29",
    "text": "In relation to the `?noresize` parameter, we very recently released a new resampling engine for images uploaded within the file manager that should make a big impact on this compromises form the previous version, and ideally remove the need to use the `?noresize` parameter completely. If you have some images you've had trouble with in the past, please let me know if you're still seeing issues with them."
  },
  {
    "poster": {
      "poster_name": "Shay Redmond",
      "poster_handle": "shay"
    },
    "time_stamp": "2019-03-22 13:08:33",
    "text": "Hi John! Sorry for the delay here. We don't have any concrete plans for this just yet. To confirm, would it just be for text rendering, or more? Do you have any example documentation you can share from other providers that walk through how you've seen this work in the past?"
  },
  {
    "poster": {
      "poster_name": "Shay Redmond",
      "poster_handle": "shay"
    },
    "time_stamp": "2019-03-22 13:08:56",
    "text": "Hi AJ! Sorry for the delay getting back to you here."
  },
  {
    "poster": {
      "poster_name": "Shay Redmond",
      "poster_handle": "shay"
    },
    "time_stamp": "2019-03-22 13:10:17",
    "text": "You should be able to use the normal Button module, and within the \"Link to\" field you'll see an option for CTA:"
  },
  {
    "text": "",
    "time_stamp": "2019-03-22 13:10:21"
  },
  {
    "poster": {
      "poster_name": "Shay Redmond",
      "poster_handle": "shay"
    },
    "time_stamp": "2019-03-22 13:11:34",
    "text": "Thanks for your feedback, Matthew! We have it on our roadmap pretty soon to provide the ability to remove/customise the padding wrapped around all modules, including custom ones, which should fix this."
  },
  {
    "poster": {
      "poster_name": "Shay Redmond",
      "poster_handle": "shay"
    },
    "time_stamp": "2019-03-22 13:12:34",
    "text": "Can you go into a little more detail about the background image issue you're seeing? We recently fixed a few issues with bg images across clients, so I want to make sure we addressed the one you're outlining here too."
  },
  {
    "poster": {
      "poster_name": "Shay Redmond",
      "poster_handle": "shay"
    },
    "time_stamp": "2019-03-22 13:13:35",
    "text": "At the moment I'm afraid there isn't a way to edit this, Joni, but we're moving on to some work shortly to integrate the default HubSpot email settings into the drag and drop email template rendering which should provide you with the capability you're looking for."
  },
  {
    "poster": {
      "poster_name": "Shay Redmond",
      "poster_handle": "shay"
    },
    "time_stamp": "2019-03-22 13:14:32",
    "text": "Hi Karis, could you DM me a link to the email you're working in and I can take a look and confirm if it's something we can help with :+1:"
  },
  {
    "poster": {
      "poster_name": "Shay Redmond",
      "poster_handle": "shay"
    },
    "time_stamp": "2019-03-22 13:16:56",
    "text": "Hey all! Wanted to provide some context to how we're thinking about the above image needs for the dnd email editor :wave:"
  },
  {
    "poster": {
      "poster_name": "Shay Redmond",
      "poster_handle": "shay"
    },
    "time_stamp": "2019-03-22 13:18:37",
    "text": "First off, we actually set out to try and solve this at the image rendering level first, to try and remove the need to use the `?noresize` param at all. I'm happy to say that we very recently released a very significant rebuild of the image resampling engine we use (this time we have much more control over it, and the ability to iterate on it ourselves)"
  },
  {
    "poster": {
      "poster_name": "Shay Redmond",
      "poster_handle": "shay"
    },
    "time_stamp": "2019-03-22 13:19:37",
    "text": "Today, if you go into an email, and don't include the `?noresize` parameter, the results should be much better than before. If you have examples of images that are still coming out fuzzy without the parameter, please send some examples my way and we can tweak our settings to make improvements."
  },
  {
    "poster": {
      "poster_name": "Shay Redmond",
      "poster_handle": "shay"
    },
    "time_stamp": "2019-03-22 13:22:41",
    "text": "Tacking on to that, re the `srcset` attributes, to answer your question <@U3T21PDBK>, we likely wouldn't want to double up the dimensions provided, i.e. if you provided a 500px image, we wouldn't want to scale it up to 1000px as it's pretty likely that we wouldn't be able to do a good job upscaling but if you were to provide the opposite, i.e. give us a 1000px image for a 500px space, we could provide the 1000px image *and* an automatically downscaled 500px image as part of a new `srcset` attribute on images. This is how CTAs handle retina support on websites today, taking an @2x provided image and resizing it for the @1x copy too. Does that sound like it might do the trick in your emails?"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-03-22 13:22:49",
    "text": "Ah ok, thanks Shay!"
  },
  {
    "poster": {
      "poster_name": "Shay Redmond",
      "poster_handle": "shay"
    },
    "time_stamp": "2019-03-22 13:23:40",
    "text": "We actually put this solution into practice for normal images in the drag and drop editor already :+1:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-22 13:23:59",
    "text": "your answer there Shay sounds like the right solution"
  },
  {
    "poster": {
      "poster_name": "Shay Redmond",
      "poster_handle": "shay"
    },
    "time_stamp": "2019-03-22 13:24:28",
    "text": "I appreciate that that's not super clear, we're looking for more elegant answers to this with the CTA team pretty regularly :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-22 13:24:54",
    "text": "as advice though the src= should be the displayed size to prevent outlook being stupid. that way email clients that support retina get it, and  outlook still isnt nuked"
  },
  {
    "poster": {
      "poster_name": "Shay Redmond",
      "poster_handle": "shay"
    },
    "time_stamp": "2019-03-22 13:26:11",
    "text": "Yup, that's how we'd go about it. The `src` would be the \"dumb\" version, the one that'd been resampled _down_ to the actual intended size, but the `srcset` would contain the \"original\" version at 1000px labeled as the @2x version for retina displays"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-03-22 13:26:17",
    "text": "<@U24DCSJBE> That sounds perfect. <@U7SL518D6> as long as the image has a width attribute it won’t get blown up"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-03-22 13:27:57",
    "text": "just text rendering. Mainly I have looked at campaign monitor"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-03-22 13:29:24",
    "text": "mainly I have looked at campaign monitor’s d&amp;d editor, and they will wrap text in a `span class=\"p{{ font-size }}\"`"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-03-22 13:29:37",
    "text": "then have css already written for that class"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-03-22 13:39:35",
    "text": "sorry to blow up this thread, one thing that is not possible/very dangerous with this technique is individually sized words in a paragraph."
  }
]