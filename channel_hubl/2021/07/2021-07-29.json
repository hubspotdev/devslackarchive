[
  {
    "poster": {
      "poster_name": "Jack Smith",
      "poster_handle": "jasmith"
    },
    "time_stamp": "2021-07-29 07:50:58",
    "text": "Oh yeah, I added support for assignment blocks and with that there's an interface `FlexibleTag` that has a method `boolean hasEndTag(TagToken tagToken);` which lets the parser know whether it needs to look for an ending tag based on what the starting tag token is. This is currently just in the head of Jinjava, so assignment blocks can be used in HubL and I plan on doing a new release soon"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-07-29 10:25:03",
    "text": "",
    "reply_count": 7,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2021-07-29 14:43:20"
      },
      {
        "time_stamp": "2021-07-29 14:56:52"
      },
      {
        "time_stamp": "2021-07-29 15:03:57"
      },
      {
        "time_stamp": "2021-07-29 15:04:57"
      },
      {
        "time_stamp": "2021-07-29 15:07:08"
      },
      {
        "time_stamp": "2021-07-29 15:12:37"
      },
      {
        "time_stamp": "2021-07-29 15:16:20"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Bhréin Brannick",
      "poster_handle": "bhreinb"
    },
    "time_stamp": "2021-07-29 10:47:26",
    "text": "Cool look forward to getting this new feature plus new release too, thanks <@UCJANAW1Y> :+1:"
  },
  {
    "poster": {
      "poster_name": "Adam Wright",
      "poster_handle": "adam377"
    },
    "time_stamp": "2021-07-29 14:43:20",
    "text": "This is interesting. Is it intended strictly for empty layout containers? Put another way, can a dnd partial include modules in its own markup, or does that fall under the usual technical restrictions about nesting modules?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-07-29 14:56:52",
    "text": "Not certain what you mean by empty layout containers.\n\nBasically imagine the current dnd_section element in a dnd_area.\n\nYou can now create section templates. Separate files that contain the section’s code. All of it’s columns, rows, nesting of the columns and rows, as well as your modules.\n\nYou can then pass a context parameter to the partial for each instance you want to add to a template. Meaning that you could include this section several times in one dnd_area if you wanted or multiple dnd_areas. Filling all of them with unique default content, setting different default style attributes etc programmatically.\n\nYou can apply a CSS `class` to the section template. Meaning all of the sections created with it get styled with any styling applied to that class."
  },
  {
    "poster": {
      "poster_name": "Adam Wright",
      "poster_handle": "adam377"
    },
    "time_stamp": "2021-07-29 15:03:57",
    "edited": {
      "time_stamp": "2021-07-29 15:09:57"
    },
    "text": "Found the documentation and started going through it. It began making more sense after that :rolling_on_the_floor_laughing:, but I’m still curious if a section template’s `dnd_section` can _directly_ contain modules (so, you’d have some content that’s configurable, but still “fixed” in place) or if the modules have to be contained within the column/row structure."
  },
  {
    "poster": {
      "poster_name": "Adam Wright",
      "poster_handle": "adam377"
    },
    "time_stamp": "2021-07-29 15:04:57",
    "text": "Might be easier to just wait and see if I’m not explaining myself very well. It’s been a while since I’ve worked within the dnd side of HubL."
  },
  {
    "poster": {
      "poster_name": "Adam Wright",
      "poster_handle": "adam377"
    },
    "time_stamp": "2021-07-29 15:07:08",
    "text": "My recollection from last time is that HubL was pretty particular about what could go where once you’re inside of a `dnd_area`"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-07-29 15:12:37",
    "text": "`dnd_area` rules still apply. We see the sections functionality almost as foundational to the CMS as the module system, and we are thinking about more advanced uses of them. You’ll have to stay tuned as we iterate."
  },
  {
    "poster": {
      "poster_name": "Adam Wright",
      "poster_handle": "adam377"
    },
    "time_stamp": "2021-07-29 15:16:20",
    "text": "Alrighty, sounds like a step in the right direction either way :raised_hands:"
  }
]