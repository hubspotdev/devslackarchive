[
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2018-07-24 07:59:29",
    "edited": {
      "time_stamp": "2018-07-24 07:59:45"
    },
    "text": "is there a way to get all the links in certain HubSpot menu? I want to control the markup of a menu in a custom module. I was wondering if there was a way to achieve something like below:\n```{% for link in menu %}&lt;a class=\"foo\" href=\"{{ link.href }}\"&gt;{{ link.text }}&lt;/a&gt;{% endfor %}```",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-07-24 08:08:37"
      },
      {
        "time_stamp": "2018-07-24 08:36:50"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-07-24 08:08:37",
    "text": "If there isn’t I want it"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-07-24 08:36:50",
    "text": "You can do it with simple menus, but not advanced menus"
  },
  null,
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-07-24 13:06:35",
    "text": "There's not an easy way to merge two dicts, similar to PHP's array_merge, is there?"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-07-24 13:07:45",
    "text": "Where if the two have a duplicate key, it picks the value from one or the other"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-07-24 13:09:02",
    "text": "I don’t know how - but perhaps do that in javascript instead? as in output the things you need to merge in a way you can grab em with javascript and let js do the magic"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-07-24 13:28:40",
    "text": "I suppose that's an option"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-07-24 13:32:02",
    "text": "My only other idea is to just do an or on everything I want to print, like `{{ dict1.key or dict2.key }}`. Seems a little tedious though."
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-07-24 13:44:46",
    "text": "You could put up an issue in <https://github.com/HubSpot/jinjava> to add an `update` tag"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-07-24 13:46:01",
    "text": "Related issue: <https://github.com/HubSpot/jinjava/issues/197>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-07-24 14:26:29",
    "text": "done this before but kinda forgot how.\n\nI have a custom module with a field in it. At the template level I want to grab the value of that field.\n\nI know i need to do `{{all_widgets.[something]}}` but not sure what that something is. anyone know off the top of their heads how to grab a specific module this way? I could probably do {{all_widgets[0].fieldname}} but I can’t garuntee it will always be the top most custom module"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-07-24 14:27:35",
    "text": "oh and when I do just {{all_widgets}} I get a pyList"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-07-24 14:41:14",
    "text": "nvm doesn’t appear possible. found workaround for my problem though"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-07-24 16:47:11",
    "text": "I used to loop the all_widgets but I think you can even manage with `selectattr`\ndidn't tried but should be something like:\n`{{ content.all_widget|selectattr(\"name=cm_name\") }}`",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2018-07-24 18:20:43"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-07-24 16:50:39",
    "edited": {
      "time_stamp": "2018-07-24 16:51:31"
    },
    "text": "is there any way to add to an array a new key+val that is saved in a variable?\nlike `{% set array[key] = value %}`\nAlso tried with:\n`{% set dummy = array.update({key:value}) %}`\n`{% set dummy = array.update({ \"{{key}}\":\"{{value}}\" }) %}`\nbut didn't worked :thinking_face:"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-07-24 16:52:54",
    "edited": {
      "time_stamp": "2018-07-25 03:19:19"
    },
    "text": "it set the key as literally `key` or `{{key}}`\nlike\n`{`\n`{{key}}: value`\n`}`\ninstead the real value on the vars"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-07-24 18:20:43",
    "text": "Will have to try that"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-07-24 18:50:57",
    "text": "Think I saw mcoley push something related on the Jinja GitHub not sure though"
  },
  {
    "poster": {
      "poster_name": "Scott Burton",
      "poster_handle": "scott.burton"
    },
    "time_stamp": "2018-07-24 19:31:48",
    "text": "is there a way to get at the \"internal value\" of a Dropdown type property from the page context, without using a form? `{ contact.PROPERTY_NAME }` has the the `Label` value, which is reasonable, but I want the `Internal Value` value.",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2022-01-12 11:13:58"
      },
      {
        "time_stamp": "2022-01-12 11:17:01"
      }
    ]
  }
]