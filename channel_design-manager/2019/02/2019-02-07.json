[
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-02-07 08:49:50",
    "text": "Running into a slight css issue"
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-02-07 08:49:53",
    "text": "<https://i.gyazo.com/47c531fc6de01204304b658f9efc6d68.png>"
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-02-07 08:50:35",
    "text": "So I have all of the blog content on a set width but I have modules in the posts"
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-02-07 08:51:11",
    "text": "One of the modules I have is like this"
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-02-07 08:51:12",
    "text": "<https://gyazo.com/9af32de9890f93ce006a8132fa6aa61a>"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-07 08:51:57",
    "text": "that guy looks lonely on that bench",
    "reply_count": 5,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-02-07 08:52:34"
      },
      {
        "time_stamp": "2019-02-07 08:52:36"
      },
      {
        "time_stamp": "2019-02-07 08:52:40"
      },
      {
        "time_stamp": "2019-02-07 08:52:46"
      },
      {
        "time_stamp": "2019-02-07 08:55:49"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-07 08:52:01",
    "text": "poor fella"
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-02-07 08:52:16",
    "text": "The H3 here is using width of 636 but I have tried overwriting it but even though it's been overwritten because it's crossed out it's still using it"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-07 08:52:34",
    "text": "momma always told me, life was like a box of chocolates"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-07 08:52:36",
    "text": "…."
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-02-07 08:52:39",
    "text": "If I untick `width: 636px` it works"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-07 08:52:40",
    "text": "…"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-07 08:52:46",
    "text": "you never know what yer gonna get"
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-02-07 08:52:54",
    "text": "<https://gyazo.com/eb343494dabb8df02f61f1fced48fb6c>"
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-02-07 08:53:12",
    "text": "But it changes everything else"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-02-07 08:54:33",
    "text": "Strange! Maybe try adjusting the max width instead of the width? You could also just put a wrap around all that content and adjust the width there"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-07 08:55:23",
    "text": "yeah.  max-width"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-02-07 08:55:24",
    "text": "I’ve come across strange bugs like that before and I feel like it had something to do with block vs inline"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-07 08:55:49",
    "text": "ha"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-07 08:56:07",
    "text": "gotta link?"
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-02-07 08:58:53",
    "text": "`max-width` seemed to have done the trick, never ran into that before. Driving me crazy haha"
  },
  {
    "poster": {
      "poster_name": "Danielle Peters",
      "poster_handle": "dpeters"
    },
    "time_stamp": "2019-02-07 14:24:48",
    "text": "having an issue with HubSpot css minification. since it removes spaces around colons, it’s breaking styling for a selector formatted like `.class :not(.other-class)`. i.e. it’s turning it into  `.class:not(.other-class)`",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-02-08 07:29:50"
      },
      {
        "time_stamp": "2019-02-08 07:33:46"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2019-02-07 14:57:06",
    "text": "You could probably work around that by changing the selector to `.class *:not(.other-class)` Should be functionally the same thing."
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2019-02-07 14:57:40",
    "text": "It gives you a slight bump in specificity, so be aware of that"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-07 14:58:53",
    "edited": {
      "time_stamp": "2019-02-07 14:59:04"
    },
    "text": "didn’t even think having a `:not()` on it’s own was valid css, thought you had to have an asterisk",
    "reply_count": 15,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-02-07 16:00:04"
      },
      {
        "time_stamp": "2019-02-07 16:00:33"
      },
      {
        "time_stamp": "2019-02-07 16:00:58"
      },
      {
        "time_stamp": "2019-02-07 16:02:06"
      },
      {
        "time_stamp": "2019-02-07 16:03:54"
      },
      {
        "time_stamp": "2019-02-07 16:04:33"
      },
      {
        "time_stamp": "2019-02-07 16:08:40"
      },
      {
        "time_stamp": "2019-02-07 16:09:11"
      },
      {
        "time_stamp": "2019-02-07 16:09:46"
      },
      {
        "time_stamp": "2019-02-07 16:09:57"
      },
      {
        "time_stamp": "2019-02-07 16:10:26"
      },
      {
        "time_stamp": "2019-02-07 16:10:50"
      },
      {
        "time_stamp": "2019-02-07 16:11:12"
      },
      {
        "time_stamp": "2019-02-07 17:08:39"
      },
      {
        "time_stamp": "2019-02-07 17:09:19"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Joel Warren",
      "poster_handle": "joel"
    },
    "time_stamp": "2019-02-07 14:59:56",
    "edited": {
      "time_stamp": "2019-02-07 15:00:03"
    },
    "text": "* is pretty horrible in css. going to make that way way too specific imo, I'd prefer it fixed if it's an issue",
    "reply_count": 15,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2019-02-07 15:03:13"
      },
      {
        "time_stamp": "2019-02-07 15:04:37"
      },
      {
        "time_stamp": "2019-02-07 15:05:10"
      },
      {
        "time_stamp": "2019-02-07 15:06:27"
      },
      {
        "time_stamp": "2019-02-07 15:06:28"
      },
      {
        "time_stamp": "2019-02-07 15:06:44"
      },
      {
        "time_stamp": "2019-02-07 15:06:49"
      },
      {
        "time_stamp": "2019-02-07 15:08:25"
      },
      {
        "time_stamp": "2019-02-07 15:20:53"
      },
      {
        "time_stamp": "2019-02-07 15:21:34"
      },
      {
        "time_stamp": "2019-02-07 15:23:10"
      },
      {
        "time_stamp": "2019-02-07 15:24:02"
      },
      {
        "time_stamp": "2019-02-07 15:58:40"
      },
      {
        "time_stamp": "2019-02-07 16:00:02"
      },
      {
        "time_stamp": "2019-02-07 16:00:51"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-07 15:03:13",
    "text": "?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-07 15:04:37",
    "text": "It doesn’t really add much specificity as far as I’m aware.\nIt’s not an id, tag, element, or pseudo element."
  },
  {
    "poster": {
      "poster_name": "Joel Warren",
      "poster_handle": "joel"
    },
    "time_stamp": "2019-02-07 15:05:10",
    "text": "ah you are right"
  },
  {
    "poster": {
      "poster_name": "Joel Warren",
      "poster_handle": "joel"
    },
    "time_stamp": "2019-02-07 15:06:27",
    "text": "more of a performance thing is why I generally avoid it then, specifically in complex selectors"
  },
  {
    "poster": {
      "poster_name": "Joel Warren",
      "poster_handle": "joel"
    },
    "time_stamp": "2019-02-07 15:06:28",
    "text": "<https://stackoverflow.com/questions/1714096/is-the-css-star-selector-considered-harmful-and-why>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-07 15:06:44",
    "text": "I’ll give ya the performance thing"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-07 15:06:49",
    "text": "that’s for sure"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-07 15:08:25",
    "text": "on shoptalk show podcast they had an episode where someone explained the CSSOM and kinda explained how the browser handles selectors. was crazy how complicated it is"
  },
  {
    "poster": {
      "poster_name": "Danielle Peters",
      "poster_handle": "dpeters"
    },
    "time_stamp": "2019-02-07 15:14:54",
    "text": "yeah i’d rather not use `*:not` because of the performance issues. also i’m already minifying the css locally and it doesn’t have a problem. i’ve also tried another random minifier and it doesn’t mess up that selector. i could probably workaround it with a different selector but it seems like something that should be fixed :shrug:",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-02-07 15:17:01"
      },
      {
        "time_stamp": "2019-02-07 15:17:52"
      },
      {
        "time_stamp": "2019-02-07 15:18:06"
      },
      {
        "time_stamp": "2019-02-07 15:23:25"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-07 15:17:01",
    "text": "well theoretically in your case using a floating `:not()` would be the same as `*:not()` performance wise"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-07 15:17:52",
    "text": "btw- minifying and then putting the code on HS - prone to problems"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-07 15:18:06",
    "text": "I’ve seen it puke on js that was minified previously"
  },
  {
    "poster": {
      "poster_name": "Joel Warren",
      "poster_handle": "joel"
    },
    "time_stamp": "2019-02-07 15:20:53",
    "text": "interesting"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-07 15:21:34",
    "text": "before that episode, honestly I had no idea there was something called the CSSOM I only knew about the DOM, and that CSS played into it"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-02-07 15:23:10",
    "text": "honestly the asterisk is not as bad as you think as long as you are not using it for dom manipulation."
  },
  {
    "poster": {
      "poster_name": "Danielle Peters",
      "poster_handle": "dpeters"
    },
    "time_stamp": "2019-02-07 15:23:25",
    "edited": {
      "time_stamp": "2019-02-07 15:23:36"
    },
    "text": "yeah perhaps that’s true re:performance :thinking_face:. fwiw tried it with unminified css directly in HubSpot and the same thing happens. regardless `:not()` on its own in a valid selector so i’d expect it to work in HubSpot"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-07 15:24:02",
    "edited": {
      "time_stamp": "2019-02-07 15:24:06"
    },
    "text": "well that and it’s also more performant if you have a selector in-front of it like she does. that way it’s not looking for as many things"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2019-02-07 15:58:40",
    "text": "IMO CSS selector performance is ridiculously far down the list of things to worry about in modern browsers. Any given website almost certainly has way bigger optimizations it can do before you get to that."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-07 16:00:02",
    "text": "you are correct Ian."
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2019-02-07 16:00:04",
    "text": "You don't actually need the asterisk on things like `:first-child` either!"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-07 16:00:33",
    "text": "huh, so it’s just assumed"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2019-02-07 16:00:51",
    "text": "Should definitely be fixed though, the minifier shouldn't really be changing selectors!"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-07 16:00:58",
    "text": "must have been a feature added to make 1 more little minifying tweak"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2019-02-07 16:02:06",
    "text": "It's not that there's an invisible asterisk, it's just that things like `:first-child` are selectors like any other. Same as having a class."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-07 16:03:54",
    "text": "right it’s just `*:first-child` and `:first-child` mean the exact same thing and have equal specificity"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-07 16:04:33",
    "text": "thus it seems more like a feature to not require the `*` as it seems it really is just cutting a character"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2019-02-07 16:08:40",
    "text": "I was gonna well actually you, but the universal selector actually doesn't have specificity at all. I always thought it was just the lowest level of specificity."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-07 16:09:11",
    "text": "I mean it basically is the lowest level of specificity  0 lol"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2019-02-07 16:09:46",
    "text": "Still doesn't add anything to the selector"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2019-02-07 16:09:57",
    "text": "You could actually put an asterisk in front of every part of your selector!"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2019-02-07 16:10:26",
    "text": "If you want to maxify your css"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-07 16:10:50",
    "edited": {
      "time_stamp": "2019-02-07 16:12:04"
    },
    "text": "correct you can.\n\nIt’s just that *:first-child and *::before are actually dependent on a parent element to exist/work, they are not themselves actual elements."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-07 16:11:12",
    "text": "lol it converted my asterisks to bold, you get the idea"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-07 17:08:39",
    "text": "Anyone read Vonnegut?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-02-07 17:09:19",
    "text": "<https://boingboing.net/2017/07/19/kurt-vonnegut-butt.html>"
  }
]