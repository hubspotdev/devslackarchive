[
  {
    "poster": {
      "poster_name": "Jordan Ryken",
      "poster_handle": "jordan.ryken"
    },
    "time_stamp": "2023-04-14 05:05:59",
    "text": "Anyone have ideas for preventing deals that don't meet certain criteria from being advanced to a different deal stage? (E.g. deal won requires a deal amount)",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-04-14 07:38:21"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-14 07:38:21",
    "text": "<https://HubSpotdev.slack.com/archives/C22PU4LV8/p1681472907862379>"
  },
  {
    "text": "Any coder can have a quick support regrading association Customer code? :slightly_smiling_face:\nThe interesting thing is that It works on an empty TEST portal  but it does not work on my PROD/Sandbox with the exact same code.\n\nImage 1 &amp; 2 are on the portal that do not work. the PUT does not work.\n\nImage 3 works.\n\nWhat am I missing?",
    "time_stamp": "2023-04-14 08:04:04",
    "reply_count": 34,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-04-14 08:35:59"
      },
      {
        "time_stamp": "2023-04-14 08:50:59"
      },
      {
        "time_stamp": "2023-04-14 09:21:01"
      },
      {
        "time_stamp": "2023-04-14 09:26:39"
      },
      {
        "time_stamp": "2023-04-14 09:27:33"
      },
      {
        "time_stamp": "2023-04-14 09:28:40"
      },
      {
        "time_stamp": "2023-04-14 09:30:16"
      },
      {
        "time_stamp": "2023-04-14 09:48:10"
      },
      {
        "time_stamp": "2023-04-14 10:01:20"
      },
      {
        "time_stamp": "2023-04-14 10:49:28"
      },
      {
        "time_stamp": "2023-04-14 10:50:48"
      },
      {
        "time_stamp": "2023-04-14 10:51:11"
      },
      {
        "time_stamp": "2023-04-14 10:51:42"
      },
      {
        "time_stamp": "2023-04-14 10:55:43"
      },
      {
        "time_stamp": "2023-04-14 10:56:26"
      },
      {
        "time_stamp": "2023-04-14 10:56:49"
      },
      {
        "time_stamp": "2023-04-14 10:57:20"
      },
      {
        "time_stamp": "2023-04-14 11:01:17"
      },
      {
        "time_stamp": "2023-04-14 11:03:56"
      },
      {
        "time_stamp": "2023-04-14 11:05:20"
      },
      {
        "time_stamp": "2023-04-14 11:11:11"
      },
      {
        "time_stamp": "2023-04-14 11:20:10"
      },
      {
        "time_stamp": "2023-04-14 11:20:29"
      },
      {
        "time_stamp": "2023-04-14 11:21:29"
      },
      {
        "time_stamp": "2023-04-14 11:22:05"
      },
      {
        "time_stamp": "2023-04-14 11:22:43"
      },
      {
        "time_stamp": "2023-04-14 11:23:36"
      },
      {
        "time_stamp": "2023-04-14 11:25:40"
      },
      {
        "time_stamp": "2023-04-14 11:25:55"
      },
      {
        "time_stamp": "2023-04-14 11:27:53"
      },
      {
        "time_stamp": "2023-04-14 11:31:47"
      },
      {
        "time_stamp": "2023-04-14 11:35:17"
      },
      {
        "time_stamp": "2023-04-14 11:41:29"
      },
      {
        "time_stamp": "2024-03-19 15:04:56"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-04-14 08:35:59",
    "text": "<@U04PQF8CJRY> can you share your custom code?"
  },
  {
    "poster": {
      "poster_name": "Winky Fung-Hatje",
      "poster_handle": "winky.funghatje"
    },
    "time_stamp": "2023-04-14 08:50:59",
    "text": "Yes sure, const axios = require(‘axios’);\nexports.main = async (event, callback) =&gt; {\n  /*****\n    Use inputs to get data from any action in your workflow and use it in your code instead of having to use the HubSpot API.\n  *****/\n  const {phone, hs_object_id} = event.inputFields;\n\n  let search_config_data = {\n    “filterGroups”: [\n      {\n        “filters”: [\n          {\n            “value”: `${phone}`,\n            “propertyName”: “phone”,\n            “operator”: “EQ”\n          }\n        ]\n      }\n    ],\n    “properties”: [\n      “id”,\n      “lastname”,\n      “firstname”,\n      “hs_name”,\n      “email”,\n      “HubSpot_owner_id”,\n      “lastmodifieddate”,\n      “id”\n    ],\n    “associations”: [\n      “companies”\n    ]\n  };\n  let config = {\n    method: ‘post’,\n    maxBodyLength: Infinity,\n    url: ‘<https://api.hubapi.com/crm/v3/objects/deals/search>’,\n    headers: {\n      ‘Authorization’: `Bearer ${process.env.PRIVATE_APP}`,\n      ‘Content-Type’: ‘application/json’\n    },\n    data : search_config_data,\n  };\n  const deals = await axios.request(config)\n  .then((response) =&gt; {\n    return response.data.results;\n  })\n  .catch((error) =&gt; {\n    console.log(error.data);\n    return [];\n  });\n  console.log(deals)\n  let association_data = deals.map((deal) =&gt; {\n    return {\n      from:{\n        id: `${hs_object_id}`\n      },\n      to:{\n        id: `${deal.id}`\n      },\n      type: ‘contact_to_deal’\n    }\n  });\n  for(let i = 0; i&lt;deals.length;i++){\n    let associationBatch = {\n    method: ‘PUT’,\n    url:`<https://api.hubapi.com/crm/v4/objects/deals/${hs_object_id}/associations/default/deals/${deals[i].id}>`,\n    headers: {\n      ‘Authorization’: `Bearer ${process.env.PRIVATE_APP}`,\n      ‘Content-Type’: null\n    },\n    data: null\n  }\n  await axios.request(associationBatch).then((res) =&gt; {\n    console.log(res.data);\n  }).then((err) =&gt; {\n    console.log(JSON.stringify(err));\n  })\n  }\n\n  /*****\n    Use the callback function to output data that can be used in later actions in your workflow.\n  *****/\n  callback({\n    outputFields: {\n      phone:phone\n    }\n  });\n}"
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-04-14 09:21:01",
    "text": ":eyes: :eyes2:"
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-04-14 09:26:39",
    "text": "Line 66: you can putting assocations to DEALs from Deals, did you mean to do that?\n\n```<https://api.hubapi.com/crm/v4/objects/deals/${hs_object_id}/associations/default/deals/${deals[i].id}>```\nInstead of doing concats -&gt; deals?"
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-04-14 09:27:33",
    "text": "Also, line 71: data parameter is empty\n`data: null`"
  },
  {
    "text": "",
    "time_stamp": "2023-04-14 09:28:40"
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-04-14 09:30:16",
    "text": "and your using v4 endpoint which the body is different than your `association_data` object."
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-04-14 09:48:10",
    "text": "So I was able to associate a Contact to a Deal\n\nWhen the deal property of “phone” is set to the same as the contact record.\n\nHere’s my updated code that worked in my portal:\n\n```const axios = require('axios');\nexports.main = async (event, callback) =&gt; {\n  /*****\n     Use inputs to get data from any action in your workflow and use it in your code instead of having to use the HubSpot API.\n     *****/\n  const {phone, hs_object_id} = event.inputFields;\n  let foundAssociation = false;\n  \n  let search_config_data = {\n    \"filterGroups\": [\n      {\n        \"filters\": [\n          {\n            \"value\": `${phone}`,\n            \"propertyName\": \"phone\",\n            \"operator\": \"EQ\"\n          }\n        ]\n      }\n    ],\n    \"properties\": [\n      \"id\",\n      \"lastname\",\n      \"firstname\",\n      \"hs_name\",\n      \"email\",\n      \"HubSpot_owner_id\",\n      \"lastmodifieddate\",\n      \"id\"\n    ],\n    \"associations\": [\n      \"companies\"\n    ]\n  };\n  let config = {\n    method: 'post',\n    maxBodyLength: Infinity,\n    url: '<https://api.hubapi.com/crm/v3/objects/deals/search>',\n    headers: {\n      'Authorization': `Bearer ${process.env.PRIVATE_APP}`,\n      'Content-Type': 'application/json'\n    },\n    data: search_config_data,\n  };\n  const deals = await axios.request(config)\n  .then((response) =&gt; {\n    return response.data.results;\n  })\n  .catch((error) =&gt; {\n    console.log(error.data);\n    return [];\n  });\n  \n  for (let i = 0; i &lt; deals.length; i++) {\n    let associationBatch = {\n      method: 'PUT',\n      url: `<https://api.hubapi.com/crm/v4/objects/contacts/${hs_object_id}/associations/default/deals/${deals[i].id}>`,\n      headers: {\n        'Authorization': `Bearer ${process.env.PRIVATE_APP}`,\n        'Content-Type': null\n      }\n    }\n    console.log(associationBatch.url);\n    await axios.request(associationBatch).then((res) =&gt; {\n      console.log(res.data);\n      foundAssociation = true;\n    }).catch((err) =&gt; {\n      console.log('err', err);\n    })\n  }\n  /*****\n     Use the callback function to output data that can be used in later actions in your workflow.\n     *****/\n  callback({\n    outputFields: {\n      phone: phone,\n      result: foundAssociation\n    }\n  });\n}```\nALso updated your associationBatch to “catch” the error instead of “then”."
  },
  {
    "poster": {
      "poster_name": "Winky Fung-Hatje",
      "poster_handle": "winky.funghatje"
    },
    "time_stamp": "2023-04-14 10:01:20",
    "text": "Wow <@U03REFNRMB3> So kind of you to take a look of this!! :heart:\n\nI will try it with your suggestion.\nit means so a lot! Thank youuuu"
  },
  {
    "text": "<@U03REFNRMB3> Sorry to bother you again, I tried adapt yours instead but then the foundassociation part is highlighted and it shows error,\n\n\nI also double check my original code share earlier. after you pointed out the Object was wrong, I have changed it. but instead of data:null I put what your code is but it still fail.\n\n:face_with_peeking_eye:I m not a coder. So I really appreciate your support here! million thanks!!",
    "time_stamp": "2023-04-14 10:49:28"
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-04-14 10:50:48",
    "text": "After line 6, add this\n```let foundAssociation = false;```\n"
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-04-14 10:51:11",
    "text": "it looks like you didn’t copy the whole code."
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-04-14 10:51:42",
    "text": "just need to define: `foundAssociation` near the top of the code."
  },
  {
    "text": "I added line 6 and it showed this still: :see_no_evil:",
    "time_stamp": "2023-04-14 10:55:43"
  },
  {
    "text": "Do I need to add more output here ?",
    "time_stamp": "2023-04-14 10:56:26"
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-04-14 10:56:49",
    "text": "Yes"
  },
  {
    "poster": {
      "poster_name": "Winky Fung-Hatje",
      "poster_handle": "winky.funghatje"
    },
    "time_stamp": "2023-04-14 10:57:20",
    "text": "what would that be?"
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-04-14 11:01:17",
    "text": "Boolean value\n\nTo let you know if any deals/associations were found."
  },
  {
    "text": "I added boolean as result\n\nThe result is false.\n\nI must be doing wrong",
    "time_stamp": "2023-04-14 11:03:56"
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-04-14 11:05:20",
    "text": "What are you input values?"
  },
  {
    "poster": {
      "poster_name": "Winky Fung-Hatje",
      "poster_handle": "winky.funghatje"
    },
    "time_stamp": "2023-04-14 11:11:11",
    "text": "phone"
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-04-14 11:20:10",
    "text": "Does your Deals Property of Phone exist in your production portal?"
  },
  {
    "text": "Here are my inputs fields",
    "time_stamp": "2023-04-14 11:20:29"
  },
  {
    "poster": {
      "poster_name": "Winky Fung-Hatje",
      "poster_handle": "winky.funghatje"
    },
    "time_stamp": "2023-04-14 11:21:29",
    "text": "Yes, and yes they are all already set up like that"
  },
  {
    "poster": {
      "poster_name": "Winky Fung-Hatje",
      "poster_handle": "winky.funghatje"
    },
    "time_stamp": "2023-04-14 11:22:05",
    "text": "and the deal internal value also “phone”"
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-04-14 11:22:43",
    "text": "The result of false doesn’t mean the code failed.\n\nIt just means it did not find any deals with the property of `phone` that matched the input value of of `phone`"
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-04-14 11:23:36",
    "text": "Have you have a production deal that has a matching phone number?"
  },
  {
    "poster": {
      "poster_name": "Winky Fung-Hatje",
      "poster_handle": "winky.funghatje"
    },
    "time_stamp": "2023-04-14 11:25:40",
    "text": "Yes there is . I will now make one more test deal has a matching `phone` number to do a test."
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-04-14 11:25:55",
    "text": "check your DM"
  },
  {
    "poster": {
      "poster_name": "Winky Fung-Hatje",
      "poster_handle": "winky.funghatje"
    },
    "time_stamp": "2023-04-14 11:27:53",
    "text": "I think it works!!"
  },
  {
    "poster": {
      "poster_name": "Justin Givens - Level 2",
      "poster_handle": "jgivens"
    },
    "time_stamp": "2023-04-14 11:31:47",
    "text": ":boom: :confetti_ball: :tada: :clap:"
  },
  {
    "poster": {
      "poster_name": "Winky Fung-Hatje",
      "poster_handle": "winky.funghatje"
    },
    "time_stamp": "2023-04-14 11:35:17",
    "text": "The HubSpot community is very proud of having you <@U03REFNRMB3>!\nYou are a hero"
  },
  {
    "time_stamp": "2023-04-14 11:41:29",
    "text": "shucks"
  }
]