[
  {
    "subtype": "thread_broadcast",
    "time_stamp": "2023-01-18 05:47:35",
    "text": "hi, when i try to patch a value to custom object i'm receiving the following error\n`{`\n    `\"status\": \"error\",`\n    `\"message\": \"resource not found\",`\n    `\"correlationId\": \"hewfvb-ewfew0ewfcwe0ewg\"`\n`}`"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-18 05:48:47",
    "text": "<https://api.HubSpot.com/crm/v3/objects/objectId/123?idProperty=deckid>\n\nthis is the patch request"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-18 05:50:05",
    "text": "but in the object records the same is present"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-18 07:37:30",
    "edited": {
      "time_stamp": "2023-01-18 07:37:48"
    },
    "text": "and you have an unique property called deckid?"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-18 07:37:47",
    "text": "yes"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-18 07:37:58",
    "text": "And it's value is 123?"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-18 07:39:56",
    "text": "does it need to be Unique value in Rules?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-18 07:40:07",
    "text": "Yes!"
  },
  {
    "text": "okay, previously it was not an unique value. so i archived and deleted it from the recycle bin. then  i tried to create a new one, but getting an error",
    "time_stamp": "2023-01-18 07:45:34"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-18 07:45:53",
    "text": "did you refresh the page?"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-18 07:46:02",
    "text": "yes, couple of times"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-18 07:46:15",
    "text": "try naming the property deckider"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-18 07:46:52",
    "text": "worked"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-18 07:47:29",
    "edited": {
      "time_stamp": "2023-01-18 07:47:39"
    },
    "text": "will it take time to reflect the deleted property?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-18 07:47:40",
    "text": "I think that's the issue"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-18 07:47:55",
    "text": "okay"
  },
  {
    "poster": {
      "poster_name": "Nich Mueller",
      "poster_handle": "nich"
    },
    "time_stamp": "2023-01-18 07:59:47",
    "edited": {
      "time_stamp": "2023-01-18 08:47:05"
    },
    "text": "Hello community, wondering if anyone has had experience integrating a 3rd party cookie management tool into a HubSpot website? I have a client who is insistent on using OneTrust as their cookie management tool instead of HubSpot's system. It's complicated why...\n\nAnyways, cookie settings as set by the user in the cookie widget are not getting synced to HubSpot's cookie settings for that user.\n\nWhat is the best way to properly control cookie's placed on a HubSpot site using a 3rd party cookie banner and settings widget? I am familiar with <https://developers.HubSpot.com/docs/api/events/cookie-banner|this documentation>, however I'm not sure I have access to OneTrust callback functions where I might fire these HubSpot cookie API events from actions taken by the user within in the 3rd party widget\n\nAny insight is greatly appreciated! :pray:",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-01-18 09:37:20"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-18 09:10:20",
    "text": "still it is not creating. to confirm is there any timeframe?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-18 09:11:09",
    "text": "I really don't know I would contact HubSpot support through the little help button"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-18 09:11:18",
    "text": "or just go with a property that's not named the same"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-18 09:14:13",
    "text": "already contacted support team, they are clueless and told will get back to me once they get an answer from the dev team"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-18 09:14:23",
    "text": "for now i will continue with a new name"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-18 09:14:30",
    "text": "Sounds like a plan"
  },
  {
    "poster": {
      "poster_name": "Nandha Kumar",
      "poster_handle": "nandha.kumar"
    },
    "time_stamp": "2023-01-18 09:15:28",
    "edited": {
      "time_stamp": "2023-01-18 09:15:35"
    },
    "text": "thank you for pointing out Unique value Carter :+1:"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-18 09:15:41",
    "text": "of course"
  },
  {
    "poster": {
      "poster_name": "Lorenz Cleymans",
      "poster_handle": "lorenz"
    },
    "time_stamp": "2023-01-18 09:34:34",
    "edited": {
      "time_stamp": "2023-01-18 09:35:26"
    },
    "text": "Hi there,\nI'm trying to fetch all the data that is linked to contacts, when i look al the dashboard i can select a contact and edit or view every detail (property?).\nWhen I make my API  call I only get\n```\"properties\": {\n                \"createdate\": \"2021-09-21T08:43:45.117Z\",\n                \"email\": \"xxxxxxxxxxxxx\",\n                \"firstname\": \"xxxxxxxxxxxxx\",\n                \"hs_object_id\": \"101\",\n                \"lastmodifieddate\": \"2022-10-03T13:20:52.316Z\",\n                \"lastname\": \"xxxxxxxxxxxx\"\n            }```\nHow do I get every bit of info in the request?\nThanks in advance :pray:",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-01-19 02:56:05"
      },
      {
        "time_stamp": "2023-01-19 02:58:11"
      },
      {
        "time_stamp": "2023-01-19 03:43:08"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Nich Mueller",
      "poster_handle": "nich"
    },
    "time_stamp": "2023-01-18 09:37:20",
    "text": "Should I just be trying to convince the client to switch to HubSpot's native cookie tooling?\n\nThis announcement of the end of 3rd party cookies makes me believe that OneTrust's cookie management widget may no longer work as a result <https://blog.HubSpot.com/marketing/third-party-cookie-phase-out>"
  },
  {
    "poster": {
      "poster_name": "Tyler Samani-Sprunk",
      "poster_handle": "tyler594"
    },
    "time_stamp": "2023-01-18 11:24:32",
    "text": "<@U033JRJHUVC> Hope you figured it out by now, but if not, try changing the code in <@U01QVR44MEY>'s first block after the await in the try to HubSpotClient.crm.objects.basicApi.getById(\"meetings\", meetingId, properties, propertiesWithHistory, associations, archived, idProperty);\n\nbasically drop the { } in the parenthesis there. Unfortunately I'm not able to test it at the moment, but I had luck with something similar when working with tasks. Otherwise, <@U01QVR44MEY> could he do something similar to what you sent me as your first response to my tasks question, but with a GET instead of a POST? (sorry, I'm not really a developer :upside_down_face:)"
  },
  {
    "poster": {
      "poster_name": "Bruno Decruz",
      "poster_handle": "brunodecruz.05"
    },
    "time_stamp": "2023-01-18 12:46:07",
    "text": "Hello everyone i am kind of stuck with the endpoint to upload files does anyone have an example of a request to that endpoint?"
  },
  {
    "poster": {
      "poster_name": "prasad",
      "poster_handle": "prasad.nandamuri"
    },
    "time_stamp": "2023-01-18 23:59:22",
    "edited": {
      "time_stamp": "2023-01-19 00:12:03"
    },
    "text": "Hi Everyone, To Display some logic data to HubSpot CRM card, So we created API call's to fetch company based deal line items and did some logic but this logic is taking greater that 5 seconds to display the data. Please can any one help me to how to resolve this problem?:thinking_face:.                                                                                                                 // For external API calls\nconst axios = require(\"axios\");\nexports.main = async (context = {}, sendResponse) =&gt; {\n  // Store contact firstname, configured as propertiesToSend in crm-card.json\n  const { propertiesToSend: { name, hs_object_id } } = context;\n  try {\n    const ACCESS_TOKEN = '';\n    let company_id = 5902643594;\n    let date_from = '2022-12-01';\n    let line_items = {};\n    let line_items_result = [];\n\n    const config_asso = {\n      method: 'post',\n      url: '<https://api.hubapi.com/crm/v3/objects/deals/search>',\n      headers: {\n        'Authorization': `Bearer ${ACCESS_TOKEN}`,\n        'Content-Type': 'application/json'\n      },\n      data: {\n        \"filters\": [\n          {\n            \"values\": [\n              company_id\n            ],\n            \"propertyName\": \"associations.company\",\n            \"operator\": \"IN\"\n          },\n          {\n            \"value\": new Date(date_from).getTime(),\n            \"propertyName\": \"closedate\",\n            \"operator\": \"GTE\"\n          }\n        ],\n        \"properties\": [\"id\"],\n        \"limit\": 100\n      }\n    };\n    let apiResponse = await axios(config_asso);\n    if (apiResponse.hasOwnProperty('data') &amp;&amp; apiResponse.data.hasOwnProperty('results')) {\n      let deal_ids = [];\n      apiResponse.data.results.forEach((prop) =&gt; {\n        deal_ids.push(prop.id);\n      });\n      if (deal_ids.length) {\n        const config_line_items = {\n          method: 'post',\n          url: '<https://api.hubapi.com/crm/v3/objects/line_items/search>',\n          headers: {\n            'Authorization': `Bearer ${ACCESS_TOKEN}`,\n            'Content-Type': 'application/json'\n          },\n          data: {\n            \"filterGroups\": [\n              {\n                \"filters\": [\n                  {\n                    \"values\": deal_ids,\n                    \"propertyName\": \"associations.deal\",\n                    \"operator\": \"IN\"\n                  }\n                ]\n              }\n            ],\n            \"properties\": [\"hs_product_id\", \"amount\"],\n            \"limit\": 100\n          }\n        };\n        let apiResponse = await axios(config_line_items);\n        if (apiResponse.hasOwnProperty('data') &amp;&amp; apiResponse.data.hasOwnProperty('results')) {\n\n          //console.log('= apiResponse.data =', apiResponse.data.results);\n\n          apiResponse.data.results.forEach((prop) =&gt; {\n            if (typeof line_items[prop.properties.hs_product_id] === 'undefined') {\n              line_items[prop.properties.hs_product_id] = Number(prop.properties.amount);\n            }\n            else {\n              line_items[prop.properties.hs_product_id] += Number(prop.properties.amount);\n            }\n          });\n        }\n      }\n      if (line_items) {\n        for (const key in line_items) {\n          line_items_result.push({\n            \"label\": key,\n            \"value\": line_items[key]\n          });\n        }\n      }\n      sendResponse({\n        sections: [\n          {\n            \"type\": \"descriptionList\",\n            \"direction\": \"row\",\n            \"items\": line_items_result\n          },\n          {\n            \"type\": \"text\",\n            \"format\": \"markdown\",\n            \"text\": \"Show line items\"\n          }\n        ]\n      });\n    }\n  } catch (error) {\n\n    const introMessage = {\n      type: \"alert\",\n      title: \"Your first UI extension is ready!\",\n      variant: \"success\",\n      body: {\n        type: \"text\",\n        format: \"markdown\",\n        text: \"Congratulations! You just deployed your first **HubSpot UI extension**. This Revenue CRM card uses the [ZenQuotes public API](<https://zenquotes.io/>) to display a daily quote. It also includes custom button actions using serverless functions.\",\n      },\n    };\n    // \"message\" will create an error feedback banner when it catches an error\n    sendResponse({\n      message: {\n        type: \"ERROR\",\n        body: `Error: ${error.message}`,\n      },\n      sections: [introMessage],\n    });\n  }\n};",
    "reply_count": 9,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-01-19 08:19:57"
      },
      {
        "time_stamp": "2023-01-19 08:20:37"
      },
      {
        "time_stamp": "2023-01-19 12:27:53"
      },
      {
        "time_stamp": "2023-01-23 21:18:31"
      },
      {
        "time_stamp": "2023-01-23 21:20:34"
      },
      {
        "time_stamp": "2023-01-23 21:21:51"
      },
      {
        "time_stamp": "2023-01-24 11:31:45"
      },
      {
        "time_stamp": "2023-01-26 07:54:08"
      },
      {
        "time_stamp": "2023-01-27 08:40:30"
      }
    ]
  }
]