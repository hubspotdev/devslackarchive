[
  {
    "poster": {
      "poster_name": "Helder Vilela",
      "poster_handle": "dev"
    },
    "time_stamp": "2021-10-20 06:26:00",
    "text": "<@UKJSMBW6A> please share some code"
  },
  {
    "poster": {
      "poster_name": "Derek Cavaliero",
      "poster_handle": "derek168"
    },
    "time_stamp": "2021-10-20 07:00:39",
    "edited": {
      "time_stamp": "2021-10-20 07:01:28"
    },
    "text": "Morning <@ULLBSQ6SY> - I simply have a module in the HubSpot drag/drop template builder and inside the wrapping HTML I am doing this following:\n\n```{% if request.query_dict.brand == 'foo' %}\n{{ html }}\n{% endif %}```\nAand then inside the CAN SPAM section of the email templates I am decorating the links with an `&amp;brand=foo` query paramter like so:\n\n`href=\"{{ unsubscribe_link }}&amp;brand=foo\"`"
  },
  {
    "poster": {
      "poster_name": "Derek Cavaliero",
      "poster_handle": "derek168"
    },
    "time_stamp": "2021-10-20 07:01:12",
    "text": "I setup a test email and sent it to myself but it doesn't seem to function correctly - but when previewing the system templates it works as expected"
  },
  {
    "poster": {
      "poster_name": "Jack Smith",
      "poster_handle": "jasmith"
    },
    "time_stamp": "2021-10-20 08:46:53",
    "text": "You want to instead call it like:\n```HTML\nsrc=\"{{ masthead.img(module.masthead_image) }}\"\nwidth=\"{{ masthead.width(module.masthead_image) }}\"```\nWhat is happening here is that within your macro, the value of the `masthead` variable is actually `{{ module.masthead_image }}`, which is not equal to `mailbox` . The reason that the output of `{{ masthead }}` shows `mailbox` , is because the curly braces can be resolved recursively.\n\nYou can probably verify that this what is happening by using `{% print masthead %}`, which does not support any recursive expression resolving"
  },
  {
    "text": "How can I access this variable from the Developer Info? `{{ current_blog_id }}` doesn't return anything!",
    "time_stamp": "2021-10-20 11:21:24",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2021-10-20 11:28:37"
      },
      {
        "time_stamp": "2021-10-20 11:30:49"
      },
      {
        "time_stamp": "2021-10-20 11:31:05"
      },
      {
        "time_stamp": "2021-10-20 11:31:14"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2021-10-20 11:28:37",
    "text": "Look up the tree to find that var's parent and possibly other ancestors. Likely something like `{{ content.current_blog_id }}` but I'm not sure off-hand"
  },
  {
    "poster": {
      "poster_name": "Ian Hoyte",
      "poster_handle": "ian135"
    },
    "time_stamp": "2021-10-20 11:30:49",
    "text": "Thanks Mark! Yes, there's no parent. {{ year }} works while the blog id doesn't."
  },
  {
    "poster": {
      "poster_name": "Ian Hoyte",
      "poster_handle": "ian135"
    },
    "time_stamp": "2021-10-20 11:31:05",
    "text": "I actually found an answer above, I can get the same value from `{{ group.id }}`"
  },
  {
    "poster": {
      "poster_name": "Ian Hoyte",
      "poster_handle": "ian135"
    },
    "time_stamp": "2021-10-20 11:31:14",
    "text": "So that solved it for me, thank you for reaching out, Mark appreciate it!"
  },
  {
    "poster": {
      "poster_name": "Steven Hambleton",
      "poster_handle": "steven994"
    },
    "time_stamp": "2021-10-20 17:34:48",
    "text": "Ah it worked, thanks Jack!"
  }
]