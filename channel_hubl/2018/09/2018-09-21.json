[
  null,
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-21 09:33:25",
    "edited": {
      "time_stamp": "2018-09-21 09:33:36"
    },
    "text": "Question: I have an event listing in HubDB, I need to list expired events(events that ended before today)\n\n*#1 what is the HubL for current date?*\n*#2 if I use that am I going to completely break caching for the page - is there a way other than using javascript to do this without breaking cache?*",
    "reply_count": 22,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-09-21 09:35:18"
      },
      {
        "time_stamp": "2018-09-21 09:35:24"
      },
      {
        "time_stamp": "2018-09-21 09:38:27"
      },
      {
        "time_stamp": "2018-09-21 09:38:39"
      },
      {
        "time_stamp": "2018-09-21 09:39:10"
      },
      {
        "time_stamp": "2018-09-21 09:39:22"
      },
      {
        "time_stamp": "2018-09-21 09:39:31"
      },
      {
        "time_stamp": "2018-09-21 09:39:52"
      },
      {
        "time_stamp": "2018-09-21 09:40:44"
      },
      {
        "time_stamp": "2018-09-21 09:42:02"
      },
      {
        "time_stamp": "2018-09-21 09:42:41"
      },
      {
        "time_stamp": "2018-09-21 09:42:59"
      },
      {
        "time_stamp": "2018-09-21 09:43:10"
      },
      {
        "time_stamp": "2018-09-21 09:53:32"
      },
      {
        "time_stamp": "2018-09-21 09:53:47"
      },
      {
        "time_stamp": "2018-09-21 09:57:53"
      },
      {
        "time_stamp": "2018-09-21 11:40:20"
      },
      {
        "time_stamp": "2018-09-21 11:40:37"
      },
      {
        "time_stamp": "2018-09-21 11:41:15"
      },
      {
        "time_stamp": "2018-09-21 11:42:19"
      },
      {
        "time_stamp": "2018-09-21 11:43:08"
      },
      {
        "time_stamp": "2018-09-21 11:44:00"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-21 09:35:18",
    "text": "Hey! I did exactly this thing"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-21 09:35:24",
    "text": "Let me dig up the code for you"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-21 09:38:27",
    "text": "```{% set timenow = ((local_dt|datetimeformat('%Y') - 1970) * 31556926000) + ((local_dt|datetimeformat('%m') - 1) * 2629743000) + ((local_dt|datetimeformat('%d') - 1) * 86400000) %}\n{% set events = hubdb_table_rows(849008,\"event_date__gte=\" ~ timenow ~ \"&amp;orderBy=event_date&amp;limit=1\") %}```"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-21 09:38:39",
    "text": "So this sucked"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-21 09:39:10",
    "text": "But timenow is local time converted to epoch"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-21 09:39:22",
    "text": "thank you a ton."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-21 09:39:31",
    "text": "So that’s only showing the events that haven’t expired"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-21 09:39:52",
    "text": "You’re welcome!"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-21 09:40:44",
    "text": "lol it’s the opposite of what I technically have to do but gives me something to work backward to understand how you did it and just adjust"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-21 09:42:02",
    "text": "I guess you would just change gte to lte probably"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-21 09:42:41",
    "text": "super cool"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-21 09:42:59",
    "text": "You should do a blog post on this"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-21 09:43:10",
    "text": "it would probably get a lot of views from devs"
  },
  {
    "text": "Im having a morning dumb. Trying to do a replace but running into the issue with escaping the quotes so the whole pages doesnt freak. I know i need to use a \\, but where do they get placed again?",
    "time_stamp": "2018-09-21 09:48:12",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-09-21 09:51:42"
      },
      {
        "time_stamp": "2018-09-21 10:17:44"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-21 09:51:42",
    "text": "doesn’t look like you should need to with that. Just in-case though\n\n`choices='[[\\\"value1\\\", \\\"Label 1\\\"], [\\\"value2\\\", \\\"Label 2\\\"]]'`\n\nthat’s what i reference, it’s in the choices hubl Tag example"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-21 09:53:32",
    "text": "Ooo that’s an idea. I’ll check with my content team."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-21 09:53:47",
    "text": "They don’t let me write blog posts on my own anymore… not after… the incident"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-21 09:57:53",
    "text": "haha would love to hear about… the incident"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-09-21 10:17:44",
    "edited": {
      "time_stamp": "2018-09-21 10:18:13"
    },
    "text": "Its being used in a haml file, so its like\n“{{ site_settings.company_name|replace(\\“‘\\“,\\“’\\“) }}”"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-21 11:40:20",
    "text": "I think I called people that use images for CTAs “homunculi”"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-21 11:40:37",
    "text": "I got permission to do some posts though, hooray!"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-21 11:41:15",
    "text": "I had to google what that was, and roflmao"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-21 11:42:19",
    "text": "it would have been more appropriate had you said “homunculi, with no regard for those with disabilities and those that want to fail at SEO ranking”"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-09-21 11:43:08",
    "edited": {
      "time_stamp": "2018-09-21 11:43:27"
    },
    "text": "then when someone says something about you saying that term you go, “you got something against homunculi? that’s a technical term, you insensitive jerk”"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-09-21 11:44:00",
    "text": "Yeah! I identify as a homunculus you troglodyte"
  },
  {
    "poster": {
      "poster_name": "Jon Eichler",
      "poster_handle": "jeichler"
    },
    "time_stamp": "2018-09-21 15:34:08",
    "text": "has anyone had issues using  blog_post_by_id() in custom modules? For some reason it doesn’t like you passing the id via custom module field",
    "reply_count": 10,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-09-22 08:02:05"
      },
      {
        "time_stamp": "2018-09-22 10:40:48"
      },
      {
        "time_stamp": "2018-09-24 06:57:11"
      },
      {
        "time_stamp": "2018-09-24 07:44:05"
      },
      {
        "time_stamp": "2018-09-24 07:51:32"
      },
      {
        "time_stamp": "2018-09-24 08:47:35"
      },
      {
        "time_stamp": "2018-09-24 08:47:49"
      },
      {
        "time_stamp": "2018-09-24 08:48:51"
      },
      {
        "time_stamp": "2018-09-24 08:52:40"
      },
      {
        "time_stamp": "2018-09-24 09:04:03"
      }
    ]
  }
]