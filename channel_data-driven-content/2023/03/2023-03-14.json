[
  {
    "poster": {
      "poster_name": "Sean Henri",
      "poster_handle": "sean615"
    },
    "time_stamp": "2023-03-14 01:55:02",
    "text": "<@U7SL518D6> can something around this get added to the documentation?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2023-03-14 07:54:23",
    "edited": {
      "time_stamp": "2023-03-14 07:58:39"
    },
    "text": "Right now in this thread we haven’t gotten to the root of what the issue Martin is facing is.\n\nIt’s unclear in what he’s said whether there was a disconnect in how he expected global partials and standard partials to work and how they actually work.\n\nOr if there was a bug of some kind in either HubSpot’s code or Martin’s code.\n\nUntil we know more, there isn’t anything to add to the documentation."
  },
  {
    "poster": {
      "poster_name": "Sean Henri",
      "poster_handle": "sean615"
    },
    "time_stamp": "2023-03-14 07:59:57",
    "text": "Apologies, I was referring specifically to this part:\n\n&gt; Where would you define all the ids of the tables (hubdb) for the testing and production environments?\nWhat’s best practice when setting a default value in modules using the hubdb table select field while using continuous integration with github across multiple environments?\n\nThe table ID will be different from one portal to another, so the github action fails when it attempts to upload to a portal that does not have a matching ID. My current workaround is to set the default value as _null,_ but that hardly seems ideal."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2023-03-14 08:05:16",
    "text": "Ahh yeah, in your specific circumstance, the only thing I can see you doing is 1 not setting the id (null) or using something like the fields.js method and grab the table id per portal you upload to before uploading.\n\nIt really depends on how big of an inconvenience it is to you whether the fields.js approach would be worthwhile.\n\nCould also potentially work around it by using GitHub Secrets as an environment variable of sorts. Haven’t thought that through fully but seems a possibility."
  },
  {
    "poster": {
      "poster_name": "Sean Henri",
      "poster_handle": "sean615"
    },
    "time_stamp": "2023-03-14 08:06:55",
    "text": "Ooh interesting idea. Gives me some things to tinker around with. Thanks!"
  },
  {
    "text": "There seems to be something wrong with the `__lte`  filter in GraphQL, when used on the frontend.\n\nIn GraphiQL it shows the right data in the collection, but not on the frontend.\nCompare the two images, of GraphiQL and the frontend.\n\nI’m using query params for start_time and end_time: _`# $start_time: {{ request.query_dict.start_time || '' }}`_\n\nAn extreme example, but the `start_time` from the 2nd event is set far out in the future. And it should not be shown as per GraphiQL, but does show on the frontend.\n\nIf I change the date span, to check if `start_time__gte` works, it’s flawless (3rd screenshot)\nSo in all cases `gte` works, but not `lte` .\n\nThe data source is HubDB, and the `DateTime` column types.",
    "time_stamp": "2023-03-14 08:42:37",
    "edited": {
      "time_stamp": "2023-03-14 08:44:55"
    }
  }
]