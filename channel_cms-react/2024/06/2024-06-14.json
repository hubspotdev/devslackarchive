[
  {
    "text": "Is this correct behaviour that it injects a css file for each module instance even if its the same css file? This seems like a massive performance issue",
    "time_stamp": "2024-06-14 01:49:39",
    "edited": {
      "time_stamp": "2024-06-14 01:50:11"
    },
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-06-14 07:00:37"
      },
      {
        "time_stamp": "2024-06-14 07:32:23"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Anze",
      "poster_handle": "anzekopko2002"
    },
    "time_stamp": "2024-06-14 01:51:05",
    "text": "Can you share the appwrapper component"
  },
  {
    "poster": {
      "poster_name": "Anze",
      "poster_handle": "anzekopko2002"
    },
    "time_stamp": "2024-06-14 01:51:20",
    "text": "I swear developing with tw is such a pain, how did you solve for buttons in forms if i can ask?"
  },
  {
    "poster": {
      "poster_name": "Marcus Shannon",
      "poster_handle": "mshannon"
    },
    "time_stamp": "2024-06-14 07:00:37",
    "text": "If you look at the network requests, are these de-duplicated?\n\nI would assume this is essentially the equivalent of one link tag, since they all point to the same cacheable asset"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-06-14 07:32:23",
    "text": "Ideally, yes we would dedupe these. But I’m quite sure this does _not_ cause extra network requests (and still pretty sure it doesn’t even change scheduling priority… which is what `&lt;link rel=preload …&gt;` is all about):\n\n&gt; Even though the name contains the term _load_, it doesn’t load and execute the script but only schedules it to be downloaded and cached with a higher priority.\n<https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/preload>"
  },
  {
    "poster": {
      "poster_name": "Guy Paikowsky",
      "poster_handle": "guypaikowsky"
    },
    "time_stamp": "2024-06-14 07:57:09",
    "text": "I just have tailwind config in the root folder of both the HubSpot-react and HubSpot-components… it just generates one file for everything with all my variables etc.. I then just load the css through the main hubl template.\n\nFor local dev i just load tailwind.output.css and then comment it out before deploying."
  },
  {
    "poster": {
      "poster_name": "Anze",
      "poster_handle": "anzekopko2002"
    },
    "time_stamp": "2024-06-14 07:58:15",
    "text": "You mean 1 for both the basic hubl theme and 1 for react or do you mean something different here?"
  },
  {
    "poster": {
      "poster_name": "Dennis K",
      "poster_handle": "dennis579"
    },
    "time_stamp": "2024-06-14 07:58:23",
    "text": "What do you mean HubSpot Components? Like the Hubl/HubSpot project itself? Because that is my biggest pain point."
  },
  {
    "poster": {
      "poster_name": "Guy Paikowsky",
      "poster_handle": "guypaikowsky"
    },
    "time_stamp": "2024-06-14 07:59:01",
    "text": "second"
  },
  {
    "poster": {
      "poster_name": "Dennis K",
      "poster_handle": "dennis579"
    },
    "time_stamp": "2024-06-14 07:59:28",
    "text": "Right now I have one for the React and 1 for the Hubl dir. I am creating two .css files since I can’t figure out why in earth it does not want to parse both directories from one Tailwind config."
  },
  {
    "poster": {
      "poster_name": "Guy Paikowsky",
      "poster_handle": "guypaikowsky"
    },
    "time_stamp": "2024-06-14 07:59:57",
    "text": "I just have one for both…"
  },
  {
    "poster": {
      "poster_name": "Anze",
      "poster_handle": "anzekopko2002"
    },
    "time_stamp": "2024-06-14 08:00:10",
    "text": "You'd need webpack or something here to process it as otherwise I'm not sure how else you'd build the tailwind file"
  },
  {
    "poster": {
      "poster_name": "Dennis K",
      "poster_handle": "dennis579"
    },
    "time_stamp": "2024-06-14 08:00:25",
    "text": "Nope"
  },
  {
    "poster": {
      "poster_name": "Dennis K",
      "poster_handle": "dennis579"
    },
    "time_stamp": "2024-06-14 08:00:32",
    "text": "You can use the Tailwind CLI"
  },
  {
    "poster": {
      "poster_name": "Anze",
      "poster_handle": "anzekopko2002"
    },
    "time_stamp": "2024-06-14 08:00:42",
    "edited": {
      "time_stamp": "2024-06-14 08:00:53"
    },
    "text": "Im dying before I'm using the CLI not good for development"
  },
  {
    "poster": {
      "poster_name": "Dennis K",
      "poster_handle": "dennis579"
    },
    "time_stamp": "2024-06-14 08:00:52",
    "edited": {
      "time_stamp": "2024-06-14 08:01:08"
    },
    "text": "Just add the cli command to one of your scripts in package.json. Thats super basic and easy"
  },
  {
    "poster": {
      "poster_name": "Guy Paikowsky",
      "poster_handle": "guypaikowsky"
    },
    "time_stamp": "2024-06-14 08:01:11",
    "text": "I have the cli running in the background all the time"
  },
  {
    "poster": {
      "poster_name": "Dennis K",
      "poster_handle": "dennis579"
    },
    "time_stamp": "2024-06-14 08:01:42",
    "text": "```    \"watch\": \"npm-run-all -s watch:*\",\n    \"watch:css\": \"cd wiertz-theme &amp;&amp; npx tailwindcss -i ./input.css -o ./dist/output.css --watch\",\n    \"watch:hubl\": \" hs watch wiertz-theme wiertz-theme --remove\",```"
  },
  {
    "poster": {
      "poster_name": "Anze",
      "poster_handle": "anzekopko2002"
    },
    "time_stamp": "2024-06-14 08:01:50",
    "text": "The cli is good if you are a 1 man team but its not a smooth experience if your not. You need to be able to just plug in and develop without the need for commenting stuff out or using clis to develop"
  },
  {
    "poster": {
      "poster_name": "Anze",
      "poster_handle": "anzekopko2002"
    },
    "time_stamp": "2024-06-14 08:02:38",
    "text": "You want to develop on this theme? yeah just boot up 3 CLI commands, comment out some code and make sure to untangle it every time you log off"
  },
  {
    "poster": {
      "poster_name": "Dennis K",
      "poster_handle": "dennis579"
    },
    "time_stamp": "2024-06-14 08:02:47",
    "text": "Euh, I dont see the difference between setting up Webpack, which will then do exactly the same, or add a oneliner"
  },
  {
    "poster": {
      "poster_name": "Guy Paikowsky",
      "poster_handle": "guypaikowsky"
    },
    "time_stamp": "2024-06-14 08:03:02",
    "text": "You can do both basically"
  },
  {
    "poster": {
      "poster_name": "Anze",
      "poster_handle": "anzekopko2002"
    },
    "time_stamp": "2024-06-14 08:03:14",
    "edited": {
      "time_stamp": "2024-06-14 08:03:22"
    },
    "text": "<@U03ABR41A3H> feel free to revisit this when you forget it once and the client sees the screw up"
  },
  {
    "poster": {
      "poster_name": "Dennis K",
      "poster_handle": "dennis579"
    },
    "time_stamp": "2024-06-14 08:03:41",
    "text": "Then your CI is shit :rolling_on_the_floor_laughing:"
  },
  {
    "poster": {
      "poster_name": "Guy Paikowsky",
      "poster_handle": "guypaikowsky"
    },
    "time_stamp": "2024-06-14 08:03:52",
    "text": "```module.exports = {\n  content: [\n    './*.html',\n    './modules/**/*.{html,css,js}',\n    './templates/**/*.{html,css,js}',\n    './partials/**/*.{html,css,js}',\n    './sections/**/*.{html,css,js}',\n    '../eu-redesign-app/src/components/**/*.{html,css,js,jsx,tsx}'\n  ],```\nKind of backwards (because I have it set up in my theme folder) but you get the idea"
  },
  {
    "poster": {
      "poster_name": "Anze",
      "poster_handle": "anzekopko2002"
    },
    "time_stamp": "2024-06-14 08:03:59",
    "text": "how do you talk about CI but need 3 fucking commands to even start developing locally?"
  },
  {
    "poster": {
      "poster_name": "Anze",
      "poster_handle": "anzekopko2002"
    },
    "time_stamp": "2024-06-14 08:05:34",
    "text": "Still a mess, only way to ever fix this is if we can void using the hubl them all together. Having 2 tech stacks that have different build needs will never go well together"
  },
  {
    "poster": {
      "poster_name": "Dennis K",
      "poster_handle": "dennis579"
    },
    "time_stamp": "2024-06-14 08:05:35",
    "text": "<@U06UVUMDE3Z> Thanks! So you did it by having the tailwind config in your Hubl dir, and moved back and up to your React directory?"
  },
  {
    "poster": {
      "poster_name": "Guy Paikowsky",
      "poster_handle": "guypaikowsky"
    },
    "time_stamp": "2024-06-14 08:07:02",
    "text": "it’s just pointing there! it’s in my general hubl theme dir.\n```npx tailwindcss  -i ./src/tailwind.input.css -o ./styles/tailwind.output.css --watch```\nthat’s basically it"
  },
  {
    "poster": {
      "poster_name": "Dennis K",
      "poster_handle": "dennis579"
    },
    "time_stamp": "2024-06-14 08:09:02",
    "text": "Ok, thats better. Right now I had a difficulty to handle variables and global css which where living in 2 CSS now. Will improve that asap"
  },
  {
    "poster": {
      "poster_name": "Guy Paikowsky",
      "poster_handle": "guypaikowsky"
    },
    "time_stamp": "2024-06-14 08:09:22",
    "text": "<@U05CAJG8D98> I agree it’s not ideal at all. But there’s a ton of stuff with HS that just doesn’t work.  The client gets more upset  when I tell him I spent two days trying to get the github deployment to work, or to figure out why something won’t deploy."
  },
  {
    "poster": {
      "poster_name": "Dennis K",
      "poster_handle": "dennis579"
    },
    "time_stamp": "2024-06-14 08:10:38",
    "text": "A good developer can adjust and is flexible in every circumstance. Hope you will learn that Anze :wink:"
  },
  {
    "poster": {
      "poster_name": "Anze",
      "poster_handle": "anzekopko2002"
    },
    "time_stamp": "2024-06-14 08:11:43",
    "text": "And a great developer knows this is a bad practice and will just lead to bad code. Hope you learn that Dennis"
  },
  {
    "poster": {
      "poster_name": "Dennis K",
      "poster_handle": "dennis579"
    },
    "time_stamp": "2024-06-14 08:11:48",
    "text": "Thanks for proving my point"
  },
  {
    "poster": {
      "poster_name": "Guy Paikowsky",
      "poster_handle": "guypaikowsky"
    },
    "time_stamp": "2024-06-14 08:14:12",
    "text": "<@U05CAJG8D98> how do you style HubSpot forms or even style a cta with the new system"
  },
  {
    "poster": {
      "poster_name": "Guy Paikowsky",
      "poster_handle": "guypaikowsky"
    },
    "time_stamp": "2024-06-14 08:14:42",
    "text": "my experience so far has been that I literally have to find some weird workaround for each and every simple things that I want to do"
  },
  {
    "poster": {
      "poster_name": "Anze",
      "poster_handle": "anzekopko2002"
    },
    "time_stamp": "2024-06-14 08:14:50",
    "edited": {
      "time_stamp": "2024-06-14 08:15:02"
    },
    "text": "Idk i asked this somewhere in this thread but I'm thinking of just using @apply on the react side and stick to classes"
  },
  {
    "poster": {
      "poster_name": "Guy Paikowsky",
      "poster_handle": "guypaikowsky"
    },
    "time_stamp": "2024-06-14 08:15:22",
    "text": "yeah that’s exactly what I did after I had to reverse-engineer the classes HubSpot injects\nnothing in this situation is “proper” lol"
  },
  {
    "poster": {
      "poster_name": "Anze",
      "poster_handle": "anzekopko2002"
    },
    "time_stamp": "2024-06-14 08:15:49",
    "text": "Did you already reverse engineer all of them?"
  },
  {
    "poster": {
      "poster_name": "Guy Paikowsky",
      "poster_handle": "guypaikowsky"
    },
    "time_stamp": "2024-06-14 08:16:56",
    "text": "Just the ones I needed, looks something like this\n\n```\n.hs-form input,\n.hbspt-form .hs-form textarea,\n.hbspt-form .hs-form select {\n  @apply block w-full rounded-md border-0 border-gray-300 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6;\n}\n\n.hs-form textarea {\n  @apply w-full rounded-md border-0 border-gray-300 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6;\n}\n\n.hs-form input::placeholder,\n.hbspt-form .hs-form textarea::placeholder {\n  @apply text-gray-400 text-sm;\n}\n\n.hs-form .input label,\n.hbspt-form .hs-form .input label {\n  @apply text-sm font-semibold text-gray-900 leading-6;\n}\n\n.hs-form .input label span,\n.hbspt-form .hs-form .input label span {\n  @apply font-semibold;\n}\n\n.hs-form .actions .hs-button.primary.large {\n  @apply bg-indigo-600 border border-indigo-700 text-white text-sm font-semibold py-2 px-3.5 rounded-md hover:bg-indigo-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-600;\n}\n\nul.hs-error-msgs {\n  @apply list-none text-red-500 text-sm;\n}\n\n.hs-form .actions {\n  @apply mt-2 mb-0 text-left;\n}\n\n.submitted-message p {\n  @apply text-black text-sm text-left;\n}\n\n.hs-form iframe {\n  @apply mt-5 mb-10;\n}\n\n.hs-form {\n  @apply mx-auto mt-16 max-w-xl sm:mt-20;\n}```\n"
  },
  {
    "poster": {
      "poster_name": "Anze",
      "poster_handle": "anzekopko2002"
    },
    "time_stamp": "2024-06-14 08:17:34",
    "text": "I know nothing here is proper i guess but using cli's to solve for problems like this is never scalable. Maybe you remember all of this but the next time you onboard a junior and they miss this you have noone but yourself to blame.\n\nI haven't used React for more than just small interactive stuff here and there but I'm currently trying to build a whole website with just React to even see if this is feasable in HubSpot."
  },
  {
    "poster": {
      "poster_name": "Guy Paikowsky",
      "poster_handle": "guypaikowsky"
    },
    "time_stamp": "2024-06-14 08:17:38",
    "text": "iframe for the captcha"
  },
  {
    "poster": {
      "poster_name": "Anze",
      "poster_handle": "anzekopko2002"
    },
    "time_stamp": "2024-06-14 08:19:05",
    "text": "Do you just use 1 module to inject all of these into the base html?"
  },
  {
    "poster": {
      "poster_name": "Guy Paikowsky",
      "poster_handle": "guypaikowsky"
    },
    "time_stamp": "2024-06-14 08:21:48",
    "text": "It’s just part of the tailwind output"
  },
  {
    "poster": {
      "poster_name": "Guy Paikowsky",
      "poster_handle": "guypaikowsky"
    },
    "time_stamp": "2024-06-14 08:22:05",
    "text": "And I might run into problems later when I need to style other forms…"
  },
  {
    "poster": {
      "poster_name": "Guy Paikowsky",
      "poster_handle": "guypaikowsky"
    },
    "time_stamp": "2024-06-14 08:22:18",
    "text": "but i’ll add another class i guess, which is what I do for icons"
  }
]