[
  {
    "poster": {
      "poster_name": "Arvin Reynoso",
      "poster_handle": "arvin"
    },
    "time_stamp": "2022-10-24 01:42:07",
    "text": "Hey team, what’s the best way to determine if the Tracking code API library is loaded? I tried waiting for `_hstc_loaded` using interval, it works but it’s slow."
  },
  {
    "poster": {
      "poster_name": "Daniel Wong",
      "poster_handle": "dan.wong"
    },
    "time_stamp": "2022-10-24 04:58:39",
    "text": "Does anyone know how to use the timeline api? The docs on the developers page is all wrong. References classes that don't exist on the wrapper",
    "reply_count": 26,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2022-10-24 09:18:23"
      },
      {
        "time_stamp": "2022-10-24 19:25:55"
      },
      {
        "time_stamp": "2022-10-24 19:27:00"
      },
      {
        "time_stamp": "2022-10-24 19:57:28"
      },
      {
        "time_stamp": "2022-10-24 23:47:46"
      },
      {
        "time_stamp": "2022-10-24 23:49:01"
      },
      {
        "time_stamp": "2022-10-24 23:49:22"
      },
      {
        "time_stamp": "2022-10-24 23:51:28"
      },
      {
        "time_stamp": "2022-10-25 07:57:06"
      },
      {
        "time_stamp": "2022-10-25 07:57:33"
      },
      {
        "time_stamp": "2022-10-25 21:59:36"
      },
      {
        "time_stamp": "2022-10-26 07:39:16"
      },
      {
        "time_stamp": "2022-10-26 07:41:06"
      },
      {
        "time_stamp": "2022-10-28 08:02:56"
      },
      {
        "time_stamp": "2022-11-02 07:19:30"
      },
      {
        "time_stamp": "2022-11-02 08:28:40"
      },
      {
        "time_stamp": "2022-11-02 09:24:42"
      },
      {
        "time_stamp": "2022-11-02 09:26:19"
      },
      {
        "time_stamp": "2022-11-02 09:27:18"
      },
      {
        "time_stamp": "2022-11-02 10:47:05"
      },
      {
        "time_stamp": "2022-11-02 10:49:10"
      },
      {
        "time_stamp": "2022-11-02 10:50:38"
      },
      {
        "time_stamp": "2022-11-02 19:29:19"
      },
      {
        "time_stamp": "2022-11-02 19:30:19"
      },
      {
        "time_stamp": "2022-11-02 19:41:36"
      },
      {
        "time_stamp": "2022-11-02 19:58:34"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Iris Schwartz",
      "poster_handle": "irisschwartz9"
    },
    "time_stamp": "2022-10-24 07:21:23",
    "text": "Thank you, <@U044JU1RP54>, for the clear explanation."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-10-24 07:35:35",
    "text": "That one is out dated but it still works fine. An alternative though is to use the search endpoint and search of all contacts that have a email (or createdate, hs_object_id etc..) and see amount that gets returned"
  },
  {
    "poster": {
      "poster_name": "Greg Furlong",
      "poster_handle": "greg902"
    },
    "time_stamp": "2022-10-24 07:52:01",
    "edited": {
      "time_stamp": "2022-10-24 07:52:33"
    },
    "text": "Howdy y’all. Not sure if this is the right channel but have any of you good people integrated Xero via API? Need to get the total amount of invoices per contact\n\nEG\n\n<mailto:alic@company.com|alic@company.com> $3948\n<mailto:bob@acme.com|bob@acme.com> $6283\n<mailto:carol@megacorp.com|carol@megacorp.com> $586\n\nPlanned to do this as a scheduled custom code in a workflow but not 100% if this is right"
  },
  {
    "poster": {
      "poster_name": "Danilo Barro Jr",
      "poster_handle": "dan781"
    },
    "time_stamp": "2022-10-24 09:05:42",
    "text": "Does LinkedIn Recruiter have an API that is compatible with HubSpot?"
  },
  {
    "poster": {
      "poster_name": "Richard Walsh",
      "poster_handle": "richard226"
    },
    "time_stamp": "2022-10-24 09:16:28",
    "text": "Is there any api for creating navigation menus?",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2022-10-24 09:16:50"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andreas Wessolly",
      "poster_handle": "webdesign"
    },
    "time_stamp": "2022-10-24 09:16:50",
    "edited": {
      "time_stamp": "2022-10-24 09:17:23"
    },
    "text": "No"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-10-24 09:18:23",
    "text": "Can you descibe what you've tried to do and aren't able to do?"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-10-24 10:54:04",
    "text": "Has anyone messed with the Files API Upload at all? Trying to figure out how it wants the object structured but there's no example on the endpoint",
    "reply_count": 29,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2022-10-24 10:59:40"
      },
      {
        "time_stamp": "2022-10-24 10:59:50"
      },
      {
        "time_stamp": "2022-10-24 11:01:36"
      },
      {
        "time_stamp": "2022-10-24 11:22:58"
      },
      {
        "time_stamp": "2022-10-24 11:24:12"
      },
      {
        "time_stamp": "2022-10-24 11:24:30"
      },
      {
        "time_stamp": "2022-10-24 11:24:39"
      },
      {
        "time_stamp": "2022-10-24 11:25:06"
      },
      {
        "time_stamp": "2022-10-24 11:25:34"
      },
      {
        "time_stamp": "2022-10-24 11:26:27"
      },
      {
        "time_stamp": "2022-10-24 11:26:45"
      },
      {
        "time_stamp": "2022-10-24 11:28:22"
      },
      {
        "time_stamp": "2022-10-24 12:32:26"
      },
      {
        "time_stamp": "2022-10-24 12:35:19"
      },
      {
        "time_stamp": "2022-10-24 12:40:20"
      },
      {
        "time_stamp": "2022-10-24 13:08:24"
      },
      {
        "time_stamp": "2023-08-10 09:50:29"
      },
      {
        "time_stamp": "2023-08-10 10:08:09"
      },
      {
        "time_stamp": "2023-08-10 10:08:16"
      },
      {
        "time_stamp": "2023-08-10 10:08:32"
      },
      {
        "time_stamp": "2023-08-10 10:09:02"
      },
      {
        "time_stamp": "2023-08-10 10:10:31"
      },
      {
        "time_stamp": "2023-08-10 10:12:06"
      },
      {
        "time_stamp": "2023-08-10 10:12:11"
      },
      {
        "time_stamp": "2023-08-10 10:13:08"
      },
      {
        "time_stamp": "2023-08-10 10:16:21"
      },
      {
        "time_stamp": "2023-08-10 10:18:41"
      },
      {
        "time_stamp": "2023-08-11 08:23:47"
      },
      {
        "time_stamp": "2023-08-11 08:50:15"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-10-24 10:59:40",
    "text": "You need to send the request as formdata"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-10-24 10:59:50",
    "text": "That's usually what trips up poeple"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-10-24 11:01:36",
    "text": "would that go in as file? I was trying that but kept getting \"Unsupported Media Type\" for a image lol"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-10-24 11:22:58",
    "text": "basically, sending it straight up in the body i.e.\n\n```body: {formData}```\nor like\n```body: {file: formData}```\n"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-10-24 11:24:12",
    "text": "```var axios = require('axios');\nvar FormData = require('form-data');\nvar fs = require('fs');\nvar data = new FormData();\ndata.append('file', fs.createReadStream('Invoice #12620823.pdf'));\ndata.append('folderId', '85489365264');\ndata.append('fileName', 'Invoice.pdf');\ndata.append('options', '{\"access\":  \"PRIVATE\"}');\n\nvar config = {\n  method: 'post',\n  url: '<https://api.HubSpot.com/files/v3/files>',\n  headers: { \n    ...data.getHeaders()\n  },\n  data : data\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});```\n"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-10-24 11:24:30",
    "text": "Here's some example code for nodejs and axios"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-10-24 11:24:39",
    "edited": {
      "time_stamp": "2022-10-24 11:25:07"
    },
    "text": "Let me know if you're using a different language or framework"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-10-24 11:25:06",
    "text": "oh sweet thanks"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-10-24 11:25:34",
    "text": "just messing about within React, which doesn't have a straightforward way of dealing with the FS but I can figure that out lol"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-10-24 11:26:27",
    "edited": {
      "time_stamp": "2022-10-24 11:26:48"
    },
    "text": "Here's an example in cURL:\n```curl --location --request POST '<https://api.HubSpot.com/files/v3/files>' \\\n--form 'file=@\"/Invoice #12620823.pdf\"' \\\n--form 'folderId=\"85489365264\"' \\\n--form 'fileName=\"Invoice.pdf\"' \\\n--form 'options=\"{\\\"access\\\":  \\\"PRIVATE\\\"}\"'```"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-10-24 11:26:45",
    "text": "oh perfect, thanks"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-10-24 11:28:22",
    "text": "For sure"
  },
  {
    "text": "Can anyone assist with a forms API issue? The \"email\" input from non-HubSpot forms (which only have tracking code installed. No manual mapping was set) are being set as \"first name\" property",
    "time_stamp": "2022-10-24 11:32:40",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2022-10-24 11:33:41"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-10-24 11:33:41",
    "text": "If it's being generated through the tracking code it needs to be verbose as to the name of the input field or else stuff like this happens"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-10-24 12:32:26",
    "text": "<@U01QVR44MEY> How are you sideloading in packages to serverless functions? Or are you doing everything off HS? I know there's a boilerplate for having webpack do it, but not sure if you know of a better way! :smile:"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-10-24 12:35:19",
    "edited": {
      "time_stamp": "2022-10-24 12:35:29"
    },
    "text": "Honestly for really big functions (things that will be triggered 1000s of time per day) I tend to just build them in aws. That being said I have had success using the webpack approach"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-10-24 12:40:20",
    "text": "It's unfortunate how much webpacks affect performance"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas558"
    },
    "time_stamp": "2022-10-24 13:08:24",
    "text": "yeah thats what we do internally , throw it all on AWS"
  },
  {
    "poster": {
      "poster_name": "Daniel Wong",
      "poster_handle": "dan.wong"
    },
    "time_stamp": "2022-10-24 19:25:55",
    "text": "Trying to create a timeline event using the ruby api wrapper"
  },
  {
    "poster": {
      "poster_name": "Daniel Wong",
      "poster_handle": "dan.wong"
    },
    "time_stamp": "2022-10-24 19:27:00",
    "text": "If i follow the docs then it references classes that dn't exist. I managed to figure out what the correct classes and methods to use are from digging into the gem itself, but thye've updated the docs again and if i follow their instructions again nothing works"
  },
  {
    "poster": {
      "poster_name": "Daniel Wong",
      "poster_handle": "dan.wong"
    },
    "time_stamp": "2022-10-24 19:57:28",
    "edited": {
      "time_stamp": "2022-10-24 19:57:35"
    },
    "text": "bascally if i follow it, i get a response of :\nerror 400\n\"Response body: {\"status\":\"error\",\"message\":\"Invalid input JSON on line 1, column 77: Cannot build TimelineEvent, some of required attributes are not set [eventTemplateId]\",\"correlationId\":\"f8e58d77-2a05-4719-b5d1-330a011e958d\"}\""
  },
  {
    "poster": {
      "poster_name": "Lachlan Castles",
      "poster_handle": "lachlancastles"
    },
    "time_stamp": "2022-10-24 22:04:56",
    "text": "<@U01QVR44MEY> thanks mate"
  },
  {
    "poster": {
      "poster_name": "Daniel Wong",
      "poster_handle": "dan.wong"
    },
    "time_stamp": "2022-10-24 23:47:46",
    "text": "nvm i had a look at the gem itself and figure it out from there. Seems for some reason the docs were referencing:\n`api_client.crm.timeline.events.events_api`\n\neven though it should be:\n\n`api_client.crm.timeline.events_api`\n\nand it's skipping steps like creating the timeline object.//"
  },
  {
    "poster": {
      "poster_name": "Daniel Wong",
      "poster_handle": "dan.wong"
    },
    "time_stamp": "2022-10-24 23:49:01",
    "text": "```config = HubSpot::Crm::Timeline::Configuration.new do |config|\n  config.access_token = access_token\nend\n\napi_client = ::HubSpot::Crm::Timeline::ApiClient.new(config)\n\napi = ::HubSpot::Crm::Timeline::EventsApi.new(api_client)\n\ntokens = {\n  \"what_happened\": \"I got it to work\",\n}\n\ntimeline_event = HubSpot::Crm::Timeline::TimelineEvent.new(event_template_id: \"xxxxxxx\", email: \"<mailto:xxx@gmail.com|xxx@gmail.com>\", timestamp: (DateTime.parse('2019-1-16 16:00:30').to_i * 1000), tokens: tokens)\n\nbegin\n  api_response = api.create(timeline_event)\n  puts api_response\nrescue HubSpot::Crm::Timeline::ApiError =&gt; e\n  error_message = JSON.parse(e.response_body)['category']\n  puts error_message\nend```"
  },
  {
    "poster": {
      "poster_name": "Daniel Wong",
      "poster_handle": "dan.wong"
    },
    "time_stamp": "2022-10-24 23:49:22",
    "text": "This was how i got it to work in the end"
  },
  {
    "poster": {
      "poster_name": "Daniel Wong",
      "poster_handle": "dan.wong"
    },
    "time_stamp": "2022-10-24 23:51:28",
    "text": "vs the original from the docs:\n```require 'HubSpot-api-client'\n\napi_client = HubSpot::Client.new(access_token: access_token)\n\ntokens = {\n  \"what_happened\": \"This doesn't work for me\",\n}\n\nbody = {event_template_id: \"xxxxxx\", email: \"<mailto:xxxx@gmail.com|xxxx@gmail.com>\", tokens: tokens}\napi_response = api_client.crm.timeline.events_api.create(body: body)\nputs api_response```"
  }
]