[
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2023-08-14 11:44:24",
    "text": "If anyone wants the list:\n```[\n    \"@HubSpot/blog_comments\",\n    \"@HubSpot/blog_subscribe\",\n    \"@HubSpot/button\",\n    \"@HubSpot/cta\",\n    \"@HubSpot/divider\",\n    \"@HubSpot/email_body\",\n    \"@HubSpot/email_can_spam\",\n    \"@HubSpot/email_simple_subscription\",\n    \"@HubSpot/email_subscriptions\",\n    \"@HubSpot/email_subscriptions_confirmation\",\n    \"@HubSpot/email_view_as_web_page\",\n    \"@HubSpot/follow_me\",\n    \"@HubSpot/follow_me_lp\",\n    \"@HubSpot/form\",\n    \"@HubSpot/header\",\n    \"@HubSpot/horizontal_spacer\",\n    \"@HubSpot/icon\",\n    \"@HubSpot/linked_image\",\n    \"@HubSpot/image_email\",\n    \"@HubSpot/image_grid\",\n    \"@HubSpot/gallery\",\n    \"@HubSpot/language_switcher\",\n    \"@HubSpot/logo\",\n    \"@HubSpot/meetings\",\n    \"@HubSpot/membership_social_logins\",\n    \"@HubSpot/menu\",\n    \"@HubSpot/page_footer\",\n    \"@HubSpot/password_prompt\",\n    \"@HubSpot/payments\",\n    \"@HubSpot/post_filter\",\n    \"@HubSpot/post_listing\",\n    \"@HubSpot/raw_html_email\",\n    \"@HubSpot/quote_download\",\n    \"@HubSpot/quote_payment\",\n    \"@HubSpot/quote_signature\",\n    \"@HubSpot/line_items\",\n    \"@HubSpot/rich_text\",\n    \"@HubSpot/rss_listing\",\n    \"@HubSpot/search_results\",\n    \"@HubSpot/section_header\",\n    \"@HubSpot/simple_menu\",\n    \"@HubSpot/social_sharing\",\n    \"@HubSpot/text\",\n    \"@HubSpot/video\",\n    \"@HubSpot/video_email\",\n    \"@HubSpot/video_embed_lp\",\n    \"@HubSpot/whatsapp_link\"\n  ]```"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 12:00:22",
    "text": "ty"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 16:21:00",
    "text": "Hi all,\ncouple of questions -\n1. Is there a way to preview/HMR a “page template” locally without it uploading?\n2. I’m working with the boilerplate tailwind styling, can’t really get it to show other than a partial? is there a cleaner way of embedding tailwind so it’s not a required module in a partial and it’s applied to all pages in base?",
    "reply_count": 52,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-08-14 16:21:39"
      },
      {
        "time_stamp": "2023-08-14 16:22:59"
      },
      {
        "time_stamp": "2023-08-14 16:23:09"
      },
      {
        "time_stamp": "2023-08-14 16:26:07"
      },
      {
        "time_stamp": "2023-08-14 16:26:37"
      },
      {
        "time_stamp": "2023-08-14 16:27:25"
      },
      {
        "time_stamp": "2023-08-14 16:28:25"
      },
      {
        "time_stamp": "2023-08-14 16:28:37"
      },
      {
        "time_stamp": "2023-08-14 16:29:03"
      },
      {
        "time_stamp": "2023-08-14 17:19:08"
      },
      {
        "time_stamp": "2023-08-14 17:19:44"
      },
      {
        "time_stamp": "2023-08-14 17:20:21"
      },
      {
        "time_stamp": "2023-08-14 17:20:49"
      },
      {
        "time_stamp": "2023-08-14 17:21:14"
      },
      {
        "time_stamp": "2023-08-14 17:22:00"
      },
      {
        "time_stamp": "2023-08-14 17:22:19"
      },
      {
        "time_stamp": "2023-08-14 17:22:25"
      },
      {
        "time_stamp": "2023-08-14 17:22:27"
      },
      {
        "time_stamp": "2023-08-14 17:22:45"
      },
      {
        "time_stamp": "2023-08-14 17:23:36"
      },
      {
        "time_stamp": "2023-08-14 17:24:14"
      },
      {
        "time_stamp": "2023-08-14 17:26:30"
      },
      {
        "time_stamp": "2023-08-14 17:26:35"
      },
      {
        "time_stamp": "2023-08-14 17:27:03"
      },
      {
        "time_stamp": "2023-08-14 17:27:31"
      },
      {
        "time_stamp": "2023-08-14 17:29:08"
      },
      {
        "time_stamp": "2023-08-14 17:29:13"
      },
      {
        "time_stamp": "2023-08-14 17:29:16"
      },
      {
        "time_stamp": "2023-08-14 17:29:51"
      },
      {
        "time_stamp": "2023-08-14 17:30:58"
      },
      {
        "time_stamp": "2023-08-14 17:31:50"
      },
      {
        "time_stamp": "2023-08-14 17:32:04"
      },
      {
        "time_stamp": "2023-08-14 17:32:12"
      },
      {
        "time_stamp": "2023-08-14 17:32:21"
      },
      {
        "time_stamp": "2023-08-14 17:32:36"
      },
      {
        "time_stamp": "2023-08-14 17:42:16"
      },
      {
        "time_stamp": "2023-08-14 17:42:34"
      },
      {
        "time_stamp": "2023-08-14 17:43:21"
      },
      {
        "time_stamp": "2023-08-14 17:58:28"
      },
      {
        "time_stamp": "2023-08-14 18:00:14"
      },
      {
        "time_stamp": "2023-08-14 18:00:43"
      },
      {
        "time_stamp": "2023-08-14 18:01:27"
      },
      {
        "time_stamp": "2023-08-14 18:01:42"
      },
      {
        "time_stamp": "2023-08-14 18:01:49"
      },
      {
        "time_stamp": "2023-08-14 18:02:47"
      },
      {
        "time_stamp": "2023-08-14 18:03:04"
      },
      {
        "time_stamp": "2023-08-14 18:03:06"
      },
      {
        "time_stamp": "2023-08-14 18:04:10"
      },
      {
        "time_stamp": "2023-08-14 18:13:20"
      },
      {
        "time_stamp": "2023-08-14 18:14:00"
      },
      {
        "time_stamp": "2023-08-14 20:00:48"
      },
      {
        "time_stamp": "2023-08-14 20:01:19"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 16:21:39",
    "text": "I currently have it inside a partial and embedded that in body which seems to be really hacky since partials are wrapped in a span\n```{% js_partial\n      path=\"@projects/stp-project/stp-app/components/partials/TailwindPartial.jsx\" %}```"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 16:22:59",
    "text": "```import '../../styles/tailwind.css';\n\nexport default function TailwindPartial() {\n  return &lt;&gt;&lt;/&gt;;\n}```\n"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 16:23:09",
    "text": ":woozy_face:"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 16:26:07",
    "edited": {
      "time_stamp": "2023-08-14 16:26:27"
    },
    "text": "or should I just include `import '../../styles/tailwind.css';` in every component? lol which I assume might make dup classes"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-14 16:26:37",
    "text": "I’m from my phone, i know there is a “no_wrapper” param for modules that will remove the span, but can’t remember if it is there for partials too. "
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-14 16:27:25",
    "text": "(Note the no_wrapper makes it so the page editor can’t detect where the modules is on the page. But for some contexts, that’s no big deal.)"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 16:28:25",
    "text": "that worked well thank you"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 16:28:37",
    "text": "with the `no_wrapper=True` on the partial"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 16:29:03",
    "edited": {
      "time_stamp": "2023-08-14 16:34:08"
    },
    "text": "I have that on the `base.hubl.html` template — now is there a way to have the hot reload on a page template locally without uploading? `localhost:3000` can’t find a way to hot reload a page template locally (unless it’s not possible yet)"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 17:19:08",
    "text": "```An uncategorized error occurred while deploying sub deploy `86268780-9716-4aca-9c3b-c3821581a34d`. Try re-deploying, or contact HubSpot for support and provide this identifier `555f366b-b5ea-43c5-ae8a-fa0099c5e6b7`.```"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-14 17:19:44",
    "edited": {
      "time_stamp": "2023-08-14 17:19:54"
    },
    "text": "(Was typing for above…) There is some work in parallel with JS building blocks seeing if we can do some local proxying-ish kind of stuff for changes made in HubL templates (for faster iteration cycles when locally editing HubL templates). But we don’t have any specifics too announce there."
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 17:20:21",
    "text": "so the only way is to work on a partial/module and then actually edit and preview on HS CMS in the browser?"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 17:20:49",
    "text": "the DX is really choppy for this, since it’s not loading the `base.hubl.html` for me which has custom fonts and other things"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 17:21:14",
    "text": "so I’m `require` ing my `tailwind.css` in react components to see what is happening locally"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-14 17:22:00",
    "edited": {
      "time_stamp": "2023-08-14 17:22:06"
    },
    "text": "Are you looking for hot/quick reload of HubL changes to base.hubl.html? Or hot reload changes to JS components that live “inside” some page using base.hubl.html (with the context of that templates’s fonts, CSS, etc)?"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 17:22:19",
    "text": "hot reload JS components that live inside some page"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 17:22:25",
    "text": "with the context of everything else"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-14 17:22:27",
    "text": "Ah, yes we can do that…"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-14 17:22:45",
    "text": "<https://github.com/HubSpot/cms-js-building-block-examples/blob/main/hello-world/README.md#5-previewing-local-changes-on-proxied-pages>"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 17:23:36",
    "text": "let me give that a go, ty"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-14 17:24:14",
    "text": "So assuming you have one page created from base.hubl.html you can use ^ to “proxy” the HubL rendered HTML via the local dev server and “swap out” your React components with locally rendered versions"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 17:26:30",
    "text": "nice"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 17:26:35",
    "text": "where is the “sprocket menu” lol"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-14 17:27:03",
    "text": "Ah, yeah we should say more about that…"
  },
  {
    "text": "If you are logged in to HS and view a CMS page hosted by the account you are logged in for, you’ll see  … in the top right",
    "time_stamp": "2023-08-14 17:27:31"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 17:29:08",
    "text": "nice thx"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 17:29:13",
    "text": "got that working but it’s not HMRing"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 17:29:16",
    "text": "I have to refresh"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 17:29:51",
    "text": "it’s proxying correctly though\n```<http://142366814.hs-sites-eu1.com.hslocal.net:3000/dev-page>```"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 17:30:58",
    "text": "but still much better than before :pray:"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-14 17:31:50",
    "text": "I suspect how that currently is working that server rendered changes don’t “hot” refresh in the proxy view (I thought that island changes would, but I could be wrong). I’m pretty sure we can should make that better, just don’t remember the details off hand"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 17:32:04",
    "text": "no worries"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 17:32:12",
    "text": "sorry to bug you after hours"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 17:32:21",
    "text": "that is at least “workable” for now lol"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-14 17:32:36",
    "text": "Bug us whenever you’d like, its up to us to respond when we’d prefer :wink:"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 17:42:16",
    "text": "can the “preview” with local server be done with a normal website page too or it must be a landing page?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-14 17:42:34",
    "text": "Both should work"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 17:43:21",
    "text": "perfect"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 17:58:28",
    "text": "aah my styles are showing on preview but after “deploy” it still doesn’t show"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-14 18:00:14",
    "text": "Can you verify that the build number you see in some of the asset URLs `…/build_assets/&lt;project&gt;/&lt;build number&gt;/…` matches the build number that you just deployed?"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 18:00:43",
    "text": "it does"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-14 18:01:27",
    "text": "Hm, any 404s or errors?\n\nMaybe there are HubL changes that need to be published and are currently sitting in draft/buffered state?"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 18:01:42",
    "text": "the page itself is published"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 18:01:49",
    "text": "lemme go draft and publish"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 18:02:47",
    "edited": {
      "time_stamp": "2023-08-14 18:02:51"
    },
    "text": "yeah the template “image preview” when you wanna select doesn’t show it either"
  },
  {
    "text": "",
    "time_stamp": "2023-08-14 18:03:04"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 18:03:06",
    "text": "local vs. published"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 18:04:10",
    "text": "and I did run deploy a few times but the changes don’t show up"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-14 18:13:20",
    "text": "Will try and look a little more later. Feel free to DM and more details if you would rather not share here (like what’s the CSS you expect, links I can look at, etc)"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 18:14:00",
    "text": "no problem, I’ll DM you"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-08-14 20:00:48",
    "text": "Turned out to be using `content: ['./components/**/*.{js,ts,jsx,tsx}']` vs:\n\n```const componentsDir = new URL('./components', import.meta.url).pathname;\n\nexport default {\n  content: [`${componentsDir}/**/*.{js,ts,jsx,tsx}`],```\n(Todo, figure out if/how we can make the build’s PWD match the local server)"
  },
  {
    "poster": {
      "poster_name": "Rob Davarnia",
      "poster_handle": "rob345"
    },
    "time_stamp": "2023-08-14 20:01:19",
    "text": "thanks for finding this! appreciate the afterhours help"
  }
]