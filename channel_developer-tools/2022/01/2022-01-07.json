[
  {
    "text": "Anyone else using Bootstrap 5 utility and grid classes?",
    "time_stamp": "2022-01-07 05:58:01",
    "edited": {
      "time_stamp": "2022-01-07 07:56:22"
    },
    "reply_count": 73,
    "reply_users_count": 15,
    "replies": [
      {
        "time_stamp": "2022-01-07 07:11:00"
      },
      {
        "time_stamp": "2022-01-07 07:11:43"
      },
      {
        "time_stamp": "2022-01-07 07:14:07"
      },
      {
        "time_stamp": "2022-01-07 07:17:21"
      },
      {
        "time_stamp": "2022-01-07 07:19:20"
      },
      {
        "time_stamp": "2022-01-07 07:22:07"
      },
      {
        "time_stamp": "2022-01-07 07:23:17"
      },
      {
        "time_stamp": "2022-01-07 07:23:30"
      },
      {
        "time_stamp": "2022-01-07 07:27:35"
      },
      {
        "time_stamp": "2022-01-07 07:28:36"
      },
      {
        "time_stamp": "2022-01-07 07:29:39"
      },
      {
        "time_stamp": "2022-01-07 07:30:17"
      },
      {
        "time_stamp": "2022-01-07 07:30:45"
      },
      {
        "time_stamp": "2022-01-07 07:31:03"
      },
      {
        "time_stamp": "2022-01-07 07:31:05"
      },
      {
        "time_stamp": "2022-01-07 07:32:10"
      },
      {
        "time_stamp": "2022-01-07 07:32:11"
      },
      {
        "time_stamp": "2022-01-07 07:32:42"
      },
      {
        "time_stamp": "2022-01-07 07:33:19"
      },
      {
        "time_stamp": "2022-01-07 07:33:28"
      },
      {
        "time_stamp": "2022-01-07 07:34:22"
      },
      {
        "time_stamp": "2022-01-07 07:34:25"
      },
      {
        "time_stamp": "2022-01-07 07:35:13"
      },
      {
        "time_stamp": "2022-01-07 07:35:28"
      },
      {
        "time_stamp": "2022-01-07 07:35:28"
      },
      {
        "time_stamp": "2022-01-07 07:35:31"
      },
      {
        "time_stamp": "2022-01-07 07:36:10"
      },
      {
        "time_stamp": "2022-01-07 07:36:18"
      },
      {
        "time_stamp": "2022-01-07 07:36:45"
      },
      {
        "time_stamp": "2022-01-07 07:36:56"
      },
      {
        "time_stamp": "2022-01-07 07:37:21"
      },
      {
        "time_stamp": "2022-01-07 07:37:23"
      },
      {
        "time_stamp": "2022-01-07 07:37:36"
      },
      {
        "time_stamp": "2022-01-07 07:42:10"
      },
      {
        "time_stamp": "2022-01-07 07:43:24"
      },
      {
        "time_stamp": "2022-01-07 07:44:35"
      },
      {
        "time_stamp": "2022-01-07 07:45:04"
      },
      {
        "time_stamp": "2022-01-07 07:45:18"
      },
      {
        "time_stamp": "2022-01-07 07:46:13"
      },
      {
        "time_stamp": "2022-01-07 07:46:50"
      },
      {
        "time_stamp": "2022-01-07 07:47:24"
      },
      {
        "time_stamp": "2022-01-07 07:47:53"
      },
      {
        "time_stamp": "2022-01-07 07:48:13"
      },
      {
        "time_stamp": "2022-01-07 07:49:04"
      },
      {
        "time_stamp": "2022-01-07 07:49:13"
      },
      {
        "time_stamp": "2022-01-07 07:50:08"
      },
      {
        "time_stamp": "2022-01-07 07:51:23"
      },
      {
        "time_stamp": "2022-01-07 07:51:45"
      },
      {
        "time_stamp": "2022-01-07 07:52:53"
      },
      {
        "time_stamp": "2022-01-07 07:53:18"
      },
      {
        "time_stamp": "2022-01-07 07:53:48"
      },
      {
        "time_stamp": "2022-01-07 07:54:26"
      },
      {
        "time_stamp": "2022-01-07 07:55:16"
      },
      {
        "time_stamp": "2022-01-07 07:56:17"
      },
      {
        "time_stamp": "2022-01-07 07:57:16"
      },
      {
        "time_stamp": "2022-01-07 07:58:00"
      },
      {
        "time_stamp": "2022-01-07 08:01:09"
      },
      {
        "time_stamp": "2022-01-07 08:42:44"
      },
      {
        "time_stamp": "2022-01-07 08:57:07"
      },
      {
        "time_stamp": "2022-01-07 08:59:29"
      },
      {
        "time_stamp": "2022-01-07 09:12:41"
      },
      {
        "time_stamp": "2022-01-07 09:13:34"
      },
      {
        "time_stamp": "2022-01-07 09:26:30"
      },
      {
        "time_stamp": "2022-01-07 09:27:21"
      },
      {
        "time_stamp": "2022-01-07 09:57:54"
      },
      {
        "time_stamp": "2022-01-07 15:29:15"
      },
      {
        "time_stamp": "2022-01-07 22:41:48"
      },
      {
        "time_stamp": "2022-01-28 07:14:38"
      },
      {
        "time_stamp": "2022-01-28 07:46:23"
      },
      {
        "time_stamp": "2022-07-06 07:08:57"
      },
      {
        "time_stamp": "2022-07-06 14:27:19"
      },
      {
        "time_stamp": "2022-07-07 08:09:52"
      },
      {
        "time_stamp": "2022-07-07 08:53:27"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2022-01-07 07:11:00",
    "text": "<@UD53A9UUR> - tag some peeps for me, to see if this is worth putting into production"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2022-01-07 07:11:43",
    "text": ":thumbsup:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2022-01-07 07:14:07",
    "text": "<@UQERM7BLY>, <@U26BLKGE4>, <@U01D95STUS3>, <@U02NJACH5QS>, <@U7V9DQ31P>, <@U38EZFVFE> <@UGDF9EBPW>, <@U7ADCU3BM>, <@UQWGKUEN7>, <@U021H3TV338> what do you all think?"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2022-01-07 07:17:21",
    "text": "Not usually a framework fan, but the simple ability to reverse stacking order on mobile would be huge for those I work with. HubSpot, pay this man."
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2022-01-07 07:19:20",
    "text": "another non-framework guy here."
  },
  {
    "poster": {
      "poster_name": "Dustin Perolio",
      "poster_handle": "dustin305"
    },
    "time_stamp": "2022-01-07 07:22:07",
    "edited": {
      "time_stamp": "2022-01-07 07:23:07"
    },
    "text": "Same honestly, but definitely an interesting idea."
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2022-01-07 07:23:17",
    "text": "doesn't have to be a framework if you want a bunch of inline styles :smile:"
  },
  {
    "poster": {
      "poster_name": "Milos Miljkovic",
      "poster_handle": "miljkovicmisa"
    },
    "time_stamp": "2022-01-07 07:23:30",
    "text": "Framework logic inside editor looks nice but the thing is that frameworks are mainly developer/designer-oriented for use in template creation, not sure how it would benefit the regular marketeer that will handle content."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-01-07 07:27:35",
    "edited": {
      "time_stamp": "2022-01-07 07:28:01"
    },
    "text": "i don’t like the entirety of the framework. but my priority is always keeping code as dry as possible."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-01-07 07:28:36",
    "text": "that being said I almost always create my own grid for every site i make"
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2022-01-07 07:29:39",
    "text": "Keep in mind, this utilizes the bootstrap utility classes only... It doesn't inject design into the site...\n• flexbox \n• padding\n• margin\n• grid"
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2022-01-07 07:30:17",
    "text": "kinda like what you're doing already <@U38EZFVFE>"
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2022-01-07 07:30:45",
    "text": "The Page editor already uses that with bootstrap 2, I'm just improving it to use the bs5 utilities"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2022-01-07 07:31:03",
    "edited": {
      "time_stamp": "2022-01-07 07:31:17"
    },
    "text": "Im curious on this myself. Would this be something where the person would need both the theme and then also an accompanying plugin for the browser?"
  },
  {
    "poster": {
      "poster_name": "Teun Rutten",
      "poster_handle": "teun"
    },
    "time_stamp": "2022-01-07 07:31:05",
    "text": "I really like it! We do not use bootstrap, but we use a bunch of util fields in our modules with the same options"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-01-07 07:32:10",
    "text": "i do this another way."
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2022-01-07 07:32:11",
    "text": "<@U2H3TT8F2> - there is no theme but you would have to follow a naming convention when creating settings in the module... and yes, you would need the chrome extension"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-01-07 07:32:42",
    "text": "I use the existing classes and upgrade it to work off my own styles. Then i add UTIL classes on top of that."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-01-07 07:33:19",
    "text": "I create the style options into the modules for the util classes"
  },
  {
    "text": "",
    "time_stamp": "2022-01-07 07:33:28"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-01-07 07:34:22",
    "text": "BUT it wont work with the default DnD"
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2022-01-07 07:34:25",
    "text": "I try doing that as well <@U38EZFVFE> - however i find the settings get flooded and overwhelming the more you create"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-01-07 07:35:13",
    "edited": {
      "time_stamp": "2022-01-07 07:35:18"
    },
    "text": "there was a tool created for teh last Dev Day that was interesteing. It allows you to keep your fields.json DRY"
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2022-01-07 07:35:28",
    "text": "was it parachute?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-01-07 07:35:28",
    "text": "and only import the sections you need"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-01-07 07:35:31",
    "text": "yes"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-01-07 07:36:10",
    "text": "I think this is pretty darn dope. Multiple breakpoints it would seem - much more flexibility with the default editor. Getting on the flex grid would be pretty dope. I think that this will bring quite a bit to marketers and content editors in general. Seems like a much more robust dnd editor any way you slice the cake. "
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2022-01-07 07:36:18",
    "text": "yea, that's dope, I dug into that one pretty far"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-01-07 07:36:45",
    "text": "<https://cnpmjs.org/package/@spingroup/parachute>"
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2022-01-07 07:36:56",
    "text": "speak of the devil :smile: there's <@UQWGKUEN7>"
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2022-01-07 07:37:21",
    "text": "he created parachute"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-01-07 07:37:23",
    "text": "I think that is the way im going to go whith my theme framework."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-01-07 07:37:36",
    "text": "yepp.. he is."
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-01-07 07:42:10",
    "edited": {
      "time_stamp": "2022-01-07 07:47:06"
    },
    "text": "Hahaha why hello there partners :face_with_cowboy_hat: it's worth noting that i sunset it already in favor for a different project that was the same thing but way further along in production. So if you're using parachute ide recommend checking out igomoons HubSpot-fields-js project. It's dope. <https://github.com/iGoMoon/HubSpot-fields-js#readme|https://github.com/iGoMoon/HubSpot-fields-js#readme> \n\nBut off topic!\n<@U0183NGLSUD> for credits"
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2022-01-07 07:43:24",
    "text": "but i already bastardized parachute to fit my needs :smile:"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-01-07 07:44:35",
    "text": "Hahaha yea this has a much more slick interface. \n\nI mean keep using parachute if you want! It works and is neat for sure. But this creates a whole api that takes away some of the pain of writing json files for fields. And slims it waayyyy down. "
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-01-07 07:45:04",
    "text": "That is pretty dope"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-01-07 07:45:18",
    "text": "I like the simple syntax"
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2022-01-07 07:46:13",
    "text": "can't wait to try it"
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2022-01-07 07:46:50",
    "text": "I have json files that are over 4500 lines, you can't expect to write that for every module"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-01-07 07:47:24",
    "text": "no joke"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-01-07 07:47:53",
    "text": "especially with the groups and children and defaults.."
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-01-07 07:48:13",
    "text": "Haha I've used it on my last project and it's a serious workflow improvement. Really changes how I structure modules and makes the theme way more coherent. "
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-01-07 07:49:04",
    "text": "do you use it on client projects? or just internal projects?"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-01-07 07:49:13",
    "text": "Client projects. "
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-01-07 07:50:08",
    "text": "curious,. how to use use it for conditional fields. Say you are showing hiding fields based on a choice or toggle."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-01-07 07:51:23",
    "text": "ah:\n```visibleIf(controllingField, regex, type = \"EQUAL\")```"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-01-07 07:51:45",
    "text": "You can run this super easily on just a node wrapper. No need for webpack or anything. \n\nFor condistionals there is a visibleIf() method I think. Something similar at least that has the same syntax as the display. And you just need to use the id() method on top of the name(). Very intuitive and easy"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-01-07 07:52:53",
    "text": "dare i say it…. it’s almost jquery like."
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-01-07 07:53:18",
    "text": "So not only does it slim the json file down but it also ports things over like parachute to make it all DRY. "
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-01-07 07:53:48",
    "text": "Sooooo effectively killed parachute right away haha"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-01-07 07:54:26",
    "text": "I assume its also looking for a module folder as well."
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-01-07 07:55:16",
    "text": "I believe it's looking for fields.js files"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-01-07 07:56:17",
    "text": "But. <@UDC5GRX6E> I think that what you have above is dope and useful. <@U38EZFVFE> if you have more questions feel free to  dm me!"
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2022-01-07 07:57:16",
    "text": "tysm <@UQWGKUEN7>"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-01-07 07:58:00",
    "text": "i guess what im asking (pardon the ignorance) do i place the fields.js into the `XXXXXXX.module` folder? or do i have to move it manually."
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2022-01-07 08:01:09",
    "text": "if it's like parachute, yes you put fields.js in the module folder and you can put your partials outside of the module folder, in say ./src/field-partials/"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2022-01-07 08:42:44",
    "text": "<@U0189NXRP1U> :wink:"
  },
  {
    "poster": {
      "poster_name": "Brian Doherty",
      "poster_handle": "bdoherty"
    },
    "time_stamp": "2022-01-07 08:57:07",
    "text": "We’ve definitely kicked around ideas internally about supporting new grid types (for a long time). Thinking through the technical implementation, I think there would be two options (can I get a reaction poll?). Would you rather:\n:sprocket:  - Have a few “HubSpot blessed” grid types (css grid, bootstrap 5, whatever) that you could choose to use / configure a few options as part of your theme, and _mostly_ expect all the existing styling options for the marketer in the editor continue to work (and maybe for something like css grid, they get _more_ layout options). The markup / CSS becomes an implementation detail on our side, but is probably cleaner than our existing grid.\nOR\n:rocket:  - Developer can define the markup  we use for for each “layout fragment” (section / column / row), and the css classes the editor / render should apply for each part of the grid. Some / most of the built in styling controls customers have in the editor are no longer displayed (because they can make certain assumptions about the markup / css, and if the markup is arbritray those assumptions are broken).\n\nFeels like option 1 is a bit more constraining, but is in a better place than we are now. Option 2 feels like ultimate power for yall, maybe at the expense of marketer experience. It’s a fine line to walk for sure!"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-01-07 08:59:29",
    "text": "Ahhh now that im at my PC and awake I am getting a better sense for how this is working. I see that it’s built into the module (which is why we started talking about parachte etc.) I think that it would def be something that would need to be integrated on a theme wide basis for sure. Did you build a chrome extension or something that brings up that dropdown? I think that interface is pretty darn cool. Not sure if it’s something that many would use as an external tool. I think — if a funcitonality like this were baked into HS’s dnd editor it would be much more widely used and accepted."
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2022-01-07 09:12:41",
    "text": "<@UA886MF42> I’m probably in the minority in this community, but I’ll take opinionated system standards over developer customization every day. I’d love to see an updated grid (my preference would be CSS Grid) but I’d still prefer it be maintained by HS rather than individual devs. If a marketer wants to swap one theme for another, the layout foundation used on every page shouldn’t be a variable imo."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2022-01-07 09:13:34",
    "edited": {
      "time_stamp": "2022-01-07 09:13:40"
    },
    "text": "I prefer a opionated base.. iE the base classes."
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2022-01-07 09:26:30",
    "text": "<@UA886MF42> - The idea here was to simply beef up the existing bootstrap 2 utility classes that are currently in use, to bootstrap 5. I'll take any approach that will give me this level of control on the page builder... I'm kinda on the side with <@U26BLKGE4>, I don't mind a baked in solution as long as it doesn't get modified into a corner like what happened with bootstrap 2.\n\nI am more partial to the tailwind utility classes, and we might be switching the utility to tailwind instead of bootstrap just because there are a few more options in the utilities\n\nTo me, all utility frameworks are the same with just a little bit different syntax.\n\nWe have not been able to adopt to the new DnD builder basically for all of the reasons I have covered in the video.... once we get that level of control over the grid and responsive styles, it will be easier to be able to build on the level that makes the designers happy"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-01-07 09:27:21",
    "text": "That being said I think that I would still be interested in playing around with this a bit and just exploring and celebrating the fact that you built it. It would def be cool to see where this leads/what ideas it brings up"
  },
  {
    "poster": {
      "poster_name": "Brian Doherty",
      "poster_handle": "bdoherty"
    },
    "time_stamp": "2022-01-07 09:57:54",
    "text": "This all is great stuff. I hope you all continue to call us out in areas where need to improve the developer + marketer experience. It keeps us honest :smile: . Happy to jump on a call with to hear any more feedback from the community (though to set expectations, my (editor) team and many others are already pretty “booked up” for the first half of the year)."
  },
  {
    "poster": {
      "poster_name": "Noel Williams",
      "poster_handle": "noel.williams"
    },
    "time_stamp": "2022-01-07 15:29:15",
    "text": "I think Option2 could achieve both. You could still have a theme maintained by HubSpot using their grid standard of choice.  You then have the freedom from OTB to 100% home baked."
  },
  {
    "poster": {
      "poster_name": "Frank Fava",
      "poster_handle": "frank.fava"
    },
    "time_stamp": "2022-01-07 22:41:48",
    "text": "Gday peeps!\n\n<@UQWGKUEN7> Thank you as always for your support on “FieldsJS” both in the community and the code base.\nFor those that are curious, BJ has already contributed a fix to v1.2.0 that vastly improved the workflow (<https://www.igomoon.com/blog/speed-up-your-HubSpot-development-workflow-with-igomoons-tool>)\n\n<@UDC5GRX6E> as someone who does use bootstrap 5 within our projects, I love this.  Previously we had just overwritten the default BS2 dnd_grid class to use bootstrap but this is lightyears ahead. I also agree with  <@UQWGKUEN7> in that it would need to be integrated into the core dnd editor for a global experience rather than the module itself.\n\nAlso regarding FieldsJS, we are currently working on fields.json to fields.js converter\n\n<@U38EZFVFE> Yep, FieldsJS will look for a `fields.js` file within your module folder and then will transform it to a json file within the `dist` folder (it was orginally built to use with WebPack but there is a CLI version available too - <https://github.com/iGoMoon/HubSpot-fields-js-cli>)"
  }
]