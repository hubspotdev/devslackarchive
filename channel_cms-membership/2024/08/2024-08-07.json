[
  {
    "poster": {
      "poster_name": "Noel Williams",
      "poster_handle": "noel.williams"
    },
    "time_stamp": "2024-08-07 14:17:03",
    "text": "<@U04V6495U4R>, for the one-time login link, is it possible to carry over the redirect from the page they were trying to access?",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-08-07 14:20:21"
      },
      {
        "time_stamp": "2024-08-07 16:11:16"
      },
      {
        "time_stamp": "2024-08-07 17:42:11"
      },
      {
        "time_stamp": "2024-08-08 08:08:53"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Ankur Gupta",
      "poster_handle": "angupta"
    },
    "time_stamp": "2024-08-07 14:20:21",
    "text": "Not sure what you mean. The one-time link will log the user in to the page they were requesting access to."
  },
  {
    "poster": {
      "poster_name": "Noel Williams",
      "poster_handle": "noel.williams"
    },
    "time_stamp": "2024-08-07 16:11:16",
    "text": "I had the destination for \"after someone signs in\" set to \"The private page they were on\" However, The one-time link takes the user to the domain root. I found a workaround by 1) capturing the redirect_url parameter on the login page and saving it to localStorage with javascript. 2) Setting the destination page to a default page that includes script to retrieve the url for localStorage and add a countdown redirect and link."
  },
  {
    "poster": {
      "poster_name": "Ankur Gupta",
      "poster_handle": "angupta"
    },
    "time_stamp": "2024-08-07 17:42:11",
    "text": "Ah interesting. I get what you mean now. Iâ€™ll bring this up with my team"
  }
]