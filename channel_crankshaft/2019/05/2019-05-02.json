[
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 07:10:27",
    "edited": {
      "time_stamp": "2019-05-02 07:53:55"
    },
    "text": "*CrankShaft Logo concepts and designs wanted.*\n<https://github.com/TheWebTech/CrankShaft/issues/20>\n\nMore to come"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 07:32:04",
    "text": "Need input on getting a documentation site going for CrankShaft <https://github.com/TheWebTech/CrankShaft/issues/21>"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-05-02 08:05:56",
    "text": "<https://github.com/lord/slate>",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-05-02 08:12:25"
      },
      {
        "time_stamp": "2019-05-02 08:51:31"
      },
      {
        "time_stamp": "2019-05-02 08:53:45"
      },
      {
        "time_stamp": "2019-05-02 08:55:59"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-05-02 08:06:13",
    "text": "might work for using Github as a repository for the docs"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-02 08:09:43",
    "text": "i dont trust that avatar"
  },
  {
    "poster": {
      "poster_name": "Umakant - MakeWebBetter",
      "poster_handle": "umakantsharma"
    },
    "time_stamp": "2019-05-02 08:12:25",
    "text": "slate is good option"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 08:51:31",
    "text": "kinda nice. I like the markdown part, and that it has a nice way of previewing the code"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 08:53:45",
    "text": "can we easily make it support HubL however?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 08:55:59",
    "text": "looks like it supports jinja - we can pretend the HubL is jinja for short term long term we can contribute back to slate to include HubL(just fork jinja and do whatever tweaks specific to HubL we need to)"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 09:04:39",
    "text": "my one big question on the documentation is - does this documentation framework make sense for the project, none of the listed projects are similar, all are API focused. So they’re more about “send this query to our server, get this back”.\n\nExample - once the grid is done, we’re going to want to display how to use the grid."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 09:32:07",
    "text": "Thinking about the file structure CrankShaft should have.\n\n<https://github.com/TheWebTech/CrankShaft/issues/22>\n\nThoughts?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 09:33:43",
    "text": "if it’s too hard to read in the format I listed I could mock it up in a different way."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 09:42:43",
    "text": "compare this to what you guys do for your own companies/projects, what do you think?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-02 09:51:52",
    "text": "would be nice to have a separate file for variables"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-02 09:52:50",
    "text": "and macros"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 09:55:28",
    "edited": {
      "time_stamp": "2019-05-02 09:56:45"
    },
    "text": "so here’s something I was thinking about regarding the macros/variables, let me know what you think here.\n\nI was thinking what if the the theme.css file was imported into all of the other files, so any macros and vars you declare there are usable throughout.\n\nThe theme.css file would also be where you set grid vars and whatnot like how wide is the page-center. things like that."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 09:58:30",
    "text": "the HubSpot created macros would be imported into the theme.css file, so they could be used freely, and wouldn’t clutter that file.\n\nThen any site template css would go in the theme.css file.\n\nAll HS default css(things like the css to make forms appear okay(minimal css) would be in a separate defaults.css file, that gets included into the theme.css file.\n\nThen below those includes you’d have your actual styles for the site."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 09:59:53",
    "edited": {
      "time_stamp": "2019-05-02 10:00:35"
    },
    "text": "The idea being that everything regarding the site’s template visual styles would be in 1 file. Cleanly organized. (variables and macros toward the top, organized by what they’re for)\n\nactual template related styles at the bottom.\n\nCSS for making site specific module customizations would be in it’s own file, and that would be an included file into the theme.css"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 10:01:47",
    "text": "So theoretically the actual amount of styles in the theme.css file would not be overly bloated right away because most of what is currently in the boilerplate css would be moved to a defaults file."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 10:01:58",
    "edited": {
      "time_stamp": "2019-05-02 10:02:19"
    },
    "text": "make sense? it’s okay if you disagree and think it should still be separated."
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-02 10:02:19",
    "text": "yeah.  that works"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-02 10:02:45",
    "text": "i separate my work out throughout a bunch of scss files"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-02 10:02:57",
    "text": "i find smaller files more manageable"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 10:03:35",
    "text": "that’s fine we can have a globals file type thing that stores the vars and macros and is imported into theme.css"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 10:06:59",
    "edited": {
      "time_stamp": "2019-05-02 10:09:23"
    },
    "text": "less important question, what should we name the vars/macros file to make it stupid obvious?\n* theme-vars.css\n* theme-globals.css\n* theme-settings.css\n\n(a user could obviously choose to import their own stuff into this file to seperate it out as much as they want, but the main file for this is what would be in the framework itself)"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 10:16:00",
    "text": "i would use a more HSish approach."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 10:16:22",
    "text": "have a list of items broken up by category",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-05-02 10:16:47"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 10:16:34",
    "text": "then the body scrolls to that section"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 10:16:47",
    "edited": {
      "time_stamp": "2019-05-02 10:17:16"
    },
    "text": "planning to do a table of contents type organization like HS did in their company style file. is that what you’re thinking?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 10:16:48",
    "text": "K.I.S.S",
    "reply_count": 49,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-05-02 10:18:10"
      },
      {
        "time_stamp": "2019-05-02 10:24:22"
      },
      {
        "time_stamp": "2019-05-02 10:25:57"
      },
      {
        "time_stamp": "2019-05-02 10:29:11"
      },
      {
        "time_stamp": "2019-05-02 10:29:31"
      },
      {
        "time_stamp": "2019-05-02 10:29:39"
      },
      {
        "time_stamp": "2019-05-02 10:29:53"
      },
      {
        "time_stamp": "2019-05-02 10:30:22"
      },
      {
        "time_stamp": "2019-05-02 10:30:31"
      },
      {
        "time_stamp": "2019-05-02 10:31:29"
      },
      {
        "time_stamp": "2019-05-02 10:31:53"
      },
      {
        "time_stamp": "2019-05-02 10:32:14"
      },
      {
        "time_stamp": "2019-05-02 10:32:48"
      },
      {
        "time_stamp": "2019-05-02 10:32:51"
      },
      {
        "time_stamp": "2019-05-02 10:32:52"
      },
      {
        "time_stamp": "2019-05-02 10:33:40"
      },
      {
        "time_stamp": "2019-05-02 10:34:13"
      },
      {
        "time_stamp": "2019-05-02 10:35:47"
      },
      {
        "time_stamp": "2019-05-02 10:36:01"
      },
      {
        "time_stamp": "2019-05-02 10:45:33"
      },
      {
        "time_stamp": "2019-05-02 10:46:20"
      },
      {
        "time_stamp": "2019-05-02 10:46:48"
      },
      {
        "time_stamp": "2019-05-02 10:46:55"
      },
      {
        "time_stamp": "2019-05-02 10:47:26"
      },
      {
        "time_stamp": "2019-05-02 10:49:01"
      },
      {
        "time_stamp": "2019-05-02 10:52:23"
      },
      {
        "time_stamp": "2019-05-02 11:10:53"
      },
      {
        "time_stamp": "2019-05-02 11:11:05"
      },
      {
        "time_stamp": "2019-05-02 11:11:33"
      },
      {
        "time_stamp": "2019-05-02 11:13:35"
      },
      {
        "time_stamp": "2019-05-02 11:14:14"
      },
      {
        "time_stamp": "2019-05-02 11:14:22"
      },
      {
        "time_stamp": "2019-05-02 11:14:27"
      },
      {
        "time_stamp": "2019-05-02 11:14:27"
      },
      {
        "time_stamp": "2019-05-02 11:14:45"
      },
      {
        "time_stamp": "2019-05-02 11:14:50"
      },
      {
        "time_stamp": "2019-05-02 11:14:54"
      },
      {
        "time_stamp": "2019-05-02 11:15:08"
      },
      {
        "time_stamp": "2019-05-02 11:15:49"
      },
      {
        "time_stamp": "2019-05-02 11:16:19"
      },
      {
        "time_stamp": "2019-05-02 11:16:41"
      },
      {
        "time_stamp": "2019-05-02 11:16:57"
      },
      {
        "time_stamp": "2019-05-02 11:19:42"
      },
      {
        "time_stamp": "2019-05-02 11:19:46"
      },
      {
        "time_stamp": "2019-05-02 11:24:57"
      },
      {
        "time_stamp": "2019-05-02 11:25:23"
      },
      {
        "time_stamp": "2019-05-02 11:26:00"
      },
      {
        "time_stamp": "2019-05-02 11:28:33"
      },
      {
        "time_stamp": "2019-05-02 11:29:41"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 10:18:10",
    "edited": {
      "time_stamp": "2019-05-02 10:18:38"
    },
    "text": "I agree with keeping it simple, it’s part of the reason I initially didn’t want to separate the vars and macros completely from the main file the dev edits"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 10:24:22",
    "text": "how are you planning on doing this? modularly? or one giant file"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 10:25:57",
    "text": "almost everything will be approached in a modular fashion.\n\nExample - if you decide you don’t want to use the grid, there will be a boolean var for it which toggles an include in the main theme file."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 10:29:11",
    "text": "The goal being that when someone starts up a project, similar to how you would with an scss framework you’d go “I need this I need that, my font size is this, my colors are this” and the other files can grab those vars and use them. Example - the grid would grab your “site width” type variable and use that"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 10:29:31",
    "text": "so this is all css and js then"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 10:29:39",
    "text": "no template files?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 10:29:53",
    "text": "it’s all of the above. see the github issue"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 10:30:22",
    "edited": {
      "time_stamp": "2019-05-02 10:30:33"
    },
    "text": "template files will be minimal just enough to get you going without being in your face - intended to be a starting point"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 10:30:31",
    "text": "yeah ."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 10:31:29",
    "text": "i guess that modules will not have their own css right?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 10:31:53",
    "text": "ah nevermind i miss read that"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 10:32:14",
    "text": "I think that modules should be approached site-agnostically.\n\nSo yes they will have their own css. but it wont be themed to the site"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 10:32:48",
    "text": "yeah. gotcha. functional css only"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 10:32:51",
    "text": "so think kinda like:\n<https://platforma.ws/>\n\nthe common layout tropes, just without colors etc"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 10:32:52",
    "text": "yea"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 10:33:40",
    "text": "global css takes care of 50% then modual specific styles are with the modual"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 10:34:13",
    "text": "btw do you use platforma?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 10:35:47",
    "text": "yep, and the theme.css file would be for template specific styling. - so basically styling elements you use site-wide that are not specific to a module. (buttons, say you want a sidebar to be a certain way on a page. That sorta thing.)"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 10:36:01",
    "text": "Indirectly I use platforma, have clients that use it in the design phase"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 10:45:33",
    "text": "the hs does its thing"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 10:46:20",
    "text": "concatenation"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 10:46:48",
    "text": "yes, we’d be using HubL for all includes and imports."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 10:46:55",
    "text": "so all of it would be done on HS’s side"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 10:47:26",
    "text": "our official moto.. #saynotosass"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 10:49:01",
    "text": "not necessarily, just - if people want a SASS version it should be a fork of this version basically. I think there’s a big advantage to using HubL and that it’d help more people right out the gate than forcing local build tools right off the bat"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 10:52:23",
    "text": "so not at all against using SCSS, just figure what would get people up and running fastest with the smallest barrier to entry, and most flexibility. HubL is available in everything and we can do some things we can’t do with SCSS.\n\nexample we can have javascript files that Import or Include things based on variables if we wanted, and it can all be managed from the same place as css vars are.\n\nThis is just an example, not something I’ve specifically thought about - say we had like a tooltip feature built in. you could using a var toggle on/off both the css AND the JS required to make that feature work"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 11:10:53",
    "text": "BTW.. Speaking of that... Me and Chris M figured this out yesterday."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 11:11:05",
    "text": "```&lt;script&gt;  \n  {% set agent = request.headers['user-agent']  %}   \n  {% if (agent is string_containing \"Android\") or (agent is string_containing \"iPhone\") %}  \n    console.log('Mobile');\n  {% else %}\n    console.log('Desktop');  \n  {% endif %}      \n&lt;/script&gt;```"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 11:11:33",
    "text": "can be expanded obiously"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 11:13:35",
    "text": "not to be a downer, but why useragent sniff using hubL when you can do it directly in JS? lol"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 11:14:14",
    "text": "so you can have thing done server side."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 11:14:22",
    "text": "less js bandwidth"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 11:14:27",
    "text": "speed my man"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 11:14:27",
    "text": "I guess, makes sense"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 11:14:45",
    "text": "the only issue is that i think that might prevent caching"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 11:14:50",
    "text": "so we would have to test it"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 11:14:54",
    "text": "yea I would think it would"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 11:15:08",
    "text": ":eyes:"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 11:15:49",
    "text": "HubSpot doesnt have a list of requests the prevent caching do they?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 11:16:19",
    "text": "no but sounds like a blog post i should write :stuck_out_tongue_winking_eye:"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 11:16:41",
    "text": "ha"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 11:16:57",
    "text": "not if i get it first :slightly_smiling_face:"
  },
  {
    "text": "",
    "time_stamp": "2019-05-02 11:19:42"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 11:19:46",
    "text": "interesting tid bits"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 11:24:57",
    "text": "don’t think it’s 100% accurate about the requests but mostly accurate"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 11:25:23",
    "text": "I think requests based on URL and params in URL are still cached properly"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 11:26:00",
    "text": "they just get cached separately for each unique URL someone hits with it"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-02 11:28:33",
    "edited": {
      "time_stamp": "2019-05-02 11:28:41"
    },
    "text": "dunno about caching but any use of `{{ request }}` will disable minification I think"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-05-02 11:29:41",
    "text": "tho, I had some issues with a portal when I got that premise so could be wrong and I just generalised :sweat_smile:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 15:04:03",
    "text": "<@U7AS8L4MR> made a pretty fantabulous logo. Think he’s going to do minor tweaks to it.\n<https://github.com/TheWebTech/CrankShaft/issues/20#issuecomment-488810686>\n\nFrankly I think it’s pretty boss."
  },
  {
    "subtype": "bot_message",
    "text": "",
    "time_stamp": "2019-05-02 15:05:33"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 15:06:46",
    "text": "for reference:\nAndreas Wessoly’s:\n<https://user-images.githubusercontent.com/5492388/57081416-40e55900-6cba-11e9-9267-642d2d922920.PNG>\n\nJon Eichler’s:\n<https://user-images.githubusercontent.com/854776/57103196-c4b73980-6cea-11e9-90e1-c2317f03ee30.jpg>"
  },
  {
    "poster": {
      "poster_name": "Luke Summerfield",
      "poster_handle": "lukesummerfield"
    },
    "time_stamp": "2019-05-02 15:22:34",
    "text": "Love seeing this project getting pushed ahead #KeepGoing!"
  },
  {
    "poster": {
      "poster_name": "Luke Summerfield",
      "poster_handle": "lukesummerfield"
    },
    "time_stamp": "2019-05-02 15:24:10",
    "text": "I like Eichler's - I'd see if you can tweak it to fit into a square. (currently it's long, rectrangular). Square logo icons always are 100x better for placements / sizing."
  },
  {
    "poster": {
      "poster_name": "Luke Summerfield",
      "poster_handle": "lukesummerfield"
    },
    "time_stamp": "2019-05-02 15:25:13",
    "text": "Also, if you squint, it looks like 1/2 of a swastika.... eeek... so be mindful of that"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 15:26:16",
    "text": "i think were safe on the swastiika front, if the lines on the ends werent there id agree"
  },
  {
    "poster": {
      "poster_name": "Jon Eichler",
      "poster_handle": "jeichler"
    },
    "time_stamp": "2019-05-02 15:35:31",
    "text": "Yeah I was planning on doing some final tweaks to it, as well as produce several versions including square versions."
  },
  {
    "poster": {
      "poster_name": "Jon Eichler",
      "poster_handle": "jeichler"
    },
    "time_stamp": "2019-05-02 15:36:13",
    "text": "Also Jon Eichler is my Actuall name for anyone who only knows me here as Ike"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-02 15:42:21",
    "text": "maybe I should have clarified that when I tagged you ha"
  },
  {
    "text": "",
    "time_stamp": "2019-05-02 19:19:05"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 19:22:36",
    "text": "You probably need to use the correct usage of HubSpot"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-02 19:24:55",
    "text": "They should let you use it but you might need to maintain their branding standards"
  },
  {
    "poster": {
      "poster_name": "Jon Eichler",
      "poster_handle": "jeichler"
    },
    "time_stamp": "2019-05-02 19:42:31",
    "text": "good call"
  }
]