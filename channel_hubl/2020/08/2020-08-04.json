[
  {
    "poster": {
      "poster_name": "Diogo Luxo",
      "poster_handle": "diogo.luxo"
    },
    "time_stamp": "2020-08-04 03:27:54",
    "text": "Hi Sandy, since it’s a speed test to check how the CTA tracking code impacts the page loading time, I don’t want to replace or remove them. It will be perfect if we could disable this loading scripts. Thanks!"
  },
  {
    "poster": {
      "poster_name": "Vesa Poikajärvi",
      "poster_handle": "vesa.poikajarvi"
    },
    "time_stamp": "2020-08-04 04:58:29",
    "text": "It seems that module name cannot be constructed from a variable when used in custom template? I have dynamic content that I loop over and would reuse an existing module to render each item but the values passed to the module are the ones used in the first call. Is there any workaround?\n```{% for data_to_be_rendered in list_of_data %}\n  {% module \"CANNOT_GENERATE_UNIQUE_NAME\" path=\"...\", param_x=data_to_be_generated.y %}\n{% endfor %}```",
    "reply_count": 7,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2020-08-04 05:03:55"
      },
      {
        "time_stamp": "2020-08-04 05:23:02"
      },
      {
        "time_stamp": "2020-08-04 05:25:43"
      },
      {
        "time_stamp": "2020-08-05 00:36:58"
      },
      {
        "time_stamp": "2020-11-04 09:36:43"
      },
      {
        "time_stamp": "2020-11-04 22:29:31"
      },
      {
        "time_stamp": "2020-11-05 09:36:58"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Vesa Poikajärvi",
      "poster_handle": "vesa.poikajarvi"
    },
    "time_stamp": "2020-08-04 05:03:55",
    "text": "And for more context - I'm using this on blog template. Seems that in the root URL the params are OK even, but for single post they are not even though same template is used."
  },
  {
    "poster": {
      "poster_name": "Vesa Poikajärvi",
      "poster_handle": "vesa.poikajarvi"
    },
    "time_stamp": "2020-08-04 05:23:02",
    "text": "Hmm this is probably caused by the repeater actually, now when I create a new blog post the repeater values are defined for the post and what is read from the blog in the template does not override the items"
  },
  {
    "poster": {
      "poster_name": "Vesa Poikajärvi",
      "poster_handle": "vesa.poikajarvi"
    },
    "time_stamp": "2020-08-04 05:25:43",
    "text": "The module has `items` that are rendered, and when on the blog index page setting those programmatically works. However for each blog post the current list of posts appears in the editor when creating a new post, and even if the template actually does fetch all posts for the blog, setting those does not override the values set in the editor"
  },
  {
    "poster": {
      "poster_name": "Iram khan",
      "poster_handle": "iram"
    },
    "time_stamp": "2020-08-04 05:36:52",
    "text": "Hi"
  },
  {
    "poster": {
      "poster_name": "Iram khan",
      "poster_handle": "iram"
    },
    "time_stamp": "2020-08-04 05:38:50",
    "text": "Here is my code it show all tags. i just want to get major tags is here.\n```&lt;div class=\"custom-categories\"&gt;\n    {% if not simple_list_page %}\n    {% set my_topics = blog_topics(group.id, 10) %}\n    &lt;ul class=\"no-list-style\"&gt;\n        {% for item in my_topics %}\n        &lt;li&gt;&lt;a href=\"{{ blog_tag_url(group.id, item.slug) }}\"&gt;{{ item }}&lt;/a&gt;&lt;/li&gt;\n        {% endfor %}\n      \n    &lt;/ul&gt;\n    {% endif %}\n&lt;/div&gt;```",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2020-08-04 05:44:36"
      },
      {
        "time_stamp": "2020-08-04 06:22:18"
      },
      {
        "time_stamp": "2020-08-04 06:23:26"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Iram khan",
      "poster_handle": "iram"
    },
    "time_stamp": "2020-08-04 05:39:09",
    "text": "Please help me out"
  },
  {
    "poster": {
      "poster_name": "Shani",
      "poster_handle": "hsdeveloper6"
    },
    "time_stamp": "2020-08-04 05:44:36",
    "text": "You want to show some selective tags? Will conditional stuff not work ?"
  },
  {
    "poster": {
      "poster_name": "Sandy Garrido",
      "poster_handle": "sandy889"
    },
    "time_stamp": "2020-08-04 06:22:18",
    "edited": {
      "time_stamp": "2020-08-04 06:24:37"
    },
    "text": "<@U018EEPFG3E> - HubSpot already has a module called \"post_filter\" why don't you utilise the code thats there as it already has max_links etc. The output is the same as what you've got.\n\nHowever, for your code, I think what you're after is just changing the number 10 to a lower number?"
  },
  {
    "poster": {
      "poster_name": "Sandy Garrido",
      "poster_handle": "sandy889"
    },
    "time_stamp": "2020-08-04 06:23:26",
    "edited": {
      "time_stamp": "2020-08-04 06:23:44"
    },
    "text": "Because theres no otherway of defining a \"major\" tag except for the number of live posts..\n\nThe alternative is hardcode an array of tags(strings) and loop through with the condition that it's in the array"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2020-08-04 09:27:50",
    "text": "it might actually work if you get rid of the {{ }} around the theme value. Similar to using an if statement you are already accessing hubl with {% %} as a statement and do not need to include expression delimiters any more. {% if theme.global_colors.additional_1_color.color %} is valid.  {% if {{theme.global_colors.additional_1_color.color }} %} is not."
  },
  {
    "poster": {
      "poster_name": "Sandy Garrido",
      "poster_handle": "sandy889"
    },
    "time_stamp": "2020-08-04 13:01:17",
    "text": "<@UQWGKUEN7> It actually does work technically on the front end still.\nI think the issue is that when I put this in code on the module as a default, it saves it as JSON under the hood. then when the page requests it, it's run through the preprocessor at that point.\n\nDisplaying in the editor only displays whats in the JSON.\n\nThat said, I will give it a try and see what happens :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2020-08-04 13:05:48",
    "text": "<@U013TUP19PS> what do you mean by more structured? You could add a field to the blog posts and let someone add a comma separated list of tags too. but that isnt doing anything the built in tag system couldnt do."
  },
  {
    "poster": {
      "poster_name": "Dan Katz",
      "poster_handle": "dan.katz"
    },
    "time_stamp": "2020-08-04 13:53:37",
    "text": "Right. So, the idea is we have custom fields for “Type” and “Topic” on blog posts and landing pages. Then, in various custom modules, we’d query to show a combination of landing page and blog posts of type “Calculator” for example, with topics “Mortgage”"
  },
  {
    "poster": {
      "poster_name": "Vesa Poikajärvi",
      "poster_handle": "vesa.poikajarvi"
    },
    "time_stamp": "2020-08-05 00:36:58",
    "text": "I was using a blog to create an FAQ page, and have both each blog post template and the blog index template to show all topics.\n\nThe module with repeater did not work on post level because the items were fixed to those existing when creating a blog post (the repeater appeared in the blog post settings even if in the editor view they weren't visible)\n\nMost of the HubL was already in a macro, so now I use that macro to render, just needed to move module JS outside of the module so it can be included both by the module and the blog template."
  }
]