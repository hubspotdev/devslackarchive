[
  {
    "poster": {
      "poster_name": "Peter Fürsattel",
      "poster_handle": "fuersattel"
    },
    "time_stamp": "2024-07-03 01:15:17",
    "text": "Hi everyone,\nIs there an api for updating files in the library/documents section? I found the api for managing files (<https://developers.HubSpot.com/docs/api/files/files>) - Does anyone know if there is something similar for documents?",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2024-07-03 15:34:04"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Scott Marion",
      "poster_handle": "scott943"
    },
    "time_stamp": "2024-07-03 04:40:49",
    "text": "<@U25PYL3Q8> I can do that, I just thought it was strange because I have code that uses the Node client and read line items all the time, works fine.  I just think the docs page may be broken.  I did find that I only had a few 404 errors that were actually valid as someone probably deleted those line items before my app had a chance to process the webhooks.  Interestingly, when I first started with HubSpot I didn't know there were client libraries and I rolled my own service using Axios just as you mentioned.  Since then I have started using the library more on recent apps because I can mirror the code from the docs so easily.  I can always mix and match as needed.  Thanks for your input!"
  },
  {
    "text": "Yeah Good luck Scott. I found the difference between versions inside workflows and what was documented on the page to always be confusing. Some of the versions had a bit of a naming difference and I would need to load up a local version of xx version locally and type my stuff out in vs code then copy/paste into a workflow custom code action and I just gave up with that and switched to plain axios. Just felt better for my brain.\n\nThere is a good chance the doc pages get messed up. It isn’t the first time I’ve seen issues\n\n<https://www.linkedin.com/feed/update/urn:li:activity:7180573123681906688?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7180573123681906688%2C7181751237346775041%29&amp;dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287181751237346775041%2Curn%3Ali%3Aactivity%3A7180573123681906688%29|https://www.linkedin.com/feed/update/urn:li:activity:7180573123681906688?commentUrn=u[…]1237346775041%2Curn%3Ali%3Aactivity%3A7180573123681906688%29>",
    "time_stamp": "2024-07-03 05:57:46"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-07-03 06:29:59",
    "text": "Unfortunately, there’s no api for this but one little hacky is sending the notification from a workflow that you trigger with a webhook"
  },
  {
    "poster": {
      "poster_name": "Camille Markentive",
      "poster_handle": "camille.saute"
    },
    "time_stamp": "2024-07-03 10:47:44",
    "text": "<@UT35DSBMF> sorry, answer 3 months later, but I had the same issue, and HubSpot told me that this endpoint was a leak and that it should not have been published on the public documentation. That’s why we have this error response.\nMy only hope is that MAYBE they are working on it and MAYBE we’ll eventually be allowed to resubscribe a contact..."
  },
  {
    "poster": {
      "poster_name": "James Kupczak",
      "poster_handle": "jimmykup"
    },
    "time_stamp": "2024-07-03 11:42:02",
    "text": "Anyone know a way to determine how many emails contacts are getting with a given timeframe? For example, I’d like to see a list of all contacts in our database and how many emails were delivered to them in the last 7 days.",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2024-07-03 15:31:02"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-03 15:31:02",
    "text": "I think you would need to do a few different api calls to make this happen. I’m not sure if you could use timeline/engagements to get that stuff… That is for the sales related emails…\n\nThen you have this <https://legacydocs.HubSpot.com/docs/methods/lists/marketing-email-overview>\n\nSo first you hit all marketing emails and figure out your query and all that jazz, <https://legacydocs.HubSpot.com/docs/methods/cms_email/get-all-marketing-emails>\n\neasy to set up a flat file json/db etc to store this stuff\n\nI know I did this for bounce email management. I was able to dig into this stuff and get all the contact IDs.  This should get you pointed in the right direction. I’d look at the legacy apis unless someone has a better idea.\n\n\n\nalso, this is new: <https://developers.HubSpot.com/docs/api/marketing/marketing-email>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-03 15:34:04",
    "text": "I’m not sure there is. If I had to jump into this and try to figure it out, I’d likely get familiar with the file api, figure out how to query on like newest uploaded files or figure out how to search for a file name, then I’d upload something to the library/documents and then play around with the file apis I had access to, and see if could access them."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-03 15:35:56",
    "text": "can you share the code you are using?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-03 15:36:34",
    "text": "does your hubdb table have 171793224985 many rows in it or is that an ID?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-03 15:43:23",
    "text": "I cannot remember what the additional properties you need to set in the properties variable is.\n\nI would suggest attempting to update your ‘resolved’ property on a company record, send 55 characters into the api and read the error message. That should give you an error message of the property you need to pull in from the api.\n\nSorry I don’t have more information to go on and I just can’t remember this right now"
  },
  {
    "poster": {
      "poster_name": "Edward Orozco",
      "poster_handle": "eorozco"
    },
    "time_stamp": "2024-07-03 15:43:33",
    "text": "It is the ID."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-03 15:46:26",
    "text": "using the api you would get those properties, you would get the associations you want, then you would send those to your third party.\n\nYou could also accomplish this with workflow, custom code action, getting those properties and sending them to the external api.\n\nThere is SO MUCH information in the api documentation on how to get properties and associations for the CRM api.\n\nI’d look into reading the documentation instead of googling around. Sometimes putting in the time and effort to learn something from the ground will produce great results!"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-03 15:46:58",
    "text": "can you share your code you are using withe the payload?"
  },
  {
    "poster": {
      "poster_name": "Edward Orozco",
      "poster_handle": "eorozco"
    },
    "time_stamp": "2024-07-03 16:18:39",
    "edited": {
      "time_stamp": "2024-07-03 16:20:38"
    },
    "text": "```const axios = require('axios')\nconst HubSpot_API_BASE_URL = '<https://api.hubapi.com>';\nconst headers = {\n        Authorization: `Bearer ${process.env.HubDB_Private_App}`\n}\n\nconst EMPTY_OBJECT = {};\nconst maxRetries = 1;\n\nconst axiosRequest = async (method, url, data) => {\n    const retryDelay = 10000;\n    for (let retryCount = 0; retryCount <= maxRetries; retryCount++) {\n        try {\n            const response = await axios({\n                method: method,\n                url: url,\n                data: data,\n                headers: headers,\n            });\n            return response.data;\n        } catch (err) {\n            if (err.response && err.response.status === 429) {\n                if (retryCount === maxRetries) {\n                    err.response.status = 429\n                    throw err\n                }\n                console.log(\"Rate limit exceeded. Retrying in \" + retryDelay + \"ms...\");\n                await new Promise((resolve) => setTimeout(resolve, retryDelay));\n            }\n            else if (err.response && err.response?.data?.message === \"Table is already locked for write operation.\") {\n                if (retryCount === maxRetries) {\n                    err.response.status = 429\n                    throw err\n                }\n                console.log(\"HubDB table in publishing process. Retrying in \" + retryDelay + \"ms...\");\n                await new Promise((resolve) => setTimeout(resolve, retryDelay));\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n};\n\nconst getHubDBRows = async (tableId, query) => {\n    let url = `${HubSpot_API_BASE_URL}/cms/v3/hubdb/tables/${tableId}/rows/draft`;\n    url = query ? `${url}?${query}` : url;\n    try {\n        const response = await axiosRequest(\"GET\", url, EMPTY_OBJECT);\n        return response;\n    } catch (error) {\n        console.log(error.response?.data);\n        throw error;\n    }\n};\n\nconst updateHubDBRow = async (tableId, rowId, rowInfo) => {\n    const url = `${HubSpot_API_BASE_URL}/cms/v3/hubdb/tables/${tableId}/rows/${rowId}/draft`;\n    try {\n        const values = rowInfo;\n        const response = await axiosRequest(\"PATCH\", url, { values });\n        return response;\n    } catch (error) {\n        console.log(error.response?.data);\n        throw error\n    }\n};\n\nconst publishHubDbTable = async (tableId) => {\n    const url = `${HubSpot_API_BASE_URL}/cms/v3/hubdb/tables/${tableId}/draft/publish`;\n    try {\n        const response = await axiosRequest(\"POST\", url, EMPTY_OBJECT);\n        return response.data;\n    } catch (error) {\n        console.log(error.response?.data);\n        throw error;\n    }\n};\n\nexports.main = async (event, callback) => {\n    const recordId = event.object.objectId;\n  /*\n    const deal_name = event.inputFields['dealname'];\n    const development_name = event.inputFields['development_name'] ?? \"\";\n    const lot_name = event.inputFields['lot_name'] ?? \"\";\n    const inventory_homes_name = event.inputFields['inventory_homes_name'] ?? \"\";\n    const gi_form_submitted = event.inputFields['gi_form_submitted'] ?? \"\";\n  const associated_lot_inventory_home_isactive = event.inputFields['associated_lot_inventory_home_isactive'] ?? \"\";\n    const post_meeting_form_submitted_inventory_home = event.inputFields['post_meeting_form_submitted___inventory_home'] ?? \"\";\n  const build_arrangement = event.inputFields['build_arrangement'] ?? \"\";\n  */\n    const mainProperyName = \"client_id\";\n    const tableId = 000000;\n    const query = `${mainProperyName}__eq=${recordId}`;\n    const hubDBRows = await getHubDBRows(tableId, query);\n\n    if (hubDBRows.total === 0) {\n        callback({\n            outputFields: {\n                results: `Deal ID ${recordId} not found in the HubDB Table ${tableId}`\n            }\n        });\n    } else {\n        const rowId = hubDBRows.results[0]?.id;\n        const updatedRow = await updateHubDBRow(tableId, rowId, event.inputFields);\n        // await publishHubDbTable(tableId);\n        callback({\n            outputFields: {\n                results: `Deal ID ${recordId} updated in the HubDB Table ${tableId}: row ${updatedRow.id}`\n            }\n        });\n    }\n};```"
  },
  {
    "poster": {
      "poster_name": "Edward Orozco",
      "poster_handle": "eorozco"
    },
    "time_stamp": "2024-07-03 16:19:44",
    "text": "This is the payload:"
  },
  {
    "poster": {
      "poster_name": "Edward Orozco",
      "poster_handle": "eorozco"
    },
    "time_stamp": "2024-07-03 16:19:47",
    "text": "```{\"values\":{\"deal_name\":\"Barbara Johnson - Our Land Build from Scratch\",\"file_share_status\":\"Created and in OSC Pipeline\"}}```"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-03 16:52:17",
    "text": "I’m not sure I see anything wrong here unless we are looking at the the tableID being 000, which you probably updated before posting"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-03 16:52:36",
    "text": "you aren’t using the sdk, so that could eliminate a lot of issues"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-03 16:56:40",
    "text": "does the variable in the function rowInfo\n```const rowInfo = {\"values\":{\"deal_name\":\"Barbara Johnson - Our Land Build from Scratch\",\"file_share_status\":\"Created and in OSC Pipeline\"}}```\nor is it\n```const rowInfo = {\"deal_name\":\"Barbara Johnson - Our Land Build from Scratch\",\"file_share_status\":\"Created and in OSC Pipeline\"}```"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-03 16:58:48",
    "text": "thats the only thing that I can see that would be an issue here."
  },
  {
    "poster": {
      "poster_name": "Nima Seifi",
      "poster_handle": "nima.seifi"
    },
    "time_stamp": "2024-07-03 22:58:04",
    "text": "Gotcha, thanks <@U01QVR44MEY>!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-07-03 22:59:36",
    "text": "If course, let me know if you run into any other issues"
  }
]