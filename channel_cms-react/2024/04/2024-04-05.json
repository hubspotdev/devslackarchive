[
  {
    "poster": {
      "poster_name": "Matias Vad",
      "poster_handle": "matias618"
    },
    "time_stamp": "2024-04-05 02:22:54",
    "text": "Request: Make query params available when developing locally.\n\nI’m building a filter using serverless, GraphQL and a React component.\nI want to be able to hit the filter, based on a query parameter, so I can create deeplinks to filters.\nIn normal ways, this is done with `request.query_dict`  and passing the values along.\n\n`{% set hublData = request.queryDict %}`\nTest local URL: <http://xxx.hs-sites-eu1.com.hslocal.net:3000/preview/module/CasesList*?bu=no_td*|xxx.hs-sites-eu1.com.hslocal.net:3000/preview/module/CasesList*?bu=no_td*>\nReturns: `Objects are not valid as a React child (found: object with keys {localProxySchemaVersion, hsLocalProxy, portalId, module})`\n\nWhen deploying the project and testing in the sandbox, it correctly returns the exact params I expect.\nTest sandbox URL: <http://xxx.hs-sites-eu1.com/cases*?bu=no_td*|xxx.hs-sites-eu1.com/cases*?bu=no_td*> - Returns `bu`\n\nThis is small quality of life thing, since it requires deploys and blindly debugging, before hitting the right path. May be the case for other request specific things as well.",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-04-05 11:37:19"
      },
      {
        "time_stamp": "2024-04-08 02:15:57"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Anze",
      "poster_handle": "anzekopko2002"
    },
    "time_stamp": "2024-04-05 04:25:22",
    "text": "Is the &lt;RichText /&gt; component not working on the dev server for anyone else?\n\nWorks fine on portal just in the dev server it doesn't want to show. Using WSL on VScode and chrome on localhost:3000 (the <http://hslocal.net:3000> doesn't resolve for some reason on windows)",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-04-05 04:37:24"
      },
      {
        "time_stamp": "2024-04-05 08:38:54"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Anze",
      "poster_handle": "anzekopko2002"
    },
    "time_stamp": "2024-04-05 04:36:06",
    "text": "Also how do we use nested fields like settings.rich_text as trying to set that as the fieldValue returns empty"
  },
  {
    "poster": {
      "poster_name": "Pallob Poddar",
      "poster_handle": "pallob"
    },
    "time_stamp": "2024-04-05 04:37:24",
    "text": "I found that &lt;RepeaterFieldGroup /&gt; not showing the desired output on the dev server before. It worked fine on the portal."
  },
  {
    "poster": {
      "poster_name": "Marcus Shannon",
      "poster_handle": "mshannon"
    },
    "time_stamp": "2024-04-05 08:38:54",
    "text": "Hey Anze, I'll DM for more details"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-04-05 10:32:34",
    "text": "where can I get the \"default\" value for a `Cta`?",
    "reply_count": 2,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2024-04-05 10:35:56"
      },
      {
        "time_stamp": "2024-04-05 10:36:59"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-04-05 10:35:56",
    "text": "going to try to log a value and then set it to the default after"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-04-05 10:36:59",
    "text": "I wish these HubSpot ctas would at least support class names in the src option. a hook (or something) that would give us these Cta analytics but allows us to create a component would be great"
  },
  {
    "poster": {
      "poster_name": "Josh GH",
      "poster_handle": "joshgh"
    },
    "time_stamp": "2024-04-05 10:42:17",
    "text": "Thank you. Hadn’t even considered/known about the dependency size cap, so doubly appreciated.\nPotentially naive question: is the dependency size cap a cms-react limitation or something else?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-04-05 11:17:04",
    "text": "do `Ctas` have to be in the module folder because they export `fields` ? can I use them in an `island`? how would I pass the \"cta_field\" string through to the island?",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-04-05 12:32:36"
      },
      {
        "time_stamp": "2024-04-05 12:34:45"
      },
      {
        "time_stamp": "2024-04-05 12:38:43"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-04-05 11:19:08",
    "text": "can I import them into another module? why are these so confusing to me..."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-04-05 11:30:37",
    "text": "is this:\n```export const fields = [\n  {\n    type: \"cta\",\n    label: \"CTA\",\n    name: \"cta_field\",\n    default: \"13bcd0b3-5192-4570-baff-9a779df01bd8\",\n  },\n];```\nthe equivalent of this:\n<https://github.HubSpot.com/cms-react/field-types/type-aliases/type-alias.CtaFieldType.html>",
    "reply_count": 7,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-04-05 12:12:54"
      },
      {
        "time_stamp": "2024-04-05 12:16:59"
      },
      {
        "time_stamp": "2024-04-05 12:23:44"
      },
      {
        "time_stamp": "2024-04-05 12:26:04"
      },
      {
        "time_stamp": "2024-04-05 12:26:46"
      },
      {
        "time_stamp": "2024-04-05 12:28:43"
      },
      {
        "time_stamp": "2024-04-05 12:29:39"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-04-05 11:37:19",
    "text": "Sounds like you haven’t tried the <https://github.HubSpot.com/cms-react/reference/cms-components.html#usepageurl|usePageUrl hook> yet, which would give you a URL object with query params directly in React.\n\n(Note there are some subtleties need when deploying to make sure that your JS component is not prerendered so that you can correcty return different HTML when the page page is hit with different query params)"
  },
  {
    "poster": {
      "poster_name": "Anze",
      "poster_handle": "anzekopko2002"
    },
    "time_stamp": "2024-04-05 12:11:11",
    "text": "Yea its just HubSpot making sure they don't get bombarded with random dependencies on their end I'm guessing. Stuff like react-icons for example will give the size error since that package is masive"
  },
  {
    "poster": {
      "poster_name": "Marcus Shannon",
      "poster_handle": "mshannon"
    },
    "time_stamp": "2024-04-05 12:12:54",
    "text": "In that case the usage of the Cta component would be\n\n`&lt;Cta fieldPath=\"cta_field\" /&gt;`\n\n`cta_field` is the name of the CTA field you defined in your fields.json\n\n\nAnd it would render, in your React component, the equivalent of what the Cta HubL tag would"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-04-05 12:16:59",
    "edited": {
      "time_stamp": "2024-04-05 12:20:30"
    },
    "text": "<@U04DLJH3W94> so if that's nested inside of another module/component and I'm using `fieldValues` it would be\n```const AnotherComponent = ({fieldValues}) => {\n...\n<Cta fieldPath={fieldValues.cta_field.name} />\n...\n}```\n?\n```// fields.tsx\n  <ModuleFields>\n    <CtaField name=\"cta_field\" label=\"CTA\" />\n  </ModuleFields>```"
  },
  {
    "poster": {
      "poster_name": "Marcus Shannon",
      "poster_handle": "mshannon"
    },
    "time_stamp": "2024-04-05 12:23:44",
    "text": "If it's nested, it's still\n\n`&lt;Cta fieldPath=\"cta_field\" /&gt;`\n\nIt's a reference to the name of the defined fields, so you don't need to access it via fieldValues"
  },
  {
    "poster": {
      "poster_name": "Josh GH",
      "poster_handle": "joshgh"
    },
    "time_stamp": "2024-04-05 12:24:53",
    "text": "Is there a way to run the upload build locally? Currently I only know if there’s a HubSpot build error when uploading, but would like to test for that before uploading.",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2024-04-05 12:26:02"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-04-05 12:26:02",
    "text": "Great question, currently there is no way to do this. However, we have talked about this and can give it a +1 on our list."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-04-05 12:26:04",
    "text": "ok, so even if I define the fields in a separate `fields.tsx` file, I will always have access to the `name` value as a string. I'm testing this now to see if I can finally wrap my head around this"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-04-05 12:26:46",
    "text": "there's a bit of \"magic\" here that is happening I guess. I don't really understand why it's so different than the rest"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-04-05 12:28:43",
    "text": "I'm getting `react-combined.mjs:1 ReferenceError: cta_field is not defined`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-04-05 12:29:39",
    "text": "whoops, made a mistake, one sec"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-04-05 12:32:36",
    "text": "working on figuring this out and future us need to know:\n• the `Cta` component can be used inside of other modules. It is not a module itself so it doesn't \"live in a folder\" (duh)\n•  you can use them in an `island`\n• the cta_field string is magic. Whatever you name the `CtaField` in your `fields.tsx` file is referenced by that string\n<@U04DLJH3W94> that all correct?"
  },
  {
    "poster": {
      "poster_name": "Marcus Shannon",
      "poster_handle": "mshannon"
    },
    "time_stamp": "2024-04-05 12:34:45",
    "text": "Correct, the Cta component is a helper React component, not a CMS Module"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-04-05 12:38:43",
    "text": "I think because of the way `fields` were exported in the example I thought it was an entirely new concept. It was also unexpected that the name string is a \"reference\" that is available in a nested component — that's not usually a thing in my very limited experience."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-04-05 13:00:12",
    "text": "<@U04DLJH3W94> looks like `Cta` does not render over proxy. It shows \"server render fail etc. etc.\"",
    "reply_count": 8,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-04-05 13:00:41"
      },
      {
        "time_stamp": "2024-04-05 13:06:13"
      },
      {
        "time_stamp": "2024-04-05 13:12:35"
      },
      {
        "time_stamp": "2024-04-05 13:14:05"
      },
      {
        "time_stamp": "2024-04-05 13:14:18"
      },
      {
        "time_stamp": "2024-04-05 13:28:50"
      },
      {
        "time_stamp": "2024-04-05 13:28:55"
      },
      {
        "time_stamp": "2024-04-05 13:31:50"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-04-05 13:00:41",
    "text": "possibly because I don't have a true default set? still can't which value that is looking for / where to find that value"
  },
  {
    "poster": {
      "poster_name": "Marcus Shannon",
      "poster_handle": "mshannon"
    },
    "time_stamp": "2024-04-05 13:06:13",
    "text": "This is the proxy page use case? Or module route?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-04-05 13:12:35",
    "text": "this is via a proxy page"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-04-05 13:14:05",
    "text": "is the default just the id of that CTA module, so it looks more like\n`123472464390`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-04-05 13:14:18",
    "text": "instead of `'13bcd0b3-5192-4570-baff-9a779df01bd8'`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-04-05 13:28:50",
    "edited": {
      "time_stamp": "2024-04-05 13:29:02"
    },
    "text": "probably a new cta vs. legacy cta difference"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-04-05 13:28:55",
    "text": "grabbing the id from the url"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-04-05 13:31:50",
    "text": "^ adding a default didn't help"
  },
  {
    "poster": {
      "poster_name": "Mark Hazlewood",
      "poster_handle": "mhazlewood"
    },
    "time_stamp": "2024-04-05 14:15:49",
    "text": "Thanks for the explanation Josh, that helps."
  }
]