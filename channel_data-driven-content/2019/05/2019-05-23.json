[
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-23 06:26:03",
    "text": "What issue are you having?"
  },
  {
    "text": "I have some dynamic hubdb pages added to my navigation. When I'm on one of those pages, the `.active.active-branch` class is being added to *all* of them, not just the current page. As seen in this screenshot, the highlighted element is the page I'm on, but all of it's siblings are getting the class applied as well. Is this a bug?",
    "time_stamp": "2019-05-23 06:51:52"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-23 07:16:51",
    "text": "how did you add those pages?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-05-23 07:16:55",
    "text": "to the menu?"
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2019-05-23 07:34:04",
    "text": "added them via Advanced Menus (settings &gt; website &gt; navigation)"
  },
  {
    "text": "",
    "time_stamp": "2019-05-23 07:34:55"
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2019-05-23 07:35:31",
    "edited": {
      "time_stamp": "2019-05-23 07:37:42"
    },
    "text": "as a page link with parameter."
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2019-05-23 07:38:48",
    "text": "the dynamic pages aren't showing up as a page in the select dropdown...should they be? as a workaround i tried page link with parameter like above. i also tried URL Link and am seeing the same issue."
  },
  {
    "poster": {
      "poster_name": "Jaimik Patel",
      "poster_handle": "jaimik.patel"
    },
    "time_stamp": "2019-05-23 12:17:54",
    "text": "how can I get alert message in HubL?"
  },
  {
    "poster": {
      "poster_name": "Jaimik Patel",
      "poster_handle": "jaimik.patel"
    },
    "time_stamp": "2019-05-23 12:18:11",
    "text": "want whole querystring in alert"
  },
  {
    "text": "Is there a workaround to get past the call limit of 10? Per the HubDB documentation: HubDB Technical Limits: 10 table scans per CMS page defined as a single call to hubdb_table_rows()",
    "time_stamp": "2019-05-23 14:14:27",
    "reply_count": 22,
    "reply_users_count": 5,
    "replies": [
      {
        "time_stamp": "2019-05-23 14:17:55"
      },
      {
        "time_stamp": "2019-05-23 14:19:47"
      },
      {
        "time_stamp": "2019-05-23 14:19:48"
      },
      {
        "time_stamp": "2019-05-23 14:22:16"
      },
      {
        "time_stamp": "2019-05-23 14:23:41"
      },
      {
        "time_stamp": "2019-05-23 14:24:40"
      },
      {
        "time_stamp": "2019-05-23 14:25:49"
      },
      {
        "time_stamp": "2019-05-23 14:27:02"
      },
      {
        "time_stamp": "2019-05-23 14:27:32"
      },
      {
        "time_stamp": "2019-05-23 14:34:02"
      },
      {
        "time_stamp": "2019-05-23 14:35:11"
      },
      {
        "time_stamp": "2019-05-23 14:37:04"
      },
      {
        "time_stamp": "2019-05-23 14:38:13"
      },
      {
        "time_stamp": "2019-05-23 14:38:42"
      },
      {
        "time_stamp": "2019-05-23 14:39:15"
      },
      {
        "time_stamp": "2019-05-23 14:41:48"
      },
      {
        "time_stamp": "2019-05-23 14:42:18"
      },
      {
        "time_stamp": "2019-05-23 14:42:37"
      },
      {
        "time_stamp": "2019-05-23 19:06:00"
      },
      {
        "time_stamp": "2019-05-23 19:06:26"
      },
      {
        "time_stamp": "2019-05-24 07:15:00"
      },
      {
        "time_stamp": "2019-05-28 11:50:11"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-23 14:17:55",
    "edited": {
      "time_stamp": "2019-05-23 14:18:41"
    },
    "text": "are you displaying data from 10 different HubDB’s at a time? if not, then you don’t need 10 hubdb rows calls, you can sort and filter the data you get from the first call to the hubDB"
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2019-05-23 14:19:47",
    "edited": {
      "time_stamp": "2019-05-23 14:20:37"
    },
    "text": "hey, Jon. its a multilevel dynamic page with hubdb. so line 15 is the main hubdb table with 19 child tables associated with it. the main table is products. the child tables are product categories."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-23 14:19:48",
    "text": "If you really do have more than 10 hubDB’s in use, then I would use the javascript hubDB client instead or atleast in tandem with your HubL"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-23 14:22:16",
    "text": "So it sounds like you’re not likely trying to display data from all of the 19 child tables on every dynamic page. Can you choose to not make some of the calls every time(use if statements to do them conditionally?)\n\nif not you’re gonna want to use JS for this."
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2019-05-23 14:23:41",
    "text": "there are 'featured' products tagged in each of the 19 child tables. i'm trying to display another page with all of the featured products."
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2019-05-23 14:24:40",
    "text": "is there documentation for this javascript hubDB client?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-23 14:25:49",
    "edited": {
      "time_stamp": "2019-05-23 14:26:15"
    },
    "text": "ahh, yeek, yeah you’re gonna wanna go the JS route for this or instead have a hubdb for just the featured products using foreign id, then for each item in the featured products you make a call to it’s specific row in the parent db instead of pulling all data for every category"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-23 14:27:02",
    "text": "<https://docs.google.com/document/d/e/2PACX-1vTuu12oFF4bQY1zVD2-WKFuM2dEDN81-fZRV1tGaCL5Z_OcjC-B6O3mHXR6chaq25BU1D2FuvKIjc49/pub>"
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2019-05-23 14:27:32",
    "text": "that's a good idea. i may go that route or look into the js method. thanks Jon!"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-23 14:34:02",
    "edited": {
      "time_stamp": "2019-05-23 14:34:41"
    },
    "text": "Does anyone know if there is a technical reason for limiting it specifically to 10? I have a feeling that with the foreign table linking, this is going to become problematic more often. 10 seems a bit low for some larger enterprise level needs"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-23 14:35:11",
    "edited": {
      "time_stamp": "2019-05-23 14:35:31"
    },
    "text": "HubDB rows is taxxing - especially if you have say thousands of rows in a single table.\n\nThey limited this to 10 to prevent people using hubDB rows to get say 1000 rows from a table then only displaying say 5 rows on the actual page. (which would be a massive waste of resources for no reason)"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-23 14:37:04",
    "text": "The javascript method does not have this limitation. The reason they went this route I think has to do with how long it takes to generate the pages and caching up-to-date data. If you use JS the actual page itself is not changing so it’s fully cacheable."
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-23 14:38:13",
    "text": "Thanks <@U7SL518D6>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-23 14:38:42",
    "text": "in my experience I usually don’t need more than 5 HubDB  rows calls per page. If I need data from other HubDB’s it’s usually not the whole lot of it, just individual bits."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-23 14:39:15",
    "text": "VueJS + HubDB = Heaven - so if rewriting isn’t hell for you, I recommend that"
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2019-05-23 14:41:48",
    "text": "can we just bump it up to 20 instead of 10? problem solved. :laughing:"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-23 14:42:18",
    "text": ":slightly_smiling_face: rewriting is basically hell for me.... as I'm moving more from design into dev. But I'll look at it."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-23 14:42:37",
    "text": "HubSpot’s team sees that like 200,000 rows getting pulled into the page"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2019-05-23 19:06:00",
    "text": "If you're using foreign ids with a table, that doesn't count against your 10 calls per page."
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2019-05-23 19:06:26",
    "text": "But everything else Jon said is correct."
  }
]