[
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 08:47:04",
    "text": "can a js_module be added to a regular module? I know I can do this with a js_partial but that's more of a pain because I need fields this time"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 08:47:26",
    "text": "I'd love to use the module directly but it has to appear under theme modules",
    "reply_count": 8,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-07-10 08:49:15"
      },
      {
        "time_stamp": "2023-07-10 08:51:23"
      },
      {
        "time_stamp": "2023-07-10 08:51:52"
      },
      {
        "time_stamp": "2023-07-10 09:16:38"
      },
      {
        "time_stamp": "2023-07-10 09:17:35"
      },
      {
        "time_stamp": "2023-07-10 10:12:41"
      },
      {
        "time_stamp": "2023-07-10 10:13:16"
      },
      {
        "time_stamp": "2023-07-10 10:29:04"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-07-10 08:49:15",
    "edited": {
      "time_stamp": "2023-07-10 08:49:31"
    },
    "text": "For now if you want editable fields in a theme module (that renders with JS server-side), you’ll have to make a HubL theme module that passes through the field values (or the whole module object) to a js_partial. :disguised_face:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 08:51:23",
    "text": "ok, thanks. it's a video embed module with a little bit of potentially heavy interactivity before the video plays"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 08:51:52",
    "text": "so if I can load quickly before the interactivity starts that seems like a win"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 09:16:38",
    "text": "so you're saying I can pass in {{ module }} as props?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-07-10 09:17:35",
    "edited": {
      "time_stamp": "2023-07-10 09:17:40"
    },
    "text": "Yup, we’ve done that in some places for <http://designers.HubSpot.com/inspire|designers.HubSpot.com/inspire>"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 10:12:41",
    "text": "I should probably use some kind of package to help with playing iframe videos based on other events huh"
  },
  {
    "time_stamp": "2023-07-10 10:13:16",
    "text": "digging hole"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 10:29:04",
    "text": "^ awesome package: <https://github.com/cookpete/react-player>"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 10:33:22",
    "text": "so as soon as I use `useState` , I am now using a client component. Do I still get any benefit from matching what renders through the props? Should I use a child component that has `useState` ?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 10:34:13",
    "text": "I essentially want to render an image through the server, then replace it with a component when visible"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 10:34:21",
    "text": "why does this always confuse me!"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 10:35:40",
    "text": "can/should I use `import { useAfterIslandHydration } from '@HubSpot Developer/cms-components';` for that?",
    "reply_count": 66,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-07-10 10:45:41"
      },
      {
        "time_stamp": "2023-07-10 10:47:49"
      },
      {
        "time_stamp": "2023-07-10 10:49:05"
      },
      {
        "time_stamp": "2023-07-10 10:54:15"
      },
      {
        "time_stamp": "2023-07-10 10:57:37"
      },
      {
        "time_stamp": "2023-07-10 11:00:03"
      },
      {
        "time_stamp": "2023-07-10 11:00:34"
      },
      {
        "time_stamp": "2023-07-10 13:10:45"
      },
      {
        "time_stamp": "2023-07-10 13:11:18"
      },
      {
        "time_stamp": "2023-07-10 13:11:23"
      },
      {
        "time_stamp": "2023-07-10 13:12:01"
      },
      {
        "time_stamp": "2023-07-10 13:12:19"
      },
      {
        "time_stamp": "2023-07-10 13:14:32"
      },
      {
        "time_stamp": "2023-07-10 13:15:50"
      },
      {
        "time_stamp": "2023-07-10 13:17:40"
      },
      {
        "time_stamp": "2023-07-10 13:17:55"
      },
      {
        "time_stamp": "2023-07-10 13:18:48"
      },
      {
        "time_stamp": "2023-07-10 13:23:58"
      },
      {
        "time_stamp": "2023-07-10 13:24:06"
      },
      {
        "time_stamp": "2023-07-10 13:28:27"
      },
      {
        "time_stamp": "2023-07-10 13:30:04"
      },
      {
        "time_stamp": "2023-07-10 13:30:08"
      },
      {
        "time_stamp": "2023-07-10 13:30:22"
      },
      {
        "time_stamp": "2023-07-10 13:37:43"
      },
      {
        "time_stamp": "2023-07-10 13:37:50"
      },
      {
        "time_stamp": "2023-07-10 13:41:00"
      },
      {
        "time_stamp": "2023-07-10 13:41:39"
      },
      {
        "time_stamp": "2023-07-10 13:42:01"
      },
      {
        "time_stamp": "2023-07-10 13:42:34"
      },
      {
        "time_stamp": "2023-07-10 13:43:21"
      },
      {
        "time_stamp": "2023-07-10 13:43:32"
      },
      {
        "time_stamp": "2023-07-10 13:44:20"
      },
      {
        "time_stamp": "2023-07-10 13:44:27"
      },
      {
        "time_stamp": "2023-07-10 13:44:53"
      },
      {
        "time_stamp": "2023-07-10 13:45:06"
      },
      {
        "time_stamp": "2023-07-10 13:45:16"
      },
      {
        "time_stamp": "2023-07-10 13:45:31"
      },
      {
        "time_stamp": "2023-07-10 13:45:53"
      },
      {
        "time_stamp": "2023-07-10 13:45:54"
      },
      {
        "time_stamp": "2023-07-10 13:45:56"
      },
      {
        "time_stamp": "2023-07-10 13:46:09"
      },
      {
        "time_stamp": "2023-07-10 13:46:13"
      },
      {
        "time_stamp": "2023-07-10 13:46:16"
      },
      {
        "time_stamp": "2023-07-10 13:47:07"
      },
      {
        "time_stamp": "2023-07-10 13:47:18"
      },
      {
        "time_stamp": "2023-07-10 13:47:18"
      },
      {
        "time_stamp": "2023-07-10 13:47:43"
      },
      {
        "time_stamp": "2023-07-10 13:47:50"
      },
      {
        "time_stamp": "2023-07-10 13:48:03"
      },
      {
        "time_stamp": "2023-07-10 13:48:14"
      },
      {
        "time_stamp": "2023-07-10 13:48:57"
      },
      {
        "time_stamp": "2023-07-10 13:49:45"
      },
      {
        "time_stamp": "2023-07-10 13:50:11"
      },
      {
        "time_stamp": "2023-07-10 13:51:35"
      },
      {
        "time_stamp": "2023-07-10 13:52:01"
      },
      {
        "time_stamp": "2023-07-10 13:52:13"
      },
      {
        "time_stamp": "2023-07-10 13:52:18"
      },
      {
        "time_stamp": "2023-07-10 13:54:43"
      },
      {
        "time_stamp": "2023-07-10 13:54:59"
      },
      {
        "time_stamp": "2023-07-10 13:55:16"
      },
      {
        "time_stamp": "2023-07-10 13:55:28"
      },
      {
        "time_stamp": "2023-07-10 13:55:41"
      },
      {
        "time_stamp": "2023-07-10 13:56:38"
      },
      {
        "time_stamp": "2023-07-10 13:57:19"
      },
      {
        "time_stamp": "2023-07-10 14:26:21"
      },
      {
        "time_stamp": "2023-07-10 14:26:40"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-07-10 10:45:41",
    "text": "If you only are doing the switch to a “large” component on some interaction (hover, click, etc), then you probably don’t need `useAfterIslandHydration` . But if you want to do the “large” switch earlier than that (when scrolled to, immediately on load, etc) then I would recommend using `useAfterIslandHydration` as a part of the conditional to render the large component"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-07-10 10:47:49",
    "text": "For example you could have a `hydrateOn=\"visible\"` Island with a component that uses `useAfterIslandHydration` for the “large” component switch… and that will give you the benefit of getting the large component ready faster and still lazily loading that extra JS until your island is visible on the page."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 10:49:05",
    "text": "hmm..."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 10:54:15",
    "text": "I think that makes sense. going to try it now, I think I might still need the \"click\" but it would be nice if part of it started loading maybe? it's 100k (react-player)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 10:57:37",
    "text": "should I load the large child components in a separate file and then use `useAfterIslandHydration` inside of them when they trigger? I think I need to build this out a bit more."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 11:00:03",
    "text": "I'm going to build this out more and then hopefully I can ask better questions / better understand the answers"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 11:00:34",
    "text": "at the very least, hydrate on visible is going to help"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:10:45",
    "text": "<@UCY83QS6Q> is there a recommended way to pass in the whole module? Just realized that I am not actually getting any props"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:11:18",
    "text": "```  props=\"{{ module }}\",```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:11:23",
    "text": "passing that into the partial"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:12:01",
    "text": "trying to grab them like this:\n```export default function VideoEmbed(props: any) {\n  return &lt;Island hydrateOn=\"visible\" module={VideoEmbedIsland} {...props} /&gt;;\n}```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:12:19",
    "text": "I think there's an extra `.props` that I am not account for maybe?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-07-10 13:14:32",
    "text": "I’d recommend starting with `{% js_partial module={{ module }} %}` and then getting `props.module` in the component"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:15:50",
    "text": "gotcha, thanks"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:17:40",
    "text": "as a side note, I'm doing this kind of thing:\n```\n      &lt;VideoWrapper isPlaying={isPlaying}&gt;\n        {afterHydration &amp;&amp; (\n          &lt;ReactPlayer\n            width=\"100%\"\n            height=\"100%\"\n            playing={isPlaying}\n            controls\n            url={video_url}\n          /&gt;\n        )}\n      &lt;/VideoWrapper&gt;```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:17:55",
    "text": "and I think that helps...but I haven't checked yet (it just looks/behaves better)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:18:48",
    "text": "page loads -&gt; island visible -&gt; island hydrated -&gt; react-player loads..."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:23:58",
    "text": "speaking of `useAfterIslandHydration`  — I am also using typescript for the first time: noticed a warning:\n```Module '\"@HubSpot/cms-components\"' has no exported member 'useAfterIslandHydration'.ts(2305)```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:24:06",
    "text": "weird or I did something wrong maybe?"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-07-10 13:28:27",
    "text": "might be a node resolution issue, do you have `moduleResolution` set to anything in your `tsconfig.json`? it needs to be `node16` or `nodenext` <https://github.com/HubSpot/cms-js-building-block-examples/blob/main/islands/islands-project/islands-app/tsconfig.json#L5>"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:30:04",
    "text": "copied and pasted from there with no change"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:30:08",
    "text": "it was node16"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:30:22",
    "text": "it's not causing any problems and does exist/work when I test"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-07-10 13:37:43",
    "text": "hmm…and this is in VS code?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:37:50",
    "text": "yea"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-07-10 13:41:00",
    "text": "im so confused usually theres a `Restart TS Server` command in VSCode but it seems to be gone for me now"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:41:39",
    "text": "I'm usually confused"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-07-10 13:42:01",
    "text": "i restarted my VSCode and it came back i guess my app was just in a weird state??"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-07-10 13:42:34",
    "edited": {
      "time_stamp": "2023-07-10 13:42:48"
    },
    "text": "anyways could you try running that (or restarting vs code if you dont have it) just to make sure it’s picking up fresh dependencies and your config"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:43:21",
    "text": "that doesn't fix it"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:43:32",
    "text": "I can also try restarting to be 100% sure"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:44:20",
    "text": "nope"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-07-10 13:44:27",
    "text": "ok next thing would be going somewhere you have like `Island` imported from the same package and option-clicking `@HubSpot/cms-components` to go to the definition"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-07-10 13:44:53",
    "text": "which should bring up a `index.d.ts` with a bunch of `export * from '…'`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:45:06",
    "text": "yup"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-07-10 13:45:16",
    "text": "then option click in on the `./hooks/ssr.js` one"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-07-10 13:45:31",
    "text": "should be\n```export declare const useIsServerRender: () =&gt; boolean;\nexport declare const useIsServerOrFirstClientRender: () =&gt; boolean;\nexport declare const useIsAfterMountWithoutForcingRerender: () =&gt; boolean;\nexport declare const useAfterIslandHydration: () =&gt; boolean;```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:45:53",
    "text": "can't option click that one"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:45:54",
    "text": "not sure why"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-07-10 13:45:56",
    "text": "hmmm"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-07-10 13:46:09",
    "text": "none of them?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:46:13",
    "text": "none of them"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-07-10 13:46:16",
    "text": ":open_mouth:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:47:07",
    "text": "I copied and pasted this project from one of my other projects (sometimes that breaks things)"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-07-10 13:47:18",
    "text": "including node_modules?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:47:18",
    "text": "oh, and I have a parent folder? doubt it but maybe that's not cool"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:47:43",
    "text": "I think so, I don't recall at this point"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:47:50",
    "text": "I can delete node_modules and reinstall"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-07-10 13:48:03",
    "text": "yeah might be worth trying that ^"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-07-10 13:48:14",
    "text": "then maybe restarting TS server again"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:48:57",
    "text": "alright, one sec"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:49:45",
    "text": "really taking a long time..."
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-07-10 13:50:11",
    "text": "haha yeah especially with build/dev dependencies it can take a while"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:51:35",
    "text": "while this loads, do you use `interface Whatever {}` or `type Whatever = {}?` "
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:52:01",
    "text": "or do you do it inline like a crazy person?"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-07-10 13:52:13",
    "text": "haha great question. i think i lean towards `type` personally unless i’m explicitly planning on `extend`-ing"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-07-10 13:52:18",
    "text": "but i don’t think theres a right answer"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:54:43",
    "text": "that fixed it"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:54:59",
    "text": "thanks"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-07-10 13:55:16",
    "text": "glad to hear it! vscode TS setups can be brittle like that"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-07-10 13:55:28",
    "text": "but when it works its amazing"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:55:41",
    "text": "I'm pretty sure I need to build a little mini terminal package to build js_module boilerplates to avoid these kinds of issues / for fun"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-07-10 13:56:38",
    "text": "maybe though i think we might cover that at some point as well via the `hs create` CLI command"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-10 13:57:19",
    "text": "is the setup for that open source? maybe I can contribute"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-07-10 14:26:21",
    "text": "i think it more or less just clones down an example repo that we put up so it might be locked down to the `HubSpot` github organization? not sure"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-07-10 14:26:40",
    "text": "i think there’s some stuff in here but no pressure at all haha <https://github.com/HubSpot/HubSpot-cli>"
  }
]