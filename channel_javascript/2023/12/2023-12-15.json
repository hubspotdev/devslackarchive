[
  {
    "poster": {
      "poster_name": "Tim Flaspoler",
      "poster_handle": "tflaspoehler"
    },
    "time_stamp": "2023-12-15 10:44:35",
    "text": "I am importing a JS file using get_asset_url() for a file outside of a module. When I save that file, the URL that the Hubl get_asset_url() returns becomes <https://cdn2.HubSpot.net/_hcms/raw-resource?path=/theme/>...  and returns a 404. Typically, this URL would be something like  filename.min.js . This is in a sandbox account if that matters. Has anyone else experienced this or know of a solution?",
    "reply_count": 5,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-12-15 11:23:30"
      },
      {
        "time_stamp": "2023-12-15 11:28:54"
      },
      {
        "time_stamp": "2023-12-15 11:29:58"
      },
      {
        "time_stamp": "2023-12-15 13:35:47"
      },
      {
        "time_stamp": "2023-12-15 13:37:02"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Tim Flaspoler",
      "poster_handle": "tflaspoehler"
    },
    "time_stamp": "2023-12-15 10:49:09",
    "text": "From my experience, Instagram is notoriously annoying to deal with because you have to setup some authentication through Facebook. I tried a few times and gave up because it was a terrible experience. Now, I use the instaloader python library to scrape images/titles and then periodically push what I need to a server through an API. BUT this is not using HubSpot. I'm just passing along my experience of finding a workaround to avoid going through Meta's junk."
  },
  {
    "poster": {
      "poster_name": "Chris Stone",
      "poster_handle": "chris.stone603"
    },
    "time_stamp": "2023-12-15 11:23:30",
    "text": "Would it be possible to use <https://developers.HubSpot.com/docs/cms/hubl/functions#require-js|require_js> instead?"
  },
  {
    "poster": {
      "poster_name": "Tim Flaspoler",
      "poster_handle": "tflaspoehler"
    },
    "time_stamp": "2023-12-15 11:28:54",
    "text": "Not really, we're using Vue without a build system right now so we're importing shared components within JS files. The initial JS is inside a require JS field. What I found is removing the import statement and saving and then adding it back and saving can fix my issue."
  },
  {
    "poster": {
      "poster_name": "Tim Flaspoler",
      "poster_handle": "tflaspoehler"
    },
    "time_stamp": "2023-12-15 11:29:58",
    "text": "This is all a Proof of Concept, so if we move on with the project it will be built through a pipeline so it's ok if I have to use this right now."
  },
  {
    "poster": {
      "poster_name": "Evelynn Ulsh",
      "poster_handle": "evelynn"
    },
    "time_stamp": "2023-12-15 13:35:47",
    "text": "The `get_asset_url` function is intended to return an absolute URL, so you’d probably expect the output you’re getting if it’s trying to retrieve a nonexistent file.\n\nMy guess would be that you’re not passing a valid path for one reason or another — if you’re not already, I’d test what results you get when you give an absolute path. (ie `get_asset_url('/theme_folder_name/js/myfile.min.js')` )\n\nIf that’s not it, it might be some sort of conflict with HubSpot’s automatic file minification. What happens if you try to retrieve the non-minified JS file instead of the minified one?"
  },
  {
    "poster": {
      "poster_name": "Tim Flaspoler",
      "poster_handle": "tflaspoehler"
    },
    "time_stamp": "2023-12-15 13:37:02",
    "text": "I am using relative url like ../components/productCard.js so maybe that will resolve it."
  }
]