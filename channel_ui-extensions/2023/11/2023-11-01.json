[
  {
    "poster": {
      "poster_name": "I Made Sariyanta",
      "poster_handle": "desar.sariyanta"
    },
    "time_stamp": "2023-11-01 03:07:23",
    "text": "Hi all!,\nIs there any examples of a project with jest or any testing library included?"
  },
  {
    "poster": {
      "poster_name": "Dave",
      "poster_handle": "hello479"
    },
    "time_stamp": "2023-11-01 04:20:53",
    "text": "Hey everyone. Looking for some clarity around support for async/await, <https://developers.HubSpot.com/docs/platform/serverless-functions|here in the docs> it says “the HubSpot platform does not currently support the async/await pattern. Functions using this paradigm won’t behave as expected and can lead to unexpected issues”, however the UI extension examples use it frequently (e.g. <https://github.com/HubSpot/ui-extensions-examples/blob/main/deals-summary/src/app/app.functions/get-data.js|here>)",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-11-01 14:55:15"
      },
      {
        "time_stamp": "2023-11-02 04:13:55"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Dave",
      "poster_handle": "hello479"
    },
    "time_stamp": "2023-11-01 05:39:30",
    "text": "Bug / issue I’m encountering: HubSpot/api-client request errors cause the hs project dev to hang, followed by a `FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory` a few minutes later.\n\nFor example, in the app function below, I have intentionally broken the `hubSpotClient.crm.properties.coreApi.getAll(object_type=\"DEALS_BROKEN\")` request by using an object_type that doesn’t exist. This normally would throw a `ApiException [Error]: HTTP-Code: 400` error, however this crashed the whole dev environment and causes the memory issue above.\n\nHas anyone else come across this? Curious if it’s just my local setup or a common issue. Thanks!\n\n```const HubSpot = require('@HubSpot/api-client');\n\nexports.main = async (context = {}, sendResponse) =&gt; {\n    getDealFields();\n    sendResponse(\"some response\")\n};\n\nasync function getDealFields() {\n  const hubSpotClient = new HubSpot.Client({\n    accessToken: process.env['PRIVATE_APP_ACCESS_TOKEN'],\n  });\n\n  const fields = await hubSpotClient.crm.properties.coreApi.getAll(object_type=\"DEALS_BROKEN\")\n  console.log('fields', fields)\n\n  return fields\n  \n}```"
  },
  {
    "poster": {
      "poster_name": "Sejal Parikh (HubSpot PM)",
      "poster_handle": "sparikh"
    },
    "time_stamp": "2023-11-01 08:22:02",
    "text": "In the very beginning last year we had a few developer test accounts during private beta of JSON cards added, it's possible that this is one of them. We have since then paused support for dev test accounts. Federico, can you DM me account id?"
  },
  {
    "poster": {
      "poster_name": "Tae Kim",
      "poster_handle": "takim"
    },
    "time_stamp": "2023-11-01 14:55:15",
    "text": "Hi Dave - we're planning on supporting Async/await starting next month. Please keep your eye out for the developer <https://developers.HubSpot.com/changelog|changelog> as we will update you here when it's ready for use!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-01 17:32:49",
    "text": "It would be great if the `CrmAssociationTable` and the `CrmAssociationPivot` had a similar `onClick` as the `stepIndicator`  component, but the invoked function would receive the row as an object, with the id and properties.",
    "reply_count": 11,
    "reply_users_count": 5,
    "replies": [
      {
        "time_stamp": "2023-11-02 10:36:53"
      },
      {
        "time_stamp": "2023-11-02 10:43:30"
      },
      {
        "time_stamp": "2023-11-02 10:43:43"
      },
      {
        "time_stamp": "2023-11-02 10:55:10"
      },
      {
        "time_stamp": "2023-11-02 10:58:25"
      },
      {
        "time_stamp": "2023-11-02 11:01:58"
      },
      {
        "time_stamp": "2023-11-02 11:51:52"
      },
      {
        "time_stamp": "2023-11-02 11:52:38"
      },
      {
        "time_stamp": "2023-11-03 11:25:49"
      },
      {
        "time_stamp": "2023-11-03 11:29:37"
      },
      {
        "time_stamp": "2023-11-03 11:37:20"
      }
    ]
  }
]