[
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2018-04-09 08:54:11",
    "text": "Howdy HubSpot Dev Community,\n\nI have been playing around with building a Public HubSpot Developer Chrome extension to be a sidekick to best enable you to be a powerful and efficient developer on the HubSpot platform. For example, a button to add and remove `hsDebug=True` from the query string of a page (serves non-combined, non-minified and non-cached assets). \n\nAny thoughts on features you would love to exist in something like this if it did exist? Any and all thoughts welcome :smile_cat:",
    "reply_count": 7,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-04-09 09:15:56"
      },
      {
        "time_stamp": "2018-04-09 10:30:11"
      },
      {
        "time_stamp": "2018-04-09 10:39:03"
      },
      {
        "time_stamp": "2018-04-09 10:44:53"
      },
      {
        "time_stamp": "2018-04-09 12:07:10"
      },
      {
        "time_stamp": "2018-04-09 12:15:58"
      },
      {
        "time_stamp": "2018-04-09 12:16:10"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-04-09 09:15:56",
    "text": "hey absolutely, we internally have a bookmarklet we use. some features we’d love to see if you built this:\n\nbutton to generate a random query string to add to the url(for viewing the page uncached, the hsDebug=true doesn’t always do that.)\n\nMight be over the scope you wanted to get into but it’d be nice if it had a json formatter for the developer info.\n\nIt’d be nice if there were quick links to HubDB and content staging."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-04-09 10:30:11",
    "text": "Hey Will! Likewise we would love to be able to disable cacheing for dev purposes. Appending the HUBL timestamp to wherever we attach our CSS has become our standard practice but it would be great to have some sort of easy way to toggle it."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-04-09 10:39:03",
    "text": "While I don’t suggest doing the timestamp thing you mentioned Pete, a hybrid solution actually sounds like a good idea (add a query parameter that if it exists then you add a timestamp url.) That way you’re not breaking the cache for everyone else."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-04-09 10:44:53",
    "text": "What kind of parameter are you thinking Jon? I guess I could look for a body class. We only keep that tag on our code during dev."
  },
  null,
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-04-09 12:07:10",
    "edited": {
      "time_stamp": "2018-04-09 12:07:49"
    },
    "text": "I was meaning you add a if request.query_paremeter check where you’re loading your css file, and conditionally add the timestamp only if the query param is there.\n\nThen you don’t need to updated the file at all. just add the query paremeter when viewing the page and you’ll always get an uncached version during dev, without affecting the cache for normal users. also eliminates the accidental forgetting to remove the timestamp thing you currently have to do"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-04-09 12:15:58",
    "text": "Very interesting, I’ll check that out. Thanks Jon!"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-04-09 12:16:10",
    "text": "no problem"
  },
  {
    "poster": {
      "poster_name": "Alex Girard",
      "poster_handle": "alexg"
    },
    "time_stamp": "2018-04-09 12:50:15",
    "text": "Hi all <!here>, just a quick announcement that the Marketplace is now officially accepting module submissions from the general public! if you'd like to submit your own modules to the marketplace, take a look at the submission requirements here <https://knowledge.HubSpot.com/articles/kcs_article/resources/what-are-the-module-requirements-for-the-marketplace>"
  },
  null,
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2018-04-09 13:54:09",
    "text": "For those of you that are building Single Page Apps with React or Vue.js (like <@U7SL518D6>), we’re curious about the drivers for using these frameworks. Are you looking build more interactivity and faster rendering? What could HubSpot do to help make it easier to create and deploy these apps?",
    "reply_count": 42,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2018-04-09 14:33:20"
      },
      {
        "time_stamp": "2018-04-09 15:33:10"
      },
      {
        "time_stamp": "2018-04-09 16:05:29"
      },
      {
        "time_stamp": "2018-04-11 09:43:00"
      },
      {
        "time_stamp": "2018-04-11 09:44:51"
      },
      {
        "time_stamp": "2018-04-11 09:44:54"
      },
      {
        "time_stamp": "2018-04-11 09:46:05"
      },
      {
        "time_stamp": "2018-04-11 09:47:30"
      },
      {
        "time_stamp": "2018-04-11 09:49:04"
      },
      {
        "time_stamp": "2018-04-11 09:49:05"
      },
      {
        "time_stamp": "2018-04-11 09:49:31"
      },
      {
        "time_stamp": "2018-04-11 09:49:50"
      },
      {
        "time_stamp": "2018-04-11 09:50:01"
      },
      {
        "time_stamp": "2018-04-11 09:50:42"
      },
      {
        "time_stamp": "2018-04-11 09:51:22"
      },
      {
        "time_stamp": "2018-04-11 09:51:32"
      },
      {
        "time_stamp": "2018-04-11 09:51:44"
      },
      {
        "time_stamp": "2018-04-11 09:51:56"
      },
      {
        "time_stamp": "2018-04-11 09:52:09"
      },
      {
        "time_stamp": "2018-04-11 09:52:22"
      },
      {
        "time_stamp": "2018-04-11 09:52:41"
      },
      {
        "time_stamp": "2018-04-11 09:52:44"
      },
      {
        "time_stamp": "2018-04-11 09:52:58"
      },
      {
        "time_stamp": "2018-04-11 09:53:34"
      },
      {
        "time_stamp": "2018-04-11 09:54:57"
      },
      {
        "time_stamp": "2018-04-11 09:55:01"
      },
      {
        "time_stamp": "2018-04-11 09:55:12"
      },
      {
        "time_stamp": "2018-04-11 09:55:53"
      },
      {
        "time_stamp": "2018-04-11 09:56:16"
      },
      {
        "time_stamp": "2018-04-11 09:56:16"
      },
      {
        "time_stamp": "2018-04-11 09:58:07"
      },
      {
        "time_stamp": "2018-04-11 09:59:09"
      },
      {
        "time_stamp": "2018-04-11 10:00:19"
      },
      {
        "time_stamp": "2018-04-11 10:00:31"
      },
      {
        "time_stamp": "2018-04-11 10:01:01"
      },
      {
        "time_stamp": "2018-04-11 10:01:04"
      },
      {
        "time_stamp": "2018-04-11 10:01:30"
      },
      {
        "time_stamp": "2018-04-11 10:01:33"
      },
      {
        "time_stamp": "2018-04-11 10:01:39"
      },
      {
        "time_stamp": "2018-04-11 10:43:50"
      },
      {
        "time_stamp": "2018-04-11 10:44:17"
      },
      {
        "time_stamp": "2018-04-11 10:44:43"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-04-09 14:04:27",
    "text": "At all, or particularly on the HS CMS?",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-04-09 14:06:35"
      },
      {
        "time_stamp": "2018-04-09 14:29:08"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-04-09 14:05:46",
    "edited": {
      "time_stamp": "2018-04-09 14:10:46"
    },
    "text": "lol, I’m always being used as an example - I’m either doing something right or doing something wrong :stuck_out_tongue: \n\nAnyways the driver for the current Vuejs project I’m working on utilizing HS is that the project is supposed to feel like an app. It also pulls in data from HS and stores it in local storage so the app isn’t as reliant on web connectivity. The app will be used as a big interactive kiosk thing, as well as people will be walking around with it on iPads.\n\n*Only thing I can think of right now is if the url parameters for resizing images were documented.*\n\nWhat we’re building we’re not using hubl to generate image URLs because of the way we have to grab the data.\n\nI have some old info on the query parameters that I figured out by trial and error but I think there’s more now since you guys implemented the hubl function for resizing images.",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-04-09 14:18:45"
      },
      {
        "time_stamp": "2018-04-09 14:19:52"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2018-04-09 14:06:35",
    "text": "On any CMS."
  },
  null,
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2018-04-09 14:18:45",
    "text": "Thanks. So basically you want to build an app that can be used with limited internet connectivity. \n\nAs for the resizing params, those aren’t necessarily specific to SPAs right?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-04-09 14:19:52",
    "text": "no, it’s not really specific to SPAs but does affect them, others using javascript to grab images on HS would benefit from it as well."
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-04-09 14:29:08",
    "text": "In all honesty, a lot of the appeal for me personally is just keeping up with the direction modern development is headed. I love the JAMStack concept, decoupling data from the view, using APIs more and more with outside services, static sites, being able to load extra views and have them ready and pre-loaded for when the user requests them... There's a lot of cool concepts and tools to learn and adapt to client work. \n\nBiggest advantage to projects I've actually either put in production or am currently working on is binding the data and view layers together, being able to more systematically mange state, etc.. and give immediate user feedback is great. Another killer feature is being able to quickly and easily add NPM packages without the old 'jQuery plugin' bloat, everything just minimizes and combines and you don't have to worry about it. Also component architecture, which I know is very similar to the new module system, but it's nice to be able to dynamically load and manipulate them as well without an extra page load. \n\nIn the future I want to experiment more with sending some of this state data to the Forms API or other collection sources to make conversion points feel more natural and less like \"form fills,\" but I honestly haven't had the opportunity to play with that to this point. \n\nIn terms of HS making things easier, I think the biggest thing would be adding babel configuration lol. Being able to write ES6 in the modules tool would be super helpful, similar to how CodePen handles it. I realize it's still a pretty niche use-case, but if HS was to go all-in on one or both of the frameworks you mention (maybe Angular, but I'm not familiar with that nearly as much as I am the other two) it would be really cool to auto-load the development version in preview windows, then switch to production once the page is published, that way we can still debug in preview, but get the leaner package in production.\n\nNot necessarily a way for HS to help, but in terms of JAMStack and just a cool way of implementing these framework concepts in a website-focused manner, I really love what GatsbyJS is doing, and it's my go-to lightweight site platform right now for side projects similar cases. I'm keeping an eye on that project pretty closely."
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2018-04-09 14:33:20",
    "text": "Also <@U25PYL3Q8> and <@U2H3TT8F2>"
  },
  {
    "poster": {
      "poster_name": "Kyle Barkins",
      "poster_handle": "kyle068"
    },
    "time_stamp": "2018-04-09 15:25:08",
    "text": "I just sent a single test to multiple email addresses and each recipient received multiple emails. I received 8 tests at my address and another received 19. It should have only been 1x. Anyone know if there’s an issue with HubSpot emails that we should know about?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-04-09 15:33:10",
    "text": "Personally I wouldn't do this. I dont think it would make any sense to do this on a marketing platform. I would instead build it in a native environment and add HubSpot events and other stuff to the app."
  },
  null,
  {
    "text": "<@U98RGFUQZ> uploaded a file: <https://HubSpotdev.slack.com/files/U98RGFUQZ/FA3JD025A/screen_shot_2018-04-09_at_5.40.11_pm.png|Screen Shot 2018-04-09 at 5.40.11 PM>",
    "time_stamp": "2018-04-09 15:40:28"
  },
  {
    "text": "<@U98RGFUQZ> uploaded a file: <https://HubSpotdev.slack.com/files/U98RGFUQZ/FA3JF4FU4/screen_shot_2018-04-09_at_5.44.29_pm.png|guess it's not just me...>",
    "time_stamp": "2018-04-09 15:44:47"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-04-09 15:46:41",
    "text": "Is anyone having issues with the tracking URLs in HubSpot? I am seeing numbers that do not match the other services (twitter, pinterest, linkedin). I see some really close numbers but some are way off"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-04-09 15:47:46",
    "edited": {
      "time_stamp": "2018-04-09 15:51:53"
    },
    "text": "for example, Pinterest themselves is saying the tracked url (or ad clicks) has 254 clicks, Google is reporting 56 from the campaign, and HubSpot is saying 19...."
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-04-09 16:05:29",
    "text": "I've hardly built anything using react or vuejs in the HS. I know I did some stuff with Angular (which was a pain as they use the `{{ var }}` syntax also so we had to use something to change that and it got rather confusing for a bit. I think it'd be nice if there was a way to be able to accomplish some of the things in the API through HS use. For example, I'd like to be able to have someone click a button then increment the HS DB row of an item."
  },
  null
]