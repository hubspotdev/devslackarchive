[
  {
    "poster": {
      "poster_name": "Guido Porcaro",
      "poster_handle": "guido.porcaro"
    },
    "time_stamp": "2019-04-30 07:44:09",
    "text": "<@U6GNQ7JBU> Is normal that if I set a column for the meta description on un hubtable for dynamic pages, this column will update all the meta description for social but not the one of the page?\n\nBecause actually I can see that in the meta description I have the one in the setting page; and in the meta og &amp; twitter description the one from the hubdb table",
    "reply_count": 5,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-04-30 07:45:32"
      },
      {
        "time_stamp": "2019-04-30 07:47:08"
      },
      {
        "time_stamp": "2019-04-30 08:08:06"
      },
      {
        "time_stamp": "2019-04-30 08:08:31"
      },
      {
        "time_stamp": "2019-04-30 08:09:39"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-04-30 07:45:32",
    "text": "It should override all the settings. Can you link to a page?"
  },
  {
    "poster": {
      "poster_name": "Guido Porcaro",
      "poster_handle": "guido.porcaro"
    },
    "time_stamp": "2019-04-30 07:47:08",
    "text": "Will DM in a moment"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-04-30 08:08:06",
    "text": "<@UFH0PPMEW> This is happening because you are explicitly setting the meta description and title tags"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-04-30 08:08:31",
    "text": "If you just use `{{ standard_header_includes }}` it will properly set these values for you"
  },
  {
    "poster": {
      "poster_name": "Guido Porcaro",
      "poster_handle": "guido.porcaro"
    },
    "time_stamp": "2019-04-30 08:09:39",
    "text": "Well… will continue in DM, cause is not working"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-04-30 08:29:17",
    "edited": {
      "time_stamp": "2019-04-30 08:30:41"
    },
    "text": "I agree that this has been an issue for us as well. This is also problematic with non-dynamic pages.... but you can spoof a staging environment with a quick Boolean logic insert for looping through a live/not-live check. Unfortunately not so possible with dynamic pages in regards to keeping it away from google's spiders...."
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-04-30 08:33:03",
    "edited": {
      "time_stamp": "2019-04-30 08:33:13"
    },
    "text": "Can anyone confirm that this is the case with an empty path field? If that field is empty, no page is generated? Or is there a page generated with some type of generically generated path?"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2019-04-30 08:34:30",
    "text": "if there's no path, there's no way to access a page for that row"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-04-30 08:43:21",
    "text": "...heh. yes. just went through my own happy confirmation loop of that logic. Monday has carried through to Tuesday. Is there a way to insert a No Follow element into an individual item/row within a table that generates dynamic pages? The fact that there doesn't seem to be a possibility for a review before full publish is problematic for using these pages for more complex builds."
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-04-30 08:44:51",
    "text": "It's fine for an initial review of the entire content before a completely new launch, but after that initial content launch, having those reviews is critical for individual content items that are added (i.e. in a resource center with unique child pages)"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-04-30 08:50:26",
    "edited": {
      "time_stamp": "2019-04-30 08:50:38"
    },
    "text": "....wait. Can you API GET draft rows with the proper authorization key/token?"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2019-04-30 09:20:24",
    "text": "<@U6GNQ7JBU> didn't you add this at one point?"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2019-04-30 09:20:41",
    "text": "oh wait you mean from the API"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2019-04-30 09:20:43",
    "text": "yes, you can"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2019-04-30 09:21:33",
    "text": "<https://developers.HubSpot.com/docs/methods/hubdb/v2/get_table_rows> with `/draft`"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-04-30 09:22:44",
    "text": "Lovely. Now I just need to actually understand how to use the API :joy:"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-04-30 12:14:43",
    "text": "So, I’ve got a funny situation with a HubDB table.  I have a foreign id column that’s referencing the table itself (It’s used as a way to show similar products).\n\nAll the data seems to have disappeared from this column, but when I export the table to csv, the column has row ids, but for rows that don’t exist on this table.",
    "reply_count": 4,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-04-30 12:15:44"
      },
      {
        "time_stamp": "2019-04-30 12:16:51"
      },
      {
        "time_stamp": "2019-04-30 12:18:38"
      },
      {
        "time_stamp": "2019-04-30 12:19:06"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-04-30 12:15:44",
    "text": "cc <@UG52C29EE>"
  },
  {
    "poster": {
      "poster_name": "Gobi Selvaraj",
      "poster_handle": "gselvaraj"
    },
    "time_stamp": "2019-04-30 12:16:51",
    "text": "Can u DM me the portal and table id, i will take a look"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-04-30 12:18:38",
    "text": "hmm… I’m wondering if an export to csv and re-import happened at some point"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-04-30 12:19:06",
    "text": "in that case, would the row ids have been updated, but the old column data stayed in there?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-30 12:22:18",
    "text": "cool idea on the selfrefrencing table"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-04-30 12:35:21",
    "text": "OK… it looks like importing a csv file to update a table does not play nice at all with the use of a foreign id column",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-04-30 12:36:51"
      },
      {
        "time_stamp": "2019-04-30 12:41:01"
      },
      {
        "time_stamp": "2019-04-30 12:44:50"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-04-30 12:36:51",
    "text": "Self-referencing table probably not due to the row IDs changing"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-04-30 12:41:01",
    "text": "sorry?  not quite understanding"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-04-30 12:44:50",
    "text": "It looks to me that if you have a foreign id column referencing any table, and then you take that table export to csv and then re-import, even if all other row data stays the same, the row ids will update and any foreign id column referencing the old ids will break."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2019-04-30 13:12:36",
    "text": "So that would mean the work around is using the HubSpot api to update rows vs importing them"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2019-04-30 13:13:45",
    "text": "Is HubSpot working on changing the import options for hubdb so that these IDs aren't wiped clean? I have some databases with hundreds of records using foreign relationships"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-04-30 13:15:11",
    "text": "Or at least just restructure foreign id columns to reference the row by the column selected instead of id"
  },
  {
    "poster": {
      "poster_name": "Gobi Selvaraj",
      "poster_handle": "gselvaraj"
    },
    "time_stamp": "2019-04-30 13:24:37",
    "text": "I will log an issue for this and we will work on it. No ETA at this time",
    "reply_count": 7,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2019-04-30 13:40:22"
      },
      {
        "time_stamp": "2019-05-01 07:53:17"
      },
      {
        "time_stamp": "2019-05-01 07:55:37"
      },
      {
        "time_stamp": "2019-05-01 08:03:37"
      },
      {
        "time_stamp": "2019-05-01 08:14:04"
      },
      {
        "time_stamp": "2019-05-01 12:11:09"
      },
      {
        "time_stamp": "2019-05-02 19:46:36"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2019-04-30 13:31:34",
    "text": "Thanks!"
  },
  {
    "poster": {
      "poster_name": "Luke Summerfield",
      "poster_handle": "lukesummerfield"
    },
    "time_stamp": "2019-04-30 13:40:22",
    "text": "Thanks <@UG52C29EE> :pray:"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-04-30 13:45:27",
    "text": "Thanks everyone!!"
  },
  {
    "text": "FILTERING question. I just started to work with hubdb and i can't figure it out how to do a simple filtering.  I want filter my database by 'category'. Look at my code and the desired output. Does anyone can help me with the syntax/. The documentation is not pretty clear about it. thank you",
    "time_stamp": "2019-04-30 15:58:40",
    "reply_count": 9,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-04-30 15:59:11"
      },
      {
        "time_stamp": "2019-04-30 16:02:27"
      },
      {
        "time_stamp": "2019-04-30 16:03:00"
      },
      {
        "time_stamp": "2019-04-30 16:03:36"
      },
      {
        "time_stamp": "2019-04-30 16:03:41"
      },
      {
        "time_stamp": "2019-04-30 16:04:50"
      },
      {
        "time_stamp": "2019-04-30 16:05:23"
      },
      {
        "time_stamp": "2019-04-30 16:06:41"
      },
      {
        "time_stamp": "2019-04-30 16:07:14"
      }
    ]
  },
  {
    "text": "Desired output",
    "time_stamp": "2019-04-30 15:59:11"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-04-30 16:02:27",
    "edited": {
      "time_stamp": "2019-04-30 16:02:39"
    },
    "text": "You want to do something like `'category_column=' ~ kategory.name`"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-04-30 16:03:00",
    "text": "So if your category column is called `category`"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-04-30 16:03:36",
    "text": "`hubdb_table_rows(id, 'category='~kategory.name)`"
  },
  {
    "poster": {
      "poster_name": "Ignacio Gomez",
      "poster_handle": "igomez"
    },
    "time_stamp": "2019-04-30 16:03:41",
    "text": "yes  it's called category"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-04-30 16:04:50",
    "text": "Easiest way to learn is to start with the rows API <https://developers.HubSpot.com/docs/methods/hubdb/v2/get_table_rows>"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-04-30 16:05:23",
    "text": "Test the query that you want and then build it in HubL"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-04-30 16:06:41",
    "text": "I think there is some good video tutorials here <https://academy.HubSpot.com/lessons/hub-db?library=true>"
  },
  {
    "poster": {
      "poster_name": "Ignacio Gomez",
      "poster_handle": "igomez"
    },
    "time_stamp": "2019-04-30 16:07:14",
    "text": "I'l check it out. thank you"
  }
]