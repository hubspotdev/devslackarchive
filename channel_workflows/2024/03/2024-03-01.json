[
  {
    "poster": {
      "poster_name": "Bashir",
      "poster_handle": "ayo_idan"
    },
    "time_stamp": "2024-03-01 03:00:51",
    "text": "Yes you can "
  },
  {
    "poster": {
      "poster_name": "Jessiemar Pedrosa",
      "poster_handle": "jessiemarpedrosa"
    },
    "time_stamp": "2024-03-01 03:01:27",
    "edited": {
      "time_stamp": "2024-03-01 03:01:29"
    },
    "text": "wait, I forgot, my parameter should be known or unknown. sorry if forgot"
  },
  {
    "poster": {
      "poster_name": "Bashir",
      "poster_handle": "ayo_idan"
    },
    "time_stamp": "2024-03-01 03:08:47",
    "text": "Sorry, I do not understand about the parameter "
  },
  {
    "poster": {
      "poster_name": "Jessiemar Pedrosa",
      "poster_handle": "jessiemarpedrosa"
    },
    "time_stamp": "2024-03-01 03:13:52",
    "text": "Oh, the branch filter criteria.\nExample I have final_result as data output value.\nCan I use, if final_result is known or unknown as if/then branch?"
  },
  {
    "poster": {
      "poster_name": "Zeke Schmois",
      "poster_handle": "zschmois"
    },
    "time_stamp": "2024-03-01 07:16:14",
    "text": "Unfortunately, we don’t support data passing in the if/then action yet, and may not be able to for some time."
  },
  {
    "poster": {
      "poster_name": "Zeke Schmois",
      "poster_handle": "zschmois"
    },
    "time_stamp": "2024-03-01 07:16:40",
    "text": "The only way to branch off a data passing value would be using the Value equals branch as we DO support equality checks for data passing values"
  },
  {
    "poster": {
      "poster_name": "Zeke Schmois",
      "poster_handle": "zschmois"
    },
    "time_stamp": "2024-03-01 07:17:09",
    "text": "So if your custom code action outputs a value that could be checked via equality, then yes, you can branch off of it"
  },
  {
    "poster": {
      "poster_name": "Thomas Niederberger",
      "poster_handle": "thomas.niederberger"
    },
    "time_stamp": "2024-03-01 09:15:07",
    "text": "Hi. Has anyone recently built a workflow - probably with NodeJS - to use the email address domain at the Contact Object and then add it to the Company domain if its missing and exclude the free mail provider?",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-03-01 10:29:47"
      },
      {
        "time_stamp": "2024-03-01 10:51:04"
      },
      {
        "time_stamp": "2024-03-01 10:54:18"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Stacey Thomas",
      "poster_handle": "stacey.thomas"
    },
    "time_stamp": "2024-03-01 09:44:08",
    "text": "I have done this is a (probably really bad) way. I run my custom code and output a value. Then after this step i copy that value to a property, and then i branch based on that property being known or not (and later clear it if needed).\nIt does mean getting errors in your workflow where there is nothing to copy/value is unknown, but it is a workaround!"
  },
  {
    "poster": {
      "poster_name": "Zeke Schmois",
      "poster_handle": "zschmois"
    },
    "time_stamp": "2024-03-01 10:28:44",
    "text": "<@U06H94JKK1P> that’s definitely a good hack haha, I don’t blame our customers for using this type of workaround though I did wish we could support the feature natively"
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-03-01 10:29:47",
    "text": "I've built many python based workflows that leverage properties across different objects and make updates to records.\n\nAre you asking if this is possible? Or best practice? Or for examples of their code on how it was accomplished?"
  },
  {
    "poster": {
      "poster_name": "Zeke Schmois",
      "poster_handle": "zschmois"
    },
    "time_stamp": "2024-03-01 10:30:06",
    "text": "question for everyone in this thread: would you find value in the Value equals branch supporting “known”/“unknown” functionality instead of an equality check? and if so, what would we consider “unknown”? would it be explicitly if the value does not exist or would an emtpy string `''` also count as unknown?"
  },
  {
    "poster": {
      "poster_name": "Bashir",
      "poster_handle": "ayo_idan"
    },
    "time_stamp": "2024-03-01 10:34:15",
    "text": "I’ll say let it retain same context as the usual ‘known/unknown’ pair. "
  },
  {
    "poster": {
      "poster_name": "Zeke Schmois",
      "poster_handle": "zschmois"
    },
    "time_stamp": "2024-03-01 10:37:22",
    "text": "and by “usual” what do you mean?"
  },
  {
    "poster": {
      "poster_name": "Zeke Schmois",
      "poster_handle": "zschmois"
    },
    "time_stamp": "2024-03-01 10:37:48",
    "text": "i have a hunch you’re referring to CRM property values and list filters?"
  },
  {
    "poster": {
      "poster_name": "Thomas Niederberger",
      "poster_handle": "thomas.niederberger"
    },
    "time_stamp": "2024-03-01 10:51:04",
    "text": "Thx. I can totally write the code and also know its possible. It’s more - is it smart or better does anyone has experience doing that? :)"
  },
  {
    "poster": {
      "poster_name": "Thomas Niederberger",
      "poster_handle": "thomas.niederberger"
    },
    "time_stamp": "2024-03-01 10:54:18",
    "text": "that might be a list for it: <https://avicoder.me/2021/09/06/Free-Mail-Providers-list-api/|https://avicoder.me/2021/09/06/Free-Mail-Providers-list-api/>"
  },
  {
    "poster": {
      "poster_name": "Bashir",
      "poster_handle": "ayo_idan"
    },
    "time_stamp": "2024-03-01 14:46:50",
    "text": "Yes "
  },
  {
    "poster": {
      "poster_name": "Jessiemar Pedrosa",
      "poster_handle": "jessiemarpedrosa"
    },
    "time_stamp": "2024-03-01 22:31:55",
    "text": "Hi <@UHVJJUWFN>, from your question above. Yes, it would really be a good idea for known/unknown functionality rather than just the equality check.\nWhat my use case here is actually, to pass check data from first custom code then proceed to next custom code etc. It's also a delaying strategy for me so that I won't get any API rate limit everytime I call the api endpoint."
  }
]