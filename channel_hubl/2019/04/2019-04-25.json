[
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2019-04-25 08:45:49",
    "text": "Hey dear community. I created a Blog Template that already has been published. I made some minor changes but I have these 2 errors and I can't publish :disappointed:\n\n1.Error:Cannot resolve property \"{% module_attribute &amp;quot;blog_post_source&amp;quot; %}\"\n2.Error:Template does not include the tag standard_footer_includes. Needed for HubSpot analytics\n\nDoes someone have an idea ?",
    "reply_count": 19,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-04-25 08:47:58"
      },
      {
        "time_stamp": "2019-04-25 08:49:30"
      },
      {
        "time_stamp": "2019-04-25 08:50:02"
      },
      {
        "time_stamp": "2019-04-25 08:50:16"
      },
      {
        "time_stamp": "2019-04-25 08:50:23"
      },
      {
        "time_stamp": "2019-04-25 08:50:34"
      },
      {
        "time_stamp": "2019-04-25 08:50:53"
      },
      {
        "time_stamp": "2019-04-25 08:51:05"
      },
      {
        "time_stamp": "2019-04-25 08:51:07"
      },
      {
        "time_stamp": "2019-04-25 08:52:02"
      },
      {
        "time_stamp": "2019-04-25 08:52:22"
      },
      {
        "time_stamp": "2019-04-25 08:52:55"
      },
      {
        "time_stamp": "2019-04-25 08:54:02"
      },
      {
        "time_stamp": "2019-04-25 08:54:12"
      },
      {
        "time_stamp": "2019-04-25 08:54:21"
      },
      {
        "time_stamp": "2019-04-25 08:54:49"
      },
      {
        "time_stamp": "2019-04-25 08:54:52"
      },
      {
        "time_stamp": "2019-04-25 08:55:19"
      },
      {
        "time_stamp": "2019-04-25 09:14:09"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-25 08:47:58",
    "text": "I assume you checked #2 and there’s a standard_footer_includes tag in your template"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2019-04-25 08:49:30",
    "text": "I created many template and I've never added this tag... Why should I have to ?"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2019-04-25 08:50:02",
    "text": "And my other templates with the same structure can be published"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-25 08:50:16",
    "text": "I should ask - is your template a drag n drop or coded? if it’s drag n drop then there wouldn’t be an issue."
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2019-04-25 08:50:23",
    "text": "PS : as usual thanks for your quick answer"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2019-04-25 08:50:34",
    "text": "all are drag and drop"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2019-04-25 08:50:53",
    "text": "I though that this tag is for coded template"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2019-04-25 08:51:05",
    "text": "I never put this tag with Drag&amp;Drop Template"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-25 08:51:07",
    "text": "hmm, I think a HS person is going to need to take a look then. There’s no reason to get error #2 on drag n drop"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-25 08:52:02",
    "text": "#1 seems like it could be either the attribute name might be off from what it is in the actual module, OR it’s simply a processing error on HS’s end based on the quotes getting converted"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-25 08:52:22",
    "text": "if it’s the latter, someone at HS will need to take a look"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2019-04-25 08:52:55",
    "text": "thanks a lot"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-25 08:54:02",
    "text": "No problem sorry the only help I have is practically - contact HS"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2019-04-25 08:54:12",
    "text": "Amazing :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2019-04-25 08:54:21",
    "text": "I like it but HS don't"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2019-04-25 08:54:49",
    "text": "Does someone in <@UFTV17Q03>"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2019-04-25 08:54:52",
    "text": "help me ?"
  },
  {
    "poster": {
      "poster_name": "Michele Herzog",
      "poster_handle": "mherzog"
    },
    "time_stamp": "2019-04-25 08:55:19",
    "text": "Hey <@U3TR96G84>! Feel free to DM me a link to the template you're working on."
  },
  {
    "poster": {
      "poster_name": "Ryan Noon",
      "poster_handle": "ryan.noon"
    },
    "time_stamp": "2019-04-25 09:04:12",
    "text": "Hey :slightly_smiling_face:\nIs there a way to break the HubL loop and then render the rest of the items out?\nI've got a design where the first two items are displayed, but then the rest are to be in a dropdown section, so I essentially need the loop to break after 2 items\nHowever, in my code below, it's rendering the accordion twice (which makes sense), anyway round this?"
  },
  {
    "text": "",
    "time_stamp": "2019-04-25 09:04:45"
  },
  {
    "poster": {
      "poster_name": "Michele Herzog",
      "poster_handle": "mherzog"
    },
    "time_stamp": "2019-04-25 09:14:09",
    "text": "Just a follow up here- unmatching opening `{#` and closing `%}` tags. I'll get that error messaging improved."
  },
  {
    "poster": {
      "poster_name": "Danielle Peters",
      "poster_handle": "dpeters"
    },
    "time_stamp": "2019-04-25 11:23:00",
    "text": "Hey there, I’m having an issue using the hubl variable `{% request.geoip_country %}`. basically, i have it rendering in the markup so that i can use it for other external JS on the page. the side effect of this is that it appears to occasionally be getting cached on the server side, so users that should have this variable set to `US`, for example, have it set to `CA`. just wondering if there’s any best practices for preventing this caching or if there’s a better way to make the variable accessible for use in an external JS file",
    "reply_count": 8,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2019-04-25 11:28:19"
      },
      {
        "time_stamp": "2019-04-25 11:36:51"
      },
      {
        "time_stamp": "2019-04-25 11:49:36"
      },
      {
        "time_stamp": "2019-04-25 11:50:00"
      },
      {
        "time_stamp": "2019-04-25 11:55:43"
      },
      {
        "time_stamp": "2019-04-25 19:42:09"
      },
      {
        "time_stamp": "2019-04-26 09:44:05"
      },
      {
        "time_stamp": "2019-04-26 15:08:24"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-04-25 11:28:19",
    "text": "as far I know, the `request` var basically breaks the cache (don't let the page be cached).\nSo I can only imagine this happening if you use that var in the JS file :thinking_face: which is not a good practice because files are cached :slightly_smiling_face:\nSo to avoid that you need to use that var inside the page, probably a custom module will be the best, you can use `{% require_js %}` to wrap the JS and send it to the head/footer"
  },
  {
    "poster": {
      "poster_name": "Danielle Peters",
      "poster_handle": "dpeters"
    },
    "time_stamp": "2019-04-25 11:36:51",
    "text": "hmm yeah, unfortunately it looks like it’s not breaking the cache :confused: basically, i can see it render the wrong thing in the page itself"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-25 11:49:36",
    "text": "are you using the variable in the page or in the js file"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-25 11:50:00",
    "text": "if in the js file it will not work, because js files HubL is only processed on publish, not on load."
  },
  {
    "poster": {
      "poster_name": "Danielle Peters",
      "poster_handle": "dpeters"
    },
    "time_stamp": "2019-04-25 11:55:43",
    "text": "i’m using it in the page"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-04-25 13:43:10",
    "edited": {
      "time_stamp": "2019-04-25 13:43:50"
    },
    "text": "Is there a way to grab the social accounts that are connected via HubL? From this section `<https://app.HubSpot.com/social/[portalid]/settings/accounts>`"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-25 13:44:59",
    "text": "yes"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-25 13:45:25",
    "edited": {
      "time_stamp": "2019-04-25 13:45:34"
    },
    "text": "i don’t have it handy but if you inspect the follow me HubSpot module it should give you a clue. That’s how I found it",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-04-25 14:08:49"
      },
      {
        "time_stamp": "2019-04-25 14:15:22"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-04-25 13:45:45",
    "text": "ill look into it, thanks <@U7SL518D6>"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-04-25 14:08:49",
    "text": "yup, that did it, i was able to use the `follow_me_links()` function (undocumented currently)"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-25 14:15:22",
    "text": "yea that’s it"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2019-04-25 19:42:09",
    "text": "You're right, `request.geoip*` was not forcing the page to not cache. Should be fixed now."
  },
  {
    "poster": {
      "poster_name": "Takuya",
      "poster_handle": "aimi"
    },
    "time_stamp": "2019-04-25 22:05:49",
    "edited": {
      "time_stamp": "2019-04-25 22:09:04"
    },
    "text": "I want to know Page selector Module Hubl likes {% rich_text ... %} and {% form ... %}",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-04-26 07:42:15"
      }
    ]
  }
]