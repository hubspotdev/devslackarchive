[
  {
    "poster": {
      "poster_name": "Anze",
      "poster_handle": "anzekopko2002"
    },
    "time_stamp": "2023-11-29 04:52:48",
    "edited": {
      "time_stamp": "2023-11-29 04:52:55"
    },
    "text": "Are webhook triggers in workflows only supported for HubSpot Apps? I tried sending a post request to connect the webhook but its just returning a 415 unsupported media type",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-11-29 05:43:23"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-11-29 05:41:32",
    "text": "are you getting an error here ? if so what is it?\n\nhave you tried hardcoding the values in here? that is a good place to start possibly. \n\nwhat are the two data pieces you are sending through here? lat/lng? place id, address? might be worth showing that data and the entire request so we can peek at it"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-11-29 05:43:23",
    "text": "this tends to all right happen when you’re sending a request, the wrong way, not sending json when you’re supposed to be sending json"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 09:16:40",
    "text": "I would definitely suggest creating a custom workflow action for this usecase: <https://developers.HubSpot.com/docs/api/automation/custom-workflow-actions>"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 09:19:27",
    "text": "```const fromPostcode = event.inputs?.removal_from_postcode_v4;\n    const toPostcode = event.inputs?.removal_to_postcode_v4;```\nshould be:\n```const fromPostcode = event.fields.removal_from_postcode_v4;\n    const toPostcode = event.fields.removal_to_postcode_v4;```\n"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 09:20:08",
    "text": "Yep yep, what Nick said. Also you can use the new trigger type of property value change"
  },
  {
    "poster": {
      "poster_name": "Alex Woodbridge",
      "poster_handle": "alex.woodbridge"
    },
    "time_stamp": "2023-11-29 09:20:37",
    "text": "Thanks I figured it out:\n```const axios = require('axios');\n\nfunction getZoomLevel(distanceMiles) {\n    const buckets = [\n\t\t{ maxDist: 5, zoom: 13 },      \n        { maxDist: 10, zoom: 12 },  \n        { maxDist: 50, zoom: 11 },  \n        { maxDist: 100, zoom: 10 }, \n        { maxDist: 150, zoom: 9 },  \n        { maxDist: 200, zoom: 8 },\n        { maxDist: 250, zoom: 7 },\n        { maxDist: 300, zoom: 6 }\n    ];\n\n    for (let i = 0; i &lt; buckets.length; i++) {\n        if (distanceMiles &lt;= buckets[i].maxDist) {\n            return buckets[i].zoom;\n        }\n    }\n    return 7; // Default zoom for distances greater than 200 miles\n}\n\nexports.main = async (event, callback) =&gt; {\n    console.log(\"From Postcode:\", event.fields.removal_from_postcode_v4);\n    console.log(\"To Postcode:\", event.fields.removal_to_postcode_v4);\n\n    const fromPostcode = event.fields.removal_from_postcode_v4;\n    const toPostcode = event.fields.removal_to_postcode_v4;\n\n    if (!fromPostcode || !toPostcode) {\n        console.error('One or both postcodes are undefined');\n        callback({ outputFields: { google_route_image_url: '' } });\n        return;\n    }\n\n    const googleApiKey = process.env.GOOGLE_MAPS_API_KEY;\n    const directionsUrl = `<https://maps.googleapis.com/maps/api/directions/json?origin=${encodeURIComponent(fromPostcode)}&amp;destination=${encodeURIComponent(toPostcode)}&amp;key=${googleApiKey}>`;\n\n    try {\n        const directionsResponse = await axios.get(directionsUrl);\n        if (directionsResponse.data.status !== 'OK') {\n            throw new Error('Directions API response error: ' + directionsResponse.data.status);\n        }\n\n        const route = directionsResponse.data.routes[0];\n        if (!route) {\n            throw new Error('No route found');\n        }\n\n        const polyline = route.overview_polyline.points; // Extract polyline of the route\n        const distanceInMeters = route.legs[0].distance.value; \n        const distanceInMiles = distanceInMeters / 1609.34; // Convert meters to miles\n\n        // Get the bounds and calculate the center of the route\n        const bounds = route.bounds;\n        const centerLat = (bounds.northeast.lat + bounds.southwest.lat) / 2;\n        const centerLng = (bounds.northeast.lng + bounds.southwest.lng) / 2;\n\n        // Calculate zoom level using the getZoomLevel function\n        const zoomLevel = getZoomLevel(distanceInMiles);\n\n        // Generate map image with the route, map tile, and dynamic zoom level\n        const staticMapUrl = `<https://maps.googleapis.com/maps/api/staticmap?size=600x400&amp;center=${centerLat},${centerLng}&amp;zoom=${zoomLevel}&amp;path=color:red%7Cweight:5%7Cenc:${route}&amp;markers=color:green%7Clabel:A%7C${encodeURIComponent(fromPostcode)}&amp;markers=color:red%7Clabel:B%7C${encodeURIComponent(toPostcode)}&amp;key=${googleApiKey}>`;\n\n        callback({ outputFields: { google_route_image_url: staticMapUrl } });\n    } catch (error) {\n        console.error('Error:', error);\n        callback({ outputFields: { google_route_image_url: '' } });\n    }\n};```\nIm now battling with the drawing of the route"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 09:21:32",
    "text": "On the static map?"
  },
  {
    "poster": {
      "poster_name": "Alex Woodbridge",
      "poster_handle": "alex.woodbridge"
    },
    "time_stamp": "2023-11-29 09:21:38",
    "text": "yup"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 09:21:52",
    "text": "hold one moment"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 09:22:03",
    "text": "I'll update the code for you"
  },
  {
    "poster": {
      "poster_name": "Alex Woodbridge",
      "poster_handle": "alex.woodbridge"
    },
    "time_stamp": "2023-11-29 09:22:15",
    "text": "Amazing!"
  },
  {
    "poster": {
      "poster_name": "Alex Woodbridge",
      "poster_handle": "alex.woodbridge"
    },
    "time_stamp": "2023-11-29 09:23:21",
    "text": "It was working -  but now im drawing a blank"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 09:24:12",
    "text": "Here are couple of quick things:\n\nMake sure the polyline data you're appending in the `path` parameter of the Static Map URL is URI-encoded. You have the variable `polyline` but not using it in the staticMapUrl. Replace `route` in the `path` parameter with `polyline`.\n\n2. If the route isn't displaying appropriately, you might need to adjust the zoom level or the centering of the map. You have already implemented dynamic zoom level adjustments, but you can double-check that the default zoom level and other zoom levels are suitable for your use case.\n3. Check Parameters Spacing and Separators: Ensure that there are no unnecessary spaces within the URL, and that you're using the correct separator characters, such as `%7C` for the pipe (`|`) character.\n\nSo this code should work:\n```const staticMapUrl = `<https://maps.googleapis.com/maps/api/staticmap?size=600x400&amp;center=${centerLat},${centerLng}&amp;zoom=${zoomLevel}&amp;path=color:red%7Cweight:5%7Cenc:${encodeURIComponent(polyline)}&amp;markers=color:green%7Clabel:A%7C${encodeURIComponent(fromPostcode)}&amp;markers=color:red%7Clabel:B%7C${encodeURIComponent(toPostcode)}&amp;key=${googleApiKey}>`;```\nWith this update, your static map should correctly show the route. If it's still not displaying as expected, please let me know what exactly is going wrong, and we can dig deeper into the issue."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 09:24:39",
    "text": "fun problem"
  },
  {
    "poster": {
      "poster_name": "Alex Woodbridge",
      "poster_handle": "alex.woodbridge"
    },
    "time_stamp": "2023-11-29 09:26:06",
    "edited": {
      "time_stamp": "2023-11-29 09:26:15"
    },
    "text": "It was a nice one to work through"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-11-29 09:26:59",
    "text": "event fields works instead of event input fields? nice \n\n"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-11-29 09:27:47",
    "text": "i’d love to use that more"
  },
  {
    "poster": {
      "poster_name": "Alex Woodbridge",
      "poster_handle": "alex.woodbridge"
    },
    "time_stamp": "2023-11-29 09:28:38",
    "text": "Thanks team for the assist as the end"
  },
  {
    "poster": {
      "poster_name": "Alex Woodbridge",
      "poster_handle": "alex.woodbridge"
    },
    "time_stamp": "2023-11-29 09:29:09",
    "edited": {
      "time_stamp": "2023-11-29 09:29:16"
    },
    "text": "Using this and writing the url to a property I can render the map in an email"
  },
  {
    "poster": {
      "poster_name": "Earl Jenkins",
      "poster_handle": "earl"
    },
    "time_stamp": "2023-11-29 23:50:32",
    "text": "Right. But this random delay isn't really doing anything if the function is called a whole bunch of times in quick succession. It's averaging 10 seconds for each delay, sure. But if you get the function called 200 times in rapid succession, it's not hard to get a cluster of 150 within a 10 second window. Especially when you consider that, within the first 4 seconds after the delay is triggered, there could be a bunch more, and some number of those calls will also land within that same 10 second window. And it you ramp that up to 1000 calls within a few seconds, going over the limit becomes even more likely.\n\nThe only way to truly resolve this so that you never get over the \"150 in 10 seconds\" limit is to build a managed queue with timestamps, that checks how many have been processed in the previous 10 seconds, and pauses the entire queue once the limit has been reached.\n\nOf course, that's not necessarily an easy thing to build in the environment you're working within. (Or maybe it is -- I don't know the whole framework, I'm just talking from basic principals.) It's probably easier just to build a retry system into this function: catch the error, pause for another random interval, and try again. If you don't care about the order in which these function calls are processed, then this will ensure that, _eventually_, they will all process successfully (as soon as there is a lull in new activity)."
  }
]