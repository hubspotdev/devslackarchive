[
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-11-13 08:58:54",
    "text": "hey group! Bringing up an issue that we've run into in having a multi-developer situation with using the local-dev.\n\nRight now, we have 3 different Developer Sandbox environments (Master, Developer A, Developer B)  -- we are running into a large conflict issue with the IDs that are passed to the different modules/elements/fields, ect upon being uploaded into HS by Developer A and then fetched/pushed by Developer B into their own unique Sandbox and then pulled down again. The conflicts occur when Developer A attempts to merge (git) changes from Developer B, but all of the IDs have been modified to reflect Developer Bs unique values."
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-11-13 08:59:14",
    "text": "How are people handling these unique IDs, per sandbox enviro?",
    "reply_count": 59,
    "reply_users_count": 6,
    "replies": [
      {
        "time_stamp": "2019-11-13 08:59:49"
      },
      {
        "time_stamp": "2019-11-13 09:08:02"
      },
      {
        "time_stamp": "2019-11-13 09:08:52"
      },
      {
        "time_stamp": "2019-11-13 09:09:31"
      },
      {
        "time_stamp": "2019-11-13 09:09:32"
      },
      {
        "time_stamp": "2019-11-13 09:15:56"
      },
      {
        "time_stamp": "2019-11-13 09:21:31"
      },
      {
        "time_stamp": "2019-11-13 09:22:37"
      },
      {
        "time_stamp": "2019-11-13 09:23:40"
      },
      {
        "time_stamp": "2019-11-13 09:49:32"
      },
      {
        "time_stamp": "2019-11-13 10:22:03"
      },
      {
        "time_stamp": "2019-11-13 10:22:11"
      },
      {
        "time_stamp": "2019-11-13 10:28:26"
      },
      {
        "time_stamp": "2019-11-13 10:28:54"
      },
      {
        "time_stamp": "2019-11-13 10:40:52"
      },
      {
        "time_stamp": "2019-11-13 10:40:57"
      },
      {
        "time_stamp": "2019-11-13 10:53:47"
      },
      {
        "time_stamp": "2019-11-13 10:59:15"
      },
      {
        "time_stamp": "2019-11-13 11:00:53"
      },
      {
        "time_stamp": "2019-11-13 11:07:57"
      },
      {
        "time_stamp": "2019-11-13 11:08:16"
      },
      {
        "time_stamp": "2019-11-13 11:08:21"
      },
      {
        "time_stamp": "2019-11-13 11:08:25"
      },
      {
        "time_stamp": "2019-11-13 11:08:33"
      },
      {
        "time_stamp": "2019-11-13 11:09:13"
      },
      {
        "time_stamp": "2019-11-13 11:10:37"
      },
      {
        "time_stamp": "2019-11-13 11:43:08"
      },
      {
        "time_stamp": "2019-11-13 11:43:16"
      },
      {
        "time_stamp": "2019-11-14 06:44:47"
      },
      {
        "time_stamp": "2019-11-14 06:46:55"
      },
      {
        "time_stamp": "2019-11-14 06:54:30"
      },
      {
        "time_stamp": "2019-11-14 06:55:24"
      },
      {
        "time_stamp": "2019-11-14 12:43:20"
      },
      {
        "time_stamp": "2019-11-14 12:56:45"
      },
      {
        "time_stamp": "2019-11-14 14:15:59"
      },
      {
        "time_stamp": "2019-11-14 14:18:42"
      },
      {
        "time_stamp": "2019-11-14 14:20:43"
      },
      {
        "time_stamp": "2019-11-14 14:26:33"
      },
      {
        "time_stamp": "2019-11-14 14:27:32"
      },
      {
        "time_stamp": "2019-11-14 14:32:34"
      },
      {
        "time_stamp": "2019-11-14 14:35:02"
      },
      {
        "time_stamp": "2019-11-14 14:35:21"
      },
      {
        "time_stamp": "2019-11-14 14:43:32"
      },
      {
        "time_stamp": "2019-11-14 14:43:54"
      },
      {
        "time_stamp": "2019-11-14 14:43:55"
      },
      {
        "time_stamp": "2019-11-14 14:48:21"
      },
      {
        "time_stamp": "2019-11-14 14:49:35"
      },
      {
        "time_stamp": "2019-11-14 14:49:45"
      },
      {
        "time_stamp": "2019-11-14 14:51:02"
      },
      {
        "time_stamp": "2019-11-14 14:51:09"
      },
      {
        "time_stamp": "2019-11-14 14:58:25"
      },
      {
        "time_stamp": "2019-11-14 15:01:55"
      },
      {
        "time_stamp": "2019-11-14 15:02:03"
      },
      {
        "time_stamp": "2019-11-14 15:02:07"
      },
      {
        "time_stamp": "2019-11-14 15:02:30"
      },
      {
        "time_stamp": "2019-11-14 15:04:23"
      },
      {
        "time_stamp": "2019-11-14 15:04:35"
      },
      {
        "time_stamp": "2019-11-14 16:45:57"
      },
      {
        "time_stamp": "2019-11-14 17:09:47"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Gregory Cornelius",
      "poster_handle": "gcornelius"
    },
    "time_stamp": "2019-11-13 08:59:49",
    "text": "Unique ids for what kind of objects?"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-11-13 09:08:02",
    "text": "\" with the IDs that are passed to the different modules/elements/fields”"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-11-13 09:08:52",
    "edited": {
      "time_stamp": "2019-11-13 09:13:43"
    },
    "text": "ultimately if developers are all working on different sites and they use the HubSpot cli to export the fields.. these id’s are going to conflict arent they?"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-11-13 09:09:31",
    "text": "i’m guessing the guids?"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-11-13 09:09:32",
    "edited": {
      "time_stamp": "2019-11-13 09:09:40"
    },
    "text": "“id” : “ff756479-8c12-d2af-db3d-xxxx”,"
  },
  {
    "poster": {
      "poster_name": "Gregory Cornelius",
      "poster_handle": "gcornelius"
    },
    "time_stamp": "2019-11-13 09:15:56",
    "text": "field ids for modules shouldn’t vary or change. there are other areas where there could be issues with ids that we haven’t addressed, yet."
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-11-13 09:21:31",
    "text": "(out of curiosity) are field ids linked to the module id? so if i took the field from one module with the id intact and pasted it into another module - that’d just create an entirely new field, correct?"
  },
  {
    "poster": {
      "poster_name": "Gregory Cornelius",
      "poster_handle": "gcornelius"
    },
    "time_stamp": "2019-11-13 09:22:37",
    "text": "they are not linked to the module id"
  },
  {
    "poster": {
      "poster_name": "Gregory Cornelius",
      "poster_handle": "gcornelius"
    },
    "time_stamp": "2019-11-13 09:23:40",
    "text": "their main use is for the visibility rules"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-11-13 09:49:32",
    "text": "For things like blog ID's that vary from portal to portal, we've created a ENV.html file in each portal that stores those ID's as Hubl variables.  We can then import that ENV.html file into any template/module to reference those id's using the hubl variable. Thus, the templates/modules are totally portable."
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-11-13 10:22:03",
    "text": "Let me clarify things a bit from my side. I'd stepped away for a bit.\n\nI'm mostly referencing the code that is generated in the `meta.json` files\n\nGiven this scenario:\nDeveloper A uses `npx hs create` to create a new custom module with the following `meta.json` results\n```{\n  \"css_assets\": [],\n  \"external_js\": [],\n  \"global\": false,\n  \"help_text\": \"\",\n  \"host_template_types\": [\"PAGE\"],\n  \"js_assets\": [],\n  \"other_assets\": [],\n  \"smart_type\": \"NOT_SMART\",\n  \"tags\": [],\n  \"is_available_for_new_content\": false\n}\n```\n\nDeveloper A then uploads this content to Developer A's sandbox AND a git repo that has been setup to track changes.\n\nDeveloper B pulls code from git repo and upload to their own sandbox.\n\nSomewhere in there, say Developer A or Developer B runs `npx hs fetch` for any given reason. The once empty `meta.json` files have all been updated and filled per whatever was generated by their sandbox instance as have any empty instance of the `\"id\" : \"\",` in the fields.json.\n\nThis is all fine and happy within their own context of their sandbox because the IDs will always match.\n\nHowever, those generated IDs are then pushed to their Developer branch in a repo and there are edits that need to be merged into either the other developers branch or into the master branch (which has generated ITS own instance of IDs separate from that Developers instance).\n\nNow the other developer has ALSO run a fetch and has THEIR own generated meta and fields ids, which they go to do a merge with the other files, everything goes crazy and all of a sudden you have 200 changed files that might impact what you've done in your own instance because your IDs have changed to be the OTHER developers IDs"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-11-13 10:22:11",
    "text": ":slightly_smiling_face: I ran into this this morning. It was fun."
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-11-13 10:28:26",
    "text": "I'm assuming the better practice would be to have the initially generated code pushed to the master branch of the git repo and run it from there as to avoid having the generated `meta.json` files being filled after a `npx fetch` so that the files retain their original, ungenerated state?"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-11-13 10:28:54",
    "text": "<@UD53A9UUR> anything to add on this?"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-11-13 10:40:52",
    "text": "I guess that’d make sense as long as hs fetch doesnt change the id once it’s there (which i dont image it would?)"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-11-13 10:40:57",
    "edited": {
      "time_stamp": "2019-11-13 10:42:05"
    },
    "text": "If you do go that way, you could add a pre-commit/pre-receive hook in git to stop people from modifying that field when it existed previously (just as a backup)"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-11-13 10:53:47",
    "text": "Sounds about right, <@UDFTHC6PK>. We are going to have to play around with this..."
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-11-13 10:59:15",
    "text": "I'm thinking we will always want the empty `meta.json` to live at our individual develop levels and include it in the .gitignore as to avoid dealing with it."
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-11-13 11:00:53",
    "edited": {
      "time_stamp": "2019-11-13 11:02:10"
    },
    "text": "that will prevent your devs from adding fields though, i know that i, for one have been checking fields.json to see what fields i’ve created/have access to during the build process."
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-11-13 11:07:57",
    "text": "can you assign the id yourself rather than having HubSpot?  so when you create the module, you assign it something and that can be carried over to another dev who pulls that code from git?  does HubSpot overwrite that ID if you do assign it?"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-11-13 11:08:16",
    "text": "<@UDFTHC6PK> there is an alternative"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-11-13 11:08:21",
    "text": "you could use the .hsignore file?"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-11-13 11:08:25",
    "text": "<https://designers.HubSpot.com/docs/tools/local-development-reference>"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-11-13 11:08:33",
    "text": "“You can include a .hsignore file in your project to specify files that should not be tracked when using the CLI. Files matching the patterns specified in the .hsignore file will not be uploaded to HubSpot when using the upload or watch commands.”"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-11-13 11:09:13",
    "text": "yes, probably will be matching the gitignore with the hsignore"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2019-11-13 11:10:37",
    "edited": {
      "time_stamp": "2019-11-13 11:11:01"
    },
    "text": "the only downside then, is that any changes in the interface wont be revision controlled :disappointed:"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-11-13 11:43:08",
    "text": "yeah, best I can think is to create the empty files, if `watch` is running it willl push that immediately, then immediately add that specific meta.json to the `.hsignore`, push it to github, then immediately followup with adding that specific instance to the `.gitignore`"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-11-13 11:43:16",
    "text": "that would be a bit tedious however"
  }
]