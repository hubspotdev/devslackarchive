[
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2019-08-14 02:19:07",
    "edited": {
      "time_stamp": "2019-08-14 02:33:42"
    },
    "text": "The Ninja Documentation says you should be able to do ‘not in’\n<https://jinja.palletsprojects.com/en/2.10.x/templates/#logic>\nSee Note\nBut that give me an error so not sure if you can do it"
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2019-08-14 02:35:32",
    "text": "infact the one the ninja documentation tells you shouldn’t work works\n\n```{{ 'string' if not (string1 in list) }}```"
  },
  {
    "poster": {
      "poster_name": "Kane Small",
      "poster_handle": "kane.small"
    },
    "time_stamp": "2019-08-14 03:08:20",
    "edited": {
      "time_stamp": "2019-08-14 03:08:40"
    },
    "text": "Hi all, myself and <@U7VHQMEV7> are tackling another rather complex problem that we're trying to _hopefully_ overcome - we've implemented the custom blog language switcher, as outlined in the following HubSpot blog post: `<https://blog.HubSpot.com/customers/removing-language-barrier-multi-language-module-HubSpot-blogs>` but, our problem lies in the fact that this is a custom module and doesn't actually interact/override/update any of the core blog page settings. The default HubSpot language switcher updates page variables such as `\"translated_content\": {}` so that it knows how many translated versions of any given page there are. With the custom language switcher, to our knowledge, you cannot target and update those variables and because of that, we can't detect if a user is on a blog listing/post page and if they were to click on any navigation link it will just default to the original language instead of the translated blog/listing page they were on. I hope that makes sense :sweat_smile:\n\n*Use case:*\n- User is on: `<https://www.test.com>`\n- User translates the page to English - US: `<https://www.test.com/en-us>`\n- User navigates to the blog and blog listing page detects that user has translated to English - US: `<https://www.test.com/en-us/blog>`\n- If the user now clicks on any nav link from the blog page, they need to go to that language and not the original language, i.e.: `<https://www.test.com/en-us/about-us>` and not `<https://www.test.com/about-us>`"
  },
  {
    "poster": {
      "poster_name": "Grant Bunyan",
      "poster_handle": "grantbunyan"
    },
    "time_stamp": "2019-08-14 04:14:01",
    "text": ":man-shrugging: - cheers Matthew!"
  },
  {
    "poster": {
      "poster_name": "Grant Bunyan",
      "poster_handle": "grantbunyan"
    },
    "time_stamp": "2019-08-14 06:24:58",
    "edited": {
      "time_stamp": "2019-08-14 06:26:34"
    },
    "text": "I’m having the same issue. Can’t pass tag slug as variable, into `blog_recent_tag_posts()`."
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2019-08-14 07:53:34",
    "edited": {
      "time_stamp": "2019-08-14 07:54:20"
    },
    "text": "Has anyone found success with trying to use filtering (specifically with multiple topics) on a HubSpot blog? (either by using MixItup or something else). Seems like its not really possible",
    "reply_count": 4,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-08-14 07:57:23"
      },
      {
        "time_stamp": "2019-08-14 08:03:12"
      },
      {
        "time_stamp": "2019-08-14 08:30:59"
      },
      {
        "time_stamp": "2019-08-14 08:31:51"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-08-14 07:57:23",
    "text": "<@UDFTHC6PK> has used mixitup.  blanking on if it was for blog or for hubdb, though"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2019-08-14 08:03:12",
    "text": "Yeah I’ve done it with HubDB, bbut was searching for a blog solution :upside_down_face:"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-08-14 08:30:59",
    "text": "Hey <@U7AU6414J> - I have used it successfully for a blog listing. I'm away from my primary computer right now but will hit you up with how I set it up when I get back in a couple of hours"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2019-08-14 08:31:51",
    "text": "Hey <@UDFTHC6PK> Appreciate it! Looking forward to chatting :thumbsup:"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2019-08-14 09:23:56",
    "edited": {
      "time_stamp": "2019-08-14 09:24:17"
    },
    "text": "Question. trying to use `key` in a for loop. It's working fine in the IDE, but on the local server and the `{{key}}` gets printed, but not `{{val}}`. Any ideas?\n\n```\n{% set dict_var = {'name': 'Cool Product', 'price': '$20', 'size':'XL'} %}  \n{% for key, val in dict_var.items() %}\n    {{ key }}: {{ val }}&lt;br&gt;\n{% endfor %}\n```",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-08-14 10:11:15"
      },
      {
        "time_stamp": "2019-08-14 10:30:11"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-08-14 10:11:15",
    "text": "I’d try cross-posting in <#CLJJXGTC0|local-development>"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2019-08-14 10:30:11",
    "text": "Not using the local dev tool. Just the HubL server"
  },
  {
    "poster": {
      "poster_name": "Josh McCarroll",
      "poster_handle": "josh"
    },
    "time_stamp": "2019-08-14 11:41:28",
    "text": "I have a HubDB/HubL question. I’m trying to add a filter to a resources and this isn’t working the way I expected. I only want to add items to the filter that have a resource with that category, so I’m trying to loop through each category option in the database and filter out those with items. I know the code below works for a single select field in HubDB, but I’m working with a multi-select for this item and it isn’t returning anything.\n\nFirst, I know I need to change “equalto” to something that matches “contains” to loop through all of the applied categories, but I don’t know the value for that in selectattr, but even the equalto isn’t returning results for items with just one category selected.\n\nAny ideas on how to fix this to work for multi-select columns?\n\n{% set resourcesTable = hubdb_table_rows(tableID, queryparam) %}\n{% set table = resourcesTable|selectattr(‘category.name’,‘equalto’,‘Category 1’) %}\n{% if table %}\n\t[run some stuff here]\n{% endif %}",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-08-14 13:04:50"
      }
    ]
  },
  {
    "text": "I went a different way with this because I couldn’t find a way to get selectattr to work as a filter. It’s probably not the best way, but it works for what I’m after. I decided to just create an array with the information I needed for each, then filter out uniques to get each item to only show once. Hopefully I’ll have a way to improve this in the future but for now I think I’m settled.",
    "time_stamp": "2019-08-14 13:04:50"
  }
]