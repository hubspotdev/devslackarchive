[
  {
    "poster": {
      "poster_name": "Stan Zeehandelaar",
      "poster_handle": "stan225"
    },
    "time_stamp": "2022-12-28 05:56:47",
    "text": "Can someone show me how to add a log for errors in my custom code block written in Python?",
    "reply_count": 6,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2022-12-28 07:22:22"
      },
      {
        "time_stamp": "2022-12-28 07:22:46"
      },
      {
        "time_stamp": "2022-12-28 07:24:33"
      },
      {
        "time_stamp": "2022-12-28 07:24:38"
      },
      {
        "time_stamp": "2022-12-29 01:07:59"
      },
      {
        "time_stamp": "2022-12-29 07:46:17"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-12-28 07:21:40",
    "text": "<https://HubSpotdev.slack.com/archives/C2YHAHB6K/p1672189485736169>"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-12-28 07:22:22",
    "text": "You can use `print` in python to log things"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-12-28 07:22:46",
    "text": "also see this post from just yesterday, this person was using nodejs but it's a very similar process <https://HubSpotdev.slack.com/archives/C019VT42R8X/p1671696817212469>"
  },
  {
    "text": "Also here's the section in the docs where it talks about logging",
    "time_stamp": "2022-12-28 07:24:33"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-12-28 07:24:38",
    "text": "<https://developers.HubSpot.com/docs/api/workflows/custom-code-actions>"
  },
  {
    "poster": {
      "poster_name": "Logan Armstrong",
      "poster_handle": "logan565"
    },
    "time_stamp": "2022-12-28 08:15:14",
    "text": "Hey all, newbie question, but 1) is it possible to use a developer account app to perform custom-coded workflow actions, and 2) if so, what is the variable name to use for the client id / secret (e.g., instead of apiKey or accessToken)",
    "reply_count": 10,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2022-12-28 08:19:16"
      },
      {
        "time_stamp": "2022-12-28 08:19:49"
      },
      {
        "time_stamp": "2022-12-28 08:19:59"
      },
      {
        "time_stamp": "2022-12-28 08:22:59"
      },
      {
        "time_stamp": "2022-12-28 08:23:40"
      },
      {
        "time_stamp": "2022-12-28 08:24:16"
      },
      {
        "time_stamp": "2022-12-28 08:28:29"
      },
      {
        "time_stamp": "2022-12-28 08:29:01"
      },
      {
        "time_stamp": "2022-12-28 08:29:35"
      },
      {
        "time_stamp": "2022-12-28 08:30:26"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-12-28 08:19:16",
    "text": "You can use a developer account to create custom workflow actions not custom coded actions, is that what you're referring to?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-12-28 08:19:49",
    "text": "And then you can use a developer sandbox to create custom coded actions (and test custom workflow actions), is that what you're asking?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-12-28 08:19:59",
    "edited": {
      "time_stamp": "2022-12-28 08:21:04"
    },
    "text": "just a little confused by the phrasing of the question"
  },
  {
    "poster": {
      "poster_name": "Logan Armstrong",
      "poster_handle": "logan565"
    },
    "time_stamp": "2022-12-28 08:22:59",
    "text": "I'm trying to use an app created via developer account to authenticate a custom code workflow action, instead of using a private app access token (trying to avoid having to be a super admin on the account to create a private app within the portal). Does that make sense?"
  },
  {
    "poster": {
      "poster_name": "Logan Armstrong",
      "poster_handle": "logan565"
    },
    "time_stamp": "2022-12-28 08:23:40",
    "text": "This might just not be at all possible, I'm not super familiar with the authentication process"
  },
  {
    "text": "screenshot of what I'm currently trying, if it helps",
    "time_stamp": "2022-12-28 08:24:16"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-12-28 08:28:29",
    "text": "Yeah so unfortunately developer apps use refresh tokens (basically private app tokens but you have to get a new one every 1800 seconds) and not private app token (they never expire (unless you tell them too)) so it would be a lot more complicated to set that up. Not impossible but would take a good amount of programming skill on your end"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-12-28 08:29:01",
    "text": "If this is absolutely required I don't mind hopping on a zoom call and walking you through the process"
  },
  {
    "poster": {
      "poster_name": "Logan Armstrong",
      "poster_handle": "logan565"
    },
    "time_stamp": "2022-12-28 08:29:35",
    "text": "got it, thanks Carter. Not a critical requirement, so no worries. Though I very much appreciate the offer and insights!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-12-28 08:30:26",
    "text": "of course, let me know if you run into anymore problem"
  },
  {
    "poster": {
      "poster_name": "Nathan De Long",
      "poster_handle": "ndelong"
    },
    "time_stamp": "2022-12-28 09:23:18",
    "text": "Hey <@U03R9S81A81> <@U01QVR44MEY> thank you both so much for your guidance on this! I wound up getting this working how I wanted, if you are interested, here's a video + the code I wound up using:\n\nVideo: <https://www.loom.com/share/da93ad4e116d44909e0e5080d45baaad>\n\nCode:\n```const HubSpot = require('@HubSpot/api-client');\n\nexports.main = async (event, callback) =&gt; {\n\n  const HubSpotClient = new HubSpot.Client({\n    accessToken: process.env.hstoken\n  }); \n  \ntry {\n  \n  //hs_object_id is the record ID for the quote in this workflow. \n  const hs_object_id = event.inputFields['hs_object_id'];\n  //first, reach out to the associations API to get the line items associated with the quote. \n  const apiResponse = await HubSpotClient\n              .apiRequest({\n              method: 'GET',\n              path: `/crm/v4/objects/quotes/${hs_object_id}/associations/line_item`,\n              body: {}\n            });\n\n  //return the line item IDs associated with the quote, and map them to an array  \n  const lineitemIDs = apiResponse.body.results.map( resultItem =&gt; `{\"id\": \"${resultItem.toObjectId}\"}` );\n  console.log(\"Here are the line items associated with the quote from the associations API:\", lineitemIDs); \n  //rebuild the array without the extra single apostrophes\n  var cleanedLineItemIDs = lineitemIDs.join(',').replace(/'([^']+(?='))'/g, '$1');\n  console.log(\"Here are the line item IDs to submit to the line items batch read API:\", cleanedLineItemIDs);\n  //submit our new array of line item IDs to the line items batch API\n  var testLineItemIDs = `[`+cleanedLineItemIDs+`]`\n  console.log(\"Here are the line item IDs with brackets:\", testLineItemIDs)\n  const apiResponse2 = await HubSpotClient\n  \t\t\t.apiRequest({\n            method: 'POST',\n            path: `/crm/v3/objects/line_items/batch/read?archived=false`,\n            //header: 'content-type: application/json',\n            body: {\n                  \"properties\": [\n                    \"hs_sku\"\n                  ],\n                  \"inputs\": JSON.parse(testLineItemIDs)\n                }\n            });\n  console.log (apiResponse2.body.results);\n  //map the hs_sku properties returned by the line items API to an array\n  const lineItemResponse = apiResponse2.body.results.map( id =&gt; id.properties.hs_sku);\n  console.log(\"Here are the SKUs \", lineItemResponse);\n  //rebuild the array to remove extraneous characters. \n  var cleanedSKUs = lineItemResponse.join(', ').replace(/'([^']+(?='))'/g, '$1');\n  console.log(\"Here is the list of SKUs from the quote \", cleanedSKUs)\n  //catch and log any errors to the console. \n} catch (e) {\n  e.message === 'HTTP request failed'\n    ? console.error(JSON.stringify(e.response, null, 2))\n    : console.error(e)\n}\n  //return the list of SKUs for the line items on the quote so we can copy that to a property on the company record associated with the quote. \n  callback({ outputFields: {cleanedSKUs} });  \n}```"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-12-28 09:31:57",
    "text": "<@U04BWKTAVJ6> nice work!"
  },
  {
    "poster": {
      "poster_name": "Nathan De Long",
      "poster_handle": "ndelong"
    },
    "time_stamp": "2022-12-28 09:35:47",
    "text": "Aw, thank you! It was a fun project to work on, and again, thank you and Philip both so much for your help on it! This is only the third thing I've made, so I had no idea about using\n```apiResponse.body.results.map( resultItem =&gt; resultItem.toObjectId)```\nand that was incredibly helpful, along with your suggestions for the general flow of it!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-12-28 09:51:02",
    "text": "Of course"
  }
]