[
  {
    "poster": {
      "poster_name": "Vesa Poikajärvi",
      "poster_handle": "vesa.poikajarvi"
    },
    "time_stamp": "2020-07-02 01:24:48",
    "text": "<@U7SL518D6> can the folders be locked with the `hs` client when uploading all the things? there are multiple folders in the theme and now we need to manually lock them separately?"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-07-02 01:40:33",
    "edited": {
      "time_stamp": "2020-07-02 01:41:42"
    },
    "text": "1.5MB is a pretty large file, you should look at splitting it up into partials. You can do this using\n```{% include \"path/to/template.html %}```"
  },
  {
    "poster": {
      "poster_name": "Jaydip Suvagiya",
      "poster_handle": "jaydip"
    },
    "time_stamp": "2020-07-02 01:58:00",
    "text": "Thanks :thumbsup:"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-07-02 02:00:19",
    "text": "Even better: Split your theme out into reusable modules and use the drag and drop hubl."
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-07-02 02:01:03",
    "text": "See: <https://developers.HubSpot.com/docs/cms/building-blocks/templates/drag-and-drop-areas>"
  },
  {
    "poster": {
      "poster_name": "Jaydip Suvagiya",
      "poster_handle": "jaydip"
    },
    "time_stamp": "2020-07-02 02:22:51",
    "text": "Great!, will surely try this"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 02:36:12",
    "text": "Is there an example setup that includes JS bundling? Using webpack? Babel?",
    "reply_count": 88,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2020-07-02 02:38:55"
      },
      {
        "time_stamp": "2020-07-02 02:41:33"
      },
      {
        "time_stamp": "2020-07-02 06:14:33"
      },
      {
        "time_stamp": "2020-07-02 06:15:18"
      },
      {
        "time_stamp": "2020-07-02 06:24:00"
      },
      {
        "time_stamp": "2020-07-02 06:24:21"
      },
      {
        "time_stamp": "2020-07-02 06:40:11"
      },
      {
        "time_stamp": "2020-07-02 06:44:51"
      },
      {
        "time_stamp": "2020-07-02 06:45:43"
      },
      {
        "time_stamp": "2020-07-02 09:40:25"
      },
      {
        "time_stamp": "2020-07-02 09:41:05"
      },
      {
        "time_stamp": "2020-07-02 12:11:07"
      },
      {
        "time_stamp": "2020-07-02 12:13:00"
      },
      {
        "time_stamp": "2020-07-02 12:14:45"
      },
      {
        "time_stamp": "2020-07-02 12:24:17"
      },
      {
        "time_stamp": "2020-07-02 12:24:56"
      },
      {
        "time_stamp": "2020-07-02 12:25:11"
      },
      {
        "time_stamp": "2020-07-02 12:30:06"
      },
      {
        "time_stamp": "2020-07-02 12:32:33"
      },
      {
        "time_stamp": "2020-07-02 12:32:51"
      },
      {
        "time_stamp": "2020-07-02 12:40:05"
      },
      {
        "time_stamp": "2020-07-02 12:40:12"
      },
      {
        "time_stamp": "2020-07-02 12:40:23"
      },
      {
        "time_stamp": "2020-07-02 12:40:29"
      },
      {
        "time_stamp": "2020-07-02 12:40:37"
      },
      {
        "time_stamp": "2020-07-02 12:41:21"
      },
      {
        "time_stamp": "2020-07-02 12:41:33"
      },
      {
        "time_stamp": "2020-07-02 12:41:46"
      },
      {
        "time_stamp": "2020-07-02 12:42:03"
      },
      {
        "time_stamp": "2020-07-02 12:42:28"
      },
      {
        "time_stamp": "2020-07-02 12:42:55"
      },
      {
        "time_stamp": "2020-07-02 12:53:02"
      },
      {
        "time_stamp": "2020-07-02 12:53:19"
      },
      {
        "time_stamp": "2020-07-02 12:55:00"
      },
      {
        "time_stamp": "2020-07-02 12:56:12"
      },
      {
        "time_stamp": "2020-07-02 13:10:20"
      },
      {
        "time_stamp": "2020-07-02 13:28:33"
      },
      {
        "time_stamp": "2020-07-02 13:28:39"
      },
      {
        "time_stamp": "2020-07-02 13:29:00"
      },
      {
        "time_stamp": "2020-07-02 13:29:35"
      },
      {
        "time_stamp": "2020-07-02 13:29:49"
      },
      {
        "time_stamp": "2020-07-02 13:43:54"
      },
      {
        "time_stamp": "2020-07-02 13:44:17"
      },
      {
        "time_stamp": "2020-07-02 13:44:18"
      },
      {
        "time_stamp": "2020-07-02 13:44:34"
      },
      {
        "time_stamp": "2020-07-02 13:44:38"
      },
      {
        "time_stamp": "2020-07-02 13:45:03"
      },
      {
        "time_stamp": "2020-07-02 13:45:14"
      },
      {
        "time_stamp": "2020-07-02 13:45:24"
      },
      {
        "time_stamp": "2020-07-02 13:45:29"
      },
      {
        "time_stamp": "2020-07-02 13:45:54"
      },
      {
        "time_stamp": "2020-07-02 13:46:41"
      },
      {
        "time_stamp": "2020-07-02 13:47:06"
      },
      {
        "time_stamp": "2020-07-02 13:50:35"
      },
      {
        "time_stamp": "2020-07-02 13:51:14"
      },
      {
        "time_stamp": "2020-07-02 13:51:17"
      },
      {
        "time_stamp": "2020-07-02 13:51:27"
      },
      {
        "time_stamp": "2020-07-02 13:51:55"
      },
      {
        "time_stamp": "2020-07-02 13:54:29"
      },
      {
        "time_stamp": "2020-07-02 13:54:33"
      },
      {
        "time_stamp": "2020-07-02 13:54:55"
      },
      {
        "time_stamp": "2020-07-02 14:33:53"
      },
      {
        "time_stamp": "2020-07-02 16:13:24"
      },
      {
        "time_stamp": "2020-07-02 16:15:00"
      },
      {
        "time_stamp": "2020-07-02 16:15:22"
      },
      {
        "time_stamp": "2020-07-02 16:21:36"
      },
      {
        "time_stamp": "2020-07-02 16:21:44"
      },
      {
        "time_stamp": "2020-07-02 16:21:49"
      },
      {
        "time_stamp": "2020-07-02 16:22:20"
      },
      {
        "time_stamp": "2020-07-02 16:22:45"
      },
      {
        "time_stamp": "2020-07-02 16:23:53"
      },
      {
        "time_stamp": "2020-07-02 18:51:53"
      },
      {
        "time_stamp": "2020-07-02 18:52:01"
      },
      {
        "time_stamp": "2020-07-02 18:52:13"
      },
      {
        "time_stamp": "2020-07-03 00:39:34"
      },
      {
        "time_stamp": "2020-07-03 01:12:23"
      },
      {
        "time_stamp": "2020-07-03 01:12:45"
      },
      {
        "time_stamp": "2020-07-03 01:13:54"
      },
      {
        "time_stamp": "2020-07-03 01:14:02"
      },
      {
        "time_stamp": "2020-07-03 09:28:02"
      },
      {
        "time_stamp": "2020-07-03 09:28:11"
      },
      {
        "time_stamp": "2020-07-03 09:28:13"
      },
      {
        "time_stamp": "2020-07-03 10:14:13"
      },
      {
        "time_stamp": "2020-07-03 10:14:28"
      },
      {
        "time_stamp": "2020-07-03 10:14:32"
      },
      {
        "time_stamp": "2020-07-03 11:08:52"
      },
      {
        "time_stamp": "2020-07-03 11:08:53"
      },
      {
        "time_stamp": "2020-07-03 11:09:04"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Vesa Poikajärvi",
      "poster_handle": "vesa.poikajarvi"
    },
    "time_stamp": "2020-07-02 02:38:55",
    "edited": {
      "time_stamp": "2020-07-02 02:39:01"
    },
    "text": "Maybe this <https://github.com/HubSpot/cms-event-registration/> helps?"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-07-02 02:41:33",
    "edited": {
      "time_stamp": "2020-07-02 02:41:52"
    },
    "text": "I guess it depends on your goal.. If you’re building a one-time theme for a specific client then you can just use a standard webpack script with a single entrypoint. Are you using webpack with any specific lib such as react?"
  },
  {
    "poster": {
      "poster_name": "Rishabh Potti",
      "poster_handle": "rishabh.potti"
    },
    "time_stamp": "2020-07-02 03:40:51",
    "text": "How can we add own template in app marketplace in HubSpot?",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2020-07-02 08:48:47"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-07-02 05:34:34",
    "text": "You only need to lock the containing folder, all child folders become locked too"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-07-02 05:35:27",
    "text": "So for a theme you might lock the theme folder itself. It currently has to be done using the design manager UI"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 06:14:33",
    "text": "Yea, it’s for a single specific client. Not necessarily using react (at the moment). My main goal is to combine JS from multiple modules and run Babel so some ES6 code works in IE11"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 06:15:18",
    "text": "<@UQERM7BLY> I’m not sure if I need webpack specifically or if just some npm script makes sense. (I used to use gulp/grunt back in the day)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 06:24:00",
    "text": "I found this: <https://github.com/teunrutten/HubSpot-boilerplate> but it looks like overkill"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 06:24:21",
    "text": "I have a vague memory of a HubSpot resource somewhere that had just webpack as a scenario"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 06:40:11",
    "text": "Putting together something based on this: <https://github.com/paulca55/HubSpot-local-development>"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-07-02 06:44:51",
    "edited": {
      "time_stamp": "2020-07-02 06:45:07"
    },
    "text": "This boils down to choice/preference. I’m building a marketplace theme at the moment, which needs to be flexible - so my route it to treat every module as an isolated component which has it’s own JS and CSS.\n\nThere are unlimited routes you can take, but the ones i’ve tried:\n\n*gulp:*\n• src/modules &lt;- .module folders with their own css/js\n• src/templates &lt;- coded templates\n• src/js/ - common js\n*webpack:*\nWith webpack you have to define entry points, as a bundler it really leans towards wanting to generate one large js file (you can split out multiple), but having one per module is a bit trickier and can reduce efficiency. I am using this to package each module up, but likely a bit of overkill for a specific client project."
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-07-02 06:45:43",
    "edited": {
      "time_stamp": "2020-07-02 06:46:15"
    },
    "text": "I think the common preference for me (regardless of tooling), is to make sure everything is managed in a src/ folder (even including modules) and then have the HubSpot CLI watch the dest/build folder during development."
  },
  {
    "poster": {
      "poster_name": "Remington Begg",
      "poster_handle": "remingtonbegg"
    },
    "time_stamp": "2020-07-02 08:48:47",
    "text": "Check out <#C2YGWHDKQ|marketplace> and this link: <https://knowledge.HubSpot.com/resources/what-are-the-submission-requirements-for-the-template-marketplace#1-4>"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2020-07-02 09:30:01",
    "text": "Not at the moment, but we have been thinking about a prettier plugin for HubL"
  },
  {
    "poster": {
      "poster_name": "Kevin Leonard",
      "poster_handle": "kleonard"
    },
    "time_stamp": "2020-07-02 09:40:25",
    "text": "I put together a boilerplate for using webpack recently with specifically serverless functions in mind, but in case it helps inform a simpler scaffold than the events app <https://github.com/HubSpot/cms-webpack-serverless-boilerplate>"
  },
  {
    "poster": {
      "poster_name": "Kevin Leonard",
      "poster_handle": "kleonard"
    },
    "time_stamp": "2020-07-02 09:41:05",
    "text": "<https://github.com/HubSpot/cms-react-boilerplate> &lt;-- the react example, too, has a slimmer webpack config"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2020-07-02 10:28:33",
    "text": "So i just discovered the cli ignoring sass files inside of module folders :exploding_head: … who should I thank?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 11:02:54",
    "text": "that would be great"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 12:11:07",
    "text": "<@UQERM7BLY> <@U7UBMQMDK> Thanks for the advice/links. I think I’m going to try to separate JS/CSS files per module and then roll them up into one file for now. Deciding between “Parcel” or webpack now (mostly because I already started with Parcel…"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 12:13:00",
    "text": "In the end I need to whatever lets me optimize the site for speed most"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 12:14:45",
    "text": "also, screw it, I should try to use webpack probably"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-07-02 12:24:17",
    "text": "keep it simple :smile: webpack has benefits if you have external dependencies (tree shaking, code splitting) start with a simple webpack configuration. eg:\n\nsrc/\n   modules/\n   templates/\n   assets/\nwebpack.config.js\n\nin this scenario you can just use copywebpack plugin for modules (html templates) and then scss loader+babel on js files. You’ll have one js output, and can use minicssextract for css. You can then include these in your base template."
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-07-02 12:24:56",
    "text": "its essentially cms-theme-boilerplate but with webpack."
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-07-02 12:25:11",
    "text": "I then set cli tools to “watch” dest/ during development."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 12:30:06",
    "text": "Thanks, ok. I’ll try to do that. I really like the “watch” build folder idea"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 12:32:33",
    "text": "If I get it working I’ll save a public version for Github"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 12:32:51",
    "text": "and mention you guys"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 12:40:05",
    "text": "In that cms-react-boilerplate…as far as I can tell there’s nothing react specific about it"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 12:40:12",
    "text": "or I’m missing some key concept somewhere"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-07-02 12:40:23",
    "text": "do you want to use react?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 12:40:29",
    "text": "in the webpack.config.js file I mean"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 12:40:37",
    "text": "no, I don’t need react for this one"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-07-02 12:41:21",
    "text": "usually you wont find react-specific stuff in webpack.config - that’ll just be in the package.json"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 12:41:33",
    "text": "ah, ok"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 12:41:46",
    "text": "It’s setup pretty much how you described"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 12:42:03",
    "text": "I have it setup I think, let’s see what happens when i try to run this :slightly_smiling_face:"
  },
  {
    "time_stamp": "2020-07-02 12:42:28",
    "text": "nervous"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-07-02 12:42:55",
    "edited": {
      "time_stamp": "2020-07-02 12:43:01"
    },
    "text": "i take no responsibility :smile:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 12:53:02",
    "text": "lol…nothing exploded yet. Running through errors for missing modules and extra spaces in that webpack config"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 12:53:19",
    "text": "so close to understanding what the hell is going on"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 12:55:00",
    "text": "it worked mostly! I need to copy more of the src folder to the dev folder but lots of useful info in the little green report thing at the end"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-07-02 12:56:12",
    "text": "just remember when you go live you’ll want to make sure you’re running a production webpack build :wink:"
  },
  {
    "poster": {
      "poster_name": "Kevin Leonard",
      "poster_handle": "kleonard"
    },
    "time_stamp": "2020-07-02 13:10:20",
    "text": ":sharkdance:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 13:28:33",
    "text": "I think I’m on the right track. I pulled back to pretty much using this setup first: <https://www.npmjs.com/package/@HubSpot/webpack-cms-plugins>"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 13:28:39",
    "text": "and now I’m adding to it"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 13:29:00",
    "text": "looks like with the autoupload feature I don’t need to watch at all"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 13:29:35",
    "text": "and with github actions when I push then it will sync with the “real” production site"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-07-02 13:29:49",
    "text": ":slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "David F Jones",
      "poster_handle": "david568"
    },
    "time_stamp": "2020-07-02 13:32:06",
    "text": "Hey everyone,\nI'm just attemptying to view the logs on a serverless function and am having some issues getting the command to work.\n\nSo I tried running this command - `npx hs logs TSBK-LMS/function.functions/uploadFile.js`\nBut then got this error - `[ERROR] The request in portal xxxxxxx was not found. The function path TSBK-LMS/function.functions/uploadFile.js does not exist.`\n\nWhen I checked the file directory on the HubSpot account, I can confirm that this file does exist in this location.\n\nI'm also a little unclear on the actual logs command as well. In the documentation both the endpoint-name and --portal have the same description, so I'm not sure if something is missing or if these two lines are interchangeable.",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2020-07-02 13:44:17"
      },
      {
        "time_stamp": "2020-07-02 13:45:02"
      },
      {
        "time_stamp": "2020-07-02 13:45:56"
      },
      {
        "time_stamp": "2020-07-02 13:48:56"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 13:43:54",
    "text": "I can’t seem to get the deploy script to run and I don’t understand why"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-07-02 13:44:17",
    "text": "endpoint name is the endpoint name you specified in your serverless.json"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-07-02 13:44:17",
    "text": "git actions?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 13:44:18",
    "text": "`TypeError: Cannot destructure property 'portal' of 'undefined' as it is undefined.`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 13:44:34",
    "text": "I don’t technically need the deploy script"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-07-02 13:44:38",
    "text": "have you set the portal variable?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-07-02 13:45:02",
    "text": "apologize for the duplicated content there correcting it now, not sure how that happened"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-07-02 13:45:03",
    "text": "and/or configured a default HubSpot portal in your hs config?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 13:45:14",
    "text": "yea"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 13:45:24",
    "text": "I have a default setup"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 13:45:29",
    "text": "and generally a dev and production"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-07-02 13:45:54",
    "text": "need the command you’re running"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-07-02 13:45:56",
    "text": "updated"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 13:46:41",
    "text": "`\"deploy\": \"rm -Rf dist &amp;&amp; webpack --mode production &amp;&amp; hs upload dist my-project-folder\",`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 13:47:06",
    "text": "is the `production` here the portal name production?"
  },
  {
    "poster": {
      "poster_name": "David F Jones",
      "poster_handle": "david568"
    },
    "time_stamp": "2020-07-02 13:48:56",
    "text": "Awesome, and I got the logs working now too. Thanks!"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-07-02 13:50:35",
    "text": "nope"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 13:51:14",
    "text": "it’s what you were saying about making sure to run a production webpack build"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-07-02 13:51:17",
    "text": "you’re going to need a default HubSpot portal setup in your directory - or add your production portal id to the command (using --portal)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 13:51:27",
    "text": "there is a default setup"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 13:51:55",
    "text": "`defaultPortal: sandbox`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 13:54:29",
    "text": "I can run npm start\n```\"start\": \"webpack --watch --env.autoupload --mode production\",\n    \"build\": \"rm -Rf dist &amp;&amp; webpack --mode production\",```"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 13:54:33",
    "text": "but I can’t run build"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 13:54:55",
    "edited": {
      "time_stamp": "2020-07-02 14:25:04"
    },
    "text": "and when I run start changes are being upload to my sandbox dev account"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 14:33:53",
    "text": "In case anyone is interested in the future, it looks like the way the example webpack config exported modules is different than how I needed it setup for the scripts I was trying to run"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 16:13:24",
    "text": "does compiling scss using webpack mean that you have to import your scss file into your entry js file?"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-07-02 16:15:00",
    "text": "yeah you’ll need scss + css loaders."
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-07-02 16:15:22",
    "text": "then import."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 16:21:36",
    "text": "that was the key to understanding everything"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 16:21:44",
    "text": "thank you so much for all the help today"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 16:21:49",
    "text": "I really appreciate it"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-07-02 16:22:20",
    "text": "no worries :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-07-02 16:22:45",
    "text": "good luck with the project!"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 16:23:53",
    "text": "thanks, do you have a github account or something I can reference to give you credit for a 99% never going to happen blog post I’m writing?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 18:51:53",
    "text": "turns out webpack might be the worse"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 18:52:01",
    "text": "it’s breaking my scss imports (I think)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2020-07-02 18:52:13",
    "text": "can’t use partial imports"
  },
  {
    "poster": {
      "poster_name": "Vesa Poikajärvi",
      "poster_handle": "vesa.poikajarvi"
    },
    "time_stamp": "2020-07-03 00:39:34",
    "edited": {
      "time_stamp": "2020-07-03 00:41:26"
    },
    "text": "we have single css file but per module js and no sass imports in javascript by adding the sass main file to webpack entry list. a bit dirty, and it does produce an unneeded `styles.js` file but otherwise does what we needed so the build step now just removes that file afterwards before uploading to HubSpot\n\n```entry: {\n  styles: './src/sass/style.scss',\n  'modules/a-module.module/module': './src/modules/a-module.module/js/index.js',\n},\noutput: {\n  path: path.resolve(__dirname, 'dist'),\n  filename: '[name].js',\n},```\n(related to _does compiling scss using webpack mean that you have to import your scss file into your entry js file?_)"
  }
]