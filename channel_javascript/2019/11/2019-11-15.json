[
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2019-11-15 01:41:25",
    "text": "Your best just following the GSAP documentation on GSAP’s site"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-11-15 09:47:51",
    "text": "hey! does anyone have a trick or tool to see quickly if the HubSpot tracking code is triggered on every page of a non HubSpot website? Thanks",
    "reply_count": 68,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-11-15 09:56:34"
      },
      {
        "time_stamp": "2019-11-15 10:59:17"
      },
      {
        "time_stamp": "2019-11-15 11:00:27"
      },
      {
        "time_stamp": "2019-11-15 11:00:57"
      },
      {
        "time_stamp": "2019-11-15 11:01:33"
      },
      {
        "time_stamp": "2019-11-15 11:02:16"
      },
      {
        "time_stamp": "2019-11-15 11:13:46"
      },
      {
        "time_stamp": "2019-11-15 11:14:12"
      },
      {
        "time_stamp": "2019-11-15 11:14:33"
      },
      {
        "time_stamp": "2019-11-15 11:15:35"
      },
      {
        "time_stamp": "2019-11-15 11:18:19"
      },
      {
        "time_stamp": "2019-11-15 11:18:38"
      },
      {
        "time_stamp": "2019-11-15 11:19:28"
      },
      {
        "time_stamp": "2019-11-15 12:09:37"
      },
      {
        "time_stamp": "2019-11-15 12:10:08"
      },
      {
        "time_stamp": "2019-11-15 12:10:17"
      },
      {
        "time_stamp": "2019-11-15 12:10:31"
      },
      {
        "time_stamp": "2019-11-15 12:10:39"
      },
      {
        "time_stamp": "2019-11-15 12:11:08"
      },
      {
        "time_stamp": "2019-11-15 12:11:19"
      },
      {
        "time_stamp": "2019-11-15 12:12:16"
      },
      {
        "time_stamp": "2019-11-15 12:13:31"
      },
      {
        "time_stamp": "2019-11-15 12:13:50"
      },
      {
        "time_stamp": "2019-11-15 12:14:06"
      },
      {
        "time_stamp": "2019-11-15 12:14:31"
      },
      {
        "time_stamp": "2019-11-15 12:15:07"
      },
      {
        "time_stamp": "2019-11-15 12:17:23"
      },
      {
        "time_stamp": "2019-11-15 12:17:46"
      },
      {
        "time_stamp": "2019-11-15 12:42:03"
      },
      {
        "time_stamp": "2019-11-15 12:42:15"
      },
      {
        "time_stamp": "2019-11-15 12:42:33"
      },
      {
        "time_stamp": "2019-11-15 12:52:36"
      },
      {
        "time_stamp": "2019-11-15 13:02:52"
      },
      {
        "time_stamp": "2019-11-15 13:07:15"
      },
      {
        "time_stamp": "2019-11-15 13:48:46"
      },
      {
        "time_stamp": "2019-11-15 13:48:53"
      },
      {
        "time_stamp": "2019-11-18 07:34:31"
      },
      {
        "time_stamp": "2019-11-18 08:04:24"
      },
      {
        "time_stamp": "2019-11-19 07:32:56"
      },
      {
        "time_stamp": "2019-11-19 07:33:13"
      },
      {
        "time_stamp": "2019-11-19 07:41:27"
      },
      {
        "time_stamp": "2019-11-19 07:43:49"
      },
      {
        "time_stamp": "2019-11-19 07:44:00"
      },
      {
        "time_stamp": "2019-11-19 07:44:19"
      },
      {
        "time_stamp": "2019-11-19 07:44:21"
      },
      {
        "time_stamp": "2019-11-19 07:44:41"
      },
      {
        "time_stamp": "2019-11-19 07:44:54"
      },
      {
        "time_stamp": "2019-11-19 07:45:50"
      },
      {
        "time_stamp": "2019-11-19 07:46:34"
      },
      {
        "time_stamp": "2019-11-19 07:47:21"
      },
      {
        "time_stamp": "2019-11-19 07:49:42"
      },
      {
        "time_stamp": "2019-11-19 07:50:12"
      },
      {
        "time_stamp": "2019-11-19 07:50:29"
      },
      {
        "time_stamp": "2019-11-19 07:50:46"
      },
      {
        "time_stamp": "2019-11-19 07:51:00"
      },
      {
        "time_stamp": "2019-11-19 07:51:18"
      },
      {
        "time_stamp": "2019-11-19 07:52:01"
      },
      {
        "time_stamp": "2019-11-19 07:52:20"
      },
      {
        "time_stamp": "2019-11-19 07:54:20"
      },
      {
        "time_stamp": "2019-11-19 07:54:47"
      },
      {
        "time_stamp": "2019-11-19 07:55:09"
      },
      {
        "time_stamp": "2019-11-19 07:55:38"
      },
      {
        "time_stamp": "2019-11-19 08:11:06"
      },
      {
        "time_stamp": "2019-11-19 08:12:34"
      },
      {
        "time_stamp": "2019-11-19 08:13:15"
      },
      {
        "time_stamp": "2019-11-19 08:14:44"
      },
      {
        "time_stamp": "2019-11-19 08:15:17"
      },
      {
        "time_stamp": "2019-11-19 08:16:08"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-11-15 09:56:34",
    "edited": {
      "time_stamp": "2019-11-15 09:56:38"
    },
    "text": "The most reliable way to check I’ve found is to open the network panel for the browser debugger and see if you can see the `_ptq.gif` being loaded there.  That’s the actual pageview event  firing so if that’s working, you know the tracking code is being correctly triggered"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-11-15 10:59:17",
    "text": "i need to do this page by page?"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-11-15 11:00:27",
    "text": "I was thinking of something like getting a list of all pages for a domain with a response of true or false for each"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-11-15 11:00:57",
    "text": "That would work assuming you have had traffic to all those pages within the time period you are searching for, which isn’t always true"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-11-15 11:01:33",
    "text": "but for the vast majority of implementations I’ve seen, if it’s working on one page, it’s working on all of them"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-11-15 11:02:16",
    "text": "I’d love to hear about how you are implementing the tracking code where that may not be the correct assumption"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-11-15 11:13:46",
    "text": "that's the thing the code wasn't implemented by me"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-11-15 11:14:12",
    "text": "I'm auditing a website for a new customer of mine"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-11-15 11:14:33",
    "text": "ah I see, well checking if you have traffic for the pages would at least let you narrow down which ones you want to check manually"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-11-15 11:15:35",
    "text": "I don't have access to the site's code yet and I was wondering if there is a tool like this. But I'll figure something thank you"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-11-15 11:18:19",
    "text": "I would start with this API <https://developers.HubSpot.com/docs/methods/analytics/get-analytics-data-by-object> using the pages as the `object_type` parameter"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-11-15 11:18:38",
    "text": "That will at least let you see what HubSPot is seeing traffic for"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-11-15 11:19:28",
    "text": "nice!"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-11-15 12:09:37",
    "text": "the response is not easy to read lol"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-11-15 12:10:08",
    "text": "any particular questions you have?"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-11-15 12:10:17",
    "text": "even with `JSON.stringify(parsedBody, null, 2);` it stays on one single line"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-11-15 12:10:31",
    "text": "sorry i'm new to programming"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-11-15 12:10:39",
    "text": "or suggestions on what you want the response to look like?"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-11-15 12:11:08",
    "text": "i'd like to have only a list of urls"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-11-15 12:11:19",
    "text": "That doesn’t mean your feedback isn’t valid, I want to hear all thoughts on our api"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-11-15 12:12:16",
    "text": "here's my code for now ```const getPages = { \n  method: 'GET',\n  url: `<https://api.hubapi.com/analytics/v2/reports/pages/total?hapikey=${api_key}&amp;start=20180101&amp;end=20180301`>};\n\n  request(getPages)\n  .then(function (parsedBody) {\nvar jsonContent = JSON.stringify(parsedBody, null, 2);\nconsole.log(jsonContent);\n \nfs.writeFile(\"output.json\", jsonContent, 'utf8', function (err) {\n    if (err) {\n        console.log(\"An error occured while writing JSON Object to File.\");\n        return console.log(err);\n    }\n \n    console.log(\"JSON file has been saved.\");\n});\n  })\n  .catch(function (err) {\n     console.log(err);\n    });```"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-11-15 12:13:31",
    "text": "I was trying to give a readable structure to the output so I could understand it and then add a filter to only see the urls"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-11-15 12:13:50",
    "text": "but I failed at giving a readable structure"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-11-15 12:14:06",
    "text": "gotcha, let me see if I can get you something a bit cleaner and easier to understand"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-11-15 12:14:31",
    "text": "thanks for your help"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-11-15 12:15:07",
    "text": "no problem"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-11-15 12:17:23",
    "edited": {
      "time_stamp": "2019-11-15 12:18:08"
    },
    "text": "here are the requirements by the way"
  },
  {
    "text": "",
    "time_stamp": "2019-11-15 12:17:46"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-11-15 12:42:03",
    "text": "```\nrequest(getPages)\n  .then(function(parsedBody) {\n    const jsObject = JSON.parse(parsedBody);\n    //var jsonContent = JSON.stringify(parsedBody, null, 2);\n    const urls = jsObject.breakdowns.map(breakdown =&gt; {\n      return breakdown.breakdown;\n    });\n    const jsonContent = urls.join(\"\\n\");\n    fs.writeFile(\"output.txt\", jsonContent, \"utf8\", function(err) {\n      if (err) {\n        console.log(\"An error occured while writing TXT Object to File.\");\n        return console.log(err);\n      }\n\n      console.log(\"TXT file has been saved.\");\n    });\n  })\n  .catch(function(err) {\n    console.log(err);\n  });\n```"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-11-15 12:42:15",
    "edited": {
      "time_stamp": "2019-11-15 12:42:17"
    },
    "text": "That should give you a list of URLs, on per line"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-11-15 12:42:33",
    "text": "I’m sure it could be cleaned up a bit but for quick turn aorund it works"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-11-15 12:52:36",
    "text": "so this is all the pages for which the HubSpot tracking code has been triggered?"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-11-15 13:02:52",
    "text": "right, otherwise we wouldn’t see any traffic to them"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-11-15 13:07:15",
    "text": "all right thank you"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-11-15 13:48:46",
    "text": "question is it just one call everytime I run de code or is there a api call for each pages?"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-11-15 13:48:53",
    "text": "the*"
  }
]