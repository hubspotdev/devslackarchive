[
  {
    "poster": {
      "poster_name": "Nikki Bright",
      "poster_handle": "nbright"
    },
    "time_stamp": "2023-02-27 12:36:26",
    "text": "Thank you for the help! That ended up being the issue. When we tested on a non-preview link, the issues went away"
  },
  {
    "poster": {
      "poster_name": "Sasha Sosin",
      "poster_handle": "sasha"
    },
    "time_stamp": "2023-02-27 13:56:27",
    "edited": {
      "time_stamp": "2023-02-27 13:57:26"
    },
    "text": "Is there a quick way to add an \"anchor\" link inside a template? I have a button module from a custom theme, and when clicked I would like the browser to scroll to a specific div ID.",
    "reply_count": 24,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2023-02-27 13:57:45"
      },
      {
        "time_stamp": "2023-02-27 13:58:39"
      },
      {
        "time_stamp": "2023-02-27 13:59:39"
      },
      {
        "time_stamp": "2023-02-27 14:03:05"
      },
      {
        "time_stamp": "2023-02-27 14:16:05"
      },
      {
        "time_stamp": "2023-02-27 14:16:26"
      },
      {
        "time_stamp": "2023-02-27 14:16:54"
      },
      {
        "time_stamp": "2023-02-27 14:18:00"
      },
      {
        "time_stamp": "2023-02-27 14:18:17"
      },
      {
        "time_stamp": "2023-02-27 14:18:32"
      },
      {
        "time_stamp": "2023-02-27 14:18:53"
      },
      {
        "time_stamp": "2023-02-27 14:19:07"
      },
      {
        "time_stamp": "2023-02-27 14:19:28"
      },
      {
        "time_stamp": "2023-02-27 14:19:48"
      },
      {
        "time_stamp": "2023-02-27 14:19:48"
      },
      {
        "time_stamp": "2023-02-27 14:20:18"
      },
      {
        "time_stamp": "2023-02-27 14:20:50"
      },
      {
        "time_stamp": "2023-02-27 14:21:25"
      },
      {
        "time_stamp": "2023-02-27 14:21:40"
      },
      {
        "time_stamp": "2023-02-27 14:22:39"
      },
      {
        "time_stamp": "2023-02-27 14:23:23"
      },
      {
        "time_stamp": "2023-02-27 14:24:20"
      },
      {
        "time_stamp": "2023-02-27 14:33:11"
      },
      {
        "time_stamp": "2023-02-27 14:38:28"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jake Lett",
      "poster_handle": "jacoblett"
    },
    "time_stamp": "2023-02-27 13:57:45",
    "text": "Rich text field is a quick way"
  },
  {
    "poster": {
      "poster_name": "Sasha Sosin",
      "poster_handle": "sasha"
    },
    "time_stamp": "2023-02-27 13:58:39",
    "text": "I'm trying to get it to scroll to a contact form :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Sasha Sosin",
      "poster_handle": "sasha"
    },
    "time_stamp": "2023-02-27 13:59:39",
    "text": "I could use javascript but was hoping there's something built-in with HubL"
  },
  {
    "poster": {
      "poster_name": "Dustin Perolio",
      "poster_handle": "dustin.perolio"
    },
    "time_stamp": "2023-02-27 14:03:05",
    "edited": {
      "time_stamp": "2023-02-27 14:07:20"
    },
    "text": "You could try placing a rich text area above the contact form with only an anchor in it. I personally just use a custom Anchor section coupled with a custom Anchor module. :laughing:"
  },
  {
    "poster": {
      "poster_name": "Sasha Sosin",
      "poster_handle": "sasha"
    },
    "time_stamp": "2023-02-27 14:05:56",
    "edited": {
      "time_stamp": "2023-02-27 14:06:06"
    },
    "text": "Can someone explain what these are doing? I'm new to programming but I can make a very basic for loop in hubL"
  },
  {
    "poster": {
      "poster_name": "Bradley",
      "poster_handle": "bradley554"
    },
    "time_stamp": "2023-02-27 14:10:53",
    "text": "`{{ item.size or 18 }}`\n\nit this example, if `item.size`  is null or empty it will print 18. If its not null it'll print whateven `item.size`  is equal to"
  },
  {
    "poster": {
      "poster_name": "Sasha Sosin",
      "poster_handle": "sasha"
    },
    "time_stamp": "2023-02-27 14:11:50",
    "text": "an nice"
  },
  {
    "poster": {
      "poster_name": "Sasha Sosin",
      "poster_handle": "sasha"
    },
    "time_stamp": "2023-02-27 14:11:52",
    "text": "that's elegant"
  },
  {
    "poster": {
      "poster_name": "Dustin Perolio",
      "poster_handle": "dustin.perolio"
    },
    "time_stamp": "2023-02-27 14:11:57",
    "edited": {
      "time_stamp": "2023-02-27 14:13:08"
    },
    "text": "The first one is saying, “If `item.size` doesn’t have a value, assign it a value of 18”, while the second one is similar, but different; it uses something called “short-circuit evaluation”, which basically means it will continue evaluating until it reaches a value that isn’t falsy. e.g. in the case of `{{ item.size or 18 }}` (also note this is the exact same thing as `{{ item.size || 18 }}` but written differently), it will use the value from `item.size` if it is not a falsy value, otherwise, it will move on to `18` which is a number and not a falsy value, so it will use that. They can be chained and the pattern will continue as well, so `{{ pie || cake || food || 'yum' }}`"
  },
  {
    "poster": {
      "poster_name": "Sasha Sosin",
      "poster_handle": "sasha"
    },
    "time_stamp": "2023-02-27 14:12:56",
    "text": "what's a falsly value?"
  },
  {
    "poster": {
      "poster_name": "Dustin Perolio",
      "poster_handle": "dustin.perolio"
    },
    "time_stamp": "2023-02-27 14:13:34",
    "text": "0, null, undefined, ‘’ (empty string)"
  },
  {
    "poster": {
      "poster_name": "Sasha Sosin",
      "poster_handle": "sasha"
    },
    "time_stamp": "2023-02-27 14:13:57",
    "text": "cool thanks!"
  },
  {
    "poster": {
      "poster_name": "Dustin Perolio",
      "poster_handle": "dustin.perolio"
    },
    "time_stamp": "2023-02-27 14:14:14",
    "edited": {
      "time_stamp": "2023-02-27 14:14:33"
    },
    "text": "That’s where it differs from `|default`."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-27 14:15:16",
    "text": "good stuff here!"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-27 14:15:22",
    "text": "thanks for explaining that dustin :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Sasha Sosin",
      "poster_handle": "sasha"
    },
    "time_stamp": "2023-02-27 14:16:01",
    "text": "is there a difference in what you can use this for? or are they functionally the same?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-27 14:16:05",
    "text": "```&lt;section class=\"jump-link-module\"&gt;\n\t&lt;a id=\"{{ module.jump_link_name }}\"&gt;&lt;/a&gt;\n&lt;/section&gt;```"
  },
  {
    "poster": {
      "poster_name": "Dustin Perolio",
      "poster_handle": "dustin.perolio"
    },
    "time_stamp": "2023-02-27 14:16:18",
    "edited": {
      "time_stamp": "2023-02-27 14:16:42"
    },
    "text": "0 is falsy, but it’s still a value, so if `pie` is `0`, `{{ pie|default(3) }}`  should still output `0`. But `{{ pie || 3 }}` would output `3`."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-27 14:16:26",
    "text": "Create a simple module, you can then drag and drop it in to the page using the DND editor if you don’t want to use rich text areas"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-27 14:16:54",
    "text": "you can also modify your module where the form is to have the same sort of input"
  },
  {
    "poster": {
      "poster_name": "Sasha Sosin",
      "poster_handle": "sasha"
    },
    "time_stamp": "2023-02-27 14:18:00",
    "text": "this is for a blog post template, drag and drop is not supported."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-27 14:18:17",
    "text": "you want this inside the blog post?"
  },
  {
    "poster": {
      "poster_name": "Sasha Sosin",
      "poster_handle": "sasha"
    },
    "time_stamp": "2023-02-27 14:18:32",
    "text": "nah, outside"
  },
  {
    "poster": {
      "poster_name": "Dustin Perolio",
      "poster_handle": "dustin.perolio"
    },
    "time_stamp": "2023-02-27 14:18:37",
    "edited": {
      "time_stamp": "2023-02-27 14:20:04"
    },
    "text": "They aren’t functionally the same. As to when you would use one or the other, it depends on if you care about falsy values or not. In practice, I personally almost always use `||`. They can often be used interchangeably, but they still aren’t exactly the same, as demonstrated in my previous message."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-27 14:18:53",
    "text": "then you’ll need to set it in a module"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-27 14:19:07",
    "text": "you can also add the module to the template, not needing to insert via drag and drop"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-27 14:19:28",
    "text": "the drag and drop concept is more of a “hey this is super easy to use” but you can hard code it into the template, the module, etc"
  },
  {
    "poster": {
      "poster_name": "Sasha Sosin",
      "poster_handle": "sasha"
    },
    "time_stamp": "2023-02-27 14:19:48",
    "text": "i just dont know what's the syntax to code the anchor functionality"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-27 14:19:48",
    "text": "```&lt;a id=\"#whatever-works\"&gt;&lt;/a&gt;```"
  },
  {
    "poster": {
      "poster_name": "Sasha Sosin",
      "poster_handle": "sasha"
    },
    "time_stamp": "2023-02-27 14:20:18",
    "text": "is that the section that will be scrolled to? or is that how the link should be formatted?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-27 14:20:50",
    "text": "then to get to that jump point, you would do `&lt;a href=\"#whatever-works\"&gt;Kris Kross will make you jump jump&lt;/a&gt;`"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-27 14:21:25",
    "text": "<https://blog.HubSpot.com/marketing/jump-link-same-page>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-02-27 14:21:40",
    "text": "the code blocks on that page are a bit terrible"
  },
  {
    "text": "will this work?",
    "time_stamp": "2023-02-27 14:22:39"
  },
  {
    "poster": {
      "poster_name": "Dustin Perolio",
      "poster_handle": "dustin.perolio"
    },
    "time_stamp": "2023-02-27 14:23:23",
    "text": "Yeah."
  },
  {
    "poster": {
      "poster_name": "Sasha Sosin",
      "poster_handle": "sasha"
    },
    "time_stamp": "2023-02-27 14:24:20",
    "text": "sweet thanks guys!"
  },
  {
    "text": "what would be the correct url type for this button?",
    "time_stamp": "2023-02-27 14:33:11"
  },
  {
    "poster": {
      "poster_name": "Sasha Sosin",
      "poster_handle": "sasha"
    },
    "time_stamp": "2023-02-27 14:38:28",
    "text": "ah. either way. it worked! thank youuuuu"
  }
]