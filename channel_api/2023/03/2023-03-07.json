[
  {
    "text": "Hi. I am using HubSpot APIs on the local react app with the private app access token. There, I am getting CORS errors like this. How can I solve this?",
    "time_stamp": "2023-03-07 02:32:34",
    "reply_count": 15,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-03-07 07:30:26"
      },
      {
        "time_stamp": "2023-03-07 08:53:41"
      },
      {
        "time_stamp": "2023-03-07 11:33:33"
      },
      {
        "time_stamp": "2023-03-07 11:38:43"
      },
      {
        "time_stamp": "2023-03-07 11:50:47"
      },
      {
        "time_stamp": "2023-03-07 11:52:43"
      },
      {
        "time_stamp": "2023-03-07 11:55:39"
      },
      {
        "time_stamp": "2023-03-07 11:56:09"
      },
      {
        "time_stamp": "2023-03-07 12:00:59"
      },
      {
        "time_stamp": "2023-03-07 12:05:22"
      },
      {
        "time_stamp": "2023-03-07 12:05:25"
      },
      {
        "time_stamp": "2023-03-07 12:06:02"
      },
      {
        "time_stamp": "2023-03-07 12:11:39"
      },
      {
        "time_stamp": "2023-03-07 12:12:42"
      },
      {
        "time_stamp": "2023-03-07 12:13:03"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jacob Jennings",
      "poster_handle": "jacob550"
    },
    "time_stamp": "2023-03-07 07:30:26",
    "text": "<https://community.HubSpot.com/t5/APIs-Integrations/CORS-issue/m-p/306388/highlight/true#M29031>"
  },
  {
    "poster": {
      "poster_name": "Agustin Zamar",
      "poster_handle": "azamar"
    },
    "time_stamp": "2023-03-07 08:02:56",
    "text": "Hi guys, Is it possible to fetch an specific object using a property different than the ID?",
    "reply_count": 5,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-03-07 08:07:01"
      },
      {
        "time_stamp": "2023-03-07 08:30:07"
      },
      {
        "time_stamp": "2023-03-07 08:31:01"
      },
      {
        "time_stamp": "2023-03-07 08:31:26"
      },
      {
        "time_stamp": "2023-03-07 08:31:46"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 08:07:01",
    "text": "yep if the property is a unique property you can use the idProperty parameter"
  },
  {
    "poster": {
      "poster_name": "Agustin Zamar",
      "poster_handle": "azamar"
    },
    "time_stamp": "2023-03-07 08:30:07",
    "text": "I dont have unique properties and canâ€™t convert an exisiting property to unique"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 08:31:01",
    "text": "so your only option is to use the search endpoint to do that search"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 08:31:26",
    "text": "<https://developers.HubSpot.com/docs/api/crm/search#filter-search-results>"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 08:31:46",
    "text": "In that above example you just need to swap firstname with the name of your property"
  },
  {
    "poster": {
      "poster_name": "Helen Brown",
      "poster_handle": "helen.brown"
    },
    "time_stamp": "2023-03-07 08:34:18",
    "text": "Hi there, truly hoping someone can help. We currently use V3 of the API, and want to set specific companies as the 'primary' association label of all contacts. Is this possible to do on V3? I've been told by HubSpot that it's available on V4, however I don't know what are (if any) the implications of moving everything to V4, or whether they could run alongside each other?",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-03-07 08:35:51"
      },
      {
        "time_stamp": "2023-03-07 08:36:46"
      },
      {
        "time_stamp": "2023-03-08 04:32:05"
      },
      {
        "time_stamp": "2023-03-08 06:51:31"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 08:35:51",
    "text": "they can run alongside each other"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 08:36:46",
    "edited": {
      "time_stamp": "2023-03-08 06:51:27"
    },
    "text": "also the v4 endpoints are pretty much all backwards compatible with the v3 endpoints. couple of things that are different is the schemas and associations endpoint"
  },
  {
    "poster": {
      "poster_name": "Abhishek Nagula",
      "poster_handle": "anagula"
    },
    "time_stamp": "2023-03-07 08:44:04",
    "text": "<@U01QVR44MEY> is their a way to get object schemas of default objects as well?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 08:44:27",
    "text": "yes, you just have to hit the endpoint"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 08:44:39",
    "text": "so like `/crm/v3/schemas/contacts`"
  },
  {
    "poster": {
      "poster_name": "Sanjana Rajapakshe",
      "poster_handle": "sanjana"
    },
    "time_stamp": "2023-03-07 08:53:41",
    "text": "Thank you for the response. Now I am trying to call the API through a proxy from my backend application. And I am using the private app's access token to call that API. Now it's giving a forbidden error. Can anyone give a solution?"
  },
  {
    "poster": {
      "poster_name": "Chad Andersen",
      "poster_handle": "chad.andersen"
    },
    "time_stamp": "2023-03-07 09:10:58",
    "text": "Hey all! Trying to figure out the best way to retrieve all properties from 60k tickets, without loading up our daily API calls! What is the best way to do this in bulk so we don't max out our daily allowance of calls. Seems very inefficient, but I'm pretty new to this API and maybe I'm missing something. I'm trying to use either Ruby or Python for this API.",
    "reply_count": 13,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-03-07 09:11:44"
      },
      {
        "time_stamp": "2023-03-07 09:13:05"
      },
      {
        "time_stamp": "2023-03-07 09:13:44"
      },
      {
        "time_stamp": "2023-03-07 09:14:06"
      },
      {
        "time_stamp": "2023-03-07 09:18:42"
      },
      {
        "time_stamp": "2023-03-07 09:19:06"
      },
      {
        "time_stamp": "2023-03-07 09:19:21"
      },
      {
        "time_stamp": "2023-03-07 09:20:25"
      },
      {
        "time_stamp": "2023-03-07 09:22:05"
      },
      {
        "time_stamp": "2023-03-07 09:22:32"
      },
      {
        "time_stamp": "2023-03-07 09:22:51"
      },
      {
        "time_stamp": "2023-03-07 10:20:04"
      },
      {
        "time_stamp": "2023-03-07 10:58:14"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 09:11:44",
    "text": "you could use the export tool"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 09:13:05",
    "text": "That's really the best way"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 09:13:44",
    "text": "and if you're trying to do a sync with another tool/database I would suggest doing an export first and then connecting the sync so you only have to sync changes after that point"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 09:14:06",
    "edited": {
      "time_stamp": "2023-03-07 09:14:12"
    },
    "text": "which would cut down on the api calls by a exponential amount"
  },
  {
    "poster": {
      "poster_name": "Chad Andersen",
      "poster_handle": "chad.andersen"
    },
    "time_stamp": "2023-03-07 09:18:42",
    "text": "Thanks <@U01QVR44MEY>, 1 time export then syncing sounds perfect, although I'm not sure how I would query only the changes? Seems like there's barely any documentation on this functionality for Python :confused:"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 09:19:06",
    "text": "You could use webhooks"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 09:19:21",
    "text": "<https://developers.HubSpot.com/docs/api/webhooks>"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 09:20:25",
    "text": "PSA: DON\"T USE THE PYTHON SDK, I would use the direct endpoints, the SDK just isn't really well maintained and you'll get up spending a lot of time trying to do simple things"
  },
  {
    "poster": {
      "poster_name": "Chad Andersen",
      "poster_handle": "chad.andersen"
    },
    "time_stamp": "2023-03-07 09:22:05",
    "text": "Haha exactly why I'm here I guess! I'll shift over to webhooks!! Really appreciate the quick responses! This was more helpful than a days worth of browsing the docs trying to find Python resources."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 09:22:32",
    "text": "yes of course, hit me up if you run into any issues"
  },
  {
    "poster": {
      "poster_name": "Chad Andersen",
      "poster_handle": "chad.andersen"
    },
    "time_stamp": "2023-03-07 09:22:51",
    "text": "Will do, thanks!"
  },
  {
    "poster": {
      "poster_name": "Laura Evans",
      "poster_handle": "laura146"
    },
    "time_stamp": "2023-03-07 09:28:47",
    "text": "If I already have an api secondary domain established in my HubSpot account and my developer wants to attach another IP address to it for website page calls, is that possible or do I need to create a new domain?"
  },
  {
    "poster": {
      "poster_name": "Abhishek Nagula",
      "poster_handle": "anagula"
    },
    "time_stamp": "2023-03-07 09:29:25",
    "text": "is there also an API that returns list of Objects?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 09:30:02",
    "text": "not really, there's around 130 objects total"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 09:30:06",
    "text": "do you want all of them?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 09:30:23",
    "text": "or do you just want the common ones like contacts, companies, tickets, deals"
  },
  {
    "poster": {
      "poster_name": "Abhishek Nagula",
      "poster_handle": "anagula"
    },
    "time_stamp": "2023-03-07 09:30:29",
    "text": "common ones"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 09:30:48",
    "text": "ok then just use the names above with the above api"
  },
  {
    "poster": {
      "poster_name": "Sudhakar",
      "poster_handle": "wpsupport"
    },
    "time_stamp": "2023-03-07 09:48:20",
    "edited": {
      "time_stamp": "2023-03-07 09:48:51"
    },
    "text": "Hi, Need some help to fetch deals with association data using DEAL-ID. I have tested this API in post man <https://api.hubapi.com/crm/v3/objects/deals/:dealID>. It was working fine. But it displaying only deals data without associations. Can anyone please let me know what was the issue.",
    "reply_count": 11,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-03-07 09:50:26"
      },
      {
        "time_stamp": "2023-03-07 09:51:02"
      },
      {
        "time_stamp": "2023-03-07 09:51:07"
      },
      {
        "time_stamp": "2023-03-07 19:28:14"
      },
      {
        "time_stamp": "2023-03-07 19:31:33"
      },
      {
        "time_stamp": "2023-03-08 07:31:28"
      },
      {
        "time_stamp": "2023-03-08 07:31:58"
      },
      {
        "time_stamp": "2023-03-08 07:46:12"
      },
      {
        "time_stamp": "2023-03-09 03:15:27"
      },
      {
        "time_stamp": "2023-03-09 07:38:02"
      },
      {
        "time_stamp": "2023-03-09 07:38:08"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 09:50:26",
    "text": "what types of associations do you want?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 09:51:02",
    "text": "adding `&amp;associations=contacts,companies`  will pull in the contact and company associations"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 09:51:07",
    "text": "to the url"
  },
  {
    "poster": {
      "poster_name": "Chad Andersen",
      "poster_handle": "chad.andersen"
    },
    "time_stamp": "2023-03-07 10:20:04",
    "edited": {
      "time_stamp": "2023-03-07 10:23:10"
    },
    "text": "Hey <@U01QVR44MEY> - I think i was reading what you said wrong - you meant for me to manually use the export tool in HubSpot, then set up webhooks for any time a ticket is updated to push the update in to my side database for an update? I'm actually not sure if this works for us. What would be ideal is if we could just use an API to pull the export (we have a view set up) daily... We have more downstream automations that happen with the XLSX from the view. Don't have a side database set up for this."
  },
  {
    "poster": {
      "poster_name": "Eric Goldman",
      "poster_handle": "eric732"
    },
    "time_stamp": "2023-03-07 10:58:14",
    "text": "Hey <@U04SSFH4VJ6> â€” maybe consider the product we built â†’ <https://sequin.io|Sequin>\n\nWeâ€™ll sync all your tickets to your database in real-time. Then, when all the data is in a DB, you can easily automate this workflow into Excel. Iâ€™d be happy to show you how it works if you have some time today."
  },
  {
    "poster": {
      "poster_name": "Jacob Jennings",
      "poster_handle": "jacob550"
    },
    "time_stamp": "2023-03-07 11:33:33",
    "text": "Are you passing the private app access token as an Authorization header with Bearer app_token"
  },
  {
    "poster": {
      "poster_name": "Sanjana Rajapakshe",
      "poster_handle": "sanjana"
    },
    "time_stamp": "2023-03-07 11:38:43",
    "text": "yes"
  },
  {
    "poster": {
      "poster_name": "Jacob Jennings",
      "poster_handle": "jacob550"
    },
    "time_stamp": "2023-03-07 11:50:47",
    "text": "Are you able to paste the code you are using to call the API (excluding the private app token)"
  },
  {
    "poster": {
      "poster_name": "Sanjana Rajapakshe",
      "poster_handle": "sanjana"
    },
    "time_stamp": "2023-03-07 11:52:43",
    "text": "<https://api.hubapi.com/crm/v3/objects/contacts?limit=100> this one"
  },
  {
    "poster": {
      "poster_name": "Sanjana Rajapakshe",
      "poster_handle": "sanjana"
    },
    "time_stamp": "2023-03-07 11:55:39",
    "text": "```axios.get('<https://api.hubapi.com/crm/v3/objects/contacts>',\n  {\n    headers: {\n      'Authorization': `Bearer ${YOUR_TOKEN}`,\n      'Content-Type': 'application/json'\n    }\n  },\n  (err, data) =&gt; {\n    // Handle the API response\n  }\n);```\n"
  },
  {
    "poster": {
      "poster_name": "Jacob Jennings",
      "poster_handle": "jacob550"
    },
    "time_stamp": "2023-03-07 11:56:09",
    "text": "What is the full error you are receiving ?"
  },
  {
    "poster": {
      "poster_name": "Chris Prosser",
      "poster_handle": "cprosser"
    },
    "time_stamp": "2023-03-07 11:57:44",
    "text": "Hello,\n\nI am in the process of updating from the v1 API to v3 (late to the party, I know).\n\nMy organization uses the API to keep our Tableau reports up to date in as close to real time as possible, so we only want to see the records that have been updated recently.\n\nFor CRM objects I am accomplishing this by querying the SEARCH api filtered by hs_lastmodifieddate then sending each page of 100 ids to the BATCH READ endpoint.\n\nMy problem is with associations. I don't see any way to retrieve associations in batches. Retrieving them one id at a time will require too many api calls, and retrieving the entire list of objects with associations is too much data for the job that runs every 10 - 15 minutes to handle.\n\nI am just hoping someone here can point out something I've missed. Thanks in advance!",
    "reply_count": 5,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-03-07 12:05:40"
      },
      {
        "time_stamp": "2023-03-07 12:12:33"
      },
      {
        "time_stamp": "2023-03-07 18:07:04"
      },
      {
        "time_stamp": "2023-03-07 19:04:41"
      },
      {
        "time_stamp": "2023-03-07 19:05:48"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Sanjana Rajapakshe",
      "poster_handle": "sanjana"
    },
    "time_stamp": "2023-03-07 12:00:59",
    "text": "Error: Request failed with status code 403\n    at createError (createError.js:16:1)\n    at settle (settle.js:18:1)\n    at XMLHttpRequest.handleLoad (xhr.js:59:1)"
  },
  {
    "text": "",
    "time_stamp": "2023-03-07 12:05:22"
  },
  {
    "poster": {
      "poster_name": "Jacob Jennings",
      "poster_handle": "jacob550"
    },
    "time_stamp": "2023-03-07 12:05:25",
    "text": "did you check this box when you created your private app token?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 12:05:40",
    "text": "Are you trying to pull in associations for multiple object pairs? or all associations per object?"
  },
  {
    "poster": {
      "poster_name": "Sanjana Rajapakshe",
      "poster_handle": "sanjana"
    },
    "time_stamp": "2023-03-07 12:06:02",
    "text": "Yes"
  },
  {
    "poster": {
      "poster_name": "Jacob Jennings",
      "poster_handle": "jacob550"
    },
    "time_stamp": "2023-03-07 12:11:39",
    "text": "give that a whirl"
  },
  {
    "poster": {
      "poster_name": "Chris Prosser",
      "poster_handle": "cprosser"
    },
    "time_stamp": "2023-03-07 12:12:33",
    "text": "All associations for all Engagements objects that were recently added or updated. So if, for example, I search for all Calls in the last 24 hours and get 100 records back, I would like to be able to get all associations along with the other properties for those calls."
  },
  {
    "poster": {
      "poster_name": "Jacob Jennings",
      "poster_handle": "jacob550"
    },
    "time_stamp": "2023-03-07 12:12:42",
    "text": "oops that looks silly"
  },
  {
    "poster": {
      "poster_name": "Jacob Jennings",
      "poster_handle": "jacob550"
    },
    "time_stamp": "2023-03-07 12:13:03",
    "text": "```\n  axios.get('<https://api.hubapi.com/crm/v3/objects/contacts>',\n    {\n      headers: {\n        'Authorization': `Bearer ${YOUR_TOKEN}`,\n        'Content-Type': 'application/json'\n      }\n    }\n  ).then((response) =&gt; {\n    const data = response.data;\n    console.log(JSON.stringify(data, null, 2))\n  }).catch((err) =&gt; {\n    console.log(err)\n  })```"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:28:23",
    "text": "Hey there.. I'm trying to get the HubSpot \"search contact\" API call to work, but I keep getting a \"405 - Method Not Allowed\"..Â Any ideas??",
    "reply_count": 93,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-03-07 13:29:20"
      },
      {
        "time_stamp": "2023-03-07 13:29:27"
      },
      {
        "time_stamp": "2023-03-07 13:29:49"
      },
      {
        "time_stamp": "2023-03-07 13:30:03"
      },
      {
        "time_stamp": "2023-03-07 13:30:28"
      },
      {
        "time_stamp": "2023-03-07 13:30:32"
      },
      {
        "time_stamp": "2023-03-07 13:30:55"
      },
      {
        "time_stamp": "2023-03-07 13:31:06"
      },
      {
        "time_stamp": "2023-03-07 13:31:09"
      },
      {
        "time_stamp": "2023-03-07 13:31:16"
      },
      {
        "time_stamp": "2023-03-07 13:31:43"
      },
      {
        "time_stamp": "2023-03-07 13:32:02"
      },
      {
        "time_stamp": "2023-03-07 13:32:04"
      },
      {
        "time_stamp": "2023-03-07 13:32:09"
      },
      {
        "time_stamp": "2023-03-07 13:32:29"
      },
      {
        "time_stamp": "2023-03-07 13:32:56"
      },
      {
        "time_stamp": "2023-03-07 13:34:38"
      },
      {
        "time_stamp": "2023-03-07 13:35:16"
      },
      {
        "time_stamp": "2023-03-07 13:35:24"
      },
      {
        "time_stamp": "2023-03-07 13:35:26"
      },
      {
        "time_stamp": "2023-03-07 13:35:28"
      },
      {
        "time_stamp": "2023-03-07 13:37:13"
      },
      {
        "time_stamp": "2023-03-07 13:37:15"
      },
      {
        "time_stamp": "2023-03-07 13:37:48"
      },
      {
        "time_stamp": "2023-03-07 13:37:52"
      },
      {
        "time_stamp": "2023-03-07 13:38:04"
      },
      {
        "time_stamp": "2023-03-07 13:40:18"
      },
      {
        "time_stamp": "2023-03-07 13:40:39"
      },
      {
        "time_stamp": "2023-03-07 13:40:59"
      },
      {
        "time_stamp": "2023-03-07 13:41:24"
      },
      {
        "time_stamp": "2023-03-07 13:41:43"
      },
      {
        "time_stamp": "2023-03-07 13:41:45"
      },
      {
        "time_stamp": "2023-03-07 13:41:54"
      },
      {
        "time_stamp": "2023-03-07 13:41:57"
      },
      {
        "time_stamp": "2023-03-07 13:42:30"
      },
      {
        "time_stamp": "2023-03-07 13:42:49"
      },
      {
        "time_stamp": "2023-03-07 13:43:29"
      },
      {
        "time_stamp": "2023-03-07 13:43:47"
      },
      {
        "time_stamp": "2023-03-07 13:43:58"
      },
      {
        "time_stamp": "2023-03-07 13:44:08"
      },
      {
        "time_stamp": "2023-03-07 13:44:09"
      },
      {
        "time_stamp": "2023-03-07 13:44:18"
      },
      {
        "time_stamp": "2023-03-07 13:46:32"
      },
      {
        "time_stamp": "2023-03-07 13:47:58"
      },
      {
        "time_stamp": "2023-03-07 13:48:34"
      },
      {
        "time_stamp": "2023-03-07 13:48:40"
      },
      {
        "time_stamp": "2023-03-07 13:48:53"
      },
      {
        "time_stamp": "2023-03-07 13:49:01"
      },
      {
        "time_stamp": "2023-03-07 13:49:14"
      },
      {
        "time_stamp": "2023-03-07 13:49:44"
      },
      {
        "time_stamp": "2023-03-07 13:49:55"
      },
      {
        "time_stamp": "2023-03-07 13:50:27"
      },
      {
        "time_stamp": "2023-03-07 13:50:40"
      },
      {
        "time_stamp": "2023-03-07 13:51:29"
      },
      {
        "time_stamp": "2023-03-07 17:11:58"
      },
      {
        "time_stamp": "2023-03-07 18:11:23"
      },
      {
        "time_stamp": "2023-03-07 18:12:16"
      },
      {
        "time_stamp": "2023-03-07 18:12:22"
      },
      {
        "time_stamp": "2023-03-07 18:12:26"
      },
      {
        "time_stamp": "2023-03-07 18:12:48"
      },
      {
        "time_stamp": "2023-03-07 18:13:02"
      },
      {
        "time_stamp": "2023-03-07 18:14:19"
      },
      {
        "time_stamp": "2023-03-07 18:14:58"
      },
      {
        "time_stamp": "2023-03-07 18:21:01"
      },
      {
        "time_stamp": "2023-03-07 18:21:59"
      },
      {
        "time_stamp": "2023-03-07 18:22:01"
      },
      {
        "time_stamp": "2023-03-07 18:48:05"
      },
      {
        "time_stamp": "2023-03-07 18:48:16"
      },
      {
        "time_stamp": "2023-03-07 18:48:40"
      },
      {
        "time_stamp": "2023-03-07 18:49:43"
      },
      {
        "time_stamp": "2023-03-07 18:49:48"
      },
      {
        "time_stamp": "2023-03-07 18:52:03"
      },
      {
        "time_stamp": "2023-03-07 18:52:05"
      },
      {
        "time_stamp": "2023-03-07 18:53:39"
      },
      {
        "time_stamp": "2023-03-07 18:53:46"
      },
      {
        "time_stamp": "2023-03-07 18:54:02"
      },
      {
        "time_stamp": "2023-03-07 18:54:23"
      },
      {
        "time_stamp": "2023-03-07 18:54:28"
      },
      {
        "time_stamp": "2023-03-07 18:54:32"
      },
      {
        "time_stamp": "2023-03-07 18:54:36"
      },
      {
        "time_stamp": "2023-03-07 18:54:45"
      },
      {
        "time_stamp": "2023-03-07 18:54:47"
      },
      {
        "time_stamp": "2023-03-07 18:55:05"
      },
      {
        "time_stamp": "2023-03-07 18:55:44"
      },
      {
        "time_stamp": "2023-03-07 19:08:44"
      },
      {
        "time_stamp": "2023-03-07 19:10:32"
      },
      {
        "time_stamp": "2023-03-07 19:12:42"
      },
      {
        "time_stamp": "2023-03-07 19:13:03"
      },
      {
        "time_stamp": "2023-03-07 19:13:21"
      },
      {
        "time_stamp": "2023-03-07 19:16:43"
      },
      {
        "time_stamp": "2023-03-07 19:17:15"
      },
      {
        "time_stamp": "2023-03-07 19:17:38"
      },
      {
        "time_stamp": "2023-03-07 19:19:25"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 13:29:20",
    "text": "Are you using POST?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 13:29:27",
    "text": "<https://HubSpotdev.slack.com/archives/C2YHAHB6K/p1678155677282779>"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:29:49",
    "text": "yes.. with postman .."
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:30:03",
    "text": "I've tested multiple payloads from multiple examples.."
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:30:28",
    "text": "{\nÂ Â Â Â \"after\":Â \"0\",\nÂ Â Â Â \"filterGroups\":Â [\nÂ Â Â Â Â Â Â Â {\nÂ Â Â Â Â Â Â Â Â Â Â Â \"filters\":Â [\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \"operator\":Â \"IN\",\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \"propertyName\":Â \"firstname\",\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \"value\":Â \"Scott\"\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â }\nÂ Â Â Â Â Â Â Â Â Â Â Â ]\nÂ Â Â Â Â Â Â Â }\nÂ Â Â Â \"limit\":Â \"100\",\nÂ Â Â Â \"properties\":Â [\nÂ Â Â Â Â Â Â Â \"firstname\",\nÂ Â Â Â Â Â Â Â \"lastname\"\nÂ Â Â Â ],\nÂ Â Â Â \"sorts\":Â [\nÂ Â Â Â Â Â Â Â \"lastname\"\nÂ Â Â Â ]\nÂ Â Â Â ,\"query\":Â \"firstname\"\n}"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:30:32",
    "text": "last one i tried"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 13:30:55",
    "text": "Can you send over a postman screenshot?"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:31:06",
    "text": "which window?"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:31:09",
    "text": "body?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 13:31:16",
    "text": "really the only reason for that error is that you're either endpoint or the wrong method"
  },
  {
    "text": "",
    "time_stamp": "2023-03-07 13:31:43"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 13:32:02",
    "text": ":object_type replace with contact"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 13:32:04",
    "text": "or 0-1"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:32:09",
    "text": ":object_type = \"contacts\""
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:32:29",
    "text": "one sec"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 13:32:56",
    "text": "you also need a , after } just before \"limit\""
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:34:38",
    "text": "one sec"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:35:16",
    "text": "{\nÂ Â Â Â \"filterGroups\":[\nÂ Â Â Â Â Â {\nÂ Â Â Â Â Â Â Â \"filters\":[\nÂ Â Â Â Â Â Â Â Â Â {\nÂ Â Â Â Â Â Â Â Â Â Â Â \"propertyName\":Â \"firstname\",\nÂ Â Â Â Â Â Â Â Â Â Â Â \"operator\":Â \"IN\",\nÂ Â Â Â Â Â Â Â Â Â Â Â \"value\":Â \"Scott\"\nÂ Â Â Â Â Â Â Â Â Â }\nÂ Â Â Â Â Â Â Â ]\nÂ Â Â Â Â Â }\nÂ Â Â Â ]\nÂ Â }"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:35:24",
    "text": "there's a better JSON payload"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:35:26",
    "text": "still same"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:35:28",
    "text": "result"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:37:13",
    "text": "Fixed the previous one also..."
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:37:15",
    "text": "{\n    \"after\": \"0\",\n    \"filterGroups\": [\n        {\n            \"filters\": [\n                {\n                    \"operator\": \"IN\",\n                    \"propertyName\": \"firstname\",\n                    \"value\": \"Scott\"\n                }\n            ]\n        }],\n    \"limit\": \"100\",\n    \"properties\": [\n        \"firstname\",\n        \"lastname\"\n    ],\n    \"sorts\": [\n        \"lastname\"\n    ]\n    ,\"query\": \"firstname\"\n}"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 13:37:48",
    "text": "do you want to just try this url? <https://api.hubapi.com/crm/v3/objects/contacts/search>"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 13:37:52",
    "text": "paste it in directly"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 13:38:04",
    "text": "just ran a test on my end and everything was fine"
  },
  {
    "text": "",
    "time_stamp": "2023-03-07 13:40:18"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 13:40:39",
    "edited": {
      "time_stamp": "2023-03-07 13:40:42"
    },
    "text": "you're not using the url I just sent you..."
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:40:59",
    "text": "v3 vs v4"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 13:41:24",
    "text": "v3 != v4"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:41:43",
    "text": "correct... v4 should work also.. i'm pulling from v4 docs .."
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:41:45",
    "text": "ugh"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:41:54",
    "text": "one sec"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 13:41:57",
    "text": "here's the search docs: <https://developers.HubSpot.com/docs/api/crm/search>"
  },
  {
    "text": "",
    "time_stamp": "2023-03-07 13:42:30"
  },
  {
    "text": "",
    "time_stamp": "2023-03-07 13:42:49"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:43:29",
    "text": "I've poured over these .. obviously they've broken it in v4 .."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 13:43:47",
    "edited": {
      "time_stamp": "2023-03-07 13:44:28"
    },
    "text": "there was no v4 search endpoint"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 13:43:58",
    "text": "what are you referring to? Did you see it somewhere?"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:44:08",
    "text": "yes ... there are v4 endpoints.."
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:44:09",
    "text": "one sec"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 13:44:18",
    "text": "no v4 search endpoint"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:46:32",
    "edited": {
      "time_stamp": "2023-03-07 13:47:32"
    },
    "text": "how silly!!  list, create, delete in v4 ... nothing else ... that's gonna mess a lot of people up .."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 13:47:58",
    "text": "associations is also in v4"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 13:48:34",
    "text": "search is very much a separate applications, different rate limits even so makes sense that it would be a different endpoint"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:48:40",
    "text": "there are quite a few in v4, but not all .. most api's stretch all calls over the version.. notjust \"some\" of them.."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 13:48:53",
    "text": "as long as you're following the docs you should have no issues"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:49:01",
    "text": "the versioning is the weirdness here.."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 13:49:14",
    "text": "the docs tell you which version to use"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 13:49:44",
    "text": "not saying you're wrong"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:49:55",
    "text": "Yeah, with HubSpot, i'll not assume the v4 is \"enabled\" or \"released\""
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 13:50:27",
    "text": "ok"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 13:50:40",
    "edited": {
      "time_stamp": "2023-03-07 13:50:48"
    },
    "text": "thanks for the help !"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 13:51:29",
    "text": "of course"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas689"
    },
    "time_stamp": "2023-03-07 14:15:49",
    "text": "<@UQNEXHW14> are quotes down again? Getting a React error on any attempt to view a quote on our portal"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas689"
    },
    "time_stamp": "2023-03-07 14:19:14",
    "text": "looks like its back up"
  },
  {
    "poster": {
      "poster_name": "Thomas Lane",
      "poster_handle": "thomas689"
    },
    "time_stamp": "2023-03-07 14:20:25",
    "text": "looks like its the meeting links again crashing it <@UQNEXHW14> <@U01NMMDTERZ> <@UD53A9UUR>"
  },
  {
    "poster": {
      "poster_name": "Darren Fryer",
      "poster_handle": "darren.fryer"
    },
    "time_stamp": "2023-03-07 14:58:34",
    "text": "Hi All (from down under),\nHave any of the developers in here solved the issue with the Lead Webhook. In particular the webhook for Lead Status changes and Notes changes/updates. We noticed these community forums but they are over 5 years old so I am hoping this has been resolved.\n<https://community.HubSpot.com/t5/APIs-Integrations/Contact-Updated-webhook-for-any-property/m-p/241391>\n<https://community.HubSpot.com/t5/APIs-Integrations/Register-Webhook-for-Notes-creation/m-p/241376#M20272>",
    "reply_count": 9,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2023-03-07 15:20:24"
      },
      {
        "time_stamp": "2023-03-07 15:25:18"
      },
      {
        "time_stamp": "2023-03-07 15:26:43"
      },
      {
        "time_stamp": "2023-03-07 15:27:48"
      },
      {
        "time_stamp": "2023-03-07 15:28:01"
      },
      {
        "time_stamp": "2023-03-07 15:28:15"
      },
      {
        "time_stamp": "2023-03-07 15:42:13"
      },
      {
        "time_stamp": "2023-03-08 15:24:38"
      },
      {
        "time_stamp": "2023-03-08 17:53:29"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Darren Fryer",
      "poster_handle": "darren.fryer"
    },
    "time_stamp": "2023-03-07 14:58:55",
    "text": "<@U037QED9TR6> have you had any success :arrow_up:",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-03-08 15:14:15"
      }
    ]
  },
  {
    "text": "",
    "time_stamp": "2023-03-07 15:20:24"
  },
  {
    "poster": {
      "poster_name": "Jacob Jennings",
      "poster_handle": "jacob550"
    },
    "time_stamp": "2023-03-07 15:25:18",
    "text": "No idea on notes but you can set up a webhook for hs_lead_status on either contact or company records <@U04KWLKKYQY>"
  },
  {
    "subtype": "thread_broadcast",
    "time_stamp": "2023-03-07 15:26:43",
    "text": "Jacob, thank you. We will test that out. Much appreciated. I am assuming that is the Operations Hub or Enterprise that needs to be active to create the webhook?"
  },
  {
    "poster": {
      "poster_name": "Jacob Jennings",
      "poster_handle": "jacob550"
    },
    "time_stamp": "2023-03-07 15:27:48",
    "text": "I just set it up in a developer account under the an app -&gt; webhooks"
  },
  {
    "poster": {
      "poster_name": "Darren Fryer",
      "poster_handle": "darren.fryer"
    },
    "time_stamp": "2023-03-07 15:28:01",
    "text": "OK great... thank you."
  },
  {
    "poster": {
      "poster_name": "Jacob Jennings",
      "poster_handle": "jacob550"
    },
    "time_stamp": "2023-03-07 15:28:15",
    "text": "Iâ€™m sure you can probably do something similar with operations hub, but I havenâ€™t used it before."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 15:42:13",
    "edited": {
      "time_stamp": "2023-03-07 15:42:15"
    },
    "text": "you have to install the app on the HubSpot account you want to track though, and you also need to request one oauth token for the app to be installed"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 17:11:58",
    "text": "<@U01QVR44MEY> Were you able to get the IN operator to work?"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 18:07:04",
    "text": "<@U04SV94JDAQ> Were you by chance able to get the \"IN\" operator to work on the SEARCH API?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 18:11:23",
    "text": "Yes I've used the IN operator a good amount"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 18:12:16",
    "text": "ugh .. hating their examples ... they're few/far between .."
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 18:12:22",
    "text": "{\nÂ Â Â Â \"filterGroups\":[\nÂ Â Â Â Â Â {\nÂ Â Â Â Â Â Â Â \"filters\":[\nÂ Â Â Â Â Â Â Â Â Â {\nÂ Â Â Â Â Â Â Â Â Â \"value\":Â \"Scott\",\nÂ Â Â Â Â Â Â Â Â Â \"propertyName\":Â \"firstname\",\nÂ Â Â Â Â Â Â Â Â Â \"operator\":Â \"IN\"\nÂ Â Â Â Â Â Â Â Â Â }\nÂ Â Â Â Â Â Â Â ]\nÂ Â Â Â Â Â }\nÂ Â Â Â ]\nÂ Â }"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 18:12:26",
    "text": "throws this:"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 18:12:48",
    "text": "{\n    \"status\": \"error\",\n    \"message\": \"Invalid input JSON on line 9, column 11: operator IN requires values\",\n    \"correlationId\": \"52116e0c-3e78-46c5-92e5-86fd12d0bd25\",\n    \"category\": \"VALIDATION_ERROR\"\n}"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 18:13:02",
    "text": "can you give me an example of your JSON payload that works ?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 18:14:19",
    "edited": {
      "time_stamp": "2023-03-07 18:15:42"
    },
    "text": "sure bud:\n```{\n    \"filterGroups\":[\n      {\n        \"filters\":[\n          {\n          \"values\": [\"scott\", \"brian\"],\n          \"propertyName\": \"firstname\",\n          \"operator\": \"IN\"\n          }\n        ]\n      }\n    ]\n  }```"
  },
  {
    "text": "",
    "time_stamp": "2023-03-07 18:14:58"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 18:21:01",
    "text": "ok, getting result but am I assuming that \"IN\" means \"LIKE\" ??"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 18:21:59",
    "text": "or am I assuming too much"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 18:22:01",
    "text": "??"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 18:48:05",
    "text": "are you possibly thinking of contains?"
  },
  {
    "text": "",
    "time_stamp": "2023-03-07 18:48:16"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 18:48:40",
    "text": "yes... and of course I didn't see that in the docs..."
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 18:49:43",
    "text": "is that just for email though?"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 18:49:48",
    "text": "doesn't seem to work on firstname or lastname"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 18:52:03",
    "text": "it works on first and lastname"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 18:52:05",
    "text": "one sec"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 18:53:39",
    "text": "```{\n    \"filterGroups\":[\n      {\n        \"filters\":[\n          {\n          \"value\": \"scot*\",\n          \"propertyName\": \"firstname\",\n          \"operator\": \"CONTAINS_TOKEN\"\n          }\n        ]\n      }\n    ]\n  }```"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 18:53:46",
    "text": "your request will look like this"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 18:54:02",
    "text": "this will pull in any firstnames that start with scot"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 18:54:23",
    "text": "so:\n`scot`\n`scott`\n`scotty`"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 18:54:28",
    "text": "etc etc"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 18:54:32",
    "text": "surprisingly this works also.."
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 18:54:36",
    "text": "{\n    \"filterGroups\":[\n      {\n        \"filters\":[\n          {\n          \"value\": \"*whi*\",\n          \"propertyName\": \"firstname\",\n          \"operator\": \"EQ\"\n          }\n        ]\n      }\n    ]\n  }"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 18:54:45",
    "text": "pulls anything with \"whi\" as the firtname"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 18:54:47",
    "text": "the EQ"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 18:55:05",
    "text": "but the firstname would need to be exactly whi"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 18:55:44",
    "text": "oh sorry now I see the wildcard"
  },
  {
    "poster": {
      "poster_name": "Chris Prosser",
      "poster_handle": "cprosser"
    },
    "time_stamp": "2023-03-07 19:04:41",
    "text": "<@U04SNKZAG83> I am only using the Greater Than operator on the hs_lastmodifieddate property"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 19:05:48",
    "text": "<https://HubSpotdev.slack.com/archives/C2YHAHB6K/p1678234318542989?thread_ts=1678220903.442189&amp;cid=C2YHAHB6K>"
  },
  {
    "poster": {
      "poster_name": "Felype Raphael Ferreira",
      "poster_handle": "felype.ferreira"
    },
    "time_stamp": "2023-03-07 19:08:41",
    "text": "Hey there. I'm trying to get the HubSpot companies with field contains a value? I'm using something like this:\n`{`\n            \"filterGroups\":[\n            {\n                \"filters\":[\n                {\n                    \"propertyName\": \"institutionid\",\n                    \"operator\": \"CONTAINS_TOKEN\",\n                    \"value\": \"5E2C0239\"\n                }\n                ]\n            }\n            ],\n            \"properties\": [\"institutionid\"]\n        }",
    "reply_count": 16,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-03-07 19:09:11"
      },
      {
        "time_stamp": "2023-03-07 19:09:44"
      },
      {
        "time_stamp": "2023-03-07 19:10:38"
      },
      {
        "time_stamp": "2023-03-07 19:11:06"
      },
      {
        "time_stamp": "2023-03-07 19:11:20"
      },
      {
        "time_stamp": "2023-03-07 19:12:01"
      },
      {
        "time_stamp": "2023-03-07 19:12:09"
      },
      {
        "time_stamp": "2023-03-07 19:12:16"
      },
      {
        "time_stamp": "2023-03-07 19:13:34"
      },
      {
        "time_stamp": "2023-03-07 19:14:33"
      },
      {
        "time_stamp": "2023-03-07 19:14:49"
      },
      {
        "time_stamp": "2023-03-07 19:15:31"
      },
      {
        "time_stamp": "2023-03-07 19:16:08"
      },
      {
        "time_stamp": "2023-03-07 19:16:11"
      },
      {
        "time_stamp": "2023-03-07 19:17:19"
      },
      {
        "time_stamp": "2023-03-07 19:19:23"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Nam Huynh",
      "poster_handle": "nam"
    },
    "time_stamp": "2023-03-07 19:08:44",
    "edited": {
      "time_stamp": "2023-03-07 19:09:11"
    },
    "text": "I was about to ask the same question with Search Contact v4. Now I know it can be used only at v3"
  },
  {
    "poster": {
      "poster_name": "Felype Raphael Ferreira",
      "poster_handle": "felype.ferreira"
    },
    "time_stamp": "2023-03-07 19:09:11",
    "text": "Using client.crm.companies.search_api.do_search()"
  },
  {
    "poster": {
      "poster_name": "Felype Raphael Ferreira",
      "poster_handle": "felype.ferreira"
    },
    "time_stamp": "2023-03-07 19:09:44",
    "text": "If have any company with institutionId like '%5E2C0239%', returned. But this doesnt work"
  },
  {
    "poster": {
      "poster_name": "Nam Huynh",
      "poster_handle": "nam"
    },
    "time_stamp": "2023-03-07 19:10:32",
    "text": "I agree with Scott, I feel the API versioning is a bit mess.\nIn the doc, there is some Contact/Company Apis are saying v3 but v4 also works. So I changed all my API to using v4 until I work with Search contacts"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 19:10:38",
    "text": "that would do an exact search"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 19:11:06",
    "text": "you can use a wildcard character to pull in like values"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 19:11:20",
    "edited": {
      "time_stamp": "2023-03-07 19:11:23"
    },
    "text": "for example: `5E2C0*`"
  },
  {
    "poster": {
      "poster_name": "Felype Raphael Ferreira",
      "poster_handle": "felype.ferreira"
    },
    "time_stamp": "2023-03-07 19:12:01",
    "text": "using operator CONTAINS_TOKEN?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 19:12:09",
    "text": "yep"
  },
  {
    "poster": {
      "poster_name": "Felype Raphael Ferreira",
      "poster_handle": "felype.ferreira"
    },
    "time_stamp": "2023-03-07 19:12:16",
    "text": "let me check"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 19:12:42",
    "text": "yeah, messy .."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 19:13:03",
    "text": "well the search api is a little different then the other apis (different system, different rate limit) but at some point in the future it will operate on the v4 endpoint"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 19:13:21",
    "text": "definitely not the preferred setup but it is how it is"
  },
  {
    "text": "like these?",
    "time_stamp": "2023-03-07 19:13:34"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 19:14:33",
    "text": "That will pull in property values that contain 5E2C0239 exactly"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 19:14:49",
    "edited": {
      "time_stamp": "2023-03-07 19:14:56"
    },
    "text": "but it will also pull in things like:\n```5E2C02392932\n1235E2C0239```"
  },
  {
    "poster": {
      "poster_name": "Felype Raphael Ferreira",
      "poster_handle": "felype.ferreira"
    },
    "time_stamp": "2023-03-07 19:15:31",
    "text": "the * char like % in SQL Server?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 19:16:08",
    "text": "yes"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 19:16:11",
    "text": "basically"
  },
  {
    "poster": {
      "poster_name": "Nam Huynh",
      "poster_handle": "nam"
    },
    "time_stamp": "2023-03-07 19:16:43",
    "text": "Iâ€™m total fine with how the Apis work. I just said the Api doc is a bit messy. I would prefer to have a dropdown with each endpoint which version they are supporting. With that information will prevent those kind of questions"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 19:17:15",
    "text": "Not all endpoints are compatible across different versions though"
  },
  {
    "poster": {
      "poster_name": "Felype Raphael Ferreira",
      "poster_handle": "felype.ferreira"
    },
    "time_stamp": "2023-03-07 19:17:19",
    "text": "it works! Thanks!!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 19:17:38",
    "text": "that's why each endpoint has a separate doc for the different versions"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 19:19:23",
    "text": "of course"
  },
  {
    "poster": {
      "poster_name": "Scott Harbin",
      "poster_handle": "scott.harbin"
    },
    "time_stamp": "2023-03-07 19:19:25",
    "text": "I think what we're saying <@U01QVR44MEY> is that MOST API's are compatible across the versions ...  if there's an endpoint for v3, there's one for v4 also to match ... v4 isn't \"missing\" on most API platforms ... they coincide with v4 having additional features.. (most backward compatible with EOL phaseout)"
  },
  {
    "poster": {
      "poster_name": "Sudhakar",
      "poster_handle": "wpsupport"
    },
    "time_stamp": "2023-03-07 19:28:14",
    "text": "Thanks. I can able to fetch the company details now."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-07 19:31:33",
    "text": "of course"
  }
]