[
  {
    "text": "I’m using the Atom text editor.  Has anyone found a good syntax highlighting plugin that’s works great with JSON in an HTML file?",
    "time_stamp": "2020-03-23 07:29:17"
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-03-23 08:20:48",
    "edited": {
      "time_stamp": "2020-03-23 08:23:38"
    },
    "text": "You’re looking for jina2 highlighting I think :slightly_smiling_face: - <https://atom.io/packages/atom-jinja2> You may need to make it identify .html as jinja2 files. <@UA5DFM7CK>",
    "reply_count": 33,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2020-03-23 08:24:02"
      },
      {
        "time_stamp": "2020-03-23 10:16:42"
      },
      {
        "time_stamp": "2020-03-23 10:32:13"
      },
      {
        "time_stamp": "2020-03-23 11:35:35"
      },
      {
        "time_stamp": "2020-03-23 11:35:53"
      },
      {
        "time_stamp": "2020-03-23 11:35:59"
      },
      {
        "time_stamp": "2020-03-23 11:36:53"
      },
      {
        "time_stamp": "2020-03-23 11:37:07"
      },
      {
        "time_stamp": "2020-03-23 11:39:57"
      },
      {
        "time_stamp": "2020-03-23 11:40:17"
      },
      {
        "time_stamp": "2020-03-23 11:42:35"
      },
      {
        "time_stamp": "2020-03-23 11:44:49"
      },
      {
        "time_stamp": "2020-03-23 12:35:32"
      },
      {
        "time_stamp": "2020-03-23 12:36:03"
      },
      {
        "time_stamp": "2020-03-23 12:37:53"
      },
      {
        "time_stamp": "2020-03-23 12:38:28"
      },
      {
        "time_stamp": "2020-03-23 12:42:40"
      },
      {
        "time_stamp": "2020-03-23 12:43:10"
      },
      {
        "time_stamp": "2020-03-23 12:43:22"
      },
      {
        "time_stamp": "2020-03-23 12:43:26"
      },
      {
        "time_stamp": "2020-03-23 12:43:38"
      },
      {
        "time_stamp": "2020-03-23 12:48:45"
      },
      {
        "time_stamp": "2020-03-23 12:49:06"
      },
      {
        "time_stamp": "2020-03-23 12:49:11"
      },
      {
        "time_stamp": "2020-03-23 12:49:25"
      },
      {
        "time_stamp": "2020-03-23 12:49:32"
      },
      {
        "time_stamp": "2020-03-23 12:52:57"
      },
      {
        "time_stamp": "2020-03-23 12:53:10"
      },
      {
        "time_stamp": "2020-03-23 12:54:03"
      },
      {
        "time_stamp": "2020-03-23 12:55:59"
      },
      {
        "time_stamp": "2020-03-23 12:56:30"
      },
      {
        "time_stamp": "2020-03-23 12:57:10"
      },
      {
        "time_stamp": "2020-03-23 12:57:27"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2020-03-23 08:24:02",
    "text": "Thank you <@UQERM7BLY>!!"
  },
  {
    "poster": {
      "poster_name": "Jason Rosa",
      "poster_handle": "jasonrosa"
    },
    "time_stamp": "2020-03-23 09:04:15",
    "text": "You should be able to add non-theme HubL variables if I'm understanding your correctly. There are some examples in the boilerplate if you're interested (<https://github.com/HubSpot/cms-theme-boilerplate/blob/master/src/css/main.css>)."
  },
  {
    "poster": {
      "poster_name": "Trey",
      "poster_handle": "trey185"
    },
    "time_stamp": "2020-03-23 09:10:53",
    "text": "thx i'll take a look"
  },
  {
    "poster": {
      "poster_name": "Quinn Chaffee",
      "poster_handle": "quinn884"
    },
    "time_stamp": "2020-03-23 10:16:42",
    "text": "FYI i think atom is going to be in maintanance mode / retired for a few reasons: 1) VS code is eating the \"cross platform\" editor world 2) Microsoft acquired github and most dev work has shifted from atom to VS code"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-03-23 10:32:13",
    "text": ":point_up:"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2020-03-23 11:35:35",
    "text": "<@UVCQGSL2C> <@U38EZFVFE> Ugh… I just started using it and really dig it.  Can you recommend any other cool text editors?  I switched to Atom from Sublime."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-03-23 11:35:53",
    "text": "VS code"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-03-23 11:35:59",
    "edited": {
      "time_stamp": "2020-03-23 11:36:03"
    },
    "text": "its pretty much the future"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2020-03-23 11:36:53",
    "edited": {
      "time_stamp": "2020-03-23 11:36:58"
    },
    "text": "<@U38EZFVFE> Cool. I’ll give it a go."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-03-23 11:37:07",
    "text": "vs code also has a hubl extention"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2020-03-23 11:39:57",
    "text": "Just downloaded it and gonna check it out."
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2020-03-23 11:40:17",
    "edited": {
      "time_stamp": "2020-03-23 11:40:24"
    },
    "text": "<@U38EZFVFE> got a color theme you love?"
  },
  {
    "poster": {
      "poster_name": "Quinn Chaffee",
      "poster_handle": "quinn884"
    },
    "time_stamp": "2020-03-23 11:42:35",
    "text": ":100:  on VS code being the future, im heavy into the webtech world and ive seen pretty much the whole JS community switch to it... ive switched myself, was going atom-beta before... the default VS code theme has worked well for me, plus seems to be the fore-front as far as updating goes"
  },
  {
    "text": "<@U38EZFVFE> was this what you were mentioning?",
    "time_stamp": "2020-03-23 11:44:49"
  },
  {
    "text": "fwiw, I use this jinja extension in VS Code and it works really nicely for html files with HubL <https://marketplace.visualstudio.com/items?itemName=wholroyd.jinja>",
    "time_stamp": "2020-03-23 12:35:32",
    "edited": {
      "time_stamp": "2020-03-23 12:35:39"
    }
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-03-23 12:36:03",
    "text": "<@UA5DFM7CK> yes, i also use cobalt2 for my theme"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2020-03-23 12:37:53",
    "text": "Thanks <@U6W3H6YN8>. I had actually found that after digging into your HubL plugin a bit more.  Thanks!"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2020-03-23 12:38:28",
    "text": "I will warn my HubL one is a litttttlleeee out of date :sweat_smile: but there is some good stuff in there, and feel free to contribute!!"
  },
  {
    "text": "Last question (maybe).  Any idea why some of my {  } are getting this red-error underline.  The CSS file validates just fine when saving it.",
    "time_stamp": "2020-03-23 12:42:40"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-03-23 12:43:10",
    "text": "check the syntax highlighting"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-03-23 12:43:22",
    "text": "it might be on html"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-03-23 12:43:26",
    "text": "or php"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-03-23 12:43:38",
    "text": "bottom right corner of page"
  },
  {
    "text": "Thanks <@U38EZFVFE>. It’s on CSS.  hhhmmmm.",
    "time_stamp": "2020-03-23 12:48:45"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-03-23 12:49:06",
    "text": "hahaha"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-03-23 12:49:11",
    "text": "that would do it"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-03-23 12:49:25",
    "text": "it attempts to identify"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-03-23 12:49:32",
    "text": "but it does get it wrong sometimes"
  },
  {
    "text": "I’m not following you.. This is correct, yes?",
    "time_stamp": "2020-03-23 12:52:57"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-03-23 12:53:10",
    "text": "are you in a css file?"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2020-03-23 12:54:03",
    "text": "yep"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-03-23 12:55:59",
    "text": "so the issue then is that it sees the hubl stuff and is freaking out"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-03-23 12:56:30",
    "text": "it doesnt have the logic to ignore the hubl"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2020-03-23 12:57:10",
    "text": "Gotcha.. It’s just giving me a bunch of red error-like highlighting in some areas and then adding a weird red highlight under the }"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2020-03-23 12:57:27",
    "text": "yep. it is trying to warn you"
  },
  {
    "poster": {
      "poster_name": "Trey",
      "poster_handle": "trey185"
    },
    "time_stamp": "2020-03-23 14:10:26",
    "text": "<@U26AKMZ19> is there a way to pass data to the stylesheet?  i would like to reference a dictionary from the template, but i cannot figure out a way to give the stylesheet access.  any global variables are not recogized by the stylesheet based on my testing.  i can set local variables (like the boiler plate example) and reference those variables in the css, but would like to pass an existing style dict to it.   is there some global dict in hubl that i could read/write values from?"
  },
  {
    "poster": {
      "poster_name": "Jason Rosa",
      "poster_handle": "jasonrosa"
    },
    "time_stamp": "2020-03-23 14:16:13",
    "text": "I'm not 100% sure as I haven't ever tried to pass values from template &gt; style-sheet. <@U6GNQ7JBU> do you know if HubL variable/dictionary values can be passed from a template -&gt; style-sheet?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2020-03-23 14:18:13",
    "text": "Sure I think you could just `include` the template"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2020-03-23 14:18:56",
    "text": "Ah from template to stylesheet"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2020-03-23 14:19:10",
    "text": "Are you expecting these values to be editable in the UI?"
  },
  {
    "poster": {
      "poster_name": "Trey",
      "poster_handle": "trey185"
    },
    "time_stamp": "2020-03-23 14:21:43",
    "text": "including does work, but i need to pass a value from the template page where the request_css is made"
  },
  {
    "poster": {
      "poster_name": "Trey",
      "poster_handle": "trey185"
    },
    "time_stamp": "2020-03-23 14:22:25",
    "text": "if i have a shared partial and update the dict from the page template, that dict is not updated when the stylesheet imports it"
  },
  {
    "poster": {
      "poster_name": "Trey",
      "poster_handle": "trey185"
    },
    "time_stamp": "2020-03-23 14:23:14",
    "text": "normally antying i include as the main page template level is globally available to any other include... this is the first time i've see where this behavior is not true for the css hubl code"
  },
  {
    "poster": {
      "poster_name": "Trey",
      "poster_handle": "trey185"
    },
    "time_stamp": "2020-03-23 14:24:34",
    "text": "what i'm wanting to do is pass a style object from the page in case the user wants to override the default theme, and then based on conditional i will either render the css to use the theme object or my style dict passed in"
  },
  {
    "poster": {
      "poster_name": "Trey",
      "poster_handle": "trey185"
    },
    "time_stamp": "2020-03-23 14:25:17",
    "text": "another way of thinking about this is how would i reference a value from a custom module in the css"
  },
  {
    "poster": {
      "poster_name": "Trey",
      "poster_handle": "trey185"
    },
    "time_stamp": "2020-03-23 14:25:35",
    "text": "thats essentially what i am trying to do"
  },
  {
    "poster": {
      "poster_name": "Trey",
      "poster_handle": "trey185"
    },
    "time_stamp": "2020-03-23 14:27:01",
    "text": "what i have been doing is in the module html i can reference a \"global dict\" from the page template and pass it module"
  },
  {
    "poster": {
      "poster_name": "Trey",
      "poster_handle": "trey185"
    },
    "time_stamp": "2020-03-23 14:27:25",
    "text": "then i can reference any module properties anywhere throughtout the page template logic"
  },
  {
    "poster": {
      "poster_name": "Trey",
      "poster_handle": "trey185"
    },
    "time_stamp": "2020-03-23 14:38:27",
    "text": "<@U6GNQ7JBU> i guess that was your question.. yes i would like to be able to have user pick an option in the custom module and have that refected in the css"
  },
  {
    "poster": {
      "poster_name": "Trey",
      "poster_handle": "trey185"
    },
    "time_stamp": "2020-03-23 18:58:30",
    "text": "<@U6GNQ7JBU> <@U26AKMZ19> <@U7SL518D6> any thoughts on how i might do this?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-03-23 19:55:57",
    "text": "As far as I'm aware there is no possible way to pass a module's field value to a css stylesheet dynamically.\n\nThe stylesheet is rendered at publishing of the file. Changing the value in the module would not result in a republishing of the file, meaning the variable would not change and the styles would not be updated."
  },
  {
    "poster": {
      "poster_name": "Trey",
      "poster_handle": "trey185"
    },
    "time_stamp": "2020-03-23 22:54:57",
    "text": "ok thanks for the clarification and insight"
  }
]