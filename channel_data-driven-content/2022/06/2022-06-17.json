[
  {
    "poster": {
      "poster_name": "Mitja Lewin",
      "poster_handle": "m.lewin"
    },
    "time_stamp": "2022-06-17 04:31:52",
    "edited": {
      "time_stamp": "2022-06-17 04:33:31"
    },
    "text": "<@UDHT6N5SM> Yes, all possible URLs from the HubDB table and child-table get indexed when you create a dynamic page. Go to _HubSpot &gt; Settings &gt; Website &gt; Domain &amp; URLs &gt; Sitemap_ and remove the page manually from the list.\n\nThe pages that are reachable over links on your site get indexed by search engines anyway. But if you have the chance to determinate which of the table rows are real dyn. pages and which are just possibilities, set an extra meta entry for them:\n\n```  {# Search Engine Index #}\n  {% set real_page = is_real_page_check() %}\n  {% if !real_page %}\n    {% require_css %}\n      &lt;meta name=\"robots\" content=\"noindex, nofollow\" /&gt;\n    {% end_require_css %}\n  {% endif %}```\nThe thing with lookup tables that also are dyn. pages can bring you into trouble, because they flood your sitemap with trash entries. For example, you have one table with continents and one with countries. Both act like a lookup for additional information. But both are as well dyn. page tables. So we imagine we are a travel agency, and need that information about countries to be stored. But we have currently just some countries with existing travel offers. And we only want those dyn. pages for countries displayed where an offer exists.\n\nWell, we can filter this in the template, but get sitemap entries for all countries. In the end, Google will display a mass of countries with no offers as search results. That create a lot of trouble. Even more if you see that HubSpot create all possible URLs combinations from parent and child table. You see URLs like Hawaii is in Europe and Germany is a possible URL match for the USA. Hundreds of this combination are in the sitemap.xml that doesn't exist, but are result of the continent &gt; country sitemap table iteration."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2022-06-17 10:18:03",
    "text": "Thanks for all the info <@UK9BKNBD5>. Much appreciated!"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2022-06-17 14:32:39",
    "edited": {
      "time_stamp": "2022-06-17 14:32:59"
    },
    "text": "Can I use an \"authorization bearer\" header instead of an api key when using the `<https://api.hubapi.com/collector/graphql>` endpoint",
    "reply_count": 5,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2022-06-17 15:22:37"
      },
      {
        "time_stamp": "2022-06-21 06:08:13"
      },
      {
        "time_stamp": "2022-06-21 06:09:41"
      },
      {
        "time_stamp": "2022-06-21 06:10:21"
      },
      {
        "time_stamp": "2022-06-21 06:24:27"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2022-06-17 15:22:37",
    "text": "it looks like this does not work. It does work with the API key. I hope I'm doing something wrong here..."
  }
]