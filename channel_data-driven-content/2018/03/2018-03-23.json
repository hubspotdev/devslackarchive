[
  {
    "poster": {
      "poster_name": "Christopher Mathieu",
      "poster_handle": "christopher.mathieu"
    },
    "time_stamp": "2018-03-23 07:49:00",
    "text": "has anybody done a query parameter using a multi select column type?",
    "reply_count": 41,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2018-03-23 07:49:32"
      },
      {
        "time_stamp": "2018-03-23 07:49:40"
      },
      {
        "time_stamp": "2018-03-23 07:50:48"
      },
      {
        "time_stamp": "2018-03-23 07:51:16"
      },
      {
        "time_stamp": "2018-03-23 07:51:17"
      },
      {
        "time_stamp": "2018-03-23 07:52:18"
      },
      {
        "time_stamp": "2018-03-23 07:52:37"
      },
      {
        "time_stamp": "2018-03-23 07:52:53"
      },
      {
        "time_stamp": "2018-03-23 07:53:12"
      },
      {
        "time_stamp": "2018-03-23 07:54:16"
      },
      {
        "time_stamp": "2018-03-23 07:54:53"
      },
      {
        "time_stamp": "2018-03-23 07:57:21"
      },
      {
        "time_stamp": "2018-03-23 07:57:39"
      },
      {
        "time_stamp": "2018-03-23 07:59:24"
      },
      {
        "time_stamp": "2018-03-23 08:01:10"
      },
      {
        "time_stamp": "2018-03-23 08:01:49"
      },
      {
        "time_stamp": "2018-03-23 08:02:01"
      },
      {
        "time_stamp": "2018-03-23 08:03:26"
      },
      {
        "time_stamp": "2018-03-23 08:03:30"
      },
      {
        "time_stamp": "2018-03-23 08:03:41"
      },
      {
        "time_stamp": "2018-03-23 08:07:09"
      },
      {
        "time_stamp": "2018-03-23 08:07:51"
      },
      {
        "time_stamp": "2018-03-23 08:31:05"
      },
      {
        "time_stamp": "2018-03-23 09:47:30"
      },
      {
        "time_stamp": "2018-03-23 09:47:42"
      },
      {
        "time_stamp": "2018-03-23 09:47:51"
      },
      {
        "time_stamp": "2018-03-23 09:48:08"
      },
      {
        "time_stamp": "2018-03-23 09:49:19"
      },
      {
        "time_stamp": "2018-03-23 09:51:57"
      },
      {
        "time_stamp": "2018-03-23 09:52:56"
      },
      {
        "time_stamp": "2018-03-23 09:53:08"
      },
      {
        "time_stamp": "2018-03-23 09:56:13"
      },
      {
        "time_stamp": "2018-03-23 09:56:20"
      },
      {
        "time_stamp": "2018-03-23 09:56:43"
      },
      {
        "time_stamp": "2018-03-23 09:57:04"
      },
      {
        "time_stamp": "2018-03-23 09:58:33"
      },
      {
        "time_stamp": "2018-03-23 10:10:47"
      },
      {
        "time_stamp": "2018-03-23 10:10:59"
      },
      {
        "time_stamp": "2018-03-23 10:11:15"
      },
      {
        "time_stamp": "2018-03-23 10:34:36"
      },
      {
        "time_stamp": "2018-03-23 10:34:47"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-03-23 07:49:32",
    "text": "I wrote them :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-03-23 07:49:40",
    "text": "What are you trying to do?"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-03-23 07:50:48",
    "text": "I have used them to some success on at least one project - To echo <@U6GNQ7JBU>: \"What are you trying to do?\""
  },
  {
    "poster": {
      "poster_name": "Christopher Mathieu",
      "poster_handle": "christopher.mathieu"
    },
    "time_stamp": "2018-03-23 07:51:16",
    "text": "so basically i want to be able to run a query parameter on ANY match within a multi select"
  },
  {
    "poster": {
      "poster_name": "Christopher Mathieu",
      "poster_handle": "christopher.mathieu"
    },
    "time_stamp": "2018-03-23 07:51:17",
    "text": "<http://302335.hs-sites.com/temp-pizza>"
  },
  {
    "poster": {
      "poster_name": "Christopher Mathieu",
      "poster_handle": "christopher.mathieu"
    },
    "time_stamp": "2018-03-23 07:52:18",
    "text": "so for example the \"Chris\" pizza would show whether the query param was for cheese OR pepperoni"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-03-23 07:52:37",
    "text": "<https://developers.HubSpot.com/docs/methods/hubdb/get_table_rows>"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-03-23 07:52:53",
    "text": "You can use `contains`"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-03-23 07:53:12",
    "text": "As in `column__contains=cheese`"
  },
  {
    "poster": {
      "poster_name": "Christopher Mathieu",
      "poster_handle": "christopher.mathieu"
    },
    "time_stamp": "2018-03-23 07:54:16",
    "text": "<https://app.HubSpot.com/design-manager/302335/templates/5655781566>"
  },
  {
    "poster": {
      "poster_name": "Christopher Mathieu",
      "poster_handle": "christopher.mathieu"
    },
    "time_stamp": "2018-03-23 07:54:53",
    "text": "so on the set queryparam side in the template? or in the URL?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-03-23 07:57:21",
    "text": "I fixed the template :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-03-23 07:57:39",
    "text": "You also don't need to hardcode `if request.query_dict.toppings in [\"1\", \"2\", \"3\", \"4\"]`"
  },
  {
    "poster": {
      "poster_name": "Christopher Mathieu",
      "poster_handle": "christopher.mathieu"
    },
    "time_stamp": "2018-03-23 07:59:24",
    "text": "awesome you're the man!  we haven't gone super deep with HubDB  queries yet so this is super helpful"
  },
  {
    "poster": {
      "poster_name": "Christopher Mathieu",
      "poster_handle": "christopher.mathieu"
    },
    "time_stamp": "2018-03-23 08:01:10",
    "text": "so how do i go about avoiding hard coding that array?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-03-23 08:01:49",
    "text": "You can get the details for the column"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-03-23 08:02:01",
    "text": "One moment"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-03-23 08:03:26",
    "text": "<https://designers.HubSpot.com/docs/tools/hubdb>"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-03-23 08:03:30",
    "text": "Under getting column info"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-03-23 08:03:41",
    "text": "And use the options for that"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-03-23 08:07:09",
    "text": "That way if you add a new option the template will still work"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-03-23 08:07:51",
    "text": "You also may want to consider what behavior you would like if someone hits `<http://302335.hs-sites.com/temp-pizza?toppings=1&amp;toppings=2>`"
  },
  {
    "poster": {
      "poster_name": "Christopher Mathieu",
      "poster_handle": "christopher.mathieu"
    },
    "time_stamp": "2018-03-23 08:31:05",
    "text": "yeah makes sense thanks so much for your help"
  },
  {
    "poster": {
      "poster_name": "Remington Begg",
      "poster_handle": "remingtonbegg"
    },
    "time_stamp": "2018-03-23 08:55:11",
    "text": "Reccomendation: It would be great to have the column ID referenced next to the label for reference",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-03-23 09:05:23"
      },
      {
        "time_stamp": "2018-03-23 09:23:54"
      },
      {
        "time_stamp": "2018-03-23 09:40:41"
      },
      {
        "time_stamp": "2018-03-23 09:40:48"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-03-23 09:05:23",
    "text": "In the UI under edit column?"
  },
  null,
  {
    "poster": {
      "poster_name": "Remington Begg",
      "poster_handle": "remingtonbegg"
    },
    "time_stamp": "2018-03-23 09:23:54",
    "text": "that would work for me. just easy to access. Just tried to hunt down the column ids and had to use the api to figure it out."
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-03-23 09:40:41",
    "text": "Cool, I put up an issue for adding this information in"
  },
  {
    "poster": {
      "poster_name": "Remington Begg",
      "poster_handle": "remingtonbegg"
    },
    "time_stamp": "2018-03-23 09:40:48",
    "text": "thank you"
  },
  {
    "poster": {
      "poster_name": "Christopher Mathieu",
      "poster_handle": "christopher.mathieu"
    },
    "time_stamp": "2018-03-23 09:47:30",
    "text": "i think i'm close on the dynamic length for the array but doing something wrong..."
  },
  {
    "poster": {
      "poster_name": "Christopher Mathieu",
      "poster_handle": "christopher.mathieu"
    },
    "time_stamp": "2018-03-23 09:47:42",
    "text": "{% set toppings_info = hubdb_table_column(679163, 'toppings') %}"
  },
  {
    "poster": {
      "poster_name": "Christopher Mathieu",
      "poster_handle": "christopher.mathieu"
    },
    "time_stamp": "2018-03-23 09:47:51",
    "text": "then"
  },
  {
    "poster": {
      "poster_name": "Christopher Mathieu",
      "poster_handle": "christopher.mathieu"
    },
    "time_stamp": "2018-03-23 09:48:08",
    "text": "{% if request.query_dict.toppings in toppings_info.options %}"
  },
  {
    "poster": {
      "poster_name": "Christopher Mathieu",
      "poster_handle": "christopher.mathieu"
    },
    "time_stamp": "2018-03-23 09:49:19",
    "text": "but i'm missing somethig"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-03-23 09:51:57",
    "text": "Something about this is off - You're trying to compare a query string param to what's been SELECTED in the HubDB for a given pizza... right?"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-03-23 09:52:56",
    "text": "In that case you don't want to get the column info, you want to get the RESULTS of a hubdb_table_rows query with a toppings__contains= &lt;query string value&gt;"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-03-23 09:53:08",
    "text": "then you can loop through it"
  },
  {
    "poster": {
      "poster_name": "Christopher Mathieu",
      "poster_handle": "christopher.mathieu"
    },
    "time_stamp": "2018-03-23 09:56:13",
    "text": "we actually got the queryparam working with a multi select, the key was using \"__contains"
  },
  {
    "poster": {
      "poster_name": "Christopher Mathieu",
      "poster_handle": "christopher.mathieu"
    },
    "time_stamp": "2018-03-23 09:56:20",
    "text": "{% set queryparam = queryparam ~ \"&amp;toppings__contains=\"~request.query_dict.toppings|urlencode %}"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-03-23 09:56:43",
    "text": "yep - that double underscore was tripping me up for a while when I first started"
  },
  {
    "poster": {
      "poster_name": "Christopher Mathieu",
      "poster_handle": "christopher.mathieu"
    },
    "time_stamp": "2018-03-23 09:57:04",
    "text": "now just trying to be able to set this if request.query_dict.toppings in [\"1\", \"2\", \"3\", \"4\"] dynamically by the number of options in a given multi select"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-03-23 09:58:33",
    "text": "so you're trying to do what with that? error prevention? ensure that the query is in the list of available toppings?"
  },
  {
    "poster": {
      "poster_name": "Christopher Mathieu",
      "poster_handle": "christopher.mathieu"
    },
    "time_stamp": "2018-03-23 10:10:47",
    "text": "got it... was actually quite simple..."
  },
  {
    "poster": {
      "poster_name": "Christopher Mathieu",
      "poster_handle": "christopher.mathieu"
    },
    "time_stamp": "2018-03-23 10:10:59",
    "text": "{% if request.query_dict['toppings'] %}"
  },
  {
    "poster": {
      "poster_name": "Christopher Mathieu",
      "poster_handle": "christopher.mathieu"
    },
    "time_stamp": "2018-03-23 10:11:15",
    "text": "versus hardcoding the array"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-03-23 10:34:36",
    "text": "that just says \"if there's a toppings query\" if that's what you're looking for then perfect!"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-03-23 10:34:47",
    "text": "the query could be \"banana\" and it would still return true"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-03-23 14:42:59",
    "text": "We are currently testing draft HubDB tables which will slightly change how you interact with tables. Instead of every change to your tables immediately affecting your live dynamic pages, your edits do not go live until you manually hit a publish/update button, similar to how editing pages works. Soon you will no longer have to clone tables, edit the clone, and point pages to the clone when you want to make big changes to live pages. Additionally you will be able to preview pages using the draft tables to ensure everything looks perfect before updating/publishing. Would any users be interested in testing this out before a more general rollout to all portals?",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-03-27 07:15:54"
      },
      {
        "time_stamp": "2018-03-27 07:20:53"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Remington Begg",
      "poster_handle": "remingtonbegg"
    },
    "time_stamp": "2018-03-23 14:45:21",
    "text": ":raised_hands:",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2018-03-23 14:45:45"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-03-23 14:45:45",
    "text": "If you DM a portal I can get you set up for monday!"
  }
]