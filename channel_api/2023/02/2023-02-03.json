[
  {
    "poster": {
      "poster_name": "Filip Galetic",
      "poster_handle": "hi087"
    },
    "time_stamp": "2023-02-03 01:58:59",
    "text": "Thanks Nick, I shortly after stopped working with the client. But now I'm back with them :slightly_smiling_face: I might still ping you if this is still relevant"
  },
  {
    "text": "Can you use the extra associations parameter, otherwise you may have to get the results from both API requests and combine them",
    "time_stamp": "2023-02-03 02:28:19"
  },
  {
    "text": "Hi , Can any one help me how to change the body content in HubSpot CRM card when we click on different  buttons below. Please share me sample code or any sample github code",
    "time_stamp": "2023-02-03 05:19:14"
  },
  {
    "poster": {
      "poster_name": "Netra Gourlay",
      "poster_handle": "netra.gourlay"
    },
    "time_stamp": "2023-02-03 06:48:47",
    "text": "Hi all, not sure if this is the best channel for this!\nWe’ve used HubSpot’s API to create tables in our data warehouse. We’re having trouble connecting the `deals` table to the `line items` table using SQL. What key could we used to connect the 2? We looked at this <https://legacydocs.HubSpot.com/docs/crm-integration-guide/overview|page on HubSpot> but couldn’t connect the tables given the fields. Any help or advice would be greatly appreciated :pray:",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-02-03 07:09:13"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 07:09:13",
    "text": "I would use hs_object_id to connect each of them"
  },
  {
    "poster": {
      "poster_name": "Cody Harris",
      "poster_handle": "cody.harris"
    },
    "time_stamp": "2023-02-03 14:29:37",
    "edited": {
      "time_stamp": "2023-02-03 14:31:57"
    },
    "text": "Hello! I am completely new to HubSpot as well as the API, but I am trying to pull call numbers for an individual for a timeframe (among other things), but I cannot get the call correct. I am using a bearer token from a private app and I have my python code below. I am trying to filter on the owner id and anything after 1-31-2023. Any insights would be appreciated!\n\nDocumentation I am looking at: <https://developers.HubSpot.com/docs/api/crm/search>\n\n```import requests\nimport json\n\nheaders = {\n    'authorization': 'Bearer ' + token,\n}\n\njson_data = {\n    'filterGroups': [\n        {\n            'filters': [\n                {\n                    'propertyName': 'HubSpot_owner_id',\n                    'operator': 'EQ',\n                    'value': 'some owner ID',\n                },\n            ],\n            'filters': [\n                {\n                    'propertyName': 'hs_timestamp',\n                    'operator': 'GT',\n                    'value': '2023-01-31T23:59:59.999Z',\n                },\n            ],\n        },\n    ],\n}\n\nresponse = requests.get('<https://api.hubapi.com/crm/v3/objects/calls>', json=json_data, headers=headers)\nprint(response.json())```",
    "reply_count": 76,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2023-02-03 14:33:07"
      },
      {
        "time_stamp": "2023-02-03 14:33:31"
      },
      {
        "time_stamp": "2023-02-03 14:33:44"
      },
      {
        "time_stamp": "2023-02-03 14:34:16"
      },
      {
        "time_stamp": "2023-02-03 14:34:24"
      },
      {
        "time_stamp": "2023-02-03 14:34:43"
      },
      {
        "time_stamp": "2023-02-03 14:34:45"
      },
      {
        "time_stamp": "2023-02-03 14:34:47"
      },
      {
        "time_stamp": "2023-02-03 14:35:00"
      },
      {
        "time_stamp": "2023-02-03 14:35:14"
      },
      {
        "time_stamp": "2023-02-03 14:35:16"
      },
      {
        "time_stamp": "2023-02-03 14:35:25"
      },
      {
        "time_stamp": "2023-02-03 14:35:44"
      },
      {
        "time_stamp": "2023-02-03 14:36:02"
      },
      {
        "time_stamp": "2023-02-03 14:37:07"
      },
      {
        "time_stamp": "2023-02-03 14:37:23"
      },
      {
        "time_stamp": "2023-02-03 14:37:35"
      },
      {
        "time_stamp": "2023-02-03 14:37:44"
      },
      {
        "time_stamp": "2023-02-03 14:37:50"
      },
      {
        "time_stamp": "2023-02-03 14:38:27"
      },
      {
        "time_stamp": "2023-02-03 14:38:35"
      },
      {
        "time_stamp": "2023-02-03 14:38:42"
      },
      {
        "time_stamp": "2023-02-03 14:38:48"
      },
      {
        "time_stamp": "2023-02-03 14:38:58"
      },
      {
        "time_stamp": "2023-02-03 14:39:10"
      },
      {
        "time_stamp": "2023-02-03 14:39:52"
      },
      {
        "time_stamp": "2023-02-03 14:40:06"
      },
      {
        "time_stamp": "2023-02-03 14:40:08"
      },
      {
        "time_stamp": "2023-02-03 14:40:10"
      },
      {
        "time_stamp": "2023-02-03 14:40:14"
      },
      {
        "time_stamp": "2023-02-03 14:40:17"
      },
      {
        "time_stamp": "2023-02-03 14:40:27"
      },
      {
        "time_stamp": "2023-02-03 14:40:31"
      },
      {
        "time_stamp": "2023-02-03 14:40:42"
      },
      {
        "time_stamp": "2023-02-03 14:40:44"
      },
      {
        "time_stamp": "2023-02-03 14:41:04"
      },
      {
        "time_stamp": "2023-02-03 14:41:13"
      },
      {
        "time_stamp": "2023-02-03 14:41:14"
      },
      {
        "time_stamp": "2023-02-03 14:42:40"
      },
      {
        "time_stamp": "2023-02-03 14:42:54"
      },
      {
        "time_stamp": "2023-02-03 14:43:40"
      },
      {
        "time_stamp": "2023-02-03 14:43:47"
      },
      {
        "time_stamp": "2023-02-03 14:44:07"
      },
      {
        "time_stamp": "2023-02-03 14:44:20"
      },
      {
        "time_stamp": "2023-02-03 14:44:31"
      },
      {
        "time_stamp": "2023-02-03 14:44:58"
      },
      {
        "time_stamp": "2023-02-03 14:45:11"
      },
      {
        "time_stamp": "2023-02-03 14:45:28"
      },
      {
        "time_stamp": "2023-02-03 14:45:36"
      },
      {
        "time_stamp": "2023-02-03 14:46:08"
      },
      {
        "time_stamp": "2023-02-03 14:46:16"
      },
      {
        "time_stamp": "2023-02-03 14:46:26"
      },
      {
        "time_stamp": "2023-02-03 14:46:32"
      },
      {
        "time_stamp": "2023-02-03 14:46:37"
      },
      {
        "time_stamp": "2023-02-03 14:46:45"
      },
      {
        "time_stamp": "2023-02-03 14:47:14"
      },
      {
        "time_stamp": "2023-02-03 14:47:34"
      },
      {
        "time_stamp": "2023-02-03 14:47:39"
      },
      {
        "time_stamp": "2023-02-03 14:47:48"
      },
      {
        "time_stamp": "2023-02-03 14:47:51"
      },
      {
        "time_stamp": "2023-02-03 14:48:01"
      },
      {
        "time_stamp": "2023-02-03 14:48:11"
      },
      {
        "time_stamp": "2023-02-03 14:48:13"
      },
      {
        "time_stamp": "2023-02-03 14:48:22"
      },
      {
        "time_stamp": "2023-02-03 14:48:27"
      },
      {
        "time_stamp": "2023-02-03 14:48:35"
      },
      {
        "time_stamp": "2023-02-03 14:48:46"
      },
      {
        "time_stamp": "2023-02-03 14:48:49"
      },
      {
        "time_stamp": "2023-02-03 14:49:00"
      },
      {
        "time_stamp": "2023-02-03 14:49:17"
      },
      {
        "time_stamp": "2023-02-03 14:49:23"
      },
      {
        "time_stamp": "2023-02-03 14:49:38"
      },
      {
        "time_stamp": "2023-02-03 14:49:44"
      },
      {
        "time_stamp": "2023-02-03 14:49:46"
      },
      {
        "time_stamp": "2023-02-03 14:50:16"
      },
      {
        "time_stamp": "2023-02-03 14:50:18"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:33:07",
    "text": "You're trying to get calls that have been made after a certain date?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-02-03 14:33:31",
    "text": "Try a unix timestamp in milliseconds."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:33:44",
    "text": "If so you're need to use this url: `/crm/v3/objects/calls/search`"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-02-03 14:34:16",
    "text": "Would be a post and not a get"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:34:24",
    "text": "dang dennis beat me"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-02-03 14:34:43",
    "text": "But I also no little python"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-02-03 14:34:45",
    "text": "So"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-02-03 14:34:47",
    "text": "Hi"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:35:00",
    "text": "I had that POST instead of GET written up"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-02-03 14:35:14",
    "text": "Suuuuure"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:35:16",
    "text": "thought maybe I send it also just to look smart"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:35:25",
    "text": "thought it might have negative effects though"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-02-03 14:35:44",
    "text": "I would test in postman first"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-02-03 14:36:02",
    "text": "Because I don't trust myself ever and postman is smarter than I am"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-02-03 14:37:07",
    "text": "Also, it appears Cody is a cat.  All bets are off"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:37:23",
    "edited": {
      "time_stamp": "2023-02-03 14:37:32"
    },
    "text": "true true very unpeeerrrrdictable"
  },
  {
    "text": "",
    "time_stamp": "2023-02-03 14:37:35"
  },
  {
    "poster": {
      "poster_name": "Cody Harris",
      "poster_handle": "cody.harris"
    },
    "time_stamp": "2023-02-03 14:37:44",
    "text": "hahaha okay let me try, am I violating community guidlines with the cat haha?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:37:50",
    "text": "get it peeerrrrr :arrow_up:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-02-03 14:38:27",
    "text": "I just rediscovered an old thread that will not help you, but is cat relevant"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-02-03 14:38:35",
    "text": "Hold please"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:38:42",
    "text": "Running the code in postman, the format is pretty messed up with all the ,"
  },
  {
    "poster": {
      "poster_name": "Cody Harris",
      "poster_handle": "cody.harris"
    },
    "time_stamp": "2023-02-03 14:38:48",
    "text": "well thats still helpful"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:38:58",
    "text": "I'll slack the Python version, one moment"
  },
  {
    "poster": {
      "poster_name": "Cody Harris",
      "poster_handle": "cody.harris"
    },
    "time_stamp": "2023-02-03 14:39:10",
    "text": "okay ty so much for prompt responses"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-02-03 14:39:52",
    "text": "<https://HubSpotdev.slack.com/archives/C22PU4LV8/p1544039706089000?thread_ts=1544039706.089000&amp;cid=C22PU4LV8|https://HubSpotdev.slack.com/archives/C22PU4LV8/p1544039706089000?thread_ts=1544039706.089000&amp;cid=C22PU4LV8>"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-02-03 14:40:06",
    "text": "Carter is more helpful than I am so I defer to him"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:40:08",
    "text": "also just to double check you want to filter by OWNER and TIME not an OR correct"
  },
  {
    "poster": {
      "poster_name": "Cody Harris",
      "poster_handle": "cody.harris"
    },
    "time_stamp": "2023-02-03 14:40:10",
    "text": "also is there a postman collection or whatever they call it for this api, I couldnt find it"
  },
  {
    "poster": {
      "poster_name": "Cody Harris",
      "poster_handle": "cody.harris"
    },
    "time_stamp": "2023-02-03 14:40:14",
    "text": "AND"
  },
  {
    "poster": {
      "poster_name": "Cody Harris",
      "poster_handle": "cody.harris"
    },
    "time_stamp": "2023-02-03 14:40:17",
    "text": "yes"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:40:27",
    "text": "Ok it was setup to do OR"
  },
  {
    "poster": {
      "poster_name": "Cody Harris",
      "poster_handle": "cody.harris"
    },
    "time_stamp": "2023-02-03 14:40:31",
    "text": "hahaha what is that site"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:40:42",
    "text": "anything that Will builds is pretty awesome"
  },
  {
    "poster": {
      "poster_name": "Cody Harris",
      "poster_handle": "cody.harris"
    },
    "time_stamp": "2023-02-03 14:40:44",
    "text": "Oh I see now"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-02-03 14:41:04",
    "text": "This was when I was on the other side"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-02-03 14:41:13",
    "text": "I am old"
  },
  {
    "poster": {
      "poster_name": "Cody Harris",
      "poster_handle": "cody.harris"
    },
    "time_stamp": "2023-02-03 14:41:14",
    "text": "yeah screw using lorem ipsum when you have content like that"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-02-03 14:42:40",
    "text": "Regarding postman collections, they are available in the docs.  <@U03MLCLS5BN> is going to be doing amazing things with postman in the future :eyes:"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:42:54",
    "text": "<@U04LRKC9WLU>\n\n```import requests\nimport json\n\nurl = \"<https://api.hubapi.com/crm/v3/objects/calls/search>\"\n\npayload = json.dumps({\n  \"filterGroups\": [\n    {\n      \"filters\": [\n        {\n          \"propertyName\": \"HubSpot_owner_id\",\n          \"operator\": \"EQ\",\n          \"value\": \"OWNER ID\"\n        },\n        {\n          \"propertyName\": \"hs_createdate\",\n          \"operator\": \"GT\",\n          \"value\": \"1672782099000\"\n        }\n      ]\n    }\n  ]\n})\nheaders = {\n  'Authorization': 'Bearer xxxxxx',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)```\nreplace xxxxx with your private app token"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:43:40",
    "text": "hs_createdate instead of hs_timestamp, and make the time be a unix timestamp"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:43:47",
    "text": "the little things get you"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:44:07",
    "text": "Yay for <@U03MLCLS5BN> building a postman collection"
  },
  {
    "poster": {
      "poster_name": "Cody Harris",
      "poster_handle": "cody.harris"
    },
    "time_stamp": "2023-02-03 14:44:20",
    "text": "yeah! I am sure over time I will catch on, but that is awesome that seems to be working now!!"
  },
  {
    "poster": {
      "poster_name": "Cody Harris",
      "poster_handle": "cody.harris"
    },
    "time_stamp": "2023-02-03 14:44:31",
    "text": "I cannot explain how helpful you guys were."
  },
  {
    "poster": {
      "poster_name": "Cody Harris",
      "poster_handle": "cody.harris"
    },
    "time_stamp": "2023-02-03 14:44:58",
    "text": "you said there is a postman collection in the docs, do you mind linking it?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-02-03 14:45:11",
    "text": "I am on my phone"
  },
  {
    "poster": {
      "poster_name": "Cody Harris",
      "poster_handle": "cody.harris"
    },
    "time_stamp": "2023-02-03 14:45:28",
    "text": "no worries, I can look around I just looked for it before I posted, and I didnt see them"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-02-03 14:45:36",
    "text": "But if you go to an API and look at the endpoints, you should see a collection at the top"
  },
  {
    "text": "",
    "time_stamp": "2023-02-03 14:46:08"
  },
  {
    "text": "",
    "time_stamp": "2023-02-03 14:46:16"
  },
  {
    "poster": {
      "poster_name": "Cody Harris",
      "poster_handle": "cody.harris"
    },
    "time_stamp": "2023-02-03 14:46:26",
    "text": "you got to be kitten me"
  },
  {
    "poster": {
      "poster_name": "Cody Harris",
      "poster_handle": "cody.harris"
    },
    "time_stamp": "2023-02-03 14:46:32",
    "text": "..... I cant believe I missed that"
  },
  {
    "poster": {
      "poster_name": "Cody Harris",
      "poster_handle": "cody.harris"
    },
    "time_stamp": "2023-02-03 14:46:37",
    "text": "thanks a bunch"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:46:45",
    "text": "of course"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:47:14",
    "text": "let ~us~ me know if you run into any problems"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-02-03 14:47:34",
    "text": "Ha!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:47:39",
    "text": "lol"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-02-03 14:47:48",
    "text": "Carter charges by the character"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:47:51",
    "text": "dennis uses his phone as an excuse"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:48:01",
    "text": "haha"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:48:11",
    "text": "can't run that in postman, on my phone"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-02-03 14:48:13",
    "text": "Real time photo"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:48:22",
    "text": "\"also carter would beat me anyway\""
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:48:27",
    "text": "under his breath"
  },
  {
    "text": "",
    "time_stamp": "2023-02-03 14:48:35"
  },
  {
    "poster": {
      "poster_name": "Hannah Seligson - Developer Advocate",
      "poster_handle": "hseligson"
    },
    "time_stamp": "2023-02-03 14:48:46",
    "text": "Most of the current collections are out of date and return errors :sob:  but this will change soon!"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-02-03 14:48:49",
    "text": "Watching my kid own the arcade"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:49:00",
    "edited": {
      "time_stamp": "2023-02-03 14:49:03"
    },
    "text": "Now I feel bad"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:49:17",
    "text": "Please buy 10 tokens and send me the bill"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-02-03 14:49:23",
    "text": "Ha!!"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-02-03 14:49:38",
    "text": "Welcome, Cody!"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2023-02-03 14:49:44",
    "text": "This is what you get"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 14:49:46",
    "text": "very true <@U03MLCLS5BN> the community has a ton of up to date ones though"
  },
  {
    "poster": {
      "poster_name": "Hannah Seligson - Developer Advocate",
      "poster_handle": "hseligson"
    },
    "time_stamp": "2023-02-03 14:50:16",
    "text": "Okay, phew!!"
  },
  {
    "time_stamp": "2023-02-03 14:50:18",
    "text": "welcome"
  },
  {
    "poster": {
      "poster_name": "sebastian campos",
      "poster_handle": "sebcampos23"
    },
    "time_stamp": "2023-02-03 14:54:19",
    "text": "Hello all! I am just a freelance worker trying to set up a small automation script for a client.\n\nThey have a form on HubSpot and and excelsheet they want to use to make entries and submissions on this form.\n\nThis part seems simple enough, the client provided a link to the form. From there I believe I was able to find the formGuid and portalId\nusing the browser tools. I have created a developer account and got some credentials. When I ping the api following these instructions <https://legacydocs.HubSpot.com/docs/methods/forms/v2/get_fields>\n\nI get the following:\n b'{\"status\":\"error\",\"message\":\"No form found with guid \\'94fd4aa4-c4b7-4449-b668-dcee349809f4\\'\",\"correlationId\":\"0fd5023d-024c-4920-8cc3-0beaf00be75d\",\"type\":\"NOT_FOUND\"}'",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-02-03 15:35:11"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-03 15:35:11",
    "text": "Do you have the form embed code from the client?"
  }
]