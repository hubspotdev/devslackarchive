[
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 05:37:31",
    "text": "typo for `ModuleFields` on this page: <https://github.HubSpot.com/cms-js-building-block-examples/reference/js-modules.html#building-fields-with-jsx>",
    "reply_count": 15,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2024-01-11 06:13:14"
      },
      {
        "time_stamp": "2024-01-11 06:13:59"
      },
      {
        "time_stamp": "2024-01-11 06:14:31"
      },
      {
        "time_stamp": "2024-01-11 06:14:49"
      },
      {
        "time_stamp": "2024-01-11 06:14:53"
      },
      {
        "time_stamp": "2024-01-11 06:17:24"
      },
      {
        "time_stamp": "2024-01-11 06:18:35"
      },
      {
        "time_stamp": "2024-01-11 06:18:42"
      },
      {
        "time_stamp": "2024-01-11 06:18:43"
      },
      {
        "time_stamp": "2024-01-11 06:24:07"
      },
      {
        "time_stamp": "2024-01-11 06:37:08"
      },
      {
        "time_stamp": "2024-01-11 06:41:10"
      },
      {
        "time_stamp": "2024-01-11 07:16:39"
      },
      {
        "time_stamp": "2024-01-11 07:29:07"
      },
      {
        "time_stamp": "2024-01-11 07:29:19"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 05:39:10",
    "text": "or at least `ModuleField` does not work for me / doesn't make sense"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 05:44:56",
    "text": "is there a good way to \"test\" and generally just look at module fields as I am setting them up? I think someone said to run them through storybook? otherwise I have to deploy each time to see how they are coming together",
    "reply_count": 8,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2024-01-11 07:13:31"
      },
      {
        "time_stamp": "2024-01-11 07:29:42"
      },
      {
        "time_stamp": "2024-01-11 07:31:49"
      },
      {
        "time_stamp": "2024-01-11 08:08:51"
      },
      {
        "time_stamp": "2024-01-11 08:10:01"
      },
      {
        "time_stamp": "2024-01-11 08:10:32"
      },
      {
        "time_stamp": "2024-01-11 08:10:57"
      },
      {
        "time_stamp": "2024-01-11 08:11:24"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Chiedu Agborh",
      "poster_handle": "chiedu.agborh"
    },
    "time_stamp": "2024-01-11 06:13:14",
    "text": "ModuleFields works for me.\nStorybook  (for me personally) is a cheat code for previewing your components.\nI haven't found a way to test the fields, I normally create the field automatically via design manager and reverse engineer (check to see how the module fields are supposed to look) hopefully that helps :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 06:13:59",
    "text": "yea, just to be clear `ModuleFields` works but `ModuleField` does not"
  },
  {
    "poster": {
      "poster_name": "Chiedu Agborh",
      "poster_handle": "chiedu.agborh"
    },
    "time_stamp": "2024-01-11 06:14:31",
    "text": "yep!"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 06:14:49",
    "text": "I was considering the design manager thing (that's how I would normally do it so I can copy/paste) but I found this: <https://github.HubSpot.com/cms-js-building-block-examples/field-types/>"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 06:14:53",
    "text": "which is definitely helpful"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 06:17:24",
    "text": "<@U06947ZLRCK> thank you btw :smile:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 06:18:35",
    "text": "trying to find the storybook docs"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 06:18:42",
    "text": "is it just adding to the start script/"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 06:18:43",
    "text": "?"
  },
  {
    "poster": {
      "poster_name": "Chiedu Agborh",
      "poster_handle": "chiedu.agborh"
    },
    "time_stamp": "2024-01-11 06:24:07",
    "text": "adding storybook to the start script?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 06:37:08",
    "text": "yea, I'm not sure how to run storybook. Looking for the setup instructions but got distracted lol"
  },
  {
    "poster": {
      "poster_name": "Chiedu Agborh",
      "poster_handle": "chiedu.agborh"
    },
    "time_stamp": "2024-01-11 06:38:45",
    "text": "Howdy all, has anyone been able to import a third party package, via npm\ne.g ReactPlayer or GSAP.\n\nAnytime I try to render the component, it throws an error not being able to find the module or its function isnt recognised.\n\nAny insight would be appreciated, thanks",
    "reply_count": 9,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-01-11 07:11:08"
      },
      {
        "time_stamp": "2024-01-11 07:25:22"
      },
      {
        "time_stamp": "2024-01-11 08:28:44"
      },
      {
        "time_stamp": "2024-01-11 08:58:38"
      },
      {
        "time_stamp": "2024-01-11 09:02:00"
      },
      {
        "time_stamp": "2024-01-11 09:03:55"
      },
      {
        "time_stamp": "2024-01-11 09:05:15"
      },
      {
        "time_stamp": "2024-01-11 09:06:43"
      },
      {
        "time_stamp": "2024-01-11 09:07:35"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Chiedu Agborh",
      "poster_handle": "chiedu.agborh"
    },
    "time_stamp": "2024-01-11 06:41:10",
    "text": "Ohhhh I see"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-11 07:10:35",
    "text": "Don’t think so. I’ll pass that on to the editor and related teams.\n\nAny more feedback/reasoning on why that would be helpful for you?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-11 07:11:08",
    "text": "You hitting this problem locally with the dev server or when deployed?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-11 07:13:31",
    "text": "By “look” you mean how the field JSON looks (like us adding a `<http://hslocal.net:3000/module/module/module_name%/fields.json>` dev server endpoint)? Or “look” as in how the fields look in the page editor?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-11 07:16:39",
    "text": "Thanks, <https://github.com/HubSpot/cms-js-building-block-examples/pull/56> to fix typos"
  },
  {
    "poster": {
      "poster_name": "Scott Brown",
      "poster_handle": "scott.brown523"
    },
    "time_stamp": "2024-01-11 07:25:05",
    "text": "We tend to build modules for these simple layouts so content editors/clients can't break our beautiful site layouts. We do however want to make use of the sections tab as people tend to like seeing what modules they're putting onto pages. So I wanted to see if we could turn off the layouts option but still keep the modules and sections tabs."
  },
  {
    "poster": {
      "poster_name": "Chiedu Agborh",
      "poster_handle": "chiedu.agborh"
    },
    "time_stamp": "2024-01-11 07:25:22",
    "text": "when deployed"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 07:29:07",
    "text": "<@UCY83QS6Q> if I find other typos should I try to make a pull request?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-11 07:29:19",
    "text": "Go for it! :pray:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 07:29:42",
    "text": "I meant in the page editor"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 07:31:49",
    "text": "kind of like how the design manager let's you preview...although, to be honest, I did not use that too often"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 07:45:07",
    "text": "is this how you would conditionally render a `target=\"_blank\"` in react?\n`{...(primary.button_link.open_in_new_tab ? { target: \"_blank\" } : {})}`\n\nthe spread caught me off guard but it does make sense. Does this feel wrong? I could just make the target `_self` but feels better to not set the target at all no?",
    "reply_count": 25,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2024-01-11 07:47:42"
      },
      {
        "time_stamp": "2024-01-11 07:48:53"
      },
      {
        "time_stamp": "2024-01-11 07:50:40"
      },
      {
        "time_stamp": "2024-01-11 07:52:08"
      },
      {
        "time_stamp": "2024-01-11 07:52:10"
      },
      {
        "time_stamp": "2024-01-11 07:53:07"
      },
      {
        "time_stamp": "2024-01-11 07:53:08"
      },
      {
        "time_stamp": "2024-01-11 07:53:51"
      },
      {
        "time_stamp": "2024-01-11 07:54:12"
      },
      {
        "time_stamp": "2024-01-11 07:54:26"
      },
      {
        "time_stamp": "2024-01-11 07:56:07"
      },
      {
        "time_stamp": "2024-01-11 08:08:15"
      },
      {
        "time_stamp": "2024-01-11 08:14:09"
      },
      {
        "time_stamp": "2024-01-11 08:14:40"
      },
      {
        "time_stamp": "2024-01-11 08:16:30"
      },
      {
        "time_stamp": "2024-01-11 08:16:48"
      },
      {
        "time_stamp": "2024-01-11 08:17:28"
      },
      {
        "time_stamp": "2024-01-11 08:17:48"
      },
      {
        "time_stamp": "2024-01-11 08:19:14"
      },
      {
        "time_stamp": "2024-01-11 08:20:53"
      },
      {
        "time_stamp": "2024-01-11 08:21:34"
      },
      {
        "time_stamp": "2024-01-11 08:22:11"
      },
      {
        "time_stamp": "2024-01-11 08:22:29"
      },
      {
        "time_stamp": "2024-01-11 08:33:14"
      },
      {
        "time_stamp": "2024-01-11 08:33:21"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-11 07:47:42",
    "text": "You can do `target={undefined}` and no target attribute will show up."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 07:48:53",
    "text": "^ I think it returns true/false"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 07:50:40",
    "text": "`target={primary.button_link.open_in_new_tab ? \"_blank\" : undefined}` is what you mean, misunderstood"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-11 07:52:08",
    "text": "<https://codepen.io/timmfin/pen/YzgGOjo>"
  },
  {
    "text": "",
    "time_stamp": "2024-01-11 07:52:10"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 07:53:07",
    "text": "cool, chatGPT really took that to the next level but made everything a lot more confusing for the next dev"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-11 07:53:08",
    "text": "(whoops took the screenshot with true instead of false, but I think you get what I mean)"
  },
  {
    "poster": {
      "poster_name": "Chris Stone",
      "poster_handle": "chris.stone603"
    },
    "time_stamp": "2024-01-11 07:53:51",
    "text": "this looks good to me. as an possible alternative, sometimes I prefer to explicitly use an if statement rather than the ternary in jsx:\n\n```    let linkAttributes = {};\n\n    if (primary.button_link.open_in_new_tab) {\n        linkAttributes = { target: \"_blank\", rel: \"noopener noreferrer\" };\n    }\n\n    return (\n        &lt;a href={primary.button_link.url} {...linkAttributes}&gt;\n            Click me\n        &lt;/a&gt;\n    ); ```"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 07:54:12",
    "text": "^ interesting too"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-11 07:54:26",
    "text": "Yup, and I think you need to do ^ for true/false attributes like `disabled`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 07:56:07",
    "text": "damn, now I hate deciding between these different approaches :laughing:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 08:08:15",
    "edited": {
      "time_stamp": "2024-01-11 08:08:34"
    },
    "text": "now I'm curious actually, if it was a button and could have a `disabled` attribute—how would you do it? it's not an object and it's not a string (right?)\n\nalso in <@U055N3S0WPP> example, would that work?, it's not `target: \"_blank\"` it's `target=\"_blank\"`"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-01-11 08:08:51",
    "text": "Story book will offer the ability to enter field values via their controls and those values will be used for rendering"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-01-11 08:10:01",
    "text": "By \"coming together\" do you mean to see the how the \"Module Form Editor\" looks or just the rendered output of a module with various field values?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 08:10:32",
    "text": "^ the editor experience in HubSpot page editor"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 08:10:57",
    "edited": {
      "time_stamp": "2024-01-11 08:11:04"
    },
    "text": "I always try to optimize and redo that as I go to create a better experience"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-01-11 08:11:24",
    "text": "go it - yeah there is no way to preview what the Module Form Editor in the page editor looks like without building and deploying an updated module."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 08:14:09",
    "edited": {
      "time_stamp": "2024-01-11 08:16:10"
    },
    "text": "sorry, I know I'm wrong about the Chris example, that's how spreading [in react, into the dom] works"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 08:14:40",
    "text": "although...it feels unintuitive for me"
  },
  {
    "text": "Something helpful to realize is that JSX simply compiles down to…",
    "time_stamp": "2024-01-11 08:16:30"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-11 08:16:48",
    "text": "So `=` and `:` are essentially the same thing, just different syntax in JSX"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 08:17:28",
    "text": "if it was a regular spread in another context that wouldn't work\n```let linkAttributes = { target: \"_blank\", rel: \"noopener noreferrer\" };\nlet newAttributes = { ...linkAttributes };```\ngotcha, it's because it's JSX"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 08:17:48",
    "text": "thank you, nice to have that all wrapped up"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 08:19:14",
    "text": "still not 100% on how to approach it if it was a button and I wanted to have just a `disabled` attribute..."
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-11 08:20:53",
    "text": "Other than `&lt;button disabled={true/false}&gt;` (like if you want to hide the attribute if `false` ?)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 08:21:34",
    "text": "yea, if want it to either render &lt;button disabled&gt; or just &lt;button&gt;"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-11 08:22:11",
    "text": "Like Chris’s example, you omit `disabled` from `linkAttributes` before “spreading” it on the component"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-11 08:22:29",
    "text": "Another example: <https://blog.bitsrc.io/4-methods-to-add-conditional-attributes-to-react-components-b1ad195f449b#40bd>"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-11 08:28:44",
    "text": "Ok. Could you provide more of the exact error message and code using the package?\n\nAlso, to sanity check, if you try one of our examples that uses an external npm package (like <https://github.com/HubSpot/cms-js-building-block-examples/blob/main/styling/styling-project/styling-app/package.json|styling>) that works?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 08:33:14",
    "text": "ok, got it, that all makes sense now"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-11 08:33:21",
    "text": "I appreciate the react lesson!"
  },
  {
    "text": "Heres the code:\n`import React, { useState, useRef } from 'react';`\n`import layoutStyles from '../../styles/layout.module.css';`\n`import ReactPlayer from 'react-player';`\n\n`import {`\n    `ModuleFields,`\n    `TextField`\n  `} from '@HubSpot/cms-components/fields';`\n  \n  `export const fields = (`\n    `<ModuleFields>`\n       `<TextField`\n          `label=\"Video url\"`\n          `name=\"url\"`\n        `/>`\n    `</ModuleFields>`\n  `);`\n\n  `export const meta = {`\n    `label: `All VideoPlayer Module`,`\n    `is_available_for_new_content: true`\n  `};`\n  \n  \n`export const Component = (url) => {`\n\n  `const [isPlaying, setIsPlaying] = useState(false);`\n  `// const [isShown, setIsShown] = useState(true);`\n  `console.log('url', url)`\n  `return (`\n    \n    `<div className={`py-5 text-center`}>`\n      `<div className={`${layoutStyles.width2xl} my-md flex flex-row text-center justify-center gap-x-8`}>`\n        `</div>`\n        `<ReactPlayer url={url} width=\"100%\" height=\"100%\" playing={isPlaying} />`\n    `</div>`\n  `);`\n  `};`\n\nError is attached, would it help to see the project structure as well?",
    "time_stamp": "2024-01-11 08:58:38",
    "edited": {
      "time_stamp": "2024-01-11 08:59:37"
    }
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-11 09:02:00",
    "text": "Ah, this might be an ESM issue that we’ve ran into with many packages that don’t have a good ESM setup (we need to fix some things so that errors like that pop up in the dev server and not only when deployed).\n\n<https://github.com/cookpete/react-player/issues/1721> and <https://github.com/cookpete/react-player/issues/1443#issuecomment-1122665718> look related…"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-11 09:03:55",
    "text": "What version of ReactPlayer are you on?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-11 09:05:15",
    "text": "Oh and previous thread: <https://HubSpotdev.slack.com/archives/C04AY1H2204/p1698850891980649?thread_ts=1698850243.283179&amp;cid=C04AY1H2204> (I assume they eventually got it working?)"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-11 09:06:43",
    "text": "Also <https://github.com/cookpete/react-player/issues/1406#issuecomment-1153230409> :shrug: ?"
  },
  {
    "poster": {
      "poster_name": "Chiedu Agborh",
      "poster_handle": "chiedu.agborh"
    },
    "time_stamp": "2024-01-11 09:07:35",
    "text": "Oooo thanks for these!\nv2.14.1"
  },
  {
    "poster": {
      "poster_name": "Anze",
      "poster_handle": "anzekopko2002"
    },
    "time_stamp": "2024-01-11 09:09:24",
    "text": "Is it still possible to interact with HubDB table, cant find this in the docs anywhere",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2024-01-11 09:13:01"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-11 09:13:01",
    "text": "Interact as in modify/add HubDB rows? Or read?\n\nFor read, we have some examples of doing hubdb GraphQL queries, like at <https://github.com/HubSpot/cms-js-building-block-examples/blob/1c83d5179fe7c902834a4bee44a0a7b219cdb798/todo-mvc/todo-mvc-project/todo-mvc-app/components/modules/TodoMVCModule/index.jsx#L38-L48|https://github.com/HubSpot/cms-js-building-block-examples/blob/1c83d5179fe7c902834[…]project/todo-mvc-app/components/modules/TodoMVCModule/index.jsx>"
  },
  {
    "poster": {
      "poster_name": "George Grigorita",
      "poster_handle": "george.grigorita"
    },
    "time_stamp": "2024-01-11 10:42:49",
    "text": "Any reason why it wouldn’t work to update the platform version from 2023.1 to 2023.2?\n```// hsproject.json\n{\n  \"name\": \"project\",\n  \"srcDir\": \".\",\n  \"platformVersion\": \"2023.2\"\n}```\nAfter deploying in HubSpot I still see it’s on 2023.1.",
    "reply_count": 7,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2024-01-11 11:19:55"
      },
      {
        "time_stamp": "2024-01-11 11:25:36"
      },
      {
        "time_stamp": "2024-01-11 11:26:50"
      },
      {
        "time_stamp": "2024-01-11 11:27:06"
      },
      {
        "time_stamp": "2024-02-06 09:34:27"
      },
      {
        "time_stamp": "2024-02-06 09:36:16"
      },
      {
        "time_stamp": "2024-02-06 09:36:35"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-11 11:19:55",
    "text": "that should work, but for JS rendering specifically the platformVersion currently has no change between the two"
  },
  {
    "poster": {
      "poster_name": "George Grigorita",
      "poster_handle": "george.grigorita"
    },
    "time_stamp": "2024-01-11 11:25:36",
    "text": "Yeah, it’s not really an issue — just wanted to get rid of the deprecated notice in Projects in HubSpot.\n\nI’ll try tomorrow on another portal, to see if works there. :man-shrugging::skin-tone-2:"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2024-01-11 11:26:50",
    "text": "yup totally fair. <#C011F74BKQW|serverless-functions> might be a good place to ask further if it continues to show the warning since the team there works more with platformVersions"
  },
  {
    "poster": {
      "poster_name": "George Grigorita",
      "poster_handle": "george.grigorita"
    },
    "time_stamp": "2024-01-11 11:27:06",
    "text": "cool and thanks :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Mattis Rosenkranz",
      "poster_handle": "m.rosenkranz"
    },
    "time_stamp": "2024-01-11 11:53:09",
    "text": "Hey, does anybody know how to render a menu when using a MenuField in a React module? It just returns the id of the selected menu and menus don’t seem to be accessible from GraphQL as far as i saw.",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-01-12 07:02:09"
      },
      {
        "time_stamp": "2024-01-15 03:46:36"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "T. Roberts",
      "poster_handle": "direstardb"
    },
    "time_stamp": "2024-01-11 12:23:59",
    "text": "Hi!  I have a question about Tailwind.  I have a site I'm migrating onto HubSpot.  The site was built using Tailwind.  I would like to grab the Tailwind css and config files and copy them to my theme, but I feel like there is more to it than that.  I should note that I'm fairly new to Tailwind, theme building, and using the HubSpot CLI, but I've been working on getting up to speed.  I did read the documentation about setting the watch to copy over the Tailwind classes as they are used, but I don't think I need that since all of the classes are defined on the non-HubSpot version of the site.  Thank you in advance!",
    "reply_count": 3,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2024-01-12 01:29:26"
      },
      {
        "time_stamp": "2024-01-12 04:15:47"
      },
      {
        "time_stamp": "2024-01-12 07:03:52"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jeff W",
      "poster_handle": "jwaterfall"
    },
    "time_stamp": "2024-01-11 16:49:07",
    "text": "Anyone know if a module's content_id is accessible via component props or some other way?",
    "reply_count": 10,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-01-12 06:58:59"
      },
      {
        "time_stamp": "2024-01-12 12:04:49"
      },
      {
        "time_stamp": "2024-01-12 12:30:25"
      },
      {
        "time_stamp": "2024-01-12 12:31:47"
      },
      {
        "time_stamp": "2024-01-12 12:33:29"
      },
      {
        "time_stamp": "2024-01-12 12:36:35"
      },
      {
        "time_stamp": "2024-01-12 12:37:20"
      },
      {
        "time_stamp": "2024-01-16 10:37:04"
      },
      {
        "time_stamp": "2024-01-16 10:48:58"
      },
      {
        "time_stamp": "2024-01-25 12:00:44"
      }
    ]
  }
]