[
  {
    "poster": {
      "poster_name": "Thomas Bennedbæk",
      "poster_handle": "thomas_katalysator"
    },
    "time_stamp": "2019-03-15 02:08:18",
    "text": "Multi select - yes please! I've been missing this feature as well."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-15 10:59:52",
    "text": "minor idea - <https://app.HubSpot.com/myaccounts-beta>\n\ngraduate the myaccounts from beta :laughing:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-15 14:48:50",
    "text": "idea - replace the single favicon option in content settings with this: <https://app-manifest.firebaseapp.com/>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-15 14:49:21",
    "text": "then also have a file picker for picking a custom manifest file from the file manager"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-03-15 14:50:07",
    "text": "yeah!"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-15 14:50:42",
    "text": "step 3: profit!"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-03-15 15:27:36",
    "text": "sweet!"
  },
  {
    "poster": {
      "poster_name": "Pablo Rosa",
      "poster_handle": "prosa"
    },
    "time_stamp": "2019-03-15 15:27:40",
    "text": "Please add optional lazy loading to images!!!",
    "reply_count": 18,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-03-15 15:29:38"
      },
      {
        "time_stamp": "2019-03-15 15:32:42"
      },
      {
        "time_stamp": "2019-03-15 15:32:53"
      },
      {
        "time_stamp": "2019-03-15 15:33:58"
      },
      {
        "time_stamp": "2019-03-15 15:36:30"
      },
      {
        "time_stamp": "2019-03-15 15:37:58"
      },
      {
        "time_stamp": "2019-03-15 15:38:31"
      },
      {
        "time_stamp": "2019-03-15 15:38:48"
      },
      {
        "time_stamp": "2019-03-15 15:39:02"
      },
      {
        "time_stamp": "2019-03-15 15:39:57"
      },
      {
        "time_stamp": "2019-03-15 15:42:32"
      },
      {
        "time_stamp": "2019-03-15 15:44:04"
      },
      {
        "time_stamp": "2019-03-15 15:44:42"
      },
      {
        "time_stamp": "2019-03-15 15:50:17"
      },
      {
        "time_stamp": "2019-03-15 15:50:20"
      },
      {
        "time_stamp": "2019-03-15 15:54:13"
      },
      {
        "time_stamp": "2019-03-15 15:54:31"
      },
      {
        "time_stamp": "2019-03-15 15:55:24"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-15 15:29:38",
    "text": "If this gets added, please make it just do data-src\n\nI don’t want a lazy loading library imposed…. :disappointed: that could really screw up a lot of things."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-15 15:32:42",
    "text": "I guess too now that I think of it, I don’t see what the need is for site-wide lazyloading"
  },
  {
    "poster": {
      "poster_name": "Pablo Rosa",
      "poster_handle": "prosa"
    },
    "time_stamp": "2019-03-15 15:32:53",
    "text": "True. Plus, when you implement lazy loading using the interface the images won't load in the editor view. only in the page preview."
  },
  {
    "poster": {
      "poster_name": "Pablo Rosa",
      "poster_handle": "prosa"
    },
    "time_stamp": "2019-03-15 15:33:58",
    "text": "well site wide because you should lazy load all images that aren't showing before the fold to increase load speed."
  },
  {
    "poster": {
      "poster_name": "Pablo Rosa",
      "poster_handle": "prosa"
    },
    "time_stamp": "2019-03-15 15:36:30",
    "text": "<@U7SL518D6> agree? That is one of the recommendations whenever you test a page using google <https://developers.google.com/speed/pagespeed/insights/>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-15 15:37:58",
    "text": "lazy loading all images that are not before the fold is actually not a best practice.\n\nusing lazyload is good but that specific reasoning actually isn’t great because it can have a negative effect on performance"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-15 15:38:31",
    "edited": {
      "time_stamp": "2019-03-15 15:38:39"
    },
    "text": "as well as cause users to see images loading when it’s not necessary."
  },
  {
    "poster": {
      "poster_name": "Pablo Rosa",
      "poster_handle": "prosa"
    },
    "time_stamp": "2019-03-15 15:38:48",
    "text": "Not before.. after the fold."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-15 15:39:02",
    "text": "I’m aware, that’s what I’m saying"
  },
  {
    "poster": {
      "poster_name": "Pablo Rosa",
      "poster_handle": "prosa"
    },
    "time_stamp": "2019-03-15 15:39:57",
    "text": "how can that affect performance? if you mind explaining."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-15 15:42:32",
    "text": "if you lazyload all images after the fold #1 you’re having to do a bunch of window resize checks and scroll position checks using the lazyloading library right off the bat. because above the fold is not a consistent thing across devices.\n\nYou actually are in addition preventing the browser’s own priority dom rendering from taking effect(which is really stinking efficient and amazing)\n\nand you are progressively breaking browser based lazyloading\n(<https://css-tricks.com/a-native-lazy-load-for-the-web-platform/>)"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-15 15:44:04",
    "text": "it makes more sense to use javascript based lazyloading for specific scenarios"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-15 15:44:42",
    "edited": {
      "time_stamp": "2019-03-15 15:47:25"
    },
    "text": "say you have a blog listing page, the blog featured images can be lazy loaded - that’s the bulk of the images and tied with infinite scrolling will have a great effect.\n\nlazyloading every image on the page - that’s preventing caching and the browsers own intelligent loading of the images."
  },
  {
    "poster": {
      "poster_name": "Pablo Rosa",
      "poster_handle": "prosa"
    },
    "time_stamp": "2019-03-15 15:50:17",
    "text": "ok here is an example of the second reload of a page implementing lazy loading"
  },
  {
    "text": "",
    "time_stamp": "2019-03-15 15:50:20"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-15 15:54:13",
    "text": "that’s good but you’re transferring the work of dealing with the cache to the browser’s dom in a way"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-15 15:54:31",
    "text": "what I mean is instead of letting the browser load the cached image right away it’s going to swap the src"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-03-15 15:55:24",
    "text": "using javascript across all of those nodes, when it could have just displayed them instantly"
  }
]