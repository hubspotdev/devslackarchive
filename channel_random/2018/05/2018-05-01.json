[
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-05-01 09:37:50",
    "text": "anyone know if any polyfills exist for CSS custom properties?\n\nI love them, and hate having to avoid them just to make IE 11 happy."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-05-01 09:50:29",
    "text": "Look into these maybe:"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-05-01 09:50:30",
    "text": "<https://github.com/jhildenbiddle/css-vars-ponyfill>"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-05-01 09:50:36",
    "text": "<https://github.com/postcss/postcss-custom-properties>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-05-01 09:55:51",
    "text": "roflmao… someone’s got pony’s on the brain"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-05-01 10:02:23",
    "text": "can’t say I fully understand what a ponyfill is but go developers for ridiculous names. Reminds me of Laravel’s Dick Framework - if you want a good laugh here’s the framework’s old site <http://web.archive.org/web/20170828053543/http://usedick.com:80/>\n\nI swear the page is safe to view at work. it just has a lot of puns"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2018-05-01 10:04:23",
    "text": "i thought that was what SASS was...  :wink:"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-05-01 10:05:33",
    "text": "Wow that framework has some very enthusiastic reviews"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2018-05-01 10:05:39",
    "text": "in all seriousness, you should check out <http://cssnext.io/> if you're wanting something like that",
    "reply_count": 14,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-05-01 10:09:05"
      },
      {
        "time_stamp": "2018-05-01 10:09:36"
      },
      {
        "time_stamp": "2018-05-01 10:11:10"
      },
      {
        "time_stamp": "2018-05-01 10:11:24"
      },
      {
        "time_stamp": "2018-05-01 10:12:18"
      },
      {
        "time_stamp": "2018-05-01 10:12:55"
      },
      {
        "time_stamp": "2018-05-01 10:12:56"
      },
      {
        "time_stamp": "2018-05-01 10:13:10"
      },
      {
        "time_stamp": "2018-05-01 10:14:03"
      },
      {
        "time_stamp": "2018-05-01 10:14:58"
      },
      {
        "time_stamp": "2018-05-01 10:15:27"
      },
      {
        "time_stamp": "2018-05-01 10:16:26"
      },
      {
        "time_stamp": "2018-05-01 10:17:18"
      },
      {
        "time_stamp": "2018-05-01 10:22:23"
      }
    ]
  },
  {
    "text": "<@U26DA9CQ0> uploaded a file: <https://HubSpotdev.slack.com/files/U26DA9CQ0/FAHFRLV63/screen_shot_2018-05-01_at_12.04.58_pm.png|Screen Shot 2018-05-01 at 12.04.58 PM.png>",
    "time_stamp": "2018-05-01 10:05:43"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-05-01 10:09:05",
    "text": "hmmm… I don’t develop locally with HubSpot, but could see using their web based playground page instead of autoprefixer."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-05-01 10:09:36",
    "text": "unfortunately though doesn’t fully  make custom properties work, only converts them to basically sass variables which aren’t as useful"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2018-05-01 10:11:10",
    "text": "what do you mean?"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2018-05-01 10:11:24",
    "text": "when it compiles it just outputs the values from the variables"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2018-05-01 10:12:18",
    "text": "you can use the HubSpot ftp to sync your compiled css"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2018-05-01 10:12:55",
    "text": "but yeah it's tough thing to change your workflow if you're used to doing it a certain way"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-05-01 10:12:56",
    "text": "right, it makes them essentially the same as sass variables, which we can mimic with hubl anyways.\n\nI’m more interested in an actual polyfill because css custom properties are dynamic, you can modify them with JS"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2018-05-01 10:13:10",
    "text": "oh gotcha"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-05-01 10:14:03",
    "text": "also makes editing in the inspector a better experience if the custom properties actually get outputted because you can modify them and see the result live instead of having to compile again"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-05-01 10:14:58",
    "text": "also a huge advantage custom properties can be calc’d live."
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2018-05-01 10:15:27",
    "text": "sounds like you want the cake and all the icing on it too hah"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-05-01 10:16:26",
    "text": "Always. If it were up to me I’d throw <http://outdatedbrowser.com/en>\n\non every site I make"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-05-01 10:17:18",
    "edited": {
      "time_stamp": "2018-05-01 10:17:30"
    },
    "text": "Or just detect IE and have it display a message saying “Friend’s don’t let friend’s use IE. Get a real browser: [chrome and firefox links]”"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-05-01 10:22:23",
    "text": "just noticed css next also only supports custom properties in :root\nDoesn’t support scoping. kinda like throwing global javascript variables everywhere and hoping  the fan is placed far away from the Sh*t"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-05-01 13:58:27",
    "text": "Thanks. yeah, I'd look to implement that all on server and not in html so I won't be messing with it."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-05-01 13:58:31",
    "text": "I appreciate the response"
  }
]