[
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-22 05:31:24",
    "text": "Remember it will always be true"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-22 05:31:27",
    "text": "<@U2H3TT8F2>"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-22 05:31:44",
    "text": "So you have to test against the default output"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-22 05:32:27",
    "text": "Each property has a default  text"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-08-22 07:37:49",
    "text": "My understanding of email templates is that the html is rendered in two \"passes\". One pass runs through most of the HubL but replaces all contact properties with some string. Then, it does a shorter pass for each contact that replaces the contact strings with the appropriate property for that contact. Presumably, this is faster than rendering the whole template for everybody."
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-08-22 07:38:38",
    "text": "Therefore, in the first pass `contact.firstname == 'Jeremy'` is never going to be true because until the second pass `contact.firstname` is always the same"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-08-22 07:39:03",
    "text": "So while you can show Jeremy's first name, you can't compare against his name and give him a different layout"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-08-22 07:39:26",
    "text": "It was a few years ago that I worked this out, so it might have changed."
  },
  {
    "text": "Would anyone know of the hidden input value to just search blog posts? Thanks :slightly_smiling_face:",
    "time_stamp": "2018-08-22 07:44:14"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-08-22 07:45:52",
    "text": "<https://developers.HubSpot.com/docs/methods/content/search-for-content> I haven't done much with search, but I imagine these values probably work?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-22 07:46:54",
    "text": "Yea you can just do `type=BLOG_POST`"
  },
  {
    "poster": {
      "poster_name": "Vincent Cifelli",
      "poster_handle": "vincent"
    },
    "time_stamp": "2018-08-22 07:56:45",
    "text": "<@U3A4KEWK1> <@U6GNQ7JBU> Thank you! :thumbsup:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 09:51:32",
    "text": "got something weird going on with blog detail templates  for some reason when creating a post you can’t edit custom fields. Here’s my HubL? what stupid obvious thing am I missing?\n``` &lt;h1&gt;{% text \"first_name\" label=\"First Name\", value=\"Michael\" %} {% text \"last_name\" label=\"Last Name\", value=\"Kopper\" %} {%- if content.widget_data.job_title.body.value -%},{%- endif -%} {% text \"job_title\" label=\"Job Title\", value=\"title\" %}&lt;/h1&gt;```"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-08-22 10:13:17",
    "edited": {
      "time_stamp": "2018-08-22 10:14:29"
    },
    "text": "<@U7SL518D6> now the post/listing block is like a CM and has the same limitations than a CM, so you can't add HubL fields (or they will be forced to overrideable=false)"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 10:14:46",
    "text": "Are you kidding me!? what!?"
  },
  null,
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 10:15:24",
    "text": "so if I add overrideable=true will that fix it?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 10:15:41",
    "text": "guess i can test."
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-08-22 10:16:07",
    "text": "you can test, but I think that doesn't work on CM neither"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 10:16:41",
    "text": "yea doesn’t work. man that ruins some things."
  },
  {
    "text": "notice the overrideable=false icon on the right",
    "time_stamp": "2018-08-22 10:17:13"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 10:17:22",
    "text": "crap…. They must allow it for upgraded sites and just not new sites"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-08-22 10:17:37",
    "edited": {
      "time_stamp": "2018-08-22 10:17:46"
    },
    "text": "yeah, I had to move the custom fields too"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 10:19:33",
    "text": "Do you know if we can pull values from a custom module added to a blog template? just trying to figure out a workaround. I need to be able to pull some blog post fields data to other pages through a custom module"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-08-22 10:20:07",
    "edited": {
      "time_stamp": "2018-08-22 10:21:53"
    },
    "text": "sure, use `all_widgets` property"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-08-22 10:21:42",
    "text": "`{% set widget = post.all_widgets|selectattr(\"label\", \"equalto\", \"label of the CM\") %}`\n`{{ widget[0].field_snippet }}`"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-08-22 10:22:35",
    "edited": {
      "time_stamp": "2018-08-22 10:25:20"
    },
    "text": "you can search for the widget name instead the `label` if you prefer, but that can change if you remove and add again the CM to the template (not sure if you just move the CM around the template or wrap on a new group tho) which means older posts with the prev template version will use a different widget name than the updated, thats why I prefer to use the the label of the CM because I can control that.\nI wold like to use the CM ID (the one you see in the URL) but can't be for now."
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-08-22 10:23:00",
    "text": "I actually talked about that today here:\n<https://HubSpotdev.slack.com/archives/C960Q64G4/p1534934017000100>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 10:26:05",
    "edited": {
      "time_stamp": "2018-08-22 10:27:45"
    },
    "text": "thank you a ton for this. seriously huge help huge huge help"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-08-22 10:32:03",
    "edited": {
      "time_stamp": "2018-08-22 10:33:53"
    },
    "text": "^ related to my previous mention <@U26B530N6>  :smile:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 10:37:35",
    "text": "this issue has kinda nulled the purpose of the blog content module to me."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 10:44:08",
    "edited": {
      "time_stamp": "2018-08-22 10:44:28"
    },
    "text": "*Have you seen this issue creep in on sites that were upgraded from DM1 to DM2?* This is the first time I think that I’ve worked on a blog for a site that was started with only access to DM2\n\nI’m honestly terrified nearly every site I’ve made is going to break because of this change"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-08-22 10:46:48",
    "text": "well, as far I have checked. This is pretty recent"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-08-22 10:47:23",
    "text": "I have even DM2 portals (on the very start) that was able to put custom field inside the blog content without running into this issue"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-08-22 10:47:27",
    "text": "and still working fine"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-08-22 10:47:39",
    "text": "but I am afraid that if I have to update the template for any reason it can break"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 10:48:42",
    "text": "very weird and yea, I’m pretty terrified of that exact issue.\n\nI have added custom fields to almost every blog I’ve made over the last 4 years, this change could cause a lot of problems"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-08-22 10:48:51",
    "text": "I am in the same situation, most of my clients have custom fields to manage special functions so I hope this is an issue that will be fixed and I am not forced to change them"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-08-22 10:50:50",
    "text": "maybe <@U22PNRAJD> can give us some light here"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 10:57:00",
    "text": "oh man this is getting hairy working around this… I have custom modules now that I’m going to have to pull data from other custom modules in the page instead of just displaying the tag in multiple places. eeek"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-08-22 10:58:19",
    "edited": {
      "time_stamp": "2018-08-22 10:58:48"
    },
    "text": "I had to do the same recently... so its equal as before, use the all_widgets snippet",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-08-22 11:03:53"
      },
      {
        "time_stamp": "2018-08-22 11:04:59"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 11:02:51",
    "text": "Do you guys think it’s possible to loop through two blogs and splice and sort them by date? Effectively combining two blogs into one listing."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 11:03:53",
    "text": "yea just feels like I’m making a big tangled web of code doing it."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 11:04:15",
    "text": "Yes it’s possible. I don’t recommend it though"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 11:04:30",
    "text": "Not sure I can avoid this one"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 11:04:43",
    "text": "I could jump out the window"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-08-22 11:04:59",
    "text": "I know, but didn't found a better way since the CM are limited"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 11:05:06",
    "text": "The window doesn’t open enough for me to get out"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 11:05:29",
    "text": "so yes you can do it but the problem is this: you need to use the recent posts function, and you can only pull up to 200. so assuming you had 2 blogs with say 300 posts in each you would have 200 posts not showing in your mixed set"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 11:05:46",
    "text": "I don’t think there’s a way to offset the recent posts function either"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 11:05:54",
    "text": "Okay interesting"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 11:06:28",
    "text": "I think because this is just a “News &amp; Events” blog I may be able to get away with that"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 11:07:26",
    "text": "so paginating is not easy.\n\nOne trick I’ve done in the past was bastardizing the simple listing blog page(which is a page that lists all of the posts without pagination) and outputting a json feed, then combining the json feed for both blogs using javascript. it’s a complicated and rediculous workaround that I’m certain HS devs would not appreciate lol"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 11:07:54",
    "text": "Yeah I’m not sure that it’s really worth all that"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 11:07:58",
    "text": "yea I’d just explain to the client only the most recent 200 posts in each blog would work"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 11:11:21",
    "text": "Thank you sir!"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-22 11:14:52",
    "text": "<@U26DA9CQ0> how many posts in this combined list do you need? Worst case you would only need to pull in 2n blog posts to splice them together into a list of length n"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 11:21:24",
    "text": "I don’t have a cap to the amount of posts I have but I’m trying to pull 25 posts into a blog that has 125 posts"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 11:22:30",
    "text": "They want to have posts with a certain tag in the other blog appear like any other post on the main blog"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 11:23:30",
    "text": "And also have a link to only view those 25 posts but in a listing that is skinned like the main blog"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-22 11:23:49",
    "edited": {
      "time_stamp": "2018-08-22 11:24:14"
    },
    "text": "So let's say you have your normal 25 post listing. Just pull 25 posts from the other blog with that tag, append, order by publish_date, and cut to 25 posts again"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 11:25:38",
    "text": "And I could just use the recent posts function within the listing template?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 11:25:52",
    "text": "Or do you think I would have to set up a faux listing page?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-22 11:27:42",
    "text": "<https://designers.HubSpot.com/en/docs/hubl/hubl-supported-functions#blog-recent-posts>"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-22 11:27:44",
    "text": "I don't see why not"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 11:28:13",
    "text": "Well then I’m off to the races. Thanks <@U6GNQ7JBU>!"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-22 11:29:18",
    "text": "Isnt there a related posts function now? Or was I imagining things."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-22 11:33:12",
    "text": "`{% related_blog_posts blog_ids=\"1,2\", limit=5, tags=\"Sales enablement, couches\", end_date=\"2018-04-10\", blog_authors=\"John Smith,Joe Smith,Frank Smith\", path_prefixes=\"/path-prefix\", post_formatter=\"test_macro\" %}`"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 11:33:59",
    "text": "I wonder if that also has the 200 post limit"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 11:34:05",
    "text": "That could be perfect"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 11:39:32",
    "text": "Continuing the conversation about tags no longer working on blog templates, if this is the direction things are going the tags documentation page should honestly consider showing a big deprecation warning because there will only be a select few oddball places they will even be usable on, because you can’t create HubL modules anymore and you can’t add them to blog content"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 11:44:53",
    "text": "WOOO HOOO! <@U7ADCU3BM> I found a work around, we CAN use tags in the blog!"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 11:45:24",
    "text": "It’s not an awesome editing experience but if you don’t mind that the users can’t click directly on the things they want to edit then who cares!"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 11:45:55",
    "text": "Throw all the tags into the &lt;head&gt; of the template with export to template context"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 11:46:00",
    "text": "BOOYAH!"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-22 11:46:49",
    "text": "hahaha… <@U7SL518D6>"
  },
  {
    "time_stamp": "2018-08-22 11:46:59",
    "text": ""
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 11:49:17",
    "text": "hahaha!"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 11:51:13",
    "text": "now the question is HS Devs are you going to close this loophole? <@U6GNQ7JBU> <@U22PNRAJD>\n\nBecause if you’re going to abolish tags completely I don’t want to go this route it will put me into the same mess I’m worried about now where all my old templates are going to break…"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-08-22 11:54:15",
    "text": "yeah sure, you can put that in the head but it feels wrong place for me.. I like keep organised everything"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 11:55:04",
    "text": "I completely agree but if I need to access a variable in multiple places I’d rather do it this way than deal with the select attr stuff"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-08-22 11:55:06",
    "text": "for now I am calling a macro in the head, to try to keep everything ordered (if its something easy like a hero image or featured post) but for complex things I move to a CM"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 11:57:22",
    "text": "so wait you’re defining a macro in the head, then outputting the field in with your content. you sir are a got-danm genious"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 12:03:35",
    "text": "hmm, popping tags into a macro to load later in the content doesn’t appear to work.\n\nCould you explain what you were doing with the macro?"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-08-22 12:14:02",
    "edited": {
      "time_stamp": "2018-08-22 12:15:09"
    },
    "text": "I basically have a general macro file that loads over the templates in the head.\nAnd in the same head I call for the macro that hold those custom fields"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-08-22 12:14:34",
    "text": "so at the end is the same thing (fields are parsed on the head) but at least is a bit more organised"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-08-22 12:14:51",
    "text": "and you know where to look all the times"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 12:15:59",
    "text": "interesting"
  },
  null,
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-08-22 12:45:27",
    "edited": {
      "time_stamp": "2018-08-22 12:45:38"
    },
    "text": "Anyone get the HubSpot Marketing Blog email this morning? There was a section in the body where an element was changed based on hover... is that a new standard, or did they just decide it was a best practice worth breaking? would share the web version link, but for whatever reason HS doesn't provide one."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 13:17:04",
    "text": "Hey is there a way to get around the HTML fields can’t contain HUBL error? I know I can replace everything with custom modules but it’s a bummer when I have to charge an extra 30 min to convert a template."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 13:17:48",
    "text": "I heard from someone that you can just make a change then publish quickly before the linter figures everything out"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 13:17:54",
    "text": "But that seems insane"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 13:18:34",
    "text": "yea… it sucks but unfortunately thats what you’re going to want to do.\n\nThe linter trick requires using the keyboard shortcuts then publishing but I advise against it because once someone edits that template again they’ll get the error and be like wtf?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 13:19:09",
    "text": "That guy is me"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 13:19:15",
    "text": "usually though with older sites the hubl module gets grandfathered"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 13:19:28",
    "text": "atleast thats what I’ve found in upgrading sites."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 13:19:56",
    "text": "Maybe I’ll just put all my HUBL into rich text fields, how does that make you feel?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 13:20:45",
    "text": "Maybe I’ll write it all in the wrapping HTML"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 13:21:01",
    "text": "Paste the entire template in there"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 13:22:04",
    "text": "oh gawd lol"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 13:22:48",
    "edited": {
      "time_stamp": "2018-08-22 13:23:43"
    },
    "text": "it makes me feel cringey,"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 13:25:38",
    "text": "I’m going to write all my code into CTAs, turning them into my modules, then use rich text fields as a flex column."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 13:26:27",
    "text": "I’m going to put a strong tag around the whole site"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 13:27:18",
    "text": "Then sell it to muscle-bound marketing managers"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 13:27:23",
    "text": "*shudder*"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-08-22 13:27:56",
    "text": "don't forget to &lt;center&gt;"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 13:28:10",
    "text": "oh good call, the mark of a true professional"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 13:28:54",
    "text": "&lt;bulletinboard&gt;"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 13:35:48",
    "text": "I think I fell in black hole  or something, next we’re going to be inserting `&lt;blink&gt;` and `&lt;marquee&gt;` tags"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 13:36:10",
    "text": "I should make a blink polyfill just for the fun of it"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 13:36:12",
    "text": "<http://www.wonder-tonic.com/geocitiesizer/>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 13:36:49",
    "text": "haha"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 13:39:59",
    "text": "oh man"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 13:40:08",
    "text": "that made my day gonna share it to one of my designers"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 13:40:41",
    "text": "Pretty sure that style is coming back around"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-08-22 13:40:55",
    "text": "Just replace the dancing baby gifs with CTAs"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 13:41:10",
    "text": "HAHAHAHA"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 13:42:32",
    "text": "Hey man, if it worked for Space Jam, it could work for you <https://www.warnerbros.com/archive/spacejam/movie/jam.htm>"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-22 13:58:34",
    "text": "Hey guys.. can i sort by a custom property in in a huspot blog loop?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-22 13:58:44",
    "text": "select attr ? somthing?"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-08-22 14:12:16",
    "text": "There's a |sort filter, but you're only going to be sorting between the posts that are on that page"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-22 14:12:43",
    "text": "sort doesnt seem to work with custom blog properties"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-08-22 14:12:54",
    "text": "Oh yeah, hm"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 14:14:22",
    "text": "loop through the blog posts, for each post loop through the widgets or use that select attr to find the specific widget you want to sort by"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 14:14:31",
    "text": "add the value of that item to  an array"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-22 14:15:04",
    "text": "you cant access the array from outside of the for loop"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 14:15:11",
    "text": "also add the post itself to the array, sort by the widgets value"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-22 14:15:11",
    "text": "or i cant seem to"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 14:15:19",
    "text": ":stuck_out_tongue_winking_eye: there are ways"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-22 14:15:45",
    "text": "Dont be Spry"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-08-22 14:15:51",
    "text": "There's a trick that someone in here showed me where you print out all the posts as a comma-separated list with post ID/custom field pairs, then you split _that_ into an array, sort the array, then use the get posts function"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-08-22 14:16:05",
    "text": "It's ridiculous and I don't have the snippet handy"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 14:16:29",
    "text": "yea thats similar to what I was saying above.\n\nmy method requires the trick to get vars outside of a loop"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-22 14:17:15",
    "edited": {
      "time_stamp": "2018-08-22 14:17:57"
    },
    "text": "and sorry Chad, my boss doesn’t like me giving that one out - it’s like the secret formula to Bush’s baked beans."
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-08-22 14:21:11",
    "text": "```{% macro sorter() %}{#\n  #}{% for content in contents %}{{ content.custom_field.value }}|{{ content.id }}{% unless loop.last %},{% endunless %}{% endfor %}{#\n#}{% endmacro %}\n\n{% set posts = sorter()|split(',')|sort %}\n{% for post in posts %}\n  {% set post_data = blog_post_by_id('blog_id', post|split('|')[1]) %}\n  {{ post_data.name }}\n{% endfor %}```\nIt was something like this"
  }
]