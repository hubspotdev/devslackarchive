[
  {
    "poster": {
      "poster_name": "Duncan du Plessis",
      "poster_handle": "duncan918"
    },
    "time_stamp": "2022-09-26 03:37:04",
    "text": "Good day everyone,\n\nI have a HubSpot API where I get a list of quotes. I want to use the search API to look for a specific quote ID but I don't quite understand the search API and what it exactly wants. If anyone can help me it will be much appreciated.",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2022-09-26 04:40:56"
      },
      {
        "time_stamp": "2022-09-26 04:44:53"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Luca Bartoli",
      "poster_handle": "bartoli"
    },
    "time_stamp": "2022-09-26 04:27:31",
    "text": "Hi everyone! We are testing custom workflow actions on custom objects. It works fine, but we are struggling with the labels. Basically, our action has a defined name (english label) and they are shown if we get the definition from API, but then the name is not used in the workflow panel (it shows 1-25371....).\nAnyone faced the same bug? Suggestions?",
    "reply_count": 22,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2022-09-26 07:18:20"
      },
      {
        "time_stamp": "2022-09-26 07:21:30"
      },
      {
        "time_stamp": "2022-09-26 07:22:39"
      },
      {
        "time_stamp": "2022-09-26 07:24:20"
      },
      {
        "time_stamp": "2022-09-26 07:54:29"
      },
      {
        "time_stamp": "2022-09-26 07:55:37"
      },
      {
        "time_stamp": "2022-09-26 07:55:48"
      },
      {
        "time_stamp": "2022-09-26 07:56:10"
      },
      {
        "time_stamp": "2022-09-26 07:56:33"
      },
      {
        "time_stamp": "2022-09-26 07:56:44"
      },
      {
        "time_stamp": "2022-09-26 07:57:11"
      },
      {
        "time_stamp": "2022-09-26 07:57:31"
      },
      {
        "time_stamp": "2022-09-26 07:57:57"
      },
      {
        "time_stamp": "2022-09-26 07:58:55"
      },
      {
        "time_stamp": "2022-09-26 08:03:00"
      },
      {
        "time_stamp": "2022-09-26 08:06:05"
      },
      {
        "time_stamp": "2022-09-26 08:13:47"
      },
      {
        "time_stamp": "2022-09-26 08:14:03"
      },
      {
        "time_stamp": "2022-09-26 08:15:43"
      },
      {
        "time_stamp": "2022-09-26 08:17:07"
      },
      {
        "time_stamp": "2022-09-27 03:59:06"
      },
      {
        "time_stamp": "2022-09-27 07:25:00"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 04:40:56",
    "text": "You should be able to get a quote by the id. The search is so you can search for other non id related items "
  },
  {
    "poster": {
      "poster_name": "Duncan du Plessis",
      "poster_handle": "duncan918"
    },
    "time_stamp": "2022-09-26 04:44:53",
    "text": "Never mind, I got it to work. I just missed a value which needed to be parsed."
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2022-09-26 04:58:21",
    "text": "At what point did the the form validation for dates change? I’m submitting a few forms through the api and just submit a timestamp to the date field, this used to just submit fine (and even store the datetime in HubSpot), however now I’m getting an error across a few different api functions i’m running as the timestamp isn’t midnight for the date.\n\nI know I can fairly easily fix this, i’m just not sure how many things this might have broken",
    "reply_count": 10,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2022-09-26 08:01:20"
      },
      {
        "time_stamp": "2022-09-26 10:24:12"
      },
      {
        "time_stamp": "2022-09-26 13:23:52"
      },
      {
        "time_stamp": "2022-09-26 13:26:47"
      },
      {
        "time_stamp": "2022-09-27 06:11:02"
      },
      {
        "time_stamp": "2022-09-27 06:12:07"
      },
      {
        "time_stamp": "2022-09-27 06:19:01"
      },
      {
        "time_stamp": "2022-09-27 06:25:35"
      },
      {
        "time_stamp": "2022-09-27 06:31:11"
      },
      {
        "time_stamp": "2022-09-27 07:08:08"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 07:18:20",
    "edited": {
      "time_stamp": "2022-09-26 07:18:47"
    },
    "text": "To get custom workflow actions to work with non stanard crm object you need to remove the `objectTypes`array"
  },
  {
    "poster": {
      "poster_name": "Luca Bartoli",
      "poster_handle": "bartoli"
    },
    "time_stamp": "2022-09-26 07:21:30",
    "text": "How do you select objects if you don't specify? Moreover, the association works fine by specifying the custom object Id. It's just labels for the node are ignored (not the fields ones, just the name)"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 07:22:39",
    "text": "Just remove this line and it will work for every object (custom or standard) on any hub:\n```\"objectTypes\": [...]```\n"
  },
  {
    "poster": {
      "poster_name": "Luca Bartoli",
      "poster_handle": "bartoli"
    },
    "time_stamp": "2022-09-26 07:24:20",
    "text": "Ok thanks! This just make impossible to restrict types, but great to know!"
  },
  {
    "poster": {
      "poster_name": "Luca Bartoli",
      "poster_handle": "bartoli"
    },
    "time_stamp": "2022-09-26 07:54:29",
    "text": "<@U01QVR44MEY> tried but it's not working. Neither an update, nor a new action from scratch"
  },
  {
    "text": "",
    "time_stamp": "2022-09-26 07:55:37"
  },
  {
    "text": "",
    "time_stamp": "2022-09-26 07:55:48"
  },
  {
    "poster": {
      "poster_name": "Luca Bartoli",
      "poster_handle": "bartoli"
    },
    "time_stamp": "2022-09-26 07:56:10",
    "text": "the empty array is the answer from the api when not sending the field"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 07:56:33",
    "text": "No use remove that entire line"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 07:56:44",
    "edited": {
      "time_stamp": "2022-09-26 07:56:58"
    },
    "text": "remove `\"objectTypes\":[],`"
  },
  {
    "poster": {
      "poster_name": "Luca Bartoli",
      "poster_handle": "bartoli"
    },
    "time_stamp": "2022-09-26 07:57:11",
    "text": "did it, but HS reverts it to an empty array"
  },
  {
    "poster": {
      "poster_name": "Luca Bartoli",
      "poster_handle": "bartoli"
    },
    "time_stamp": "2022-09-26 07:57:31",
    "text": "my post request didn't contain objectTypes at all"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 07:57:57",
    "text": "Ah, can you share the body of the post request?"
  },
  {
    "poster": {
      "poster_name": "Luca Bartoli",
      "poster_handle": "bartoli"
    },
    "time_stamp": "2022-09-26 07:58:55",
    "text": "```{\n  \"actionUrl\":\"<https://webhook.site/xxx>\",\n  \"inputFields\":[\n    {\n      \"typeDefinition\":{\n        \"name\":\"staticInput\",\n        \"type\":\"string\",\n        \"fieldType\":\"text\"\n      },\n      \"supportedValueTypes\":[\n        \"STATIC_VALUE\"\n      ],\n      \"isRequired\":true\n    },\n    {\n      \"typeDefinition\":{\n        \"name\":\"objectInput\",\n        \"type\":\"string\",\n        \"fieldType\":\"text\"\n      },\n      \"supportedValueTypes\":[\n        \"OBJECT_PROPERTY\"\n      ],\n      \"isRequired\":true\n    },\n    {\n      \"typeDefinition\":{\n        \"name\":\"optionsInput\",\n        \"type\":\"enumeration\",\n        \"fieldType\":\"select\",\n        \"optionsUrl\":\"<https://webhook.site/xxx>\"\n      },\n      \"supportedValueTypes\":[\n        \"STATIC_VALUE\"\n      ]\n    }\n  ],\n  \"inputFieldDependencies\":[\n    {\n      \"dependencyType\":\"SINGLE_FIELD\",\n      \"dependentFieldNames\":[\n        \"objectInput\"\n      ],\n      \"controllingFieldName\":\"staticInput\"\n    }\n  ],\n  \"outputFields\":[\n    {\n      \"typeDefinition\":{\n        \"name\":\"myOutput\",\n        \"type\":\"string\",\n        \"fieldType\":\"text\"\n      },\n      \"supportedValueTypes\":[\n        \"STATIC_VALUE\"\n      ]\n    }\n  ],\n  \"objectRequestOptions\":{\n    \"properties\":[\n      \"email\"\n    ]\n  },\n  \"labels\":{\n    \"en\":{\n      \"inputFieldLabels\":{\n        \"staticInput\":\"Static Input\",\n        \"objectInput\":\"Object Property Input\",\n        \"optionsInput\":\"External Options Input\"\n      },\n      \"actionName\":\"My Extension\",\n      \"actionDescription\":\"My Extension Description\",\n      \"appDisplayName\":\"My App Display Name\",\n      \"actionCardContent\":\"My Action Card Content\"\n    }\n  },\n  \"functions\":[\n    {\n      \"functionType\":\"POST_ACTION_EXECUTION\",\n      \"functionSource\":\"exports.main = (event, callback) =&gt; {\\r\\n  callback({\\r\\n    outputFields: {\\r\\n      myOutput: \\\"example output value\\\"\\r\\n    }\\r\\n  });\\r\\n}\"\n    },\n    {\n      \"functionType\":\"POST_FETCH_OPTIONS\",\n      \"functionSource\":\"exports.main = (event, callback) =&gt; {\\r\\n  callback({\\r\\n    \\\"options\\\": [{\\r\\n        \\\"label\\\": \\\"Big Widget\\\",\\r\\n        \\\"description\\\": \\\"Big Widget\\\",\\r\\n        \\\"value\\\": \\\"10\\\"\\r\\n      },\\r\\n      {\\r\\n        \\\"label\\\": \\\"Small Widget\\\",\\r\\n        \\\"description\\\": \\\"Small Widget\\\",\\r\\n        \\\"value\\\": \\\"1\\\"\\r\\n      }\\r\\n    ]\\r\\n  });\\r\\n}\"\n    }\n  ]\n}```"
  },
  {
    "poster": {
      "poster_name": "Luca Bartoli",
      "poster_handle": "bartoli"
    },
    "time_stamp": "2022-09-26 08:01:20",
    "edited": {
      "time_stamp": "2022-09-26 08:01:55"
    },
    "text": "timpestamps for dates have always been midnight utc in milliseconds. Mybe you created a datetime field via api and you remember the usage with that field?"
  },
  {
    "poster": {
      "poster_name": "Angus Gibbs",
      "poster_handle": "agibbs"
    },
    "time_stamp": "2022-09-26 08:03:00",
    "text": "Those labels get passed through HubSpot’s internationalization framework, which caches labels extremely aggressively. From a quick glance your definition looks correct to me, so I’m guessing that the labels should show up soon-ish. It can take up to a few hours for them to show up originally. I’ll see if we can get our docs updated to make that clear"
  },
  {
    "poster": {
      "poster_name": "Luca Bartoli",
      "poster_handle": "bartoli"
    },
    "time_stamp": "2022-09-26 08:06:05",
    "text": "<@U0157R7AQ84> thanks for your check! maybe you should consider priming the cache on creation? because it's been at least 3 hours since we created the first action (with labels in it). Also, can you confirm the issue on labels by specifying the associations?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 08:13:47",
    "text": "<@U0157R7AQ84> &amp;&amp; <@UAX5LJ9K3>, HAHAHAHA, it's the\n```\"published\":true,```\nLine"
  },
  {
    "poster": {
      "poster_name": "Angus Gibbs",
      "poster_handle": "agibbs"
    },
    "time_stamp": "2022-09-26 08:14:03",
    "text": "Yeah, unfortunately the way the i18n system was originally designed, it wasn’t built to handle frequent updates like what comes from the custom actions API. I’ve passed along this feedback to the i18n team before, but this is helpful to hear so that we can better prioritize improvements there"
  },
  {
    "poster": {
      "poster_name": "Luca Bartoli",
      "poster_handle": "bartoli"
    },
    "time_stamp": "2022-09-26 08:15:43",
    "edited": {
      "time_stamp": "2022-09-26 08:16:44"
    },
    "text": "<@U01QVR44MEY> I think \"published\":true is a symptom, just because everything happens in your dev portal, so no caching is required.\nBut if you publish your action, everything goes into the huge pot available for every portal and that is bound to the cache layer"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 08:17:07",
    "text": "ah true true"
  },
  {
    "poster": {
      "poster_name": "Adrienne Williams",
      "poster_handle": "adwilliams"
    },
    "time_stamp": "2022-09-26 10:16:25",
    "text": "Hi all! I am trying to upload 2 modules (.html file and fields.json file for each) and I have them packaged into 2 separate zips in 2 separate PUT calls. I've successfully added the zips to my account via the source code API but they weren't added as modules and arent able to be added to my website pages. Does anyone know why this is? Or what the solve is?\nThanks!",
    "reply_count": 11,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2022-09-26 13:27:34"
      },
      {
        "time_stamp": "2022-09-26 13:27:35"
      },
      {
        "time_stamp": "2022-09-26 13:29:00"
      },
      {
        "time_stamp": "2022-09-26 13:29:44"
      },
      {
        "time_stamp": "2022-09-26 13:30:03"
      },
      {
        "time_stamp": "2022-09-26 13:30:39"
      },
      {
        "time_stamp": "2022-09-26 13:30:59"
      },
      {
        "time_stamp": "2022-09-26 13:31:37"
      },
      {
        "time_stamp": "2022-10-13 11:19:52"
      },
      {
        "time_stamp": "2022-10-13 11:20:52"
      },
      {
        "time_stamp": "2022-10-13 15:05:16"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2022-09-26 10:24:12",
    "text": "That’s weird I definitely just fixed an api that I’m pretty sure was working previously"
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 11:28:51",
    "text": "Hi all! I'm using the python API to try to export profiles and companies to a HubSpot instance. Profiles move over fine but companies regularly get duplicated; if I send 10 pizza hut employees in a row I'll likely get 10 instances of the pizza hut company. Looking at the docs it's because HubSpot doesn't do company deduplication on their end via the API (which is a shame since all their competitors definitely do). I'm wondering how to avoid duplicates on the company side of things. Deduplicating on my end would be difficult, and also wouldn't actually work: in a test we ran we exported two profiles 15 minutes apart and the company was still duplicated, so it's not just batch jobs that are affected but all individual exports too.",
    "reply_count": 70,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2022-09-26 13:27:07"
      },
      {
        "time_stamp": "2022-09-26 13:28:53"
      },
      {
        "time_stamp": "2022-09-26 13:36:29"
      },
      {
        "time_stamp": "2022-09-26 13:38:06"
      },
      {
        "time_stamp": "2022-09-26 13:38:14"
      },
      {
        "time_stamp": "2022-09-26 13:38:42"
      },
      {
        "time_stamp": "2022-09-26 13:39:35"
      },
      {
        "time_stamp": "2022-09-26 13:40:19"
      },
      {
        "time_stamp": "2022-09-26 13:40:53"
      },
      {
        "time_stamp": "2022-09-26 13:41:31"
      },
      {
        "time_stamp": "2022-09-26 13:41:44"
      },
      {
        "time_stamp": "2022-09-26 13:41:49"
      },
      {
        "time_stamp": "2022-09-26 13:41:52"
      },
      {
        "time_stamp": "2022-09-26 13:41:53"
      },
      {
        "time_stamp": "2022-09-26 13:42:13"
      },
      {
        "time_stamp": "2022-09-26 13:42:47"
      },
      {
        "time_stamp": "2022-09-26 13:42:53"
      },
      {
        "time_stamp": "2022-09-26 13:43:07"
      },
      {
        "time_stamp": "2022-09-26 13:46:38"
      },
      {
        "time_stamp": "2022-09-26 13:47:41"
      },
      {
        "time_stamp": "2022-09-26 13:48:00"
      },
      {
        "time_stamp": "2022-09-26 13:48:05"
      },
      {
        "time_stamp": "2022-09-26 13:48:41"
      },
      {
        "time_stamp": "2022-09-26 13:51:44"
      },
      {
        "time_stamp": "2022-09-26 13:54:21"
      },
      {
        "time_stamp": "2022-09-26 13:54:50"
      },
      {
        "time_stamp": "2022-09-26 13:55:51"
      },
      {
        "time_stamp": "2022-09-26 13:55:56"
      },
      {
        "time_stamp": "2022-09-26 13:56:18"
      },
      {
        "time_stamp": "2022-09-26 13:56:35"
      },
      {
        "time_stamp": "2022-09-26 13:56:35"
      },
      {
        "time_stamp": "2022-09-26 13:56:54"
      },
      {
        "time_stamp": "2022-09-26 14:00:23"
      },
      {
        "time_stamp": "2022-09-26 14:00:36"
      },
      {
        "time_stamp": "2022-09-26 14:00:52"
      },
      {
        "time_stamp": "2022-09-26 14:02:12"
      },
      {
        "time_stamp": "2022-09-26 14:04:04"
      },
      {
        "time_stamp": "2022-09-26 14:05:24"
      },
      {
        "time_stamp": "2022-09-26 14:13:02"
      },
      {
        "time_stamp": "2022-09-26 14:17:28"
      },
      {
        "time_stamp": "2022-09-26 14:18:50"
      },
      {
        "time_stamp": "2022-09-26 14:20:15"
      },
      {
        "time_stamp": "2022-09-26 14:20:17"
      },
      {
        "time_stamp": "2022-09-26 14:22:42"
      },
      {
        "time_stamp": "2022-09-26 14:23:51"
      },
      {
        "time_stamp": "2022-09-26 14:24:26"
      },
      {
        "time_stamp": "2022-09-26 14:25:31"
      },
      {
        "time_stamp": "2022-09-26 14:25:47"
      },
      {
        "time_stamp": "2022-09-26 14:28:02"
      },
      {
        "time_stamp": "2022-09-26 14:43:05"
      },
      {
        "time_stamp": "2022-09-26 14:43:19"
      },
      {
        "time_stamp": "2022-09-26 14:43:46"
      },
      {
        "time_stamp": "2022-09-26 14:44:32"
      },
      {
        "time_stamp": "2022-09-26 14:45:11"
      },
      {
        "time_stamp": "2022-09-26 14:45:23"
      },
      {
        "time_stamp": "2022-09-26 14:45:33"
      },
      {
        "time_stamp": "2022-09-26 14:45:47"
      },
      {
        "time_stamp": "2022-09-26 14:47:14"
      },
      {
        "time_stamp": "2022-09-26 14:47:27"
      },
      {
        "time_stamp": "2022-09-26 14:47:44"
      },
      {
        "time_stamp": "2022-09-26 14:47:55"
      },
      {
        "time_stamp": "2022-09-26 14:48:07"
      },
      {
        "time_stamp": "2022-09-26 14:48:24"
      },
      {
        "time_stamp": "2022-09-26 14:48:54"
      },
      {
        "time_stamp": "2022-09-26 14:49:14"
      },
      {
        "time_stamp": "2022-09-26 14:53:06"
      },
      {
        "time_stamp": "2022-09-26 14:53:54"
      },
      {
        "time_stamp": "2022-09-26 14:54:25"
      },
      {
        "time_stamp": "2022-09-26 14:54:52"
      },
      {
        "time_stamp": "2022-09-26 14:55:55"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 13:23:52",
    "text": "yeah I was going to mention this — I’ve never sent to the date only until this year, everything else had been datetime"
  },
  {
    "poster": {
      "poster_name": "Luca Bartoli",
      "poster_handle": "bartoli"
    },
    "time_stamp": "2022-09-26 13:26:47",
    "text": "<@UDJV5B73R> which was the field?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 13:27:07",
    "text": "Do you need to do it through the api? Can you just do it through the an import? I don't know if this would affect the duplication behavior but I think it might"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 13:27:34",
    "edited": {
      "time_stamp": "2022-09-26 13:27:40"
    },
    "text": "Did you unzip the zips?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 13:27:35",
    "text": "are you sending the meta.json file? That is where you have the host_template_types that help you determine if it goes on blog/page/etc\n\nas well as `is_available_for_new_content`"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 13:28:53",
    "text": "You are creating companies in here, right? If you are importing these people into HubSpot via the api, then you need to verify if the company already exists"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 13:29:00",
    "text": "true true good point <@U25PYL3Q8>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 13:29:44",
    "text": "I’ve never used this api, but I’ve uploaded via the cli before without that set"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 13:30:03",
    "text": "I’m also wondering if you need to unzip as well, I have no clue how that works"
  },
  {
    "poster": {
      "poster_name": "Adrienne Williams",
      "poster_handle": "adwilliams"
    },
    "time_stamp": "2022-09-26 13:30:39",
    "text": "hm, i am not sending that meta.json file. is that required to \"Create\" is as a module? I created a module by just sending a module.html file previously"
  },
  {
    "poster": {
      "poster_name": "Adrienne Williams",
      "poster_handle": "adwilliams"
    },
    "time_stamp": "2022-09-26 13:30:59",
    "text": "i can also try unzipping but not sure how that works either :grimacing:"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 13:31:37",
    "text": "I think all files have the meta.json"
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 13:36:29",
    "text": "It has to be via the API because it's not just me. I'm an engineer at RocketReach; we have tens of thousands of users using the API to export company data."
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 13:38:06",
    "text": "We try to verify that the company exists. We do a search based on the domain + name. The problem is that if we're uploading 100 apple employees in an automated batch job then there's a good chance that the search won't return any results due to race conditions. We even had a case where we waited a full 15 minutes between exports and it still created a duplicate because the search failed to find any results"
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 13:38:14",
    "text": "if there's a better way to verify I'd like to know"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 13:38:42",
    "edited": {
      "time_stamp": "2022-09-26 13:38:53"
    },
    "text": "Probably cache the company id, that was returned in the search"
  },
  {
    "text": "",
    "time_stamp": "2022-09-26 13:39:35"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 13:40:19",
    "text": "There is an option inside HubSpot setting where it create and associates companies for you (domain based)"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 13:40:53",
    "text": "I have not tested this via the api, but it would be worth looking into that and skipping company creation"
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 13:41:31",
    "text": "Caching the id on the user level is possible, but I was hoping for something on the HubSpot side."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 13:41:44",
    "text": "that would be what I would investigate first"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 13:41:49",
    "text": "and if that doesn’t solve — <https://developers.HubSpot.com/docs/api/crm/imports>"
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 13:41:52",
    "text": "Is there a way to enforce the automation check via the API? Or would I have to add it to an installation doc telling users to do this."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 13:41:53",
    "text": "using the imports api"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 13:42:13",
    "text": "I really like the imports api"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 13:42:47",
    "text": "Amer — I think that this MIGHT be default behavior when creating a HubSpot account"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 13:42:53",
    "text": "which could also be causing you some pain"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 13:43:07",
    "text": "I’m not 100% on that though"
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 13:46:38",
    "text": "I'd rather not use a new api. and it looks like it's meant for bigger batches; doing one export at a time is probably supported but not recommended."
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 13:47:41",
    "text": "also we don't have files for exporting so that seems like another blocker."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 13:48:00",
    "text": "You can super easily programmatically create files"
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 13:48:05",
    "text": "All I really want is the ability for HubSpot to throw an error if I try to create a company with an existing domain. It's how all the other integrations do it and it works great."
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 13:48:41",
    "text": "Oh sure I can, but the more workarounds I need to do the less I like the solution. Caching the company id on the user side is preferred, honestly."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 13:51:44",
    "text": "These aren't really workarounds. If there's an api that means HubSpot built it for a reason"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 13:54:21",
    "text": "I’m not even sure you need to be creating companies"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 13:54:50",
    "text": "however, if you are doing multiple stuff in batches, I think you would need a datastore to keep track of company IDs for when you are creating"
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 13:55:51",
    "text": "I just think that if I'm already batching all the data for exporting then there's not really a point in putting them into a file for the import endpoint. I doubt the endpoint has different backend logic for creating companies."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 13:55:56",
    "text": "Yep, otherwise you're going to be hitting the limits pretty quickly with the search api"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 13:56:18",
    "text": "yeah search api is rate limited at 4/sec"
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 13:56:35",
    "text": "And I'm really not sure why I wouldn't need to create companies. It sounds like tracking the company ids on the user level is what I need to do; we already track on the profile level but it's clearly not enough here."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 13:56:35",
    "text": "That's not really the point. the batch api is limited to 10 objects at once"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 13:56:54",
    "edited": {
      "time_stamp": "2022-09-26 13:57:02"
    },
    "text": "import api is 1,048,576 rows at once"
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 14:00:23",
    "text": "I see. So if I'm deduping on my end anyways, might as well use the import API to get them all in at once."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 14:00:36",
    "text": "Bingo"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 14:00:52",
    "text": ":clap:  i n g o"
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 14:02:12",
    "text": "So it still seems that the only real way to avoid creating duplicate companies is to deduplicate as much as I can on my end and hope for the best."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 14:04:04",
    "text": "I would just toggle the automatic association if your worried about duplicates otherwise you could always just test it with the import api and see what happens"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 14:05:24",
    "text": "I would be surprised to find out that it duplicates companies when using that api."
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 14:13:02",
    "text": "I don't think automatic association will work. I'm not seeing a way to do it via the API, and even then our users would want to see our data in the company fields, not HubSpot's data. I guess I could let HubSpot create the company and then we update the fields after the fact but that still means  giving HubSpot the responsibility to match the profile data in the way we expect."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 14:17:28",
    "text": "yeah, if you are trying to control the data and be the source of truth — you gotta make sure you don’t allow that"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 14:18:50",
    "text": "So the user doesn't even care about the company being associated?"
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 14:20:15",
    "text": "They presumably do, but we're the source of truth for all the data around that. If they're using our system they want our data exported to HubSpot."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 14:20:17",
    "text": "I think they do — like but rocket reach needs to send over the data from their internal data they collect via some other source"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 14:22:42",
    "text": "Yeah, if that's the case honestly just create a simple database for company domains to company object ids, then no contacts with ever be associated incorrectly"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 14:23:51",
    "text": "batch any sync that has a company id already, otherwise non batch"
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 14:24:26",
    "text": "that's what we were thinking of doing already. I was just hoping there was a simpler way on the HubSpot side. I don't have this issue with Salesforce, Outreach, Salesloft, etc."
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 14:25:31",
    "text": "But otherwise, we already store the company ids internally (on the profile level), I'll just have to cross check against them or add them on the user level too."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 14:25:47",
    "text": "Nice!"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 14:28:02",
    "text": "how does it work with salesforce?"
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 14:43:05",
    "text": "If I try to create a company with the same domain, it throws an error. On my end I can read the error, see the ID of the company in Salesforce, and then just associate the profile with that directly."
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 14:43:19",
    "text": "HubSpot has the exact same logic for profiles, as well as all the other competitors."
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 14:43:46",
    "edited": {
      "time_stamp": "2022-09-26 14:44:49"
    },
    "text": "Obviously it's better to batch, but it's nice to know that if something slips through the user won't ever notice; we have to do two calls to do an upload but the end user doesn't notice or care. If the search fails for some reason, or if the user changes the domain partway through, whatever, it all works because Salesforce is handling it. They're the ones that have direct access to the data and know what is and isn't a duplicate."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 14:44:32",
    "edited": {
      "time_stamp": "2022-09-26 14:44:47"
    },
    "text": "so company domain is a unique field in Salesforce, and that causes an error"
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 14:45:11",
    "text": "Basically. Strangely enough, it is one in HubSpot too, just explicitly not when using the API"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 14:45:23",
    "text": "So how does that work with franchieses?"
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 14:45:33",
    "text": "<https://knowledge.HubSpot.com/crm-setup/deduplication-of-contacts-companies-deals-tickets#deduplicate-companies-by-company-domain>"
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 14:45:47",
    "text": "They explicitly have the exact logic I want and expect, but then also say it's not part of the API."
  },
  {
    "text": "",
    "time_stamp": "2022-09-26 14:47:14"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 14:47:27",
    "text": "Does this carry over to the import api?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 14:47:44",
    "text": "no the import api takes care of that"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 14:47:55",
    "text": "because it is basicaly a wrapper for theupload"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 14:48:07",
    "text": "the import functions the same way as a regular import, which dedupes"
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 14:48:24",
    "text": "We don't have anything on the company side for franchises. An owner of a Mcdonald's franchise has the title franchise owner, but they're still part of the same McDonald's company object."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 14:48:54",
    "text": "Yeah <@U25PYL3Q8> that's what i thought"
  },
  {
    "poster": {
      "poster_name": "Amer Hmaidan",
      "poster_handle": "amer"
    },
    "time_stamp": "2022-09-26 14:49:14",
    "text": "wait, so the import API does deduplicate, just not the company API?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 14:53:06",
    "text": "my understanding is you are sending your file, and they are using the backend for the import to process the import. You aren’t creating records via api, you are creating it via an import"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 14:53:54",
    "text": "Yep that is exactly what's happening"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 14:54:25",
    "text": "<https://community.HubSpot.com/t5/CRM/Deduplicating-companies-upon-import/td-p/439558>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 14:54:52",
    "text": "george getting the answer over karsten, not sure why bothy are accepted"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 14:55:55",
    "text": "lol answers in that go both ways"
  },
  {
    "poster": {
      "poster_name": "Jhon",
      "poster_handle": "michael.bolima"
    },
    "time_stamp": "2022-09-26 15:01:50",
    "text": "Hi, I am using Page API and trying to create a page using it. The page is a dynamic page, I successfully created the page via API, however, the *\"Dynamic Page Slug\"* is missing. The question is... is there any solution to add the Dynamic Page Slug on creation using Page API?",
    "reply_count": 6,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2022-09-26 15:06:57"
      },
      {
        "time_stamp": "2022-09-26 15:15:18"
      },
      {
        "time_stamp": "2022-09-26 17:17:37"
      },
      {
        "time_stamp": "2022-09-26 17:17:54"
      },
      {
        "time_stamp": "2022-09-27 09:58:28"
      },
      {
        "time_stamp": "2022-09-28 06:08:44"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 15:06:57",
    "text": "I think it's the `\"dynamicPageHubDbTableId\": \"string\",`\nparameter"
  },
  {
    "poster": {
      "poster_name": "Gary Bryant",
      "poster_handle": "gary.bryant"
    },
    "time_stamp": "2022-09-26 15:08:40",
    "text": "Hello all, I am trying to do filtering with the API...read this <https://legacydocs.HubSpot.com/docs/methods/cms_email/get-all-marketing-emails|page>, but I am clearly missing something",
    "reply_count": 56,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2022-09-26 15:09:08"
      },
      {
        "time_stamp": "2022-09-26 15:09:37"
      },
      {
        "time_stamp": "2022-09-26 15:10:23"
      },
      {
        "time_stamp": "2022-09-26 15:13:54"
      },
      {
        "time_stamp": "2022-09-26 15:14:10"
      },
      {
        "time_stamp": "2022-09-26 15:14:33"
      },
      {
        "time_stamp": "2022-09-26 15:14:55"
      },
      {
        "time_stamp": "2022-09-26 15:15:40"
      },
      {
        "time_stamp": "2022-09-26 15:15:52"
      },
      {
        "time_stamp": "2022-09-26 15:16:03"
      },
      {
        "time_stamp": "2022-09-26 15:16:45"
      },
      {
        "time_stamp": "2022-09-26 15:16:50"
      },
      {
        "time_stamp": "2022-09-26 15:17:07"
      },
      {
        "time_stamp": "2022-09-26 15:17:26"
      },
      {
        "time_stamp": "2022-09-26 15:17:31"
      },
      {
        "time_stamp": "2022-09-26 15:17:37"
      },
      {
        "time_stamp": "2022-09-26 15:17:44"
      },
      {
        "time_stamp": "2022-09-26 15:17:49"
      },
      {
        "time_stamp": "2022-09-26 15:17:58"
      },
      {
        "time_stamp": "2022-09-26 15:18:01"
      },
      {
        "time_stamp": "2022-09-26 15:18:07"
      },
      {
        "time_stamp": "2022-09-26 15:18:33"
      },
      {
        "time_stamp": "2022-09-26 15:18:42"
      },
      {
        "time_stamp": "2022-09-26 15:19:02"
      },
      {
        "time_stamp": "2022-09-26 15:19:06"
      },
      {
        "time_stamp": "2022-09-26 15:19:17"
      },
      {
        "time_stamp": "2022-09-26 15:19:45"
      },
      {
        "time_stamp": "2022-09-26 15:20:01"
      },
      {
        "time_stamp": "2022-09-26 15:20:02"
      },
      {
        "time_stamp": "2022-09-26 15:20:10"
      },
      {
        "time_stamp": "2022-09-26 15:20:14"
      },
      {
        "time_stamp": "2022-09-26 15:20:37"
      },
      {
        "time_stamp": "2022-09-26 15:20:40"
      },
      {
        "time_stamp": "2022-09-26 15:20:43"
      },
      {
        "time_stamp": "2022-09-26 15:20:46"
      },
      {
        "time_stamp": "2022-09-26 15:20:47"
      },
      {
        "time_stamp": "2022-09-26 15:20:50"
      },
      {
        "time_stamp": "2022-09-26 15:21:13"
      },
      {
        "time_stamp": "2022-09-26 15:21:56"
      },
      {
        "time_stamp": "2022-09-26 15:21:58"
      },
      {
        "time_stamp": "2022-09-26 15:22:40"
      },
      {
        "time_stamp": "2022-09-26 15:22:51"
      },
      {
        "time_stamp": "2022-09-26 15:22:58"
      },
      {
        "time_stamp": "2022-09-26 15:23:00"
      },
      {
        "time_stamp": "2022-09-26 15:23:05"
      },
      {
        "time_stamp": "2022-09-26 15:23:15"
      },
      {
        "time_stamp": "2022-09-26 15:23:19"
      },
      {
        "time_stamp": "2022-09-26 15:23:22"
      },
      {
        "time_stamp": "2022-09-26 15:23:23"
      },
      {
        "time_stamp": "2022-09-26 15:23:42"
      },
      {
        "time_stamp": "2022-09-26 15:23:46"
      },
      {
        "time_stamp": "2022-09-26 15:23:46"
      },
      {
        "time_stamp": "2022-09-26 15:24:04"
      },
      {
        "time_stamp": "2022-09-26 15:24:12"
      },
      {
        "time_stamp": "2022-09-26 15:24:18"
      },
      {
        "time_stamp": "2022-09-26 15:30:51"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Gary Bryant",
      "poster_handle": "gary.bryant"
    },
    "time_stamp": "2022-09-26 15:09:08",
    "text": "this works fine (using a bearer token) <https://api.hubapi.com/marketing-emails/v1/emails?limit=10>"
  },
  {
    "poster": {
      "poster_name": "Gary Bryant",
      "poster_handle": "gary.bryant"
    },
    "time_stamp": "2022-09-26 15:09:37",
    "text": "this return zero results\n<https://api.hubapi.com/marketing-emails/v1/emails?limit=10&amp;name=>\"Email One 20220919\""
  },
  {
    "text": "",
    "time_stamp": "2022-09-26 15:10:23"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 15:13:54",
    "text": "try this:\n```<https://api.hubapi.com/marketing-emails/v1/emails?limit=10&amp;name__eq=>\"Email One 20220919\"```"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 15:14:10",
    "text": "documentation does a terrible job with this"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 15:14:33",
    "text": "you’d have to know that the eq__ stuff exists from some other method"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 15:14:55",
    "edited": {
      "time_stamp": "2022-09-26 15:14:57"
    },
    "text": "HubL baby!"
  },
  {
    "poster": {
      "poster_name": "Jhon",
      "poster_handle": "michael.bolima"
    },
    "time_stamp": "2022-09-26 15:15:18",
    "text": "is this also applicable if the dynamic page is dependent on object?"
  },
  {
    "poster": {
      "poster_name": "Gary Bryant",
      "poster_handle": "gary.bryant"
    },
    "time_stamp": "2022-09-26 15:15:40",
    "text": "I tried what I thought would work"
  },
  {
    "poster": {
      "poster_name": "Gary Bryant",
      "poster_handle": "gary.bryant"
    },
    "time_stamp": "2022-09-26 15:15:52",
    "text": "except I might have done it __eq"
  },
  {
    "poster": {
      "poster_name": "Gary Bryant",
      "poster_handle": "gary.bryant"
    },
    "time_stamp": "2022-09-26 15:16:03",
    "text": "let me try it your way"
  },
  {
    "poster": {
      "poster_name": "Gary Bryant",
      "poster_handle": "gary.bryant"
    },
    "time_stamp": "2022-09-26 15:16:45",
    "text": "name__eq=\"XXX\""
  },
  {
    "poster": {
      "poster_name": "Gary Bryant",
      "poster_handle": "gary.bryant"
    },
    "time_stamp": "2022-09-26 15:16:50",
    "text": "would that be right?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 15:17:07",
    "text": "xxx might bring you different content"
  },
  {
    "poster": {
      "poster_name": "Gary Bryant",
      "poster_handle": "gary.bryant"
    },
    "time_stamp": "2022-09-26 15:17:26",
    "text": "&amp;name=\"Email One 20220919\""
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 15:17:31",
    "text": "That would definitely be sketcky"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 15:17:37",
    "text": "RISKY CLICK"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 15:17:44",
    "text": "yeah that should be the way"
  },
  {
    "poster": {
      "poster_name": "Gary Bryant",
      "poster_handle": "gary.bryant"
    },
    "time_stamp": "2022-09-26 15:17:49",
    "text": "&amp;name_eq=\"Email One 20220919\"?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 15:17:58",
    "text": "double _"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 15:18:01",
    "text": "&amp;name__"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 15:18:07",
    "text": "__"
  },
  {
    "poster": {
      "poster_name": "Gary Bryant",
      "poster_handle": "gary.bryant"
    },
    "time_stamp": "2022-09-26 15:18:33",
    "text": "doh, that's what I meant to type"
  },
  {
    "poster": {
      "poster_name": "Gary Bryant",
      "poster_handle": "gary.bryant"
    },
    "time_stamp": "2022-09-26 15:18:42",
    "text": "name__eq=\"Email One 20220919\""
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 15:19:02",
    "text": "FULL SEND!"
  },
  {
    "text": "that gives me this",
    "time_stamp": "2022-09-26 15:19:06"
  },
  {
    "poster": {
      "poster_name": "Gary Bryant",
      "poster_handle": "gary.bryant"
    },
    "time_stamp": "2022-09-26 15:19:17",
    "text": "<https://api.hubapi.com/marketing-emails/v1/emails?limit=10&amp;name__eq=>\"Email One 20220919\""
  },
  {
    "text": "",
    "time_stamp": "2022-09-26 15:19:45"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 15:20:01",
    "text": "What is the second image?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 15:20:02",
    "text": "eq, exact, is, in, ilike, icontains"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 15:20:10",
    "text": "these are all your filter options for the name"
  },
  {
    "poster": {
      "poster_name": "Gary Bryant",
      "poster_handle": "gary.bryant"
    },
    "time_stamp": "2022-09-26 15:20:14",
    "text": "second image is no filter"
  },
  {
    "poster": {
      "poster_name": "Gary Bryant",
      "poster_handle": "gary.bryant"
    },
    "time_stamp": "2022-09-26 15:20:37",
    "text": "first image is with the link i sent"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 15:20:40",
    "text": "Possibly try __exact"
  },
  {
    "poster": {
      "poster_name": "Gary Bryant",
      "poster_handle": "gary.bryant"
    },
    "time_stamp": "2022-09-26 15:20:43",
    "text": "api call i mean"
  },
  {
    "poster": {
      "poster_name": "Gary Bryant",
      "poster_handle": "gary.bryant"
    },
    "time_stamp": "2022-09-26 15:20:46",
    "text": "okay"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 15:20:47",
    "text": "or __is"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 15:20:50",
    "text": "okay I have thos loaded up in postman and i’m checking it too"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 15:21:13",
    "text": "or possibly __in. I really don't know which one"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 15:21:56",
    "text": "```<https://api.hubapi.com/marketing-emails/v1/emails?limit=10&amp;name=New> email```"
  },
  {
    "poster": {
      "poster_name": "Gary Bryant",
      "poster_handle": "gary.bryant"
    },
    "time_stamp": "2022-09-26 15:21:58",
    "text": "same results using __eq &amp; __exact &amp; __in"
  },
  {
    "poster": {
      "poster_name": "Gary Bryant",
      "poster_handle": "gary.bryant"
    },
    "time_stamp": "2022-09-26 15:22:40",
    "text": "no quotes!  :man-facepalming:"
  },
  {
    "poster": {
      "poster_name": "Gary Bryant",
      "poster_handle": "gary.bryant"
    },
    "time_stamp": "2022-09-26 15:22:51",
    "text": "thanks so much"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 15:22:58",
    "text": "<https://api.hubapi.com/marketing-emails/v1/emails?limit=10&amp;name=Opt-in> request email"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 15:23:00",
    "text": "no quotes lol"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 15:23:05",
    "text": "what the hen"
  },
  {
    "poster": {
      "poster_name": "Gary Bryant",
      "poster_handle": "gary.bryant"
    },
    "time_stamp": "2022-09-26 15:23:15",
    "text": "all the filters work now, lol"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 15:23:19",
    "text": "<https://share.getcloudapp.com/GGuzW1Yz>"
  },
  {
    "poster": {
      "poster_name": "Gary Bryant",
      "poster_handle": "gary.bryant"
    },
    "time_stamp": "2022-09-26 15:23:22",
    "text": "in, eq, exact"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 15:23:23",
    "text": "how weird"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 15:23:42",
    "text": "so quotes messed it up"
  },
  {
    "poster": {
      "poster_name": "Gary Bryant",
      "poster_handle": "gary.bryant"
    },
    "time_stamp": "2022-09-26 15:23:46",
    "text": "yep"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 15:23:46",
    "text": "Sick!"
  },
  {
    "poster": {
      "poster_name": "Gary Bryant",
      "poster_handle": "gary.bryant"
    },
    "time_stamp": "2022-09-26 15:24:04",
    "text": "could have sworn I tried that, but maybe not"
  },
  {
    "poster": {
      "poster_name": "Gary Bryant",
      "poster_handle": "gary.bryant"
    },
    "time_stamp": "2022-09-26 15:24:12",
    "text": "thank you all !!!!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 15:24:18",
    "text": "For sure"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-26 15:30:51",
    "text": "thank you gary"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 17:17:37",
    "text": "Yes that shouldn't really matter"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-26 17:17:54",
    "text": "Are you looking up the object based on the url?"
  }
]