[
  {
    "poster": {
      "poster_name": "Clarke Bishop",
      "poster_handle": "cbishop"
    },
    "time_stamp": "2020-08-14 11:52:12",
    "text": "I posted this in the <#CLJJXGTC0|local-development> channel, but it really belongs in this channel. So, I’m posting again. In fact, there are three posts.\n\n*HubSpot Vue Tooling*\nMy company prefers Vue for its frontend JavaScript framework, but much of this would apply to React, Angular, etc.\n\nHubSpot is great for static marketing content, and I know some customization is possible with HubL, etc. Still, we have some needs that cannot be accommodated with the current HubSpot CMS. As a result, we want to create custom modules with Vue to support company-specific login and some other special customizations.\n\nThe challenge is to create HubSpot-specific JavaScript tooling for Vue. It’s made harder because Vue now abstracts Webpack behind its own CLI. But good tooling is essential or we end up with inefficient, grumpy developers who resist HubSpot.\n\nThe requirements I have identified are:\n• Have a HubSpot build process to produce an output directory that can easily be uploaded via *hs upload* and *hs watch*.\n• Properly handle generated JavaScript and HTML.\n• Properly handle CSS.\n• Properly bundle or handle fonts and images.\nOther near-requirements that are highly desirable include:\n• Easy management of lazy loaded modules.\n• Making the output SEO-crawler ready. (This may be the hardest item on the list.)\nAll of these considerations apply regardless of the JavaScript framework you might be using."
  },
  {
    "poster": {
      "poster_name": "Clarke Bishop",
      "poster_handle": "cbishop"
    },
    "time_stamp": "2020-08-14 11:52:49",
    "text": "I’ll share my progress with a specific Vue solution. \n\nVue relies on Webpack, but starting with Vue 2, the Vue team abstracted Webpack behind their Vue CLI Service. Then you run *vue-cli-service build* to build the project, and vue-cli-service configures Webpack behind the scenes.\n\nVue’s approach makes it easy for 80% of the use cases, but does not work out of the box for HubSpot’s custom module format. \n\nOne option is to abandon vue cli, and just use Webpack. This would work, but the vue cli had almost become a development dependency. It’s used for many things besides just bundling code.\n\nReact has some similar challenges, and offers eject as a way to escape from their CLI. But, it’s often not a good idea. Here’s a link that explores some of the challenges, <https://medium.com/curated-by-versett/dont-eject-your-create-react-app-b123c5247741>\n\nVue’s equivalent of eject is vue.config.js. I think they really got this right. vue.config.js wraps webpack.config, and let’s you customize Webpack without losing the other good features of the Vue CLI.\n\nHere’s the vue.config.js file I have so far:\n```const path = require('path')\nconst CopyPlugin = require('copy-webpack-plugin')\n\nconst outputDir = 'dist'\n\nmodule.exports = {\n  transpileDependencies: [\n    \"vuetify\"\n  ],\n  outputDir: outputDir,\n  filenameHashing: false,\n  configureWebpack: {\n\n    optimization: {\n      splitChunks: false\n    },\n    plugins: [\n      new CopyPlugin([{\n        from: path.join(__dirname, 'src/modules'),\n        to: path.join(__dirname, outputDir + '/modules'),\n        toType: 'dir'\n      }])\n    ]\n  }\n}```\ntranspileDependencies for vuetify as automatically added when I ask Vue CLI to *add vuetify*. See what I mean. This is all tangled up, and if you used Webpack separately, it would have to be manually configured for Vuetify. (Result = unhappy developers.)\n\n*dist* is the default build directory, but I added support to change the output directory which helped me in testing how all this works.\n\nI turned off filenameHashing. This is how Vue does cache busting—by adding a hash to the filename. Maybe HubSpot already takes care of this, but it was easier to work through all the issues with it off. This is an open item that may need to be revisited.\n\n*optimization.splitChunks: false* this creates single JavaScript and CSS files.  It’s not ideal for production as the downloads become too large. But it helped me get this working. Another open item.\n\nThen, the CopyPlugin section. I got this idea from <@UQ4ED6QFM> and I really like it. You put a modules directory inside src, and use it to exactly configure the HubSpot custom module. The plugin just gets Webpack to copy it to the right place in the output folder.\n\nThere’s a lot more you can potentially do with vue.config.js, but I’m still learning all the tricks. For now, I used a workaround to make things play nicely in HubSpot."
  },
  {
    "poster": {
      "poster_name": "Clarke Bishop",
      "poster_handle": "cbishop"
    },
    "time_stamp": "2020-08-14 11:53:41",
    "text": "The steps I just outlined gave me a good baseline in my dist folder. There there were still problems:\n1. The JavaScript was in a /js folder\n2. The CSS was in a /css folder\n3. There was an extra index.html file\n4. The CSS loaded some special fonts with icons I needed. But, the path in the CSS was not right.\nThe custom module template I started with used the following code to load CSS and JavaScript:\n```{{ require_css(get_asset_url('../../main.css')) }}\n{{ require_js(get_asset_url('../../main.js'), 'footer') }}```\nI could have modified this custom module code to use the default Vue/Webpack paths. But, I was trying to only change one thing at a time. So, I wrote a separate build script name, build4hs.js. It moves the CSS &amp; JavaScript into the module root, renames the files, and cleans up everything that’s not needed (Empty directories and that extra index.html file.) That takes care of items 1 through 3.\n\nItem 4 was trickier. I have not discovered a way to embed *get_asset_url()* into my built CSS. There is a fonts directory in the output dist folder, so it does get uploaded to HubSpot, but I needed to fix the references inside my CSS file. It’s not elegant, but I did a find and replace in the CSS to fix the URLs.\n\nWith all this done, *hs upload* was the final step. I added a script to npm:\n\n```\"hs-build\": \"vue-cli-service build &amp;&amp; node build4hs.js dist &amp;&amp; hs upload dist vue-cookies\"```\nAll this does work, so progress. Yea! My next steps are to:\n• Find a better way to handle items 1-3. I could just adjust the template I think.\n• See if I can improve my vue.config.js to get Webpack to fix the font URLs. This still seems like it will require some manual intervention because I don’t see how to run *get_asset_url()* inside of vue.config.js/webpack.\n• See what else I can do to improve the process with vue.config.js.\nPlease, if anyone sees this and has any tips for me, please let me know!"
  },
  {
    "poster": {
      "poster_name": "Clarke Bishop",
      "poster_handle": "cbishop"
    },
    "time_stamp": "2020-08-14 12:04:43",
    "text": "I meant to add that there’s a very handy Vue CLI command. Run the command below, and it will output the final webpack.config and save it to wp-prod.js.\n\nSo, my workflow is:\n• Capture the wp-config file with vue inspect\n• Change vue.config\n• Go get wp-config again\n• Diff and adjust until the right results happen.\n```vue inspect --mode production &gt; wp-prod.js```\n"
  }
]