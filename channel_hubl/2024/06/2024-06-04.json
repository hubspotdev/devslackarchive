[
  {
    "poster": {
      "poster_name": "Kyle Maguire",
      "poster_handle": "kyle.maguire"
    },
    "time_stamp": "2024-06-04 05:11:34",
    "text": "Thank you Niko :+1::skin-tone-2: "
  },
  {
    "poster": {
      "poster_name": "Kyle Maguire",
      "poster_handle": "kyle.maguire"
    },
    "time_stamp": "2024-06-04 05:12:39",
    "text": "Hi guys, is there a way to load in custom icons using the {% icon ‘arrow’ %} approach?",
    "reply_count": 6,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2024-06-04 06:22:53"
      },
      {
        "time_stamp": "2024-06-04 06:31:46"
      },
      {
        "time_stamp": "2024-06-04 06:32:37"
      },
      {
        "time_stamp": "2024-06-04 06:35:09"
      },
      {
        "time_stamp": "2024-06-04 13:37:49"
      },
      {
        "time_stamp": "2024-06-04 13:41:14"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Federico Mozzo",
      "poster_handle": "federico.mozzo"
    },
    "time_stamp": "2024-06-04 06:22:53",
    "text": "I don't think so, i usually create a macro to render my svg icons"
  },
  {
    "poster": {
      "poster_name": "Anton Bujanowski - Level 36",
      "poster_handle": "info748"
    },
    "time_stamp": "2024-06-04 06:31:46",
    "text": "the icon function uses FontAwesome (free) icons. If you want to create custom icons you can either create a macro like\n```{%- macro social_icon(name) -%}\n    {%- if name == \"behance\" -%}\n        &lt;svg xmlns=\"<http://www.w3.org/2000/svg>\" viewBox=\"0 0 576 512\"&gt;&lt;path d=\"M232 237.2c31.8-15.2 48.4-38.2 48.4-74 0-70.6-52.6-87.8-113.3-87.8H0v354.4h171.8c64.4 0 124.9-30.9 124.9-102.9 0-44.5-21.1-77.4-64.7-89.7zM77.9 135.9H151c28.1 0 53.4 7.9 53.4 40.5 0 30.1-19.7 42.2-47.5 42.2h-79v-82.7zm83.3 233.7H77.9V272h84.9c34.3 0 56 14.3 56 50.6 0 35.8-25.9 47-57.6 47zm358.5-240.7H376V94h143.7v34.9zM576 305.2c0-75.9-44.4-139.2-124.9-139.2-78.2 0-131.3 58.8-131.3 135.8 0 79.9 50.3 134.7 131.3 134.7 61.3 0 101-27.6 120.1-86.3H509c-6.7 21.9-34.3 33.5-55.7 33.5-41.3 0-63-24.2-63-65.3h185.1c.3-4.2.6-8.7.6-13.2zM390.4 274c2.3-33.7 24.7-54.8 58.5-54.8 35.4 0 53.2 20.8 56.2 54.8H390.4z\"/&gt;&lt;/svg&gt;\n    {%- elif name == \"blogger\" -%}\n        &lt;svg xmlns=\"<http://www.w3.org/2000/svg>\" viewBox=\"0 0 448 512\"&gt;&lt;path d=\"M446.6 222.7c-1.8-8-6.8-15.4-12.5-18.5-1.8-1-13-2.2-25-2.7-20.1-.9-22.3-1.3-28.7-5-10.1-5.9-12.8-12.3-12.9-29.5-.1-33-13.8-63.7-40.9-91.3-19.3-19.7-40.9-33-65.5-40.5-5.9-1.8-19.1-2.4-63.3-2.9-69.4-.8-84.8.6-108.4 10C45.9 59.5 14.7 96.1 3.3 142.9 1.2 151.7.7 165.8.2 246.8c-.6 101.5.1 116.4 6.4 136.5 15.6 49.6 59.9 86.3 104.4 94.3 14.8 2.7 197.3 3.3 216 .8 32.5-4.4 58-17.5 81.9-41.9 17.3-17.7 28.1-36.8 35.2-62.1 4.9-17.6 4.5-142.8 2.5-151.7zm-322.1-63.6c7.8-7.9 10-8.2 58.8-8.2 43.9 0 45.4.1 51.8 3.4 9.3 4.7 13.4 11.3 13.4 21.9 0 9.5-3.8 16.2-12.3 21.6-4.6 2.9-7.3 3.1-50.3 3.3-26.5.2-47.7-.4-50.8-1.2-16.6-4.7-22.8-28.5-10.6-40.8zm191.8 199.8l-14.9 2.4-77.5.9c-68.1.8-87.3-.4-90.9-2-7.1-3.1-13.8-11.7-14.9-19.4-1.1-7.3 2.6-17.3 8.2-22.4 7.1-6.4 10.2-6.6 97.3-6.7 89.6-.1 89.1-.1 97.6 7.8 12.1 11.3 9.5 31.2-4.9 39.4z\"/&gt;&lt;/svg&gt;\n    {%- elif name == \"discord\" -%}\n        &lt;svg xmlns=\"<http://www.w3.org/2000/svg>\" viewBox=\"0 0 640 512\"&gt;&lt;path d=\"M524.531,69.836a1.5,1.5,0,0,0-.764-.7A485.065,485.065,0,0,0,404.081,32.03a1.816,1.816,0,0,0-1.923.91,337.461,337.461,0,0,0-14.9,30.6,447.848,447.848,0,0,0-134.426,0,309.541,309.541,0,0,0-15.135-30.6,1.89,1.89,0,0,0-1.924-.91A483.689,483.689,0,0,0,116.085,69.137a1.712,1.712,0,0,0-.788.676C39.068,183.651,18.186,294.69,28.43,404.354a2.016,2.016,0,0,0,.765,1.375A487.666,487.666,0,0,0,176.02,479.918a1.9,1.9,0,0,0,2.063-.676A348.2,348.2,0,0,0,208.12,430.4a1.86,1.86,0,0,0-1.019-2.588,321.173,321.173,0,0,1-45.868-21.853,1.885,1.885,0,0,1-.185-3.126c3.082-2.309,6.166-4.711,9.109-7.137a1.819,1.819,0,0,1,1.9-.256c96.229,43.917,200.41,43.917,295.5,0a1.812,1.812,0,0,1,1.924.233c2.944,2.426,6.027,4.851,9.132,7.16a1.884,1.884,0,0,1-.162,3.126,301.407,301.407,0,0,1-45.89,21.83,1.875,1.875,0,0,0-1,2.611,391.055,391.055,0,0,0,30.014,48.815,1.864,1.864,0,0,0,2.063.7A486.048,486.048,0,0,0,610.7,405.729a1.882,1.882,0,0,0,.765-1.352C623.729,277.594,590.933,167.465,524.531,69.836ZM222.491,337.58c-28.972,0-52.844-26.587-52.844-59.239S193.056,219.1,222.491,219.1c29.665,0,53.306,26.82,52.843,59.239C275.334,310.993,251.924,337.58,222.491,337.58Zm195.38,0c-28.971,0-52.843-26.587-52.843-59.239S388.437,219.1,417.871,219.1c29.667,0,53.307,26.82,52.844,59.239C470.715,310.993,447.538,337.58,417.871,337.58Z\"/&gt;&lt;/svg&gt;\n...\n{%- endif -%}\n{%- endmacro -%}```\nif you want to use SVGs,\nsomething like this if you want to use an icon library( I'm using phosphor icons in this example)\n```{%- macro btn_icon( icon_name ) -%}\n  &lt;i class=\"ph-light ph-{{ icon_name }} icon\" title=\"{{ icon_name|replace('-', ' ') }} icon\"&gt;&lt;/i&gt;\n{%- endmacro -%}```\nor simply create a custom module with a text input(not rich-text) or dropdown(for predefined icons) and do it like this\n```&lt;i class=\"ph-light ph-{{ module.icon_name }} icon\" title=\"{{ module.icon_name|replace('-', ' ') }} icon\"&gt;&lt;/i&gt;```\n"
  },
  {
    "poster": {
      "poster_name": "Anton Bujanowski - Level 36",
      "poster_handle": "info748"
    },
    "time_stamp": "2024-06-04 06:32:37",
    "text": "pro tip: if you're using choice options in custom modules you can paste the whole svg code as value - will work flawlessly :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Federico Mozzo",
      "poster_handle": "federico.mozzo"
    },
    "time_stamp": "2024-06-04 06:35:09",
    "text": ":point_up_2: exactly what I do too"
  },
  {
    "text": "Hi <@UJAPS2K4N> Thanks for your suggestion. I tried this just now to see if there is any difference. I'll share a sample of my code.\n\nNote the if statement is not passing when comparing the string variable from CRM to the string variable from the HubDB even though they both print as the same. I'm also including the destination.name in the HubDB filter instead of contact.destination this time, but not reaching this point. The second image is what is printed in the email preview after selecting a contact for preview.\n\nNote: Without the if condition, if I directly display content from HubDB without any filter, I will see this content displayed in the email preview before selecting a contact to preview. Which tells me this code is run before a contact.destination is set. After selecting a contact, I'm hoping the content would all re-render so the variables can be compared. Not sure if this is actually happening or not, doesn't look like it to me. What do you think?",
    "time_stamp": "2024-06-04 07:38:38",
    "edited": {
      "time_stamp": "2024-06-04 07:44:19"
    }
  },
  {
    "text": "Before selecting a contact, with the code sample this is what I see because no contact has yet been selected. As mentioned previously, if I print to screen content from HubDB without any if or filters, it will display here before any contact is selected.",
    "time_stamp": "2024-06-04 07:46:18",
    "edited": {
      "time_stamp": "2024-06-04 07:55:13"
    }
  },
  {
    "poster": {
      "poster_name": "Rakel Fairfull",
      "poster_handle": "rfairfull"
    },
    "time_stamp": "2024-06-04 08:40:20",
    "edited": {
      "time_stamp": "2024-06-04 08:40:50"
    },
    "text": "I'm building a module. I'm making CSS that needs to be unique per instance of the module. Is there a snippet of code I can use to insert the unique module ID into my css class name? like:\n\ncard-fskijdf0349   (whatever HubSpot generates)\n\n?",
    "reply_count": 5,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-06-04 11:20:22"
      },
      {
        "time_stamp": "2024-06-04 11:24:56"
      },
      {
        "time_stamp": "2024-06-04 11:38:05"
      },
      {
        "time_stamp": "2024-06-04 11:41:10"
      },
      {
        "time_stamp": "2024-06-04 11:42:06"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Evelynn Ulsh",
      "poster_handle": "evelynn"
    },
    "time_stamp": "2024-06-04 10:33:28",
    "text": "Thanks for the tap-in, <@UJAPS2K4N>! Sorry for the delayed response, I was sick as a dog yesterday. :sweat_smile:\n\nThis is a manifestation of my least favorite HubL quirk — evaluation order/context availability in emails. In emails _*specifically*:_ contact properties aren’t populated with their values at the point in time that other HubL logic is evaluated.\n\nBasically, you can think of the retrieval of contact properties as being the “last step” in the process of emails being rendered. All of your markup is rendered and HubL logic is parsed with the contact properties set to null or undefined — this effectively means they can’t be used for conditional logic of any sort. It’s a huge pain, and there unfortunately isn’t a consistent workaround to it.\n\nI’ll note that I haven’t checked if this is true for fully custom-coded emails, I only know for certain that this is the case with drag-and-drop emails."
  },
  {
    "poster": {
      "poster_name": "Evelynn Ulsh",
      "poster_handle": "evelynn"
    },
    "time_stamp": "2024-06-04 10:39:39",
    "text": "In general, when you’re working with HubL in emails, you can think of the rendering process as working “inside out” when compared to things like web pages and quote templates. In emails, the most specific layers _(individual modules)_ don’t have awareness of their containing context, so you can think of them as having evaluated fully before being passed to the template. Then the template renders without awareness of global/system context, then the global context evaluates after the rest of the template evaluates.\n\nI can’t say whether that’s actually how it works, but it’s a mental model that I’ve found very useful in helping me keep track of what is or isn’t possible in HS email development."
  },
  {
    "text": "This is exactly what I needed <@U04AQA0QM8E> Thank you so much for explaining. :heart: Question: I notice there might be another way to pull in the contact.destination via adding CRM fields to the email module. However when I tried to do this I am not seeing any values and was faced with another error. Do you know if this rule still applies even if I were able to grab the contact's destination this way?",
    "time_stamp": "2024-06-04 11:06:03"
  },
  {
    "poster": {
      "poster_name": "Anton Bujanowski - Level 36",
      "poster_handle": "info748"
    },
    "time_stamp": "2024-06-04 11:20:22",
    "text": "Hey <@U071YF9HQF3> , there are several ways how you can achieve this. Just put one of the following options into the module.html\n\nOption a - <https://developers.HubSpot.com/docs/cms/building-blocks/modules/files#require-css-block|scope_css>\n\n```{% require_css %}\n&lt;style&gt;\n{% scope_css %}\n#card{\nyour stylings\n}\n{% end_scope_css %}\n&lt;/style&gt;\n{% end_require_css %}```\nOption b - name-tag with md5-filter(kinda outdated since scope_css was implemented but still works)\n\n```{% require_css %}\n&lt;style&gt;\n#card-{{ name|md5 }} {\nyour stylings\n}\n&lt;/style&gt;\n{% end_require_css %}\n...\n\n&lt;div id=\"card-{{ name|md5 }}\"&gt;lorem ipsum&lt;/div&gt;```\nAlso - if you want to apply \"global\" styling options you can add a choice or text field(not rich-text; I'm calling them \"custom class\") to the module and do it like this\n```&lt;div class=\"card-{{ module.custom_class }}\"&gt;Lorem ipsum&lt;/div&gt;```\nIf you're using choice option you can put your predefined classes as values into it.\nFor text-inputs you can use some filters like |lower ,  |replace and/or |cut like this:\n```{{ module.custom_class|lower|replace(' ', '-') }}```\n"
  },
  {
    "poster": {
      "poster_name": "Rakel Fairfull",
      "poster_handle": "rfairfull"
    },
    "time_stamp": "2024-06-04 11:24:56",
    "edited": {
      "time_stamp": "2024-06-04 11:25:10"
    },
    "text": "Thank you! I was able to get it working how I needed to using the {{name}} tag that someone messaged to me.\n\nOne thing I'm a little confused about though is how to use some of the style fields like color, border, spacing, etc? I found some code where you can append things to the snippet you copy like padding.units for spacing but I can't seem to find a list of these properties in the documentation anywhere. Do you happen to know where I could find that?"
  },
  {
    "poster": {
      "poster_name": "Anton Bujanowski - Level 36",
      "poster_handle": "info748"
    },
    "time_stamp": "2024-06-04 11:38:05",
    "text": "style-fields can be a bit confusing for sure. :slightly_smiling_face:\n\nFor border, padding/spacing just use the snippet like this\n\n```{{ module.styles.spacing.css }} {# will generate the correct padding/margin combination based on your input #}\n{{ module.styles.border.css }} {# will generate the correct border styles based on your settings #}```\nFor colors you can go with\n```{{ module.styles.color.color }} {# will print the hex code #}\n{{ module.styles.color.opacity }} {# will print the opacity #}\n{{ module.styles.color.css }} {# will print the hex or rgba value automatically #}\n\n.div{\ncolor: rgba({{ module.styles.color.color|convert_rgb }}, 0.5); {# will print the color as an rgb value with a fixed opacity #}\n}```\nIf you want to adress specific values it's like this\n```{{ module.styles.spacing.padding.top.value ~ module.styles.spacing.padding.top.units }} ```\n\nI'd say using the .css option is the way to go when it comes to ease of use in most cases since HubSpot will automatically do the job for you\n\nTip: If you want to know what data you can access with the style-field (or any other data/function) simply pprint it like\n```{{ module.styles.spacing|pprint }}```\nthis will show you all available data"
  },
  {
    "poster": {
      "poster_name": "Rakel Fairfull",
      "poster_handle": "rfairfull"
    },
    "time_stamp": "2024-06-04 11:41:10",
    "text": "thank you!!!"
  },
  {
    "poster": {
      "poster_name": "Anton Bujanowski - Level 36",
      "poster_handle": "info748"
    },
    "time_stamp": "2024-06-04 11:42:06",
    "text": "your welcome"
  },
  {
    "poster": {
      "poster_name": "Evelynn Ulsh",
      "poster_handle": "evelynn"
    },
    "time_stamp": "2024-06-04 13:11:09",
    "text": "I haven’t personally tried that solution, but I don’t see any reason why it wouldn’t work in theory.\n\nAs far as those errors that you’re seeing — I’ve only experienced that in the context of trying to display data from “private-context only” CRM object types on web pages that are set to “publicly viewable.” I’m not sure how that restriction operates in the context of email; I would assume that those are always considered “private.”\n\nHave you double checked that your module’s content types don’t contain any public content types _(landing pages, web pages, blog posts, etc.)_?"
  },
  {
    "poster": {
      "poster_name": "Evelynn Ulsh",
      "poster_handle": "evelynn"
    },
    "time_stamp": "2024-06-04 13:18:19",
    "text": "If you need an immediate-basis workaround to get these emails working while you search for a more sustainable long-term solution: you could make a “dumb” version of this module that displays the content for a selected destination, and then use smart content to switch out what’s being displayed based on the contact’s destination property.\n\nI recognize that it’d be a huge pain to set up and isn’t _*at all*_ scalable in the long term, but it’s an option for getting _something_ going, if you need it."
  },
  {
    "poster": {
      "poster_name": "Evelynn Ulsh",
      "poster_handle": "evelynn"
    },
    "time_stamp": "2024-06-04 13:37:49",
    "text": "I have a slightly alternative suggested approach that leverages <https://medium.com/@hayavuk/complete-guide-to-svg-sprites-7e202e215d34|SVG Sprite Sheets> and the SVG `&lt;use&gt;` tag — this has the advantage of not bloating your markup by repeating SVG definitions everywhere you use them, and doesn’t require you to maintain or upkeep any sort of if/switch statements.\n\nYou can start by creating an HTML partial to store your sprites in, I personally keep it in `/images/icon-sprite.svg.html`. _(It has to have the .html filetype to be imported as a partial, later.)_\n\nIn that file, you can store a sprite sheet of all of your icons, as is demonstrated in the article I linked above.\n```&lt;svg xmlns=\"<http://www.w3.org/2000/svg>\" style=\"display: none;\"&gt;\n    &lt;defs&gt;\n        &lt;symbol id=\"icon--arrow-left\" viewBox=\"0 0 48 48\"&gt;\n            // path data goes here\n        &lt;/symbol&gt;\n        // other icon definitions \n    &lt;/defs&gt;\n&lt;/svg&gt;```\nYou can then use the `include` tag to import your spritesheet into your base template.\n```{% include \"../../images/icon-sprite.svg.html\" %}```\nYou’ll have to inline these SVG definitions because of the CORS requirements of the `&lt;use&gt;` tag, since HS’s CDN is considered to be cross-origin.\n\nThen, you can use a macro to generate an SVG tag that calls that icon definition via `use`:\n```{%- macro icon_sprite(icon_id, hide_from_sr=true, classes=\"\") %}\n  {% set icon_name = icon_id|regex_replace(\"^icon--\", \"\") %}\n  &lt;svg \n    {{ \"class=\\\"[ \" + classes + \" ]\\\"\" if classes is string }}\n    width=\"16\"\n    height=\"16\"&gt;\n    &lt;use href=\"#icon--{{ icon_name }}\" /&gt;\n  &lt;/svg&gt;\n{% endmacro -%}```\nInvoking the macro would look something like this in a basic use case:\n```{{ icon_sprite(\"arrow-left\") }}```\nor something like this if you needed to include styling/identifying classes:\n```{{ icon_sprite(icon_id=\"arrow-left\", classes=\"my-icon-class\") }}```"
  },
  {
    "poster": {
      "poster_name": "Kyle Maguire",
      "poster_handle": "kyle.maguire"
    },
    "time_stamp": "2024-06-04 13:41:14",
    "text": "Wow thank you guys for all of these suggestions, I’ll give them a try and let you know :raised_hands::skin-tone-2: "
  }
]