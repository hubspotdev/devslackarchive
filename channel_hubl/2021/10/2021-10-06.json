[
  {
    "poster": {
      "poster_name": "Thomas Bennedbæk",
      "poster_handle": "thomas_katalysator"
    },
    "time_stamp": "2021-10-06 01:33:28",
    "text": ":clap:  Awesome Jack, thanks!"
  },
  {
    "text": "Hi! I'm trying to create HubL code where I 1) first loop through blog tags and set a boolean to True if a tag named \"news\" is found, 2) leave out writing some HTML if news tag is found. I have a problem with using a \"pagewide\" (global?) boolean variable \"news_tag_exists\" that doesn't stay \"true\" once the for loop is finished - even if the variable is defined outside the loop. I've understood that you _can_ access (read/write) variables outside of a loop from within the loop, but not the other way around. What do I not understand?",
    "time_stamp": "2021-10-06 04:02:59",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2021-10-06 04:11:21"
      },
      {
        "time_stamp": "2021-10-06 06:36:39"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2021-10-06 04:09:22",
    "text": "thats awesome!"
  },
  {
    "poster": {
      "poster_name": "Federico Mozzo",
      "poster_handle": "federico.mozzo"
    },
    "time_stamp": "2021-10-06 04:11:21",
    "text": "This does not work, the workaround is to create the variable as {% set new_tag_exist = { val: false } %} and then in the for loop update is using {% do new_tag_exist.update({val: true}) %}"
  },
  {
    "poster": {
      "poster_name": "Sakari Lapinsuo",
      "poster_handle": "lapinsuo"
    },
    "time_stamp": "2021-10-06 06:36:39",
    "text": "Thank you, this worked! :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2021-10-06 08:28:29",
    "text": "I did this: `{% set my_list = contents %}` but it didn’t work. Should I create an empty array and then loop through contents and append to empty array?"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2021-10-06 08:31:57",
    "text": "Can we have a loop property created/made available to us? I need a list’s _total depth._ (may I suggest `loop.total_depth`?)\nIf a list has over x levels, then I need to do y. But I currently have to do some sorcery to get a loop’s total depth"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2021-10-06 08:33:45",
    "edited": {
      "time_stamp": "2021-10-06 08:33:51"
    },
    "text": "```loop.depth```\n? is that a thing… seems to be in jinja"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2021-10-06 08:35:11",
    "edited": {
      "time_stamp": "2021-10-06 08:35:22"
    },
    "text": "<@U3T21PDBK> `{{ loop.depth }}` is a thing i just tested it"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2021-10-06 08:36:40",
    "text": "that only gets the current level\n&gt; Indicates how deep in deep in a recursive loop the rendering currently is."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2021-10-06 08:37:22",
    "edited": {
      "time_stamp": "2021-10-06 08:37:26"
    },
    "text": "yeah.. you want to know how many loops total?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2021-10-06 08:37:41",
    "text": "er.. depths of loops"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2021-10-06 08:37:41",
    "text": "Yeah, I need to get the deepest level"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2021-10-06 08:38:16",
    "text": "loopception"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2021-10-06 08:38:54",
    "text": "is this for a menu?"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2021-10-06 08:39:06",
    "text": "yep… trying to create a macro that calls itself within itself until there are no more depths, but yeah its a pain"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2021-10-06 08:39:09",
    "text": "casue that is the only thing i can think of .. taht and hubdb"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2021-10-06 08:39:46",
    "text": "unlimited loop depths have their own issues."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2021-10-06 08:40:03",
    "edited": {
      "time_stamp": "2021-10-06 08:40:08"
    },
    "text": "wouldnt it be better to limit the possible loop depths?"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2021-10-06 08:40:45",
    "text": "yes but I still need the total depth and I feel like this should be available in order to debug things anyways"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2021-10-06 08:40:47",
    "text": "or just test the depths and do something based on the current depth?,.. you can also create a variable that gets updated with every depth"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2021-10-06 08:41:59",
    "text": "so if the number is higher that the current depth it will update the number to match the new highest"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2021-10-06 08:44:41",
    "text": "Let me know if you need to talk something through John"
  },
  {
    "poster": {
      "poster_name": "Jack Smith",
      "poster_handle": "jasmith"
    },
    "time_stamp": "2021-10-06 08:47:20",
    "text": "```{% set my_list = [] %}\n{% do my_list.addAll(contents) %}```\nThat would create a copy per-say of the `contents`"
  },
  {
    "poster": {
      "poster_name": "Jack Smith",
      "poster_handle": "jasmith"
    },
    "time_stamp": "2021-10-06 08:53:39",
    "text": "<@U7SL518D6> do we need doc updates when this is deployed to our HubL engine?"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2021-10-06 09:26:31",
    "edited": {
      "time_stamp": "2021-10-06 09:26:51"
    },
    "text": "thanks bud. I made a macro that does it. Will share once tested _thoroughly_"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2021-10-06 09:27:46",
    "text": "never knew about `addAll` :exploding_head:"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2021-10-06 09:28:46",
    "text": ":bangbang: BANGERANG :bangbang:"
  },
  {
    "poster": {
      "poster_name": "Stuart Grant",
      "poster_handle": "stuart-g"
    },
    "time_stamp": "2021-10-06 11:43:29",
    "edited": {
      "time_stamp": "2021-10-06 11:46:37"
    },
    "text": "Is there a way to perform some kind of `key:value`  assignment in Hubl with variables? For example:\n\n```{% for object in array %}\n  {% set foo = { object.foo: \"foo\" } %}\n{% endfor %}```",
    "reply_count": 6,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2021-10-06 12:13:18"
      },
      {
        "time_stamp": "2021-10-06 12:15:41"
      },
      {
        "time_stamp": "2021-10-06 12:23:28"
      },
      {
        "time_stamp": "2021-10-06 12:23:33"
      },
      {
        "time_stamp": "2021-10-06 12:24:20"
      },
      {
        "time_stamp": "2021-10-06 12:25:10"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Stuart Grant",
      "poster_handle": "stuart-g"
    },
    "time_stamp": "2021-10-06 11:44:34",
    "text": "Where the `object.foo`  value is the key assigned in the pairing."
  },
  {
    "poster": {
      "poster_name": "Jack Smith",
      "poster_handle": "jasmith"
    },
    "time_stamp": "2021-10-06 12:13:18",
    "text": "`{% do my_map.put(my_key, my_value) %}`"
  },
  {
    "poster": {
      "poster_name": "Stuart Grant",
      "poster_handle": "stuart-g"
    },
    "time_stamp": "2021-10-06 12:15:41",
    "text": "That's the ticket! Thank you."
  },
  {
    "poster": {
      "poster_name": "Stuart Grant",
      "poster_handle": "stuart-g"
    },
    "time_stamp": "2021-10-06 12:23:28",
    "text": "<@UCJANAW1Y> one last question: how would I access that variable programmatically? Trying to do:\n`{{ my_map[my_key] }}`  with nothing returned."
  },
  {
    "poster": {
      "poster_name": "Stuart Grant",
      "poster_handle": "stuart-g"
    },
    "time_stamp": "2021-10-06 12:23:33",
    "text": "Object is now populating."
  },
  {
    "poster": {
      "poster_name": "Jack Smith",
      "poster_handle": "jasmith"
    },
    "time_stamp": "2021-10-06 12:24:20",
    "text": "`{{ my_map[my_key] }}` should work"
  },
  {
    "poster": {
      "poster_name": "Stuart Grant",
      "poster_handle": "stuart-g"
    },
    "time_stamp": "2021-10-06 12:25:10",
    "text": "That it does. Was moving too fast, had a syntax error. Thanks again."
  }
]