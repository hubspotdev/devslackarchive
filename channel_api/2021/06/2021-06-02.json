[
  {
    "poster": {
      "poster_name": "Manjeet",
      "poster_handle": "manjeetnet"
    },
    "time_stamp": "2021-06-02 02:13:24",
    "edited": {
      "time_stamp": "2021-06-02 02:14:00"
    },
    "text": "Hi Everyone,\nI want to show Blog Post on my website (only the latest first five posts). I am using API with PHP CURL for that.\nThis is the URL\n<https://api.hubapi.com/content/api/v2/blog-posts?hapikey=MYKEY&amp;order_by=-publish_date>\nbut it is not returning me the latest records.\n\nCan anyone tell what is wrong with this?\n\nThanks"
  },
  {
    "poster": {
      "poster_name": "Jason Bar",
      "poster_handle": "jason.bariamis"
    },
    "time_stamp": "2021-06-02 06:13:54",
    "text": "Hello!\nAnyone here familiar with the Quotes API, by chance?\n\nTrying to figure out why quotes that are listed on a HubSpot Deal are getting removed and attached over to the corresponding Renewal Deal that gets generated by my Custom Code Action workflow.\n\nI am not using any quotes API at all and want them to stay attached to the original deal.\n\nCan find anything in the docs and was hoping someone might have some insight.  Thanks!",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2021-06-03 19:31:18"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-06-02 07:01:23",
    "text": "&gt; it’s not all that clear to me why I can’t just stuff React into one module with imported/exported files that all come together\nYou can, and the main cost to it is the time it takes to get your build tools all set up to compile that way. Having them separate from the module itself makes it a little simpler on the setup side. May make adding packages your app relies on easier later.\n\nWe’re not discouraging you from doing it."
  },
  {
    "poster": {
      "poster_name": "Stefan Chrobot",
      "poster_handle": "stefan475"
    },
    "time_stamp": "2021-06-02 07:22:59",
    "text": "hi :wave: I'm building an integration that is supposed to sync contacts from HubSpot to external system\nseems like the standard approach would be to set up a list, get contacts from a list and then repeatedly get recently added contacts\nbut one of the requirements is to know when the contact should no longer be synced\nhow can I support this? I'm thinking of setting up a boolean property on a contact and then using CRM API search + get recently updated contacts and check the history of the property\nany tips and suggestions highly appreciated!",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2021-06-03 19:31:41"
      },
      {
        "time_stamp": "2021-06-04 02:14:51"
      },
      {
        "time_stamp": "2021-06-04 10:26:49"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 16:50:16",
    "text": "Easy\n\n*<https://api.hubapi.com/filemanager/api/v3/files/upload>*\n\n*then*\n\n*<https://api.hubapi.com/engagements/v1/engagements>*\n\n*with Engagement Type NOTE*\n\n*association to dealIds*\n\n*and attachments with ID of uploaded file from first endpoint*\n\n*works great for us, thousands of times already*"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 16:50:53",
    "text": "I think based on your license there are some limits to how many custom obj types you can make"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 16:51:48",
    "text": "look at GET *`/crm/v3/associations/{fromObjectType}/{toObjectType}/types`*"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 16:52:13",
    "text": "it does support, but the types are named differently"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 16:52:50",
    "text": "not really, unless you have the ID of each Deal or a unique value of a specific property which is unique for each Deal on that property value"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 16:57:51",
    "text": "many things default to X=10 but allow overriding up to X=100"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 16:59:14",
    "text": "<@UFBNA9K9A> <@UD53A9UUR> is there a way we could create some kind of library (w/ no guaranty or warranty) of scripts people have made? Because I could benefit from sharing stuff like this with others"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 16:59:51",
    "text": "take a look at GET *`/crm/v3/associations/{fromObjectType}/{toObjectType}/types`*"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:01:12",
    "text": "<@UD53A9UUR> <@UFBNA9K9A> this should get a look from you guys... not being able to update these rates with automations is kind of an issue"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:02:18",
    "text": "interesting, I am curious to see where this goes"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:05:52",
    "text": "I ran into a similar problem I could use help with this week\n\nGetting every Task Engagement in the whole system, most recent first, but filtering out every other Engagement which is not a Task, and knowing the associated objects for each Task, if there are some\n\nI don't see a way to get every Engagement of a specific type, without having to crawl everything which is way too much stuff, or individually check for every single Deal / Company loaded in the system\n\nThis could really use some re-design to be more flexible and performant to integrate with"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:08:11",
    "text": "I think you need to think more flexibly on this topic. If you want it to work properly, you need to use the Associations API to get the Company for the Deal (if one is assigned). The `company_id` property is not guaranteed to work and return data.\n\nAs for Legacy API vs V3, some things only have a Legacy API right now as V3 is still being developed, and they will not be speedily deprecating these. So you should reconsider that policy as well."
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:08:59",
    "text": "The Bulk APIs are not always super detailed as far as errors go, since they are set up for speed and parallelism"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:10:22",
    "text": "You have to list out the available properties using properties endpoints, and put the list you want to fetch into the properties param with comma delimiter. This is for performance reasons for UIs and for people retrieving zillions of objects and to make all new V3 APIs behave as consistently as possible"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:10:46",
    "text": "V5? or V3?"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:11:01",
    "text": "OAuth mode"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:12:20",
    "text": "I might advise, get recent contacts\n\nTake their Contact IDs and feed to association bulk fetch endpoint to get the Deal IDs\n\nTake the Deal IDs and feed to object bulk fetch endpoint to get desired data from Deal payloads"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:13:00",
    "text": "As far as search, you'd probably query on the HubSpot internal created field, within last X minutes, then page through results w/ a sort applied, until you hit records you already processed"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:14:34",
    "text": "Empty: an engagement not tied to a Contact, because it goes with a Company, Deal, etc\n\nMultiple: an engagement can be tied to multiple objects, such as Contact, Company, Deal, see here for example\n\n<https://knowledge.HubSpot.com/crm-setup/associate-activities-with-records>\n\nNote: there is some automatic association behavior which is in my opinion buggy, I have an open discussion about that in ideas forum, and with my cust success manager and Support"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:15:27",
    "text": "You can get property change history using the right Legacy endpoints, on the lifecycle field of the contact, it will say what values the field had at what timestamps"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:15:41",
    "text": "Same as above, but on stage property of deal"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:16:32",
    "text": "Auto create / associate is nice, but usually works on UI based records not API based records"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:17:55",
    "text": "You need to add the assoc using second call to assoc API, usually, because you do not get the Object ID until after it's created and returned back to you, then you pass that ID and Company ID to make the association\n\nThis is like in database world, where you have to make the linked records in each Many to Many table, before you can make the linkage records in the Many to Many linkages table between the two source tables"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:18:45",
    "text": "What two portals?\n\nThere is also some builtin PieSync in HubSpot depending what you are doing\n\nProbably need Zapier or Integromat though"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:19:29",
    "text": "Unfortunately I think this is missing\n\nI get a ton of headaches due to the phone number being inaccessible via API, I have to store my users' phone numbers in a separate portal, very annoying"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:20:13",
    "text": "probably need to write this up with an example and kick it to support or one of the HubSpot tech people who lurk here"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:21:09",
    "text": "the API resps have HTTP headers explaining your rate limit status\n\nin my case I needed a distributed-safe solution so I went with a concurrency capable limit counter via Redis"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:22:01",
    "text": "probably, but it will not be a whole ton of fun"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:22:24",
    "text": "need to crawl the full engagements API, filter for ones with attachments, then upload attachments and new engagements to other portal"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:23:19",
    "text": "depending on what you are doing, an analytics report or dashboard report, that you post-parse, might be better, but hard to say"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:23:50",
    "edited": {
      "time_stamp": "2021-06-02 17:25:02"
    },
    "text": "IN used to work, but got taken away, I badly badly badly badly badly badly badly badly want this operator back"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:28:46",
    "text": "generally, you have to do some kind of re-fetch on the object, as the workflow doesn't include payload, and can trigger separate webhook calls for individual little changes to pieces of the object, so I don't think there is a perfect atomic solution"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:29:38",
    "text": "note: if the deal is very recently made, Search will claim it is not there, when it is there, and you will end up with duplicates, because there is a TOCTTOU and indexing delay going on\n\nthat said, it generally works OK the majority of the time"
  },
  {
    "poster": {
      "poster_name": "Matthew Hall",
      "poster_handle": "mhall"
    },
    "time_stamp": "2021-06-02 17:32:01",
    "edited": {
      "time_stamp": "2021-06-02 17:32:13"
    },
    "text": "look at the APIs for Owners, they are same as Users by another name"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2021-06-02 18:00:40",
    "text": "Gonna do one of those \"we hear ya\" type comments. <@UFBNA9K9A> will  be able to speak more to development, but the engagements endpoints is getting an overhaul.  if you dont see a way of doing something with it now, definitely add to the <https://community.HubSpot.com/t5/custom/page/page-id/ideaslandingpage|ideas forum> and link back for upvotes.  believe it or not, it is actively monitored and used"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2021-06-02 18:02:25",
    "text": "definitely possible and would be appropriately led by the community.  feel like a github repo would be appropriate for this"
  },
  {
    "poster": {
      "poster_name": "Mohit Prasad",
      "poster_handle": "mohit"
    },
    "time_stamp": "2021-06-03 00:21:05",
    "text": "Hello <@U012W4YEUTX> can you help me with details how to add timestamps to the timeline events. What should be our token datatype and what values should be passed to the tokens?"
  }
]