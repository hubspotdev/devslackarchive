[
  {
    "poster": {
      "poster_name": "Jessiemar Pedrosa",
      "poster_handle": "jessiemarpedrosa"
    },
    "time_stamp": "2024-03-05 02:46:13",
    "text": "You can check batch create if that's what you're looking for. "
  },
  {
    "poster": {
      "poster_name": "Scott Marion",
      "poster_handle": "scott943"
    },
    "time_stamp": "2024-03-05 05:25:08",
    "text": "Hmmm, I have not ever used the marketing events API yet, but I wanted to investigate because someday I might.  What I noticed is if you create the event using the basic endpoint */marketing/v3/marketing-events/events* it does not return the id.  However if you create it with the batch endpoint */marketing/v3/marketing-events/events/upsert* it looks like it does return the id.  Seems like both methods should return it to me but that is what I see in the docs."
  },
  {
    "poster": {
      "poster_name": "Casper Kraken (HubDo)",
      "poster_handle": "casper928"
    },
    "time_stamp": "2024-03-05 05:25:15",
    "text": "Hey guys, does anybody know if there is way to retrieve user language settings from any API ?"
  },
  {
    "poster": {
      "poster_name": "Nancy Rana",
      "poster_handle": "nancyr"
    },
    "time_stamp": "2024-03-05 06:49:42",
    "text": "Hi everyone, I would like to know, if it is possible to syncs/log email Metrics like email opens and clicks from Mandrill to HubSpot. Does HubSpot provides the API to do so?"
  },
  {
    "text": "Hello! Anyone know how can I debug this generic api error? I'm trying to create a object definition for a media bridge",
    "time_stamp": "2024-03-05 07:18:06",
    "reply_count": 2,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2024-03-06 07:15:34"
      },
      {
        "time_stamp": "2024-03-06 07:17:21"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "PATRICK GRAHAM",
      "poster_handle": "pgraham"
    },
    "time_stamp": "2024-03-05 07:49:12",
    "text": "Hey Scott, unfortunately, I tested the upsert and it still looks like it does not return the record ID. silly non the less"
  },
  {
    "poster": {
      "poster_name": "Ana Maria Hurtado Bohorquez",
      "poster_handle": "ana.hurtado"
    },
    "time_stamp": "2024-03-05 09:21:55",
    "text": "Hello! I'm getting an error when trying to connect to the API to update the properties of a contact group. The error is:\n\n`Error updating contacts: {\"status\":\"error\",\"message\":\"This hapikey does not exist.\",\"correlationId\":\"604f3c0f-332a-4bbe-bb13-5a16cccd3ff2\"}`",
    "reply_count": 38,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2024-03-05 09:44:31"
      },
      {
        "time_stamp": "2024-03-05 10:02:43"
      },
      {
        "time_stamp": "2024-03-05 10:03:39"
      },
      {
        "time_stamp": "2024-03-05 10:07:27"
      },
      {
        "time_stamp": "2024-03-05 11:29:18"
      },
      {
        "time_stamp": "2024-03-05 11:59:11"
      },
      {
        "time_stamp": "2024-03-05 12:07:15"
      },
      {
        "time_stamp": "2024-03-05 12:07:56"
      },
      {
        "time_stamp": "2024-03-05 12:08:58"
      },
      {
        "time_stamp": "2024-03-05 12:09:25"
      },
      {
        "time_stamp": "2024-03-05 12:26:51"
      },
      {
        "time_stamp": "2024-03-05 12:27:57"
      },
      {
        "time_stamp": "2024-03-05 12:39:36"
      },
      {
        "time_stamp": "2024-03-05 12:39:45"
      },
      {
        "time_stamp": "2024-03-05 12:42:38"
      },
      {
        "time_stamp": "2024-03-05 13:32:19"
      },
      {
        "time_stamp": "2024-03-05 13:50:35"
      },
      {
        "time_stamp": "2024-03-05 13:51:38"
      },
      {
        "time_stamp": "2024-03-05 13:52:10"
      },
      {
        "time_stamp": "2024-03-05 13:59:08"
      },
      {
        "time_stamp": "2024-03-05 14:09:31"
      },
      {
        "time_stamp": "2024-03-05 14:09:45"
      },
      {
        "time_stamp": "2024-03-05 14:23:22"
      },
      {
        "time_stamp": "2024-03-05 14:23:43"
      },
      {
        "time_stamp": "2024-03-05 14:29:20"
      },
      {
        "time_stamp": "2024-03-05 14:29:43"
      },
      {
        "time_stamp": "2024-03-05 14:35:00"
      },
      {
        "time_stamp": "2024-03-05 14:36:08"
      },
      {
        "time_stamp": "2024-03-05 14:37:04"
      },
      {
        "time_stamp": "2024-03-05 14:37:34"
      },
      {
        "time_stamp": "2024-03-05 14:42:32"
      },
      {
        "time_stamp": "2024-03-05 14:43:53"
      },
      {
        "time_stamp": "2024-03-05 14:44:29"
      },
      {
        "time_stamp": "2024-03-05 16:35:54"
      },
      {
        "time_stamp": "2024-03-05 16:46:33"
      },
      {
        "time_stamp": "2024-03-05 16:46:55"
      },
      {
        "time_stamp": "2024-03-05 16:49:26"
      },
      {
        "time_stamp": "2024-03-05 17:25:32"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Ana Maria Hurtado Bohorquez",
      "poster_handle": "ana.hurtado"
    },
    "time_stamp": "2024-03-05 09:22:54",
    "text": "The code is:\n\n```# URL del endpoint para actualizar los contactos\nurl = \"<https://api.hubapi.com/contacts/v1/contact/batch/>\"\n\n# Par√°metros de la consulta, incluyendo la clave de API\nquerystring = {\"hapikey\": \"TOKEN API\"}\n\n# Convertir cada fila del dataframe merged_df en un diccionario y almacenarlo en una lista\ncontacts_data = []\nfor index, row in merged_df.iterrows():\n    contact = {\n        \"vid\": str(row['id']),  # identificador del contacto\n        \"properties\": [\n            {\"property\": \"campo_de_estudio\", \"value\": row['Campo_de_estudio']},\n            {\"property\": \"sector\", \"value\": row['Sector']},\n            {\"property\": \"resultados_modelo\", \"value\": row['predictionLabel']}\n        ]\n    }\n    contacts_data.append(contact)\n\n# Convertir los datos a formato JSON\npayload = json.dumps(contacts_data)\n\n# Cabeceras de la solicitud\nheaders = {\n    'content-type': \"application/json\"\n}\n\n# Realizar la solicitud POSTT para actualizar los contactos\nresponse = requests.request(\"POST\",url, params=querystring, headers=headers, data=payload)\n\n# Verificar el estado de la respuesta\nif response.status_code == 202:\n    print(response.status_code)```"
  },
  {
    "poster": {
      "poster_name": "Ana Maria Hurtado Bohorquez",
      "poster_handle": "ana.hurtado"
    },
    "time_stamp": "2024-03-05 09:23:28",
    "text": "Can anybody help me ?"
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-03-05 09:44:31",
    "text": "You need to change from using hapi key to access tokens - I don't think you can send it as a query string parameter anymore.\n\nStep 1 is to create a private app inside your HubSpot account. This will generate an Access Token.\n\nStep 2 you will then want to pass your access token inside your headers as the following.\n\n```headers = {\n    'accept': \"application/json\",\n    'authorization': f\"Bearer {access_token}\"\n    }```"
  },
  {
    "poster": {
      "poster_name": "Ana Maria Hurtado Bohorquez",
      "poster_handle": "ana.hurtado"
    },
    "time_stamp": "2024-03-05 10:02:43",
    "text": "Thanks, we change it like this:\n\n```port requests\nimport json\n\n# URL del endpoint para actualizar los contactos\nurl = \"<https://api.hubapi.com/crm/v3/objects/contacts>\"\n\n# Convertir cada fila del dataframe merged_df en un diccionario y almacenarlo en una lista\ncontacts_data = []\nfor index, row in merged_df.iterrows():\n    contact = {\n        \"vid\": str(row['id']),  # identificador del contacto\n        \"properties\": [\n            {\"property\": \"campo_de_estudio\", \"value\": row['Campo_de_estudio']},\n            {\"property\": \"sector\", \"value\": row['Sector']},\n            {\"property\": \"resultados_modelo\", \"value\": row['predictionLabel']}\n        ]\n    }\n    contacts_data.append(contact)\n\n# Convertir los datos a formato JSON\npayload = json.dumps(contacts_data)\n\n# Cabeceras de la solicitud\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': f\"Bearer {access_token}\"\n}\n\n# Realizar la solicitud POSTT para actualizar los contactos\nresponse = requests.request(\"POST\",url, headers=headers, data=payload)\n\n# Verificar el estado de la respuesta\nif response.status_code == 202:\n    print(response.status_code)\n    print(\"Contactos actualizados exitosamente.\")\nelse:\n    print(\"Error al actualizar los contactos:\", response.text)```"
  },
  {
    "poster": {
      "poster_name": "Ana Maria Hurtado Bohorquez",
      "poster_handle": "ana.hurtado"
    },
    "time_stamp": "2024-03-05 10:03:39",
    "text": "but i have this error:\n\n```Error al actualizar los contactos: {\"status\":\"error\",\"message\":\"Invalid input JSON on line 1, column 1: Cannot deserialize value of type `com.HubSpot.inbounddb.publicobject.core.v2.SimplePublicObjectInputForCreate$Json` from Array value (token `JsonToken.START_ARRAY`)\",\"correlationId\":\"4a2cb69e-259a-4d64-b47e-b3a77367dd76\"}```\n"
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-03-05 10:07:27",
    "text": "This error has to do with the json data you are sending.\n\nAre you trying to bulk create multiple contacts?"
  },
  {
    "poster": {
      "poster_name": "Ana Maria Hurtado Bohorquez",
      "poster_handle": "ana.hurtado"
    },
    "time_stamp": "2024-03-05 11:29:18",
    "text": "Yes, I try that"
  },
  {
    "poster": {
      "poster_name": "Felix Carmona",
      "poster_handle": "46carmona"
    },
    "time_stamp": "2024-03-05 11:52:28",
    "text": "Hello, I have created a private app and I need to get a webhook that notifies me every time a user does a call. Which is the scope / event that will allow it? Thank you"
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-03-05 11:59:11",
    "text": "Did you change your endpoint from `<https://api.hubapi.com/contacts/v1/contact/batch/>` to `<https://api.hubapi.com/crm/v3/objects/contacts>`"
  },
  {
    "poster": {
      "poster_name": "Ana Maria Hurtado Bohorquez",
      "poster_handle": "ana.hurtado"
    },
    "time_stamp": "2024-03-05 12:07:15",
    "text": "I already did this, and I have the same error\n\n```# URL del endpoint para actualizar los contactos\nurl = \"<https://api.hubapi.com/crm/v3/objects/contacts>\"\n\n# Convertir cada fila del dataframe merged_df en un diccionario y almacenarlo en una lista\ncontacts_data = []\nfor index, row in merged_df.iterrows():\n    contact = {\n        \"vid\": str(row['id']),  # identificador del contacto\n        \"properties\": [\n            {\"property\": \"campo_de_estudio\", \"value\": row['Campo_de_estudio']},\n            {\"property\": \"sector\", \"value\": row['Sector']},\n            {\"property\": \"resultados_modelo\", \"value\": row['predictionLabel']}\n        ]\n    }\n    contacts_data.append(contact)\n\n# Convertir los datos a formato JSON\npayload = json.dumps(contacts_data)\n\n# Cabeceras de la solicitud\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': f\"Bearer {access_token}\"\n}\n\n# Realizar la solicitud POSTT para actualizar los contactos\nresponse = requests.request(\"POST\",url, headers=headers, data=payload)\n\n# Verificar el estado de la respuesta\nif response.status_code == 202:\n    print(response.status_code)\n    print(\"Contactos actualizados exitosamente.\")\nelse:\n    print(\"Error al actualizar los contactos:\", response.text)```"
  },
  {
    "poster": {
      "poster_name": "Ana Maria Hurtado Bohorquez",
      "poster_handle": "ana.hurtado"
    },
    "time_stamp": "2024-03-05 12:07:56",
    "text": "Should the request be POST or PATCH?"
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-03-05 12:08:58",
    "text": "Are you creating or updating contacts?"
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-03-05 12:09:25",
    "edited": {
      "time_stamp": "2024-03-05 12:09:33"
    },
    "text": "I think i'll need to run your code locally and see if I can help unblock you"
  },
  {
    "text": "Hey there everyone. Howdy y all?\n\nI am kinda new with using the HubSpot api but it did not used to present this bug.\nCan someone give me a headsup?",
    "time_stamp": "2024-03-05 12:16:47"
  },
  {
    "poster": {
      "poster_name": "Ana Maria Hurtado Bohorquez",
      "poster_handle": "ana.hurtado"
    },
    "time_stamp": "2024-03-05 12:26:51",
    "text": "updating contacts"
  },
  {
    "poster": {
      "poster_name": "Ana Maria Hurtado Bohorquez",
      "poster_handle": "ana.hurtado"
    },
    "time_stamp": "2024-03-05 12:27:57",
    "text": "Thank you! What I'm trying to do is update some properties of a contact group"
  },
  {
    "poster": {
      "poster_name": "Parker Short",
      "poster_handle": "parker"
    },
    "time_stamp": "2024-03-05 12:31:11",
    "text": "was there an outage with the site search api recently? Our site search stopped working for several days (despite nothing changing), and now is working again (again, with no fixes made)"
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-03-05 12:39:36",
    "text": "```import pandas as pd\nimport requests\nimport json\n\n# URL del endpoint para actualizar los contactos\nurl = \"<https://api.hubapi.com/crm/v3/objects/contacts/batch/update>\"\n\nmerged_df = pd.read_excel(\"/Users/rginsberg/Downloads/HubSpot-crm-exports-all-contacts-2024-03-05.xlsx\")\n\nmerged_df = merged_df.fillna(\"\")\n\n\n# Convertir cada fila del dataframe merged_df en un diccionario y almacenarlo en una lista\ncontacts_data = []\nfor index, row in merged_df[0:5].iterrows():\n    contact = {\n        \"id\": str(row['Record ID']),  # identificador del contacto\n        \"properties\":\n            {\"firstname\": row['First Name'],\n             \"email\": row['Email'],\n             \"phone\": row['Phone Number']\n    }}\n    \n    contacts_data.append(contact)\n\n# Convertir los datos a formato JSON\n\npayload = {\"inputs\": contacts_data}\n\njson_payload = json.dumps(payload)\n\n\n# Cabeceras de la solicitud\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': f\"Bearer {access_token}\"\n}\n\n# Realizar la solicitud POSTT para actualizar los contactos\nresponse = requests.request(\"POST\",url, headers=headers, data=json_payload)\n\n# Verificar el estado de la respuesta\nif response.status_code == 200:\n    print(response.status_code)\n    print(response.content)\n    print(\"Contactos actualizados exitosamente.\")\nelse:\n    print(\"Error al actualizar los contactos:\", response.content)```"
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-03-05 12:39:45",
    "text": "try this...^"
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-03-05 12:42:38",
    "text": "1.) ensured your dataframe doesn't have \"Nan\" values - replace all \"NaNs\" with empty string\n2.) Changed the structure of the object you are sending to HubSpot\n3.) changed the success code from 201 to 200"
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-03-05 13:32:19",
    "text": "4.) updated the endpoint to use the batch endpoint for bulk updates"
  },
  {
    "poster": {
      "poster_name": "Ana Maria Hurtado Bohorquez",
      "poster_handle": "ana.hurtado"
    },
    "time_stamp": "2024-03-05 13:50:35",
    "text": "How do I do the latter?"
  },
  {
    "poster": {
      "poster_name": "Ana Maria Hurtado Bohorquez",
      "poster_handle": "ana.hurtado"
    },
    "time_stamp": "2024-03-05 13:51:38",
    "text": "change the first three and I have this error now:\n\n`Error al actualizar los contactos:`"
  },
  {
    "poster": {
      "poster_name": "Ana Maria Hurtado Bohorquez",
      "poster_handle": "ana.hurtado"
    },
    "time_stamp": "2024-03-05 13:52:10",
    "text": "but I don't have the response status code"
  },
  {
    "poster": {
      "poster_name": "Ana Maria Hurtado Bohorquez",
      "poster_handle": "ana.hurtado"
    },
    "time_stamp": "2024-03-05 13:59:08",
    "text": "So url = \"<https://api.hubapi.com/crm/v3/objects/contacts/batch/create>\" ?"
  },
  {
    "poster": {
      "poster_name": "Ana Maria Hurtado Bohorquez",
      "poster_handle": "ana.hurtado"
    },
    "time_stamp": "2024-03-05 14:09:31",
    "text": "`\"status\":\"error\",\"message\":\"Invalid input JSON on line 1, column 1: Cannot deserialize value of type `com.HubSpot.inbounddb.publicobject.core.v2.SimplePublicObjectInput$Json` from Array value (token `JsonToken.START_ARRAY`)\",\"correlationId\":\"6ae00606-6a16-4aa1-ab45-4a82a1fbf244\"`"
  },
  {
    "poster": {
      "poster_name": "Ana Maria Hurtado Bohorquez",
      "poster_handle": "ana.hurtado"
    },
    "time_stamp": "2024-03-05 14:09:45",
    "text": "I am getting this error"
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-03-05 14:23:22",
    "text": "Did you update this? response = requests.request(\"POST\",url, headers=headers, data=json_payload)"
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-03-05 14:23:43",
    "text": "data=json_payload not payload"
  },
  {
    "poster": {
      "poster_name": "Ana Maria Hurtado Bohorquez",
      "poster_handle": "ana.hurtado"
    },
    "time_stamp": "2024-03-05 14:29:20",
    "text": "yes"
  },
  {
    "poster": {
      "poster_name": "Ana Maria Hurtado Bohorquez",
      "poster_handle": "ana.hurtado"
    },
    "time_stamp": "2024-03-05 14:29:43",
    "text": "I have this error now:\n\n```Error al actualizar los contactos: &lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/&gt;\n&lt;title&gt;Error 405 Method Not Allowed&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;&lt;h2&gt;HTTP ERROR 405&lt;/h2&gt;\n&lt;p&gt;Reason:\n&lt;pre&gt;    Method Not Allowed&lt;/pre&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;```"
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-03-05 14:35:00",
    "text": "Please re-copy your current code here"
  },
  {
    "poster": {
      "poster_name": "Ana Maria Hurtado Bohorquez",
      "poster_handle": "ana.hurtado"
    },
    "time_stamp": "2024-03-05 14:36:08",
    "text": "```import requests\nimport json\n\n# URL del endpoint para actualizar los contactos\nurl = \"<https://api.hubapi.com/crm/v3/objects/contacts/batch/>\"\n\n# Convertir cada fila del dataframe merged_df en un diccionario y almacenarlo en una lista\ncontacts_data = []\nfor index, row in merged_df.iterrows():\n    contact = {\n        \"vid\": str(row['id']),  # Cambia 'vid' por el nombre correcto del identificador del contacto\n        \"properties\": {\n            \"campo_de_estudio\": row['Campo_de_estudio'],  # Aseg√∫rate de que 'Campo_de_estudio' sea un campo v√°lido\n            \"sector\": row['Sector'],  # Aseg√∫rate de que 'Sector' sea un campo v√°lido\n            \"resultados_modelo\": row['predictionLabel']  # Aseg√∫rate de que 'predictionLabel' sea un campo v√°lido\n        }\n    }\n    contacts_data.append(contact)\n\n# Convertir los datos a formato JSON\njson_payload = json.dumps(contacts_data)\n\n# Cabeceras de la solicitud\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': f\"Bearer token\"\n}\n\n# Realizar la solicitud PATCH para actualizar los contactos\nresponse = requests.request(\"POST\",url, headers=headers, data=json_payload)\n\n# Verificar el estado de la respuesta\nif response.status_code == 200:\n    print(response.status_code)\n    print(\"Contactos actualizados exitosamente.\")\nelse:\n    print(\"Error al actualizar los contactos:\", response.text)```"
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-03-05 14:37:04",
    "text": "```# Convertir los datos a formato JSON\n\npayload = {\"inputs\": contacts_data}\n\njson_payload = json.dumps(payload)```"
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-03-05 14:37:34",
    "text": "See how I have an object with \"inputs\" and then added the contacts_data array"
  },
  {
    "poster": {
      "poster_name": "Ana Maria Hurtado Bohorquez",
      "poster_handle": "ana.hurtado"
    },
    "time_stamp": "2024-03-05 14:42:32",
    "text": "error persists:\n\n```Error al actualizar los contactos: &lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/&gt;\n&lt;title&gt;Error 405 Method Not Allowed&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;&lt;h2&gt;HTTP ERROR 405&lt;/h2&gt;\n&lt;p&gt;Reason:\n&lt;pre&gt;    Method Not Allowed&lt;/pre&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;```"
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-03-05 14:43:53",
    "edited": {
      "time_stamp": "2024-03-05 14:44:11"
    },
    "text": "url should be <https://api.hubapi.com/crm/v3/objects/contacts/batch/update>"
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-03-05 14:44:29",
    "text": "its missing /update at the end"
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-03-05 16:35:54",
    "text": "<@U06N0JUBU5Q> - Were you able to get this to work?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2024-03-05 16:46:33",
    "text": "<@U05R380MLMC>, you are a champ."
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2024-03-05 16:46:55",
    "text": "Thanks for being such a great community member"
  },
  {
    "poster": {
      "poster_name": "Ryan Ginsberg",
      "poster_handle": "ryan294"
    },
    "time_stamp": "2024-03-05 16:49:26",
    "text": "Doing my part!"
  },
  {
    "poster": {
      "poster_name": "Ana Maria Hurtado Bohorquez",
      "poster_handle": "ana.hurtado"
    },
    "time_stamp": "2024-03-05 17:25:32",
    "text": "yes, thanks !!"
  },
  {
    "poster": {
      "poster_name": "Jessiemar Pedrosa",
      "poster_handle": "jessiemarpedrosa"
    },
    "time_stamp": "2024-03-05 17:39:34",
    "text": "Hi all,\nI have seen that Webhook subscriptions for custom object deletions are not yet supported.\nAnd we are finding a way on how to listen from HubSpot side if there are custom object records being deleted, so that we can update our Member Portal app as well. What do you think is the best way using WF or Custom Coding for this type of use case? Thanks",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2024-03-06 01:08:41"
      }
    ]
  }
]