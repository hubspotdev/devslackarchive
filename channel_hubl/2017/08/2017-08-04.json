[
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-08-04 08:08:56",
    "text": "{{ date|datetimeformat('%d') }}      \n{{ date|datetimeformat('%m') }}\n{{ date|datetimeformat('%Y') }}"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-08-04 08:09:37",
    "text": "you could take your same date variable and filter them, and if that isn't what you are asking, can you explain better?"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2017-08-04 08:17:26",
    "text": "Yeah, sorry, I think I found my answer digging through <http://Inbound.org|Inbound.org> yesterday, just didn't know the right word to search for. \n\nBasically I'm looking for the equivalent of JS's \"Date.parse(dateString)\" method, where I feed in my month, date, year variables as strings and get back a timestamp."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-08-04 08:27:44",
    "text": "so something more like {{ local_dt|unixtimestamp }} ?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-08-04 08:27:52",
    "text": "or you just pushed it into javascript to do it?"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2017-08-04 08:35:41",
    "text": "That might work better actually, I missed that filter! Let me try that."
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-08-04 11:33:50",
    "text": "Why does the {%- macro function() -%}"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-08-04 11:33:54",
    "text": "not work"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-08-04 11:34:15",
    "text": "I get tons of whitespace in my function output :X Anybody figure out the exact syntax to make this work"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-08-04 11:53:54",
    "text": "are they hyphens suypposed to do soemthing?"
  },
  {
    "text": "This macro is for our team page. It is inside a for loop of a hubDb call.  role is something we send to the macro, but the hubdb stuff is dependant on where in the loop it is",
    "time_stamp": "2017-08-04 11:56:03"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-08-04 11:56:26",
    "text": "And then we call it by going: {% for team_member in exec %}\n\t\t\t    {{ team_card('Executive') }}\n\t\t\t{% endfor %}"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-08-04 11:57:24",
    "text": "Ahh, I went and looked up and saw the minus is supposed to remove white space."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-08-04 11:59:01",
    "text": "I guess I'd have to check out your macro and the live page to understand your current issue"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-08-04 13:25:24",
    "text": "basically, the macros are outputting html directly to the page, and it's adding new lines from for loops / logic as well"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-08-04 13:26:07",
    "text": "i.e. if I were to put all logic (like {% if %} {% for %} etc) into a single line, it then outputs less whitespace"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-08-04 13:26:16",
    "text": "but that is just illegible when developing these macros"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-08-04 13:46:53",
    "text": "Huh, I thought that worked"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-08-04 13:47:06",
    "edited": {
      "time_stamp": "2017-08-04 13:47:46"
    },
    "text": "You could always do this, though:\n```{% macro foo() %}{#\n    #}Output here!{#\n#}{% endmacro %}```"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-08-04 13:48:03",
    "text": "All the whitespace is in comments, so it doesn't get output"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2017-08-04 13:48:55",
    "text": "It's annoying, but it's at least a little better than cramming everything together"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2017-08-04 14:02:05",
    "text": "Good thought <@U3A4KEWK1> Will give that a go"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2017-08-04 15:12:35",
    "text": "the minus signs only remove whitespace immediately before or after the tag"
  }
]