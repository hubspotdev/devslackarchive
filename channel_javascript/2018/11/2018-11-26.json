[
  {
    "poster": {
      "poster_name": "asa.curry",
      "poster_handle": "asa.curry"
    },
    "time_stamp": "2018-11-26 08:19:11",
    "edited": {
      "time_stamp": "2018-11-26 08:19:50"
    },
    "text": "is there a way to block HubSpot from appending the absolute path to an href? I am using a modal script that using an anchor link href=\"#my-modal\", but when the page loads it renders as href=\"<http://www.mywebsite.com/#mymodal/|www.mywebsite.com/#mymodal/>\" which is causing errors in my module, thank you!"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-26 08:20:33",
    "text": "A workaround that I use is to just have a text field that takes care of the anchor"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-26 08:21:05",
    "text": "`&lt;a href=\"#{{ module.anchor_link }}\"`&gt;Click Me&lt;/a&gt;"
  },
  {
    "poster": {
      "poster_name": "asa.curry",
      "poster_handle": "asa.curry"
    },
    "time_stamp": "2018-11-26 08:21:27",
    "text": "thats how I have it configured for the module, which works fine, but the button is within a richtext module so my marketers can edit it :grimacing:"
  },
  {
    "poster": {
      "poster_name": "asa.curry",
      "poster_handle": "asa.curry"
    },
    "time_stamp": "2018-11-26 08:21:39",
    "text": "so its the button that's breaking"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-26 08:23:04",
    "text": "Not sure how to fix formatting in there. I usually will just throw in a hardcoded button with some conditional logic around it. WYSIWYG can be a misnomer :wink:"
  },
  {
    "poster": {
      "poster_name": "asa.curry",
      "poster_handle": "asa.curry"
    },
    "time_stamp": "2018-11-26 08:51:32",
    "text": "had to inject a new href with Js, frustrating bug/feature. thank you for your help!"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-26 09:03:09",
    "text": "Sorry I couldn’t be more helful!"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-26 09:03:14",
    "text": "helpful*"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-26 09:03:21",
    "text": "Sorry I can’t spell"
  },
  null,
  null,
  {
    "poster": {
      "poster_name": "Grant Foster",
      "poster_handle": "grant"
    },
    "time_stamp": "2018-11-26 10:25:26",
    "text": "any reason why HubSpot defaults to putting jQuery in the head instead of the footer? does setting it to include in the footer break anything?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-26 10:34:23",
    "text": "I think because they don’t have control over the footer like they do the head. Is including it in the head causing you any problems?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-26 10:38:07",
    "text": "I found this on stackoverflow if it helps:"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-26 10:38:11",
    "text": "“Only load jQuery itself in the head, via CDN of course.\n\nWhy? In some scenarios you might include a partial template (e.g. ajax login form snippet) with embedded jQuery dependent code; if jQuery is loaded at page bottom, you get a “$ is not defined” error, nice.\n\nThere are ways to workaround this of course (such as not embedding any JS and appending to a load-at-bottom js bundle), but why lose the freedom of lazily loaded js, of being able to place jQuery dependent code anywhere you please? Javascript engine doesn’t care where the code lives in the DOM so long as dependencies (like jQuery being loaded) are satisfied.\n\nFor your common/shared js files, yes, place them before &lt;/body&gt;, but for the exceptions, where it really just makes sense application maintenance-wise to stick a jQuery dependent snippet or file reference right there at that point in the html, do so.\n\nThere is no performance hit loading jquery in the head; what browser on the planet does not already have jQuery CDN file in cache?\n\nMuch ado about nothing, stick jQuery in the head and let your js freedom reign.”"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-11-26 10:39:54",
    "text": "The reason is that there are million websites on HubSpot that are probably not using `onready` and if they were just to blanket move it it would break a lot. So they gave us the option."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-11-26 10:41:05",
    "text": "HubSpot \"Loading jQuery in the head since 2009...\""
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-26 10:42:22",
    "text": "Is the concern with loading it in the head that it would hold up other processes?"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2018-11-26 11:16:17",
    "edited": {
      "time_stamp": "2018-11-26 11:20:30"
    },
    "text": "Chad is correct, historically we did not offer this option because we (HubSpot) included jQuery dependencies throughout the body of the page. We have since removed or moved those dependencies, to allow for loading jQuery in the footer AS LONG as you have not added jQuery dependencies requiring it to load in the head html (Grant, this setting will break things if you have placed any jQuery dependencies above where it loads in the footer). In an effort to not break existing sites, we created the choice to move it.\n\nPete, yes, it does hurt a pages load speed to synchronously load jQuery in the head html.  It is somewhat subjective and dependent on the site itself whether this has a visual impact on a real visitor, but bots certainly can see the difference."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-26 11:26:21",
    "text": "Well I wouldn’t want the robots to feel left out."
  },
  null,
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-11-26 12:19:26",
    "text": "poor robots"
  },
  null,
  {
    "poster": {
      "poster_name": "Grant Foster",
      "poster_handle": "grant"
    },
    "time_stamp": "2018-11-26 13:38:16",
    "text": "I see, I see. Thanks for the great responses <@U26DA9CQ0> <@U38EZFVFE> <@U6W3H6YN8>."
  },
  null,
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-11-26 14:43:04",
    "text": "I’m a bit stuck, I’m trying to load in a specific img from an external page, then, grab a css value that image has, I can get the image to load, but I’m having trouble trying to parse the .css value, any ideas?\n\n`var featuredImage = $(\".featuredPost\").load(\"{{ post.absolute_url }} .post--img\");`"
  },
  null,
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-26 14:50:34",
    "text": "<@U7AU6414J> what’s that `.post--image` doing?"
  },
  null,
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-11-26 14:51:59",
    "edited": {
      "time_stamp": "2018-11-26 14:52:07"
    },
    "text": "<@U26DA9CQ0> its just a class attached to a image on a external blog. Those images have specific css `top` values assigned to them. I’m looking to get that `top` value"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-26 14:53:11",
    "text": "I’m wondering why it’s being passed as an argument in that .load() method"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-26 14:53:43",
    "text": "You’re trying to get the css value that’s set on another page?"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-11-26 14:55:08",
    "text": "<@U26DA9CQ0> yes, an inline css value. Do you know a different method?"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-11-26 14:55:15",
    "text": "I’m trying to avoid just pulling the entire page"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-26 14:56:21",
    "text": "Well I don’t think that you can pull it through like that because the url will just grab the resource and none of the templating around it. I’m not exactly sure how you’d grab a top value without getting all of the page info."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-26 14:57:58",
    "text": "I think… I didn’t even know you could pull in a singular element that way. Could you change the class that it pulls in to the container?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-26 14:58:34",
    "text": "like `.load(\"{{ url }} .post--img--container\")`"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-11-26 15:00:38",
    "text": "<@U26DA9CQ0> I can, but what difference would that make?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-26 15:01:26",
    "text": "I was thinking that maybe it would pull in the inline styling on child elements since it grabs innerHTML. I’m going to try a couple things on my end to see if I can’t find a good answer."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-26 15:06:28",
    "text": "So I just tried it and it brought in the style attribute"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-26 15:08:29",
    "text": "That specific top value that you’re trying to get, is that within a style attribute <@U7AU6414J>?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-26 15:09:07",
    "text": "Because when I pull a tag in it looks exactly like it does on the other page."
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-11-26 15:12:30",
    "text": "<@U26DA9CQ0> yeah, just a `style=\"top: xx%\"`"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2018-11-26 15:12:59",
    "text": "And i can successfully pull the div in with its style, but then i want to take that css value and place it on another div thats already on the page"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-26 15:13:11",
    "text": "Try grabbing it like this:"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-26 15:14:04",
    "text": "`var newIMG = $('.featuredPost').load(\"{{ post.absolute_url }} .post--img\")[0].<http://style.top;|style.top;>`"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-26 15:14:58",
    "text": "then do `$('.whatever').css(\"top\",newIMG + \"px\");`"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-11-26 15:15:15",
    "text": "I hope :crossed_fingers:"
  },
  null,
  null,
  null
]