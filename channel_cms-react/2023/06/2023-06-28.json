[
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 13:32:36",
    "text": "<@UCY83QS6Q> I think it might make sense to namespace tailwind for js rendering modules"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 13:39:43",
    "text": "I'm having to write `class=\"px-10 md:!px-20\"` to trigger media queries"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 13:39:49",
    "text": "I think a tailwind prefix would fix that"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 13:40:29",
    "text": "the tailwind example shows:\n```module.exports = {\n  prefix: 'tw-',\n}```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 13:40:46",
    "text": "not sure what the equivalent is when\n```export default {}```",
    "reply_count": 65,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-06-28 13:41:06"
      },
      {
        "time_stamp": "2023-06-28 13:41:21"
      },
      {
        "time_stamp": "2023-06-28 13:42:18"
      },
      {
        "time_stamp": "2023-06-28 13:42:33"
      },
      {
        "time_stamp": "2023-06-28 13:43:47"
      },
      {
        "time_stamp": "2023-06-28 13:52:05"
      },
      {
        "time_stamp": "2023-06-28 13:55:34"
      },
      {
        "time_stamp": "2023-06-28 14:00:58"
      },
      {
        "time_stamp": "2023-06-28 14:01:40"
      },
      {
        "time_stamp": "2023-06-28 14:01:44"
      },
      {
        "time_stamp": "2023-06-28 14:03:19"
      },
      {
        "time_stamp": "2023-06-28 14:09:40"
      },
      {
        "time_stamp": "2023-06-28 14:09:53"
      },
      {
        "time_stamp": "2023-06-28 14:10:17"
      },
      {
        "time_stamp": "2023-06-28 14:11:00"
      },
      {
        "time_stamp": "2023-06-28 14:11:29"
      },
      {
        "time_stamp": "2023-06-28 14:11:56"
      },
      {
        "time_stamp": "2023-06-28 14:12:06"
      },
      {
        "time_stamp": "2023-06-28 14:12:11"
      },
      {
        "time_stamp": "2023-06-28 14:17:46"
      },
      {
        "time_stamp": "2023-06-28 14:18:04"
      },
      {
        "time_stamp": "2023-06-28 14:18:23"
      },
      {
        "time_stamp": "2023-06-28 14:18:39"
      },
      {
        "time_stamp": "2023-06-28 14:19:03"
      },
      {
        "time_stamp": "2023-06-28 14:19:39"
      },
      {
        "time_stamp": "2023-06-28 14:19:41"
      },
      {
        "time_stamp": "2023-06-28 14:19:46"
      },
      {
        "time_stamp": "2023-06-28 14:20:26"
      },
      {
        "time_stamp": "2023-06-28 14:21:02"
      },
      {
        "time_stamp": "2023-06-28 14:21:24"
      },
      {
        "time_stamp": "2023-06-28 14:21:24"
      },
      {
        "time_stamp": "2023-06-28 14:21:25"
      },
      {
        "time_stamp": "2023-06-28 14:21:45"
      },
      {
        "time_stamp": "2023-06-28 14:21:53"
      },
      {
        "time_stamp": "2023-06-28 14:21:56"
      },
      {
        "time_stamp": "2023-06-28 14:22:02"
      },
      {
        "time_stamp": "2023-06-28 14:22:40"
      },
      {
        "time_stamp": "2023-06-28 14:22:59"
      },
      {
        "time_stamp": "2023-06-28 14:23:06"
      },
      {
        "time_stamp": "2023-06-28 14:23:36"
      },
      {
        "time_stamp": "2023-06-28 14:23:39"
      },
      {
        "time_stamp": "2023-06-28 14:23:59"
      },
      {
        "time_stamp": "2023-06-28 14:24:07"
      },
      {
        "time_stamp": "2023-06-28 14:24:47"
      },
      {
        "time_stamp": "2023-06-28 14:24:49"
      },
      {
        "time_stamp": "2023-06-28 14:28:42"
      },
      {
        "time_stamp": "2023-06-28 14:28:44"
      },
      {
        "time_stamp": "2023-06-28 14:47:12"
      },
      {
        "time_stamp": "2023-06-29 07:56:01"
      },
      {
        "time_stamp": "2023-06-29 07:56:25"
      },
      {
        "time_stamp": "2023-06-29 07:57:45"
      },
      {
        "time_stamp": "2023-06-29 07:58:36"
      },
      {
        "time_stamp": "2023-06-29 07:58:58"
      },
      {
        "time_stamp": "2023-06-29 07:59:11"
      },
      {
        "time_stamp": "2023-06-29 07:59:57"
      },
      {
        "time_stamp": "2023-06-29 08:00:02"
      },
      {
        "time_stamp": "2023-06-29 08:06:26"
      },
      {
        "time_stamp": "2023-06-29 08:07:01"
      },
      {
        "time_stamp": "2023-06-29 08:07:23"
      },
      {
        "time_stamp": "2023-06-29 08:08:01"
      },
      {
        "time_stamp": "2023-06-29 08:08:20"
      },
      {
        "time_stamp": "2023-06-29 08:08:26"
      },
      {
        "time_stamp": "2023-06-29 08:08:34"
      },
      {
        "time_stamp": "2023-06-29 08:15:29"
      },
      {
        "time_stamp": "2023-06-29 08:36:46"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-06-28 13:41:06",
    "text": "`export default { prefix: 'tw-' }` I figure?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 13:41:21",
    "text": "I thought so too but that doesn't appear to work"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 13:42:18",
    "text": "that causes:\n```warn - No utility classes were detected in your source files. If this is unexpected, double-check the `content` option in your Tailwind CSS configuration.```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 13:42:33",
    "text": "I don't know if this is something I did or something I pulled from the example"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 13:43:47",
    "text": "the HS github example uses export default {}, because it's required?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 13:52:05",
    "text": "I can't figure out a combo that works <@U04DVL5T2TE> <@UCY83QS6Q>"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-06-28 13:55:34",
    "text": "Hm, will need to look further. In the “styingapp” example we have <https://github.com/HubSpot/cms-js-building-block-examples/blob/main/styling/styling-project/styling-app/tailwind.config.js> … but maybe something with that isn’t working (I quickly tried adding a prefix to that file in a codesandbox but had no luck)"
  },
  {
    "text": "I see the prefix in the config (that is getting passed to postcss, but it isn’t getting picked up :thinking_face: …",
    "time_stamp": "2023-06-28 14:00:58"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 14:01:40",
    "text": "I thought it might be something like this:\n```import tailwind from \"tailwindcss\";\nimport autoprefixer from \"autoprefixer\";\nimport tailwindConfig from \"./tailwind.config.js\";\n\ntailwindConfig.prefix = \"tw-\";\n\nexport default {\n  plugins: [\n    tailwind(tailwindConfig),\n    autoprefixer()\n  ]\n};```\nin postcss.config.js"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 14:01:44",
    "text": "but that doesn't seem to work"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 14:03:19",
    "text": "that FEELS like it should work"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 14:09:40",
    "text": "tailwind has support for this kind of thing in theory: <https://tailwindcss.com/blog/tailwindcss-v3-3#esm-and-type-script-support>"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 14:09:53",
    "text": "is the HubSpot config somewhere/somehow unique?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-06-28 14:10:17",
    "text": "Yeah, I think something is busted with how we are using postcss and tailwind and the config file is getting ignored"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-28 14:11:00",
    "text": "yeah havent gotten a chance to look at all yet but sounds like a plumbing issue on our side"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 14:11:29",
    "text": "ok, it's not a disaster yet but it is causing a bit of a ruckus"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-06-28 14:11:56",
    "text": "i can join in the investigation shortly"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 14:12:06",
    "text": "thank you. very much appreciated"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-06-28 14:12:11",
    "text": "I’m on it for now, will let you know if I don’t succeed"
  },
  {
    "text": "Ok, I’m successfully seeing …",
    "time_stamp": "2023-06-28 14:17:46"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 14:18:04",
    "text": ":exclamation:"
  },
  {
    "text": "I needed to actually ensure that the classnames I was using in the code existed with the prefix:",
    "time_stamp": "2023-06-28 14:18:23"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-06-28 14:18:39",
    "text": "Because tailwind “purges” out any classnames that it doesn’t detect you use"
  },
  {
    "text": "My configuration looks like this:",
    "time_stamp": "2023-06-28 14:19:03"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 14:19:39",
    "text": "I was under the impression that it would prefix all tailwind classes"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 14:19:41",
    "text": "hmm.."
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-06-28 14:19:46",
    "text": "You might not need `prefix` _and_ `important` , I suspect one or the other is sufficent (and `important: '&lt;some ID/class wrapper&gt;` ) might be easier"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-06-28 14:20:26",
    "text": "Did you change your component code to use the prefix? Like `tw-text-gray-900`?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 14:21:02",
    "text": "no, I thought it would (magically) go through and prefix everything for me :faceplam:"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-06-28 14:21:24",
    "text": "No worries, why don’t you try `important: '.tw-wrapper'` instead?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 14:21:24",
    "text": "so this whole thing was just my misunderstanding I think"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 14:21:25",
    "text": "my bad"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 14:21:45",
    "text": "I don't think I'll even need that (unless I'm misunderstanding something)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 14:21:53",
    "text": "I just need all of the classes to be unique"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-06-28 14:21:56",
    "text": "With the “important” wrapper you only need a parent div that has the wrapper class/ID and don’t need to change any tailwind classnames"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 14:22:02",
    "text": "so I'll add prefix + tw- to ever class"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 14:22:40",
    "text": "I think I get the important thing...hmm"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 14:22:59",
    "text": "so if I add that to a parent, all of the child regular tailwind classes will be unique"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-06-28 14:23:06",
    "text": "I believe so"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 14:23:36",
    "text": "I'll try"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 14:23:39",
    "text": "thanks for your help"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 14:23:59",
    "text": "I'm a little disappointed it's not magic"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 14:24:07",
    "text": ":slightly_smiling_face:"
  },
  {
    "text": "",
    "time_stamp": "2023-06-28 14:24:47"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-06-28 14:24:49",
    "text": "<https://codesandbox.io/p/sandbox/cms-js-building-block-examples-g20chg>"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 14:28:42",
    "text": "cool, the important version is pretty much magic"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 14:28:44",
    "text": "thanks again"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-06-28 14:47:12",
    "text": "Would it be useful for `important: &lt;wrapper selector&gt;` to be in our example? <https://github.com/HubSpot/cms-js-building-block-examples/pull/16>"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 17:02:47",
    "text": "<https://courses.joshwcomeau.com/joy-of-react/> just added a \"client vs server\" module"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-06-28 17:03:22",
    "text": "this was a big hurdle for me to understand how js-rendering works (still hurdling)"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-06-28 17:26:09",
    "text": "Nice :+1:  "
  }
]