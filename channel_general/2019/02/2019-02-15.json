[
  {
    "poster": {
      "poster_name": "John Kelleher",
      "poster_handle": "john785"
    },
    "time_stamp": "2019-02-15 03:10:34",
    "text": "Hi all, I'm pretty sure the answer to this is 'no' but I want to be sure before I confirm it with the client...\n\nWe have a client looking to track embedded Meetings link form fills in their Google Analytics Goals - i.e. when someone books a call, they want to track it as a goal in GA.\n\nWith the embed being an iframe, I can't see this happening but wanted to check if anyone has found a workaround?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-02-15 06:35:42",
    "text": "YOU CAN TURN THE IFRAME OFF.",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-02-15 08:18:46"
      }
    ]
  },
  {
    "text": "",
    "time_stamp": "2019-02-15 06:37:07"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-02-15 06:37:26",
    "text": "This is under the options in each form."
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2019-02-15 07:33:11",
    "text": "When you put a horizontal spacer module into a flexible column - to you have to set a padding or margin on that module in the style tab?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 07:44:35",
    "text": "no"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 07:45:08",
    "text": "horizontal spacer injects a dummy module which simply has the span class necessary to create the layout you want"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 07:45:43",
    "text": "it’s like if you’re hand coding a layout and you put a `&lt;div class=\"span1\"&gt;&lt;/div&gt;` in your code to shift things over a little bit"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2019-02-15 08:03:02",
    "text": "thanks Jon"
  },
  {
    "poster": {
      "poster_name": "John Kelleher",
      "poster_handle": "john785"
    },
    "time_stamp": "2019-02-15 08:18:46",
    "text": "Thanks, Chad. I'm referring to the Meetings widget rather than the Forms tool."
  },
  {
    "poster": {
      "poster_name": "Maxim Dovbysh",
      "poster_handle": "maxos1980"
    },
    "time_stamp": "2019-02-15 08:39:11",
    "text": "This my decision"
  },
  {
    "poster": {
      "poster_name": "Maxim Dovbysh",
      "poster_handle": "maxos1980"
    },
    "time_stamp": "2019-02-15 08:39:13",
    "edited": {
      "time_stamp": "2019-02-15 08:40:42"
    },
    "text": "$description = str_replace('hubfs',  'hs-fs/hubfs', $description);\n$description = str_replace('.jpeg',  '.jpeg?width=400', $description);\n$description = str_replace('.jpg',  '.jpg?width=400', $description);\n$description = str_replace('.png',  '.png?width=400', $description);"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-02-15 09:31:30",
    "text": "Before I put this in ideas, there's no way to clone an item in a repeater field, is there?",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-02-15 09:31:57"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 09:31:57",
    "text": "correct there is not a way to do that."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 11:40:30",
    "text": "never seen this practice before on HS just wondering if others are doing this - I’m working on a site that others built and their custom module names all have Emoji’s in them"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 11:40:36",
    "text": "seems potentially problematic",
    "reply_count": 63,
    "reply_users_count": 6,
    "replies": [
      {
        "time_stamp": "2019-02-15 11:45:28"
      },
      {
        "time_stamp": "2019-02-15 11:46:11"
      },
      {
        "time_stamp": "2019-02-15 11:46:53"
      },
      {
        "time_stamp": "2019-02-15 11:48:18"
      },
      {
        "time_stamp": "2019-02-15 11:49:10"
      },
      {
        "time_stamp": "2019-02-15 11:49:22"
      },
      {
        "time_stamp": "2019-02-15 11:58:15"
      },
      {
        "time_stamp": "2019-02-15 11:58:21"
      },
      {
        "time_stamp": "2019-02-15 12:15:31"
      },
      {
        "time_stamp": "2019-02-15 12:47:45"
      },
      {
        "time_stamp": "2019-02-15 12:48:12"
      },
      {
        "time_stamp": "2019-02-15 12:50:38"
      },
      {
        "time_stamp": "2019-02-15 12:51:39"
      },
      {
        "time_stamp": "2019-02-15 12:51:55"
      },
      {
        "time_stamp": "2019-02-15 12:51:56"
      },
      {
        "time_stamp": "2019-02-15 12:52:32"
      },
      {
        "time_stamp": "2019-02-15 12:52:40"
      },
      {
        "time_stamp": "2019-02-15 12:53:33"
      },
      {
        "time_stamp": "2019-02-15 12:54:22"
      },
      {
        "time_stamp": "2019-02-15 12:54:22"
      },
      {
        "time_stamp": "2019-02-15 12:54:54"
      },
      {
        "time_stamp": "2019-02-15 12:55:10"
      },
      {
        "time_stamp": "2019-02-15 12:55:27"
      },
      {
        "time_stamp": "2019-02-15 12:56:22"
      },
      {
        "time_stamp": "2019-02-15 12:57:10"
      },
      {
        "time_stamp": "2019-02-15 12:57:18"
      },
      {
        "time_stamp": "2019-02-15 13:00:00"
      },
      {
        "time_stamp": "2019-02-15 13:03:13"
      },
      {
        "time_stamp": "2019-02-15 13:03:51"
      },
      {
        "time_stamp": "2019-02-15 13:05:19"
      },
      {
        "time_stamp": "2019-02-15 13:06:27"
      },
      {
        "time_stamp": "2019-02-15 13:06:48"
      },
      {
        "time_stamp": "2019-02-15 13:06:49"
      },
      {
        "time_stamp": "2019-02-15 13:07:08"
      },
      {
        "time_stamp": "2019-02-15 13:07:44"
      },
      {
        "time_stamp": "2019-02-15 13:08:03"
      },
      {
        "time_stamp": "2019-02-15 13:08:11"
      },
      {
        "time_stamp": "2019-02-15 13:08:26"
      },
      {
        "time_stamp": "2019-02-15 13:08:40"
      },
      {
        "time_stamp": "2019-02-15 13:08:56"
      },
      {
        "time_stamp": "2019-02-15 13:09:14"
      },
      {
        "time_stamp": "2019-02-15 13:09:52"
      },
      {
        "time_stamp": "2019-02-15 13:09:56"
      },
      {
        "time_stamp": "2019-02-15 13:10:08"
      },
      {
        "time_stamp": "2019-02-15 13:11:26"
      },
      {
        "time_stamp": "2019-02-15 13:12:27"
      },
      {
        "time_stamp": "2019-02-15 13:13:03"
      },
      {
        "time_stamp": "2019-02-15 13:13:07"
      },
      {
        "time_stamp": "2019-02-15 13:13:08"
      },
      {
        "time_stamp": "2019-02-15 13:14:09"
      },
      {
        "time_stamp": "2019-02-15 13:14:27"
      },
      {
        "time_stamp": "2019-02-15 13:14:44"
      },
      {
        "time_stamp": "2019-02-15 13:16:23"
      },
      {
        "time_stamp": "2019-02-15 13:16:46"
      },
      {
        "time_stamp": "2019-02-15 13:17:54"
      },
      {
        "time_stamp": "2019-02-15 13:17:55"
      },
      {
        "time_stamp": "2019-02-15 13:18:27"
      },
      {
        "time_stamp": "2019-02-15 13:18:45"
      },
      {
        "time_stamp": "2019-02-15 13:19:35"
      },
      {
        "time_stamp": "2019-02-15 13:20:39"
      },
      {
        "time_stamp": "2019-02-15 13:22:05"
      },
      {
        "time_stamp": "2019-02-15 13:22:09"
      },
      {
        "time_stamp": "2019-02-15 13:22:27"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Patrick Eng",
      "poster_handle": "patrick404"
    },
    "time_stamp": "2019-02-15 11:45:28",
    "text": "clearly they're living in the future"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 11:46:11",
    "text": "haha.\nwell I’d think like if you tried to add your custom modules to coded templates or something like that you could run into trouble"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 11:46:53",
    "edited": {
      "time_stamp": "2019-02-15 11:48:10"
    },
    "text": "that’s also the last thing I need to see in my code, a bunch of emoji’s everywhere. Next we’ll be seeing that emoji’s are valid class names use .:frowning: for things you want to have a blue background"
  },
  {
    "poster": {
      "poster_name": "Patrick Eng",
      "poster_handle": "patrick404"
    },
    "time_stamp": "2019-02-15 11:48:18",
    "text": "Also made me think of this: <https://en.wikipedia.org/wiki/Emoji_domain>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 11:49:10",
    "text": "omg"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 11:49:22",
    "text": "whole new world"
  },
  {
    "poster": {
      "poster_name": "Chris Conant",
      "poster_handle": "conant_chris"
    },
    "time_stamp": "2019-02-15 11:58:15",
    "text": "We do accept them, but I still avoid using them."
  },
  {
    "poster": {
      "poster_name": "Chris Conant",
      "poster_handle": "conant_chris"
    },
    "time_stamp": "2019-02-15 11:58:21",
    "text": "But then again, `&lt;html ⚡4email&gt;`"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 12:15:31",
    "text": "I would avoid em at least in that sense... :hash: :two: [insert cents emoji]"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-02-15 12:47:45",
    "text": "ummmm.... <https://codepen.io/andresgalante/pen/jbGqXj>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 12:48:12",
    "text": "WE’RE ALL GONNA DIE"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-02-15 12:50:38",
    "text": "So apparently, any unicode emoji can be used literally anywhere.  `const: 🚒 = (🌲 + 🔥)`"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 12:51:39",
    "text": "oh boy…"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 12:51:55",
    "text": "so tell me, is an emoji a string or a number"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 12:51:56",
    "text": "lol"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-02-15 12:52:32",
    "text": "I feel like I need to write a function to tell me that"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 12:52:40",
    "text": "i'd say its the fall of our civilization"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-02-15 12:53:33",
    "text": "If you ever want to leave some code behind that will make the next dev that touches it murder you..."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 12:54:22",
    "text": "“what does sailboat emoji boom emoji mean!?”"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 12:54:22",
    "text": "it something you would do to terrible clients that dont pay you when freelancing. Just turn all their classes into emojis and say good luck"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 12:54:54",
    "edited": {
      "time_stamp": "2019-02-15 12:55:04"
    },
    "text": "I mean for all intensive purposes I think tailwind css should take advantage of this"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-02-15 12:55:10",
    "text": "just an increasing number of :hankey:s"
  },
  {
    "poster": {
      "poster_name": "Patrick Eng",
      "poster_handle": "patrick404"
    },
    "time_stamp": "2019-02-15 12:55:27",
    "text": "I feel like this is equivalent of a criminal's mark, like the wet bandits. Open up a file and see the sailboat emoji and just say to myself....\"blast, Jon's been here\""
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 12:56:22",
    "text": "something like :pray::moneybag::point_right::chad:"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 12:57:10",
    "text": "mainly because i feel like its something white shirt <@U38EZFVFE> would do"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 12:57:18",
    "text": "never :chad2:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 13:00:00",
    "text": "hahaha"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 13:03:13",
    "text": "<https://spin.d.pr/PajA93+>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 13:03:51",
    "text": "that’s my FTP of this portal with the emoji’s in the module names. :faceplam:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 13:05:19",
    "text": "next inbound if I get to give another talk, I’m hiding emoji’s in my code as easter eggs.\n\n(I hid lots of little easter egg jokes in my presentation last year)"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 13:06:27",
    "edited": {
      "time_stamp": "2019-02-15 13:06:29"
    },
    "text": "Wow, they really named those modules `Content 5` and so on?"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 13:06:48",
    "text": "that seems like a turrible descriptor"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 13:06:49",
    "text": "*sigh* yes"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 13:07:08",
    "text": "and to make matters worse I have no idea what the rocket ship and checkmark indicate"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 13:07:44",
    "text": "and btw it’s from a purchased template pack on the HS marketplace I think. so look forward to possibly inheriting a project with it on it"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 13:08:03",
    "text": "clearly its :heavy_check_mark:  = use this and :rocket: = the future"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 13:08:11",
    "text": "lol"
  },
  {
    "poster": {
      "poster_name": "Patrick Eng",
      "poster_handle": "patrick404"
    },
    "time_stamp": "2019-02-15 13:08:26",
    "text": "is it rude to ask what that template pack is? I'd like to avoid that if I can"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 13:08:40",
    "text": "oh man, yea that needs to be a requirement to NOT have emoji's in there and to be descriptive"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 13:08:56",
    "text": "its not rude <@UDFSF3N1F> that's just a fact of life to avoid this"
  },
  {
    "poster": {
      "poster_name": "Joe",
      "poster_handle": "joe"
    },
    "time_stamp": "2019-02-15 13:09:14",
    "text": "clearly the programming markup of the future:\n<https://www.emojicode.org/docs/guides/compile-and-run.html#the-basic-structure>"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 13:09:52",
    "text": "<@U22PKFRU5> pinging you into this convo so you can look at this with the marketplace people. I am thinking this needs to be written into marketplace guidelines of `no emoji's in module names` and `label modules clearly`"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 13:09:56",
    "text": "<https://marketplace.HubSpot.com/products/inboundlabs/startup-framework-marketplace>\n\nand\n<https://marketplace.HubSpot.com/products/inboundlabs/startup-framework-premium-version>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 13:10:08",
    "text": "honestly I would suspect all of their other stuff includes emojii"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 13:11:26",
    "text": "honestly regarding emoji’s in module names, as long as it doesn’t cause functionality issues. I’m not completely against it but it should be a guideline to limit it to 1 emojii and you still have to label modules clearly"
  },
  {
    "poster": {
      "poster_name": "Patrick Eng",
      "poster_handle": "patrick404"
    },
    "time_stamp": "2019-02-15 13:12:27",
    "text": "oof, the description alone hurts me.\nso.many.emojis."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 13:13:03",
    "text": "emojicode… ooftah"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 13:13:07",
    "edited": {
      "time_stamp": "2019-02-15 13:13:29"
    },
    "text": "I get the playfulness of it but like your screenshot, unless its well documented what each emoji stands for, it shouldn't be allowed. Also, I would personally say it's not best practice."
  },
  {
    "poster": {
      "poster_name": "Patrick Eng",
      "poster_handle": "patrick404"
    },
    "time_stamp": "2019-02-15 13:13:08",
    "text": "maybe check mark is for the free version and rocket ship is the full paid version?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 13:14:09",
    "text": "valid thought"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 13:14:27",
    "text": "Also, not to bash on them, but their documentation requires you to sign up for teachable to go through the video portion: <https://inboundlabs.teachable.com/p/the-start-up-framework-for-HubSpot?utm_campaign=Startup%20Framework%202018&amp;utm_source=HubSpot%20Marketplace>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 13:14:44",
    "text": "oh my flippin gosh you’re right about the description\n:arrow_backward::national_park::arrow_forward: Image Slider"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 13:16:23",
    "text": "gonna use :arrow_backward::national_park::arrow_forward: next time I’m styling a slider"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 13:16:46",
    "text": "make the next guy go, this is somehow rediculous and descript"
  },
  {
    "poster": {
      "poster_name": "Joe",
      "poster_handle": "joe"
    },
    "time_stamp": "2019-02-15 13:17:54",
    "text": "if you're the only one that knows the secrets of it #jobsecurity"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 13:17:55",
    "edited": {
      "time_stamp": "2019-02-15 13:18:12"
    },
    "text": "I look at this from a accessibility standpoint, modules and documentation and all that should be text and clear, for example if a screen reader reads the slider it would read:\n`arrow backward national park arrow forward`"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 13:18:27",
    "text": "that would confuse the hell outta me"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 13:18:45",
    "text": "true"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 13:19:35",
    "text": "im actually going to test this with Jaws, send me some of the titles in a DM and ill add em to a word doc then let you know what they say lol"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 13:20:39",
    "text": "SUF - Call to action 9 :rocket:.module"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 13:22:05",
    "text": "lol april fools day, all text in the chrome extension is changing to emoji’s, dev menu too"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 13:22:09",
    "text": "joking"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 13:22:27",
    "edited": {
      "time_stamp": "2019-02-15 13:22:40"
    },
    "text": "or am :jon-m::question:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 14:28:45",
    "text": "getting a design manager error when using the `|sort()` filter\nI have another instance using the same exact syntax and that is not erring\n<https://spin.d.pr/SFn6u1+>",
    "reply_count": 2,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-02-15 14:29:50"
      },
      {
        "time_stamp": "2019-02-15 14:30:03"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-15 14:29:06",
    "text": "<https://spin.d.pr/CQ9duZ+>"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-02-15 14:29:50",
    "text": "Link?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-02-15 14:30:03",
    "text": "I think it is claiming that unsortedType is null"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2019-02-15 16:42:49",
    "text": "Anyone ever run into the HS cookies modifying anchor links? throwing me for a bit of a loop",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-02-18 07:49:20"
      },
      {
        "time_stamp": "2019-02-18 07:53:28"
      },
      {
        "time_stamp": "2019-02-18 07:54:35"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 17:12:19",
    "edited": {
      "time_stamp": "2019-02-15 17:13:34"
    },
    "text": "Any reason why the language switcher module isnt available for selection in a blog template? I mean its in a global group so I would assume you just add it there and then add the group to the blog template but was curious as there was an issue on the forum asking about it. I just assumed they meant in the page/global group but i'm not seeing it in the blog template"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-15 17:15:30",
    "text": "im assuming this because you can't create translated versions of a blog (yet i hope...)"
  }
]