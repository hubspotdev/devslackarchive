[
  {
    "poster": {
      "poster_name": "Frans Leys",
      "poster_handle": "fleys"
    },
    "time_stamp": "2022-11-02 01:53:17",
    "text": "ahhh the Salesforce sync is not (yet) a data sync so my diagnostic tools are of no use here. I’m sure the support team can just look into this though"
  },
  {
    "poster": {
      "poster_name": "Arno Van de Weyer",
      "poster_handle": "arno.vandeweyer"
    },
    "time_stamp": "2022-11-02 03:18:25",
    "text": "What is the path you entered in the redirect URL on the Auth page for the developer app?"
  },
  {
    "poster": {
      "poster_name": "Arno Van de Weyer",
      "poster_handle": "arno.vandeweyer"
    },
    "time_stamp": "2022-11-02 03:21:03",
    "text": "What happens is, HubSpot does a call to that URL, requests a token via the token request code you have on your website, and returns it.\nExample for a Drupal website with the HubSpot Module:\n• Run HubSpot install url\n• Gets redirected to the /HubSpot/oauth path\n• Code on website linked to this route runs\n• Returns an Auth token\n• HubSpot Dev App API is available to use via this token\n• After this, use refresh token to refresh Auth token"
  },
  {
    "poster": {
      "poster_name": "Arno Van de Weyer",
      "poster_handle": "arno.vandeweyer"
    },
    "time_stamp": "2022-11-02 03:22:14",
    "text": "Make sure you're adding the correct parameters to the auth call as well. These can be found here but you probably already have that\n<https://developers.HubSpot.com/docs/api/oauth-quickstart-guide>"
  },
  {
    "poster": {
      "poster_name": "Emad Aziz Suria",
      "poster_handle": "emad.suria"
    },
    "time_stamp": "2022-11-02 04:19:38",
    "text": "Hello everyone here, I just joined the HubSpot Slack. I have a query related to *Upcoming: API Key Sunset (*<https://developers.HubSpot.com/changelog/upcoming-api-key-sunset>*)*\n\n`After November 30, we will begin the process of deprecating API Keys and your API keys will no longer be supported by HubSpot. You will therefore be using API keys at your own risk.`\n\nDoes this mean that if my live web application that has been using the API keys will continue to run even after 30th Nov 2022, its just that for any support issue arising as a result HubSpot is not going to entertain that. Is my understanding correct?",
    "reply_count": 13,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2022-11-02 08:30:12"
      },
      {
        "time_stamp": "2022-11-02 08:30:33"
      },
      {
        "time_stamp": "2022-11-02 08:30:52"
      },
      {
        "time_stamp": "2022-11-02 08:32:35"
      },
      {
        "time_stamp": "2022-11-02 08:34:32"
      },
      {
        "time_stamp": "2022-11-02 08:35:46"
      },
      {
        "time_stamp": "2022-11-02 08:36:44"
      },
      {
        "time_stamp": "2022-11-02 08:37:32"
      },
      {
        "time_stamp": "2022-11-02 08:37:55"
      },
      {
        "time_stamp": "2022-11-02 08:38:09"
      },
      {
        "time_stamp": "2022-11-02 08:39:12"
      },
      {
        "time_stamp": "2022-11-02 10:00:39"
      },
      {
        "time_stamp": "2022-11-02 10:01:39"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Mubariz Muneer",
      "poster_handle": "mubariz.muneer"
    },
    "time_stamp": "2022-11-02 04:38:23",
    "text": "<@U01QVR44MEY> Hey can you tell me is this API -&gt;\n```<https://api.hubapi.com/extensions/ecomm/v2/settings>```\ngoing sunset as well ?"
  },
  {
    "poster": {
      "poster_name": "Anton Strelets",
      "poster_handle": "san"
    },
    "time_stamp": "2022-11-02 04:39:13",
    "text": "Hello guys"
  },
  {
    "poster": {
      "poster_name": "Anton Strelets",
      "poster_handle": "san"
    },
    "time_stamp": "2022-11-02 04:39:15",
    "text": "I use a token from a private application, use the ID of a template that was previously created and transferred it to single-send-api. But the problem is that the email is not sent, and the response is pending."
  },
  {
    "text": "",
    "time_stamp": "2022-11-02 04:39:44"
  },
  {
    "text": "",
    "time_stamp": "2022-11-02 04:39:59"
  },
  {
    "poster": {
      "poster_name": "Anton Strelets",
      "poster_handle": "san"
    },
    "time_stamp": "2022-11-02 04:40:36",
    "text": "And the format of the response is not expected, because the document says as a minimum that SendingResult will necessarily be returned, but for some reason it is not there"
  },
  {
    "poster": {
      "poster_name": "Mubariz Muneer",
      "poster_handle": "mubariz.muneer"
    },
    "time_stamp": "2022-11-02 04:41:19",
    "text": "<https://api.hubapi.com/extensions/ecomm/v2/sync/messages>\n<https://api.hubapi.com/extensions/ecomm/v2/sync/contacts>\n<https://api.hubapi.com/extensions/ecomm/v2/sync/products>"
  },
  {
    "poster": {
      "poster_name": "Shingayi",
      "poster_handle": "chivandikwa.t"
    },
    "time_stamp": "2022-11-02 05:57:44",
    "edited": {
      "time_stamp": "2022-11-02 05:58:29"
    },
    "text": "Hello team :wave:. I have been using nswag studio to generate come clients in either C# or TypeScript based off the published open apis. The path parameter syntax in the operation id of the APIs breaks API client genaration tool nswag studio. For example the get deals by Id is defined as\n\n```/crm/v3/objects/deals/{dealId}```\nThe operationId is defined as\n```get-/crm/v3/objects/deals/{dealId}_getById```\nThe path parameter {dealId} in that name breaks the generation as this should be a text-based name. Is there something that can be done about this? If anyone has any experience with this, I would appreciate any pointers."
  },
  {
    "poster": {
      "poster_name": "Hannah Seligson - Developer Advocate",
      "poster_handle": "hseligson"
    },
    "time_stamp": "2022-11-02 07:19:30",
    "text": "Hey ya’ll! I’m working with the tech writer on this update, but I’m not well-versed in Ruby.\nCurious how we can update/simplify this for other readers/users:\n```config = HubSpot::Crm::Timeline::Configuration.new do |config|\n  config.access_token = access_token\nend\n\napi_client = ::HubSpot::Crm::Timeline::ApiClient.new(config)\n\napi = ::HubSpot::Crm::Timeline::EventsApi.new(api_client)\n\ntokens = {\n  \"what_happened\": \"I got it to work\",\n}\n\ntimeline_event = HubSpot::Crm::Timeline::TimelineEvent.new(event_template_id: \"xxxxxxx\", email: \"<mailto:xxx@gmail.com|xxx@gmail.com>\", timestamp: (DateTime.parse('2019-1-16 16:00:30').to_i * 1000), tokens: tokens)\n\nbegin\n  api_response = api.create(timeline_event)\n  puts api_response\nrescue HubSpot::Crm::Timeline::ApiError =&gt; e\n  error_message = JSON.parse(e.response_body)['category']\n  puts error_message\nend```"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 08:23:45",
    "text": "Yes, all those endpoints should be deprecated on December 1"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 08:28:40",
    "text": "<@U03MLCLS5BN> One moment I need to run one test but I think I've been able to simply the code"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 08:30:12",
    "text": "No it will just no longer work"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 08:30:33",
    "text": "That aren't just stopping support, they are completely killing apikeys"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 08:30:52",
    "text": "in favor of private app tokens"
  },
  {
    "poster": {
      "poster_name": "Emad Aziz Suria",
      "poster_handle": "emad.suria"
    },
    "time_stamp": "2022-11-02 08:32:35",
    "text": "<@U01QVR44MEY> thanks for your reply, actually the following statement is confusing me:\n\n`You will therefore be using API keys at your own risk.`"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 08:34:32",
    "text": "I don't really know why they have that line (and probably won't know until 30th) but this line is pretty concrete:\n```Existing API keys will work until November 30t```\n"
  },
  {
    "poster": {
      "poster_name": "Emad Aziz Suria",
      "poster_handle": "emad.suria"
    },
    "time_stamp": "2022-11-02 08:35:46",
    "text": "Ok, got it. One more question if you can help me with that"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 08:36:44",
    "text": "Of course"
  },
  {
    "poster": {
      "poster_name": "Emad Aziz Suria",
      "poster_handle": "emad.suria"
    },
    "time_stamp": "2022-11-02 08:37:32",
    "text": "I'm still using some v1 endpoints of <https://api.hubapi.com>\n\nShould I be concerned about those not working after the migration?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 08:37:55",
    "text": "Most of them support private keys"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 08:38:09",
    "edited": {
      "time_stamp": "2022-11-02 08:38:12"
    },
    "text": "It's will say if they do or don't in the documentation"
  },
  {
    "poster": {
      "poster_name": "Frank Ciaramitaro",
      "poster_handle": "frank209"
    },
    "time_stamp": "2022-11-02 08:38:16",
    "text": "hey guys, im working on a private app for angi ads pro. angi only give out api's and im not versed well enough to know what im doing"
  },
  {
    "poster": {
      "poster_name": "Frank Ciaramitaro",
      "poster_handle": "frank209"
    },
    "time_stamp": "2022-11-02 08:38:20",
    "edited": {
      "time_stamp": "2022-11-02 08:38:33"
    },
    "text": "anyone available to help?"
  },
  {
    "text": "",
    "time_stamp": "2022-11-02 08:39:12"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2022-11-02 09:19:34",
    "text": "thanks!  did you happen to submit a support ticket?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2022-11-02 09:24:37",
    "text": "<@U048K0YPPN1>, can you add a query to the that get request? `properties=hs_createdate`"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 09:24:42",
    "text": "I really don't know ruby that well but this should be a little cleaner. <@U01DQL7AMFH> do you think you can test? I tested a couple times but don't think I set everything up correctly.\n```require 'HubSpot-api-client'\n\nconfig = HubSpot::Crm::Timeline::Configuration.new do |config|\n  config.access_token = access_token\nend\n\napi_client = ::HubSpot::Crm::Timeline::ApiClient.new(config)\n\napi = ::HubSpot::Crm::Timeline::EventsApi.new(api_client)\n\ntokens = {\n  \"what_happened\": \"I got it to work\"\n}\n\ntimeline_event = HubSpot::Crm::Timeline::TimelineEvent.new(event_template_id: \"xxxxxxx\", email: \"<mailto:xxx@gmail.com|xxx@gmail.com>\", timestamp: (DateTime.parse('2019-1-16 16:00:30').to_i * 1000), tokens: tokens)\n\napi_response = api.create(timeline_event)\nputs api_responseTh```"
  },
  {
    "poster": {
      "poster_name": "Hannah Seligson - Developer Advocate",
      "poster_handle": "hseligson"
    },
    "time_stamp": "2022-11-02 09:26:19",
    "text": "Okay, let me try to give it a go as well in the meantime till we hear back from Daniel."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 09:27:18",
    "text": "Sounds good"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2022-11-02 09:47:32",
    "text": "my suspicion is that the createdate was edited for those records.  `hs_createdate` should return a value and it is read only so should not have been modified"
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 09:49:08",
    "text": "this may have been the case, since this is a client im not too sure"
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 09:49:36",
    "text": "i will add that property and send over the response. where do I contact support?"
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 09:51:02",
    "text": "also, a random question: when utilizing the search API to pull deals is there a better way to get associated contacts rather that making a request for each individual deal?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2022-11-02 09:51:18",
    "text": "oh i have an idea"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2022-11-02 09:51:25",
    "text": "lets look at the property history"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2022-11-02 09:52:03",
    "text": "`<https://api.hubapi.com/crm/v3/objects/deals/8752347939?propertiesWithHistory=createdate>`"
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 09:56:16",
    "text": "```b'{\"id\":\"8752347939\",\"properties\":{\"amount\":\"399.00\",\"closedate\":\"2022-04-28T21:45:45.398Z\",\"dealname\":\"Kinetic Networks LLC - 276676 Premier 50 Quarterly\",\"dealstage\":\"8476890\",\"hs_lastmodifieddate\":\"2022-10-28T04:09:58.697Z\",\"hs_object_id\":\"8752347939\",\"pipeline\":\"8476884\"},\"propertiesWithHistory\":{\"createdate\":[{\"value\":\"\",\"timestamp\":\"2022-04-28T22:43:25.394Z\",\"sourceType\":\"CRM_UI\",\"sourceId\":\"userId:10838969\",\"updatedByUserId\":10838969},{\"value\":\"2022-04-28T21:45:40.987Z\",\"timestamp\":\"2022-04-28T21:45:40.987Z\",\"sourceType\":\"API\",\"sourceId\":\"PublicObjectResource\"}]},\"createdAt\":\"1970-01-01T00:00:00Z\",\"updatedAt\":\"2022-10-28T04:09:58.697Z\",\"archived\":false}'```"
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 09:57:05",
    "edited": {
      "time_stamp": "2022-11-02 09:57:14"
    },
    "text": "so it looks like it got altered?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2022-11-02 09:57:25",
    "text": "yep"
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 09:58:38",
    "text": "that is so strange"
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 09:59:03",
    "text": "i dont understand how/why a field like create date would be changed on their end…"
  },
  {
    "poster": {
      "poster_name": "Emad Aziz Suria",
      "poster_handle": "emad.suria"
    },
    "time_stamp": "2022-11-02 10:00:39",
    "text": "Thanks a lot <@U01QVR44MEY>. Really appreciate your help."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 10:01:39",
    "text": "Of course"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2022-11-02 10:07:31",
    "text": "i cant speak to that :disappointed:\ni would suggest using `hs_createdate` in the future."
  },
  {
    "poster": {
      "poster_name": "Hannah Seligson - Developer Advocate",
      "poster_handle": "hseligson"
    },
    "time_stamp": "2022-11-02 10:47:05",
    "text": "Engineering is taking a look :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 10:49:10",
    "text": "Thanks so much hannah"
  },
  {
    "poster": {
      "poster_name": "Hannah Seligson - Developer Advocate",
      "poster_handle": "hseligson"
    },
    "time_stamp": "2022-11-02 10:50:38",
    "text": "No problem - thanks for your help and pointing this out!"
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 10:58:41",
    "text": "when utilizing the search API to pull deals is there a better way to get associated contacts rather that making a request for each individual deal?",
    "reply_count": 53,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2022-11-02 10:59:49"
      },
      {
        "time_stamp": "2022-11-02 11:01:22"
      },
      {
        "time_stamp": "2022-11-02 11:05:06"
      },
      {
        "time_stamp": "2022-11-02 11:05:50"
      },
      {
        "time_stamp": "2022-11-02 11:06:04"
      },
      {
        "time_stamp": "2022-11-02 11:06:12"
      },
      {
        "time_stamp": "2022-11-02 11:06:20"
      },
      {
        "time_stamp": "2022-11-02 11:06:48"
      },
      {
        "time_stamp": "2022-11-02 11:06:58"
      },
      {
        "time_stamp": "2022-11-02 11:12:19"
      },
      {
        "time_stamp": "2022-11-02 11:16:05"
      },
      {
        "time_stamp": "2022-11-02 11:16:18"
      },
      {
        "time_stamp": "2022-11-02 11:17:41"
      },
      {
        "time_stamp": "2022-11-02 11:22:42"
      },
      {
        "time_stamp": "2022-11-02 11:22:57"
      },
      {
        "time_stamp": "2022-11-02 11:24:03"
      },
      {
        "time_stamp": "2022-11-02 11:25:09"
      },
      {
        "time_stamp": "2022-11-02 11:25:35"
      },
      {
        "time_stamp": "2022-11-02 11:25:55"
      },
      {
        "time_stamp": "2022-11-02 11:26:24"
      },
      {
        "time_stamp": "2022-11-02 11:26:46"
      },
      {
        "time_stamp": "2022-11-02 11:27:00"
      },
      {
        "time_stamp": "2022-11-02 11:27:20"
      },
      {
        "time_stamp": "2022-11-02 11:28:41"
      },
      {
        "time_stamp": "2022-11-02 11:28:57"
      },
      {
        "time_stamp": "2022-11-02 11:29:08"
      },
      {
        "time_stamp": "2022-11-02 11:29:27"
      },
      {
        "time_stamp": "2022-11-02 11:30:35"
      },
      {
        "time_stamp": "2022-11-02 11:30:54"
      },
      {
        "time_stamp": "2022-11-02 11:31:05"
      },
      {
        "time_stamp": "2022-11-02 11:31:30"
      },
      {
        "time_stamp": "2022-11-02 11:36:14"
      },
      {
        "time_stamp": "2022-11-02 11:36:37"
      },
      {
        "time_stamp": "2022-11-02 11:37:24"
      },
      {
        "time_stamp": "2022-11-02 11:37:37"
      },
      {
        "time_stamp": "2022-11-02 11:37:55"
      },
      {
        "time_stamp": "2022-11-02 11:38:23"
      },
      {
        "time_stamp": "2022-11-02 11:39:17"
      },
      {
        "time_stamp": "2022-11-02 11:41:16"
      },
      {
        "time_stamp": "2022-11-02 11:41:40"
      },
      {
        "time_stamp": "2022-11-02 11:42:04"
      },
      {
        "time_stamp": "2022-11-02 11:42:35"
      },
      {
        "time_stamp": "2022-11-02 11:43:23"
      },
      {
        "time_stamp": "2022-11-02 11:43:37"
      },
      {
        "time_stamp": "2022-11-02 11:44:30"
      },
      {
        "time_stamp": "2022-11-02 11:45:17"
      },
      {
        "time_stamp": "2022-11-02 11:45:27"
      },
      {
        "time_stamp": "2022-11-02 11:46:30"
      },
      {
        "time_stamp": "2022-11-02 11:46:35"
      },
      {
        "time_stamp": "2022-11-02 11:49:36"
      },
      {
        "time_stamp": "2022-11-02 15:00:59"
      },
      {
        "time_stamp": "2022-11-02 15:02:50"
      },
      {
        "time_stamp": "2022-11-02 15:04:15"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 10:59:49",
    "text": "Honestly the best way to do this would be to use graphql"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 11:01:22",
    "text": "Super simple query to pull in all the deal and contacts associated with those deals:\n```query MyQuery {\n  CRM {\n    deal_collection {\n      items {\n        dealname\n        associations {\n          contact_collection__deal_to_contact {\n            items{\n              firstname\n              lastname\n              hs_object_id\n            }\n          }\n        }\n      }\n    }\n  }\n}```\n"
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 11:05:06",
    "text": "so does this pull in all deals?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 11:05:50",
    "text": "Limited to 500 so you'll need pagination"
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 11:06:04",
    "text": "is there a way to filter by date?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 11:06:12",
    "text": "Sure one moment"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 11:06:20",
    "text": "Sort or filter?"
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 11:06:48",
    "text": "filter, so we can only pull deals updated in the last 30 days"
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 11:06:58",
    "text": "we have some clients with over 1 million deals"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 11:12:19",
    "text": "Yeah, let me fix up a query"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 11:16:05",
    "text": "```query MyQuery {\n  CRM {\n    deal_collection(limit: 500, filter: {hs_lastmodifieddate__gt:1664730624000}) {\n      items {\n        dealname\n        hs_lastmodifieddate\n        associations {\n          contact_collection__deal_to_contact {\n            items {\n              firstname\n              lastname\n              hs_object_id\n            }\n          }\n        }\n      }\n    }\n  }\n}```\n"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 11:16:18",
    "text": "This will only show queries after 10/2/2022"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 11:17:41",
    "text": "and this is the same thing but only with deals that are associated with contacts:\n```query MyQuery {\n  CRM {\n    deal_collection(limit: 100, filter: {hs_lastmodifieddate__gt:1664730624000, num_associated_contacts__neq:0 }) {\n      items {\n        dealname\n        hs_lastmodifieddate\n        associations {\n          contact_collection__deal_to_contact {\n            items {\n              firstname\n              lastname\n              hs_object_id\n            }\n          }\n        }\n      }\n    }\n  }\n}```\n"
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 11:22:42",
    "text": "awesome thanks"
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 11:22:57",
    "text": "so the first one will return deals, even if they dont have contacts associated?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 11:24:03",
    "text": "Yep"
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 11:25:09",
    "text": "i added these 2 scopes: collector.graphql_schema.read collector.graphql_query.execute"
  },
  {
    "text": "and am trying to reauthenticate, but keep on getting these errors:",
    "time_stamp": "2022-11-02 11:25:35"
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 11:25:55",
    "edited": {
      "time_stamp": "2022-11-02 11:26:06"
    },
    "text": "do i need to request access to the graphql api?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 11:26:24",
    "text": "You can test queries through here <https://app.HubSpot.com/l/graphiql>"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 11:26:46",
    "text": "<@U6W3H6YN8> Do you still need to manually allow apps to access graphql"
  },
  {
    "text": "received this error when clicking that link:",
    "time_stamp": "2022-11-02 11:27:00"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 11:27:20",
    "text": "Are you a super admin?"
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 11:28:41",
    "text": "i dont believe so"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 11:28:57",
    "text": "Oh is that a developer account?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 11:29:08",
    "text": "You'll need to test using a normal account"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 11:29:27",
    "text": "Sandboxes should work (just tested and it worked for me)"
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 11:30:35",
    "text": "is the graphql api not publically available yet?"
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 11:30:54",
    "text": "i wanted to be able to add it to my app"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 11:31:05",
    "text": "It is, but I think Will needs to manually allow an app to use it for now"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 11:31:30",
    "text": "OAuth connections are a little different then normal private apps"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 11:34:46",
    "text": "Thanks for looking Frans, really appreciate it"
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 11:36:14",
    "text": "ideally if I could get access to this for our 3 apps (dev, stage, and prod) it would be great"
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 11:36:37",
    "edited": {
      "time_stamp": "2022-11-02 11:36:50"
    },
    "text": "is the only way to request access via slack with <@U6W3H6YN8>?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 11:37:24",
    "text": "For now I believe so"
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 11:37:37",
    "text": "also <@U01QVR44MEY>, just wanted to thank you for your help these past couple days. youre the man!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 11:37:55",
    "text": "Of course, let me know if you run into any issues in the future"
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 11:38:23",
    "text": "okay cool, should I reach out to <@U6W3H6YN8> privately or just wait for a response in this thread?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 11:39:17",
    "edited": {
      "time_stamp": "2022-11-02 11:39:37"
    },
    "text": "I would just wait in this thread, also probably don't @ him anymore it sends a notification (I try to use it as little as possible)"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2022-11-02 11:41:16",
    "text": "Now that GraphQL is GA, nothing needs to be ungated to any accounts."
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2022-11-02 11:41:40",
    "text": "Your account does need CMS Pro or Ent to have access to GraphQL, however. Does this account have CMS Pro or Enterprise?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 11:42:04",
    "text": "It's for a public app"
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 11:42:35",
    "edited": {
      "time_stamp": "2022-11-02 11:42:40"
    },
    "text": "our account is a professional account"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2022-11-02 11:43:23",
    "text": "Yep, so whatever account the app is trying to authenticate with will need at least CMS Professional"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2022-11-02 11:43:37",
    "text": "If you send me the account ID, I can take a look"
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 11:44:30",
    "edited": {
      "time_stamp": "2022-11-02 11:44:56"
    },
    "text": "so if our account is professional (where the app is created), but the account authenticating is not. they wont be able to use our app?"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2022-11-02 11:45:17",
    "text": "Correct, this is true for any scope in any app. The account connecting the app will only be able to do so if they have the proper permissions to use the APIs and features the app interacts with."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 11:45:27",
    "text": "So this is no longer the case <https://HubSpotdev.slack.com/archives/C22PDRW72/p1660938628721139>"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2022-11-02 11:46:30",
    "text": "Correct, that was just to unhide collector.graphql_schema.read and collector.graphql_query.execute, which are no longer hidden"
  },
  {
    "poster": {
      "poster_name": "Lukas Schwab",
      "poster_handle": "lukas"
    },
    "time_stamp": "2022-11-02 11:46:35",
    "text": "<@U048K0YPPN1> if GraphQL doesn’t wind up suiting your purposes, you can list deals and set the `associations` query parameter to `contact`:\n```curl --request GET \\\n  --url '<https://api.hubapi.com/crm/v3/objects/deals?limit=10&amp;associations=contact&amp;archived=false>' \\\n  --header 'authorization: Bearer YOUR_ACCESS_TOKEN'```\nThis is _like_ making a request for each individual deal, but you’re making requests for 100 of them at a time. Because you can’t filter the responses to a certain set of IDs, this approach is mostly useful if the set of Deals you’re interested in is _dense_ (a large portion of the set of all deals)."
  },
  {
    "poster": {
      "poster_name": "Ahmed Rizvi",
      "poster_handle": "ahmed.rizvi"
    },
    "time_stamp": "2022-11-02 11:49:36",
    "text": "<@U03K29A62HG> i was using this before, but since we have clients with a bunch of data its takes way too long to get all of the deals :disappointed:"
  },
  {
    "poster": {
      "poster_name": "Won Kyu Jeong",
      "poster_handle": "wjeong"
    },
    "time_stamp": "2022-11-02 11:54:49",
    "edited": {
      "time_stamp": "2022-11-02 11:56:31"
    },
    "text": "Hello team,\nI want to get all the emails sent to each person by using (<https://legacydocs.HubSpot.com/docs/methods/email/get_events>). I will keep calling all campaign ids one by one and also will keep call API when `hasMore` is false. I assume the amount of data will be huge and the number of API calls should be large number too.\nI wonder if there's other way to get the all the email sent to each person by calling it fewer times.\nI need to get each event type, sent date and recipients details for each sent email.\nLooks like the number of total email events will be `224,759,957`.\nDid anyone have similar issue and found a way to get the data?"
  },
  {
    "poster": {
      "poster_name": "Jhon",
      "poster_handle": "michael.bolima"
    },
    "time_stamp": "2022-11-02 11:56:34",
    "text": "Question, why is there no Search method/request for Form API? it only has a request for listing the forms. :disappointed:",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2022-11-02 13:18:49"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 13:18:49",
    "text": "Correct at this time there isn't a search endpoint for forms."
  },
  {
    "poster": {
      "poster_name": "Manny Silva",
      "poster_handle": "manny.silva"
    },
    "time_stamp": "2022-11-02 15:00:46",
    "text": "Thank you! I’m going to follow your instructions and will let you know if I get it to work."
  },
  {
    "poster": {
      "poster_name": "Lukas Schwab",
      "poster_handle": "lukas"
    },
    "time_stamp": "2022-11-02 15:00:59",
    "text": "Yeah, makes sense! I think the other commenters are right, then––GraphQL is the way to go."
  },
  {
    "poster": {
      "poster_name": "Lukas Schwab",
      "poster_handle": "lukas"
    },
    "time_stamp": "2022-11-02 15:02:50",
    "text": "[Plug] _Unless_ you want to put all the data in Postgres and get it from there! <https://sequin.io/|The company I work for> _just_ launched continuous syncs for associations :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 15:04:15",
    "text": "Heck yeah, I love sequin"
  },
  {
    "text": "Hi channel! :wave:\n\nI’m implementing an HubSpot integration via the API. Trying to get all the pipelines of an account.\n\nUsing the following API endpoint:\n\n*GET*`/crm/v3/pipelines/{objectType}`\n\nCan somebody please tell me what an objectType is?\n\nThank you!",
    "time_stamp": "2022-11-02 15:48:44",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2022-11-02 16:15:41"
      },
      {
        "time_stamp": "2022-11-02 16:16:27"
      },
      {
        "time_stamp": "2022-11-03 02:33:11"
      },
      {
        "time_stamp": "2022-11-03 05:12:03"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Robert Ainslie",
      "poster_handle": "rainslie"
    },
    "time_stamp": "2022-11-02 16:15:41",
    "text": "The documentation is generic so objecttype represents any HubSpot object that could support pipelines. Most commonly you would replace that as a variable with `deals` or `tickets`"
  },
  {
    "poster": {
      "poster_name": "Robert Ainslie",
      "poster_handle": "rainslie"
    },
    "time_stamp": "2022-11-02 16:16:27",
    "text": "But any custom object could also have pipelines"
  },
  {
    "poster": {
      "poster_name": "Daniel Wong",
      "poster_handle": "dan.wong"
    },
    "time_stamp": "2022-11-02 19:29:19",
    "text": "btw it's not just the ruby one that doesn't work, the Node one also has a similar error, but easier to figure out than ruby"
  },
  {
    "poster": {
      "poster_name": "Daniel Wong",
      "poster_handle": "dan.wong"
    },
    "time_stamp": "2022-11-02 19:30:19",
    "text": "I think there needs to be a note about the usage of the token as well, due to the fact timeline events require a public app's token to use as it doesn't link to private apps"
  },
  {
    "poster": {
      "poster_name": "Daniel Wong",
      "poster_handle": "dan.wong"
    },
    "time_stamp": "2022-11-02 19:41:36",
    "text": "As for what to shorten:\n\n```require 'HubSpot-api-client'\n\n/*****    This Section I'm hoping you can help me figure out how to shorten - I'm sure there's an easier way   ******/\nconfig = HubSpot::Crm::Timeline::Configuration.new do |config|\n  config.access_token = access_token\nend\n\napi_client = ::HubSpot::Crm::Timeline::ApiClient.new(config)\n\napi = ::HubSpot::Crm::Timeline::EventsApi.new(api_client)\n/*********************************************************************************************************************/\ntokens = {\n  \"what_happened\": \"I got it to work\",\n}\n\ntimeline_event = HubSpot::Crm::Timeline::TimelineEvent.new(event_template_id: \"xxxxxxx\", email: \"<mailto:xxx@gmail.com|xxx@gmail.com>\", tokens: tokens)\n\nbegin\n  api_response = api.create(timeline_event)\n  puts api_response\nrescue HubSpot::Crm::Timeline::ApiError =&gt; e\n  error_message = JSON.parse(e.response_body)\n  puts error_message\nend```\nAlso, the current examples on the docs uses methods where as I'm calling classes directly in this example. Maybe there's a simpler way that I'm not seeing"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-11-02 19:58:34",
    "text": "I don't think there needs to be a note about the token I think everyone knows that you can't create even a timeline event template without first creating an app. So you wouldn't even get to the creating an event step, without first know that you need a public app"
  }
]