[
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2020-01-27 03:36:07",
    "text": "So if you want to go super hacky you can try and figure this one out\n<https://designers.HubSpot.com/docs/hubl/hubl-supported-functions#content-by-ids>\nI’ve used a repeater with a link field to get the ID’s so on the listing page you add a new listing just by selecting the page link, then in the content loop you can access the module data.\nYou are limited to 100 objects with this function, you can theoretically call the function 10 times per page so could potentially get 1000"
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2020-01-27 03:46:55",
    "edited": {
      "time_stamp": "2020-01-27 03:47:43"
    },
    "text": "This is basically all the hard work…\nI used macros because I had multiple listings on a page. There was another macro to addListing, that should be fairly easy to build or just swap out with direct code\n\n```{% macro getGroupListings(group)  %}\n\t{% set ids = [] %}\n\t{% set groupContents = false %}\n\t{% for item in group %}\n\t\t{% do ids.append(item.page.content_id) %}\n\t{% endfor %}\n\t{% if ids|first %}\n\t\t{% set groupContents = content_by_ids( ids ) %}\n\t{% endif %}\n\t{% for item in group %}\n\t\t{% if groupContents %}\n\t\t\t{% for groupContent in groupContents %}\n\t\t\t\t{% if groupContent.currentlyPublished &amp;&amp; item.page.content_id == groupContent.id %}\n\t\t\t\t\t{% for widgetContent in groupContent.allWidgets %}\n\t\t\t\t\t\t{% if widgetContent.body.widget_name == 'MODULE NAME' %}\n\t\t\t\t\t\t\t{{ addListing(item.page.href,widgetContent.body.image.src,widgetContent.body.image.alt,widgetContent.body.the_date|datetimeformat('%e %b %Y')|upper,widgetContent.body.title,widgetContent.body.text|striptags|truncate(140)) }}\n\t\t\t\t\t\t{% endif %}\n\t\t\t\t\t{% endfor %}\n\t\t\t\t{% endif %}\n\t\t\t{% endfor %}\n\t\t{% endif %}\n\t{% endfor %}\n{% endmacro %}```\n`{% macro addListing(theURL,imgSRC,imgAlt,theDate,theTitle,theText) %}`"
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2020-01-27 03:49:56",
    "text": "It also does more loops than I’d like but I struggle to get hubl to play nice any other way"
  },
  {
    "poster": {
      "poster_name": "Robert Pupaza",
      "poster_handle": "robert.pupaza"
    },
    "time_stamp": "2020-01-27 04:29:24",
    "edited": {
      "time_stamp": "2020-01-27 04:30:13"
    },
    "text": "Hi community, I am facing a problem with Vidyard videos embed, I am trying to embed a video into a popup and autoplay it when the popup opens.\nI kind of found two options:\n1. from the vidyard panel, to auto play it but I found a bug/problem where the video plays in the background without opening it and only on Chrome.\n2. use a script and play it on popup open:\n``` \t$('.popup-trigger').on('mfpOpen', function(e) {\n\t\tvar player = VidyardV4.players[0];\n\t\tplayer.play();\n\t});```\nbut I get this error:\n`Failed to execute 'postMessage' on 'DOMWindow': The target origin provided ('<https://play.vidyard.com>') does not match the recipient window's origin ('<https://www.yourdomain.com>'). `\n\nAny help would be appreciate.\nThanks",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2020-01-27 13:40:34"
      },
      {
        "time_stamp": "2020-01-28 01:31:44"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2020-01-27 13:40:34",
    "text": "in your code, where are you getting `mfpOpen` from?\nAlso, please upvote this idea, as it would make your life a lot easier:\n<https://community.HubSpot.com/t5/HubSpot-Ideas/Add-Loop-Autoplay-Mute-options-to-Video-Player/idi-p/266121>"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2020-01-27 13:43:00",
    "text": "Hello hs devs. I see in new documentation and the <#CMXUWUY5D|hs-cms-boilerplate> that module syntax seems to be changing towards using\n```{% module 'name' 'path=@HubSpot/text' … %}```"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2020-01-27 13:43:36",
    "text": "instead of standard hubl tags like `\n```{% text \"text\" %}```"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2020-01-27 13:43:52",
    "text": "Should we be doing the same?",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2020-01-27 14:17:35"
      },
      {
        "time_stamp": "2020-01-27 14:19:08"
      },
      {
        "time_stamp": "2020-01-27 14:19:41"
      },
      {
        "time_stamp": "2020-01-27 14:37:39"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-01-27 14:17:35",
    "text": "yes, we would encourage that format as it works better for local development as it’s path based. It also translates better for dnd_area <https://designers.HubSpot.com/docs/hubl/hubl-module-syntax-and-parameters>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-01-27 14:19:08",
    "text": "I would not say panic and emergency change all instances of the old tags in old projects.  Those still work. But for projects moving forward we encourage using the module syntax."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2020-01-27 14:19:41",
    "text": "More detailed docs on the default modules will be available soon."
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-01-27 14:36:42",
    "text": "Hi <@UDJV5B73R> thanks for that - i mean this was pretty much the route i was looking at going, so good to know someone else is doing it this way, thanks."
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2020-01-27 14:37:39",
    "text": "awesome, thank you"
  }
]