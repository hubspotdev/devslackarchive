[
  {
    "poster": {
      "poster_name": "Suman Ghosh",
      "poster_handle": "suman"
    },
    "time_stamp": "2024-01-31 06:31:08",
    "text": "Is it possible to pass dynamic parameters from a React component to a GraphQL query?",
    "reply_count": 3,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2024-01-31 07:35:30"
      },
      {
        "time_stamp": "2024-01-31 22:43:17"
      },
      {
        "time_stamp": "2024-02-01 06:23:32"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-31 07:35:30",
    "edited": {
      "time_stamp": "2024-01-31 07:35:44"
    },
    "text": "You can’t pass dynamic params from your React component to a GraphQL query. _But_ you can pass dynamic params in the same way you can via HubL modules as <https://developers.HubSpot.com/docs/cms/data/use-graphql-data-in-your-website-pages#pass-dynamic-context-into-a-query|mentioned in these docs>.\n\nHere’s an example a React module passing in the current contact’s email address: <https://github.com/HubSpot/cms-js-building-block-examples/blob/7b994b71ccfd0420fbd3748c8373b21660bd7ea9/contact-profile/contact-profile-project/contact-profile-app/components/modules/ContactWithAssociations/index.jsx#L66-L98|https://github.com/HubSpot/cms-js-building-block-examples/blob/7b994b71ccfd0420fbd[…]rofile-app/components/modules/ContactWithAssociations/index.jsx>\n\n```export const query = `\n# $email: \"{{ contact.email }}\"\nquery ContactQuery($email: String! = \"bh@HubSpot.com\") {\n  CRM {\n    contact(uniqueIdentifier: \"email\", uniqueIdentifierValue: $email) {\n      firstName\n    }\n  }\n}```"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-31 08:15:38",
    "text": "is there a way to apply a class to the parent island `&lt;div&gt;` that gets auto-created? apparently some flex properties do not apply if the parent has a div with display block"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-31 08:17:54",
    "text": "and I guess it would be nice if those probably required data properties and id could be passed into my component (maybe not the id...)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-31 08:18:10",
    "text": "just to have one less `&lt;div&gt;` wrapping",
    "reply_count": 13,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-01-31 08:31:46"
      },
      {
        "time_stamp": "2024-01-31 08:32:30"
      },
      {
        "time_stamp": "2024-01-31 08:33:24"
      },
      {
        "time_stamp": "2024-01-31 08:34:00"
      },
      {
        "time_stamp": "2024-01-31 08:34:22"
      },
      {
        "time_stamp": "2024-01-31 08:36:33"
      },
      {
        "time_stamp": "2024-01-31 08:37:55"
      },
      {
        "time_stamp": "2024-01-31 08:42:20"
      },
      {
        "time_stamp": "2024-01-31 08:42:53"
      },
      {
        "time_stamp": "2024-01-31 08:43:45"
      },
      {
        "time_stamp": "2024-01-31 08:46:14"
      },
      {
        "time_stamp": "2024-01-31 08:47:33"
      },
      {
        "time_stamp": "2024-01-31 08:48:52"
      }
    ]
  },
  {
    "subtype": "thread_broadcast",
    "time_stamp": "2024-01-31 08:31:46",
    "text": "Not documented, but these do work (and are available to see/autocomplete via `&lt;Island&gt;` types):\n\n`wrapperTag` which can be set to a different element type (i.e. `span`, `article`, `section`, etc)\n\n`wrapperStyle` which takes standard React `CSSProperties` (i.e. `wrapperStyle={{ marginTop: '…' }}`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-31 08:32:30",
    "text": "awesome!"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-31 08:33:24",
    "text": "Looks like we totally missed on `wrapperClassname` though, I’ll add that to the list"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-31 08:34:00",
    "text": "the existing solution technically solves my problem so not a big deal but I can imagine a class option could be useful"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-31 08:34:22",
    "text": "no wrapper would be great but probably impossible"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-31 08:36:33",
    "text": "I'm not getting autocomplete but that could be either my setup or...maybe I only get those for .tsx"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-31 08:37:55",
    "text": "I do see all of the properties on hover though"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-31 08:42:20",
    "text": "<@UCY83QS6Q> the ability to set the tag as a prop is interesting on the \"theme\" side of things. My team is mostly building pages with drag and drop modules nowadays and it would be great if they could create true `&lt;section&gt;` , `&lt;article&gt;`  etc."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-31 08:42:53",
    "text": "doesn't quite apply to what's happening with just individual modules but I know/hope you have crazy things in the works"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-31 08:43:45",
    "text": "Ah, so I take it if you could mess with the module wrapper element(s) like you can mess with the Island wrapper elements, that would be helpful?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-31 08:46:14",
    "edited": {
      "time_stamp": "2024-01-31 08:46:42"
    },
    "text": "I'm not sure at what level it would be helpful exactly...it's kind of outside of the scope of this. I guess if there was a \"react theme\" you could introduce additional options related to drag and drop. When I code drag and drop templates I can wrap a `dnd_area`  in a `<section>` or if I code a HubSpot poorly named `section` I can wrap with `<section>` tags. But, when an end-user is just dragging and dropping a page together it's all one thing—no meaningful semantic groupings"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-31 08:47:33",
    "text": "I guess I'm assuming `dnd_areas` and `dnd_sections` are react under the hood and maybe some of those options can be exposed"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-31 08:48:52",
    "text": "maybe even just in \"developer mode\" if it was decided that most users do not want the complexity of modifying html tags"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2024-01-31 10:37:22",
    "text": "FYI, we started to slowly roll out a change (in the past week) that causes builds to fail if there are module validation errors encountered during the build. To be honest, we should have been doing this from the start, because otherwise it is easy to build &amp; deploy something and not know there is a problematic module issue.\n\nHowever it is a breaking change and a surprising one, especially for any of you where builds were working and now they are not. Our bad on communicating that earlier… it slipped through the cracks :grimacing:. We will continue to slowly enable that build validation change, but please let us know if it gets in your way for anything urgent (we can work with you to temporarily disable the change on the accounts you are working on)."
  },
  {
    "poster": {
      "poster_name": "Mariana Forteza",
      "poster_handle": "mariana"
    },
    "time_stamp": "2024-01-31 11:58:15",
    "text": "Hi Andrey, thank you!! Yes I added it in my default theme, but I thought I would find the Hello Theme available to use instead of having to add it to my regular theme. Anyhow it is working for my project but I might be doing something wrong."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-31 12:00:41",
    "text": "yea, I think I see what you mean. The theme used in that example is just another separate example theme. You did the right thing by adding it to your theme"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-01-31 12:09:02",
    "text": "can we get access to the fancy \"new\" tag on modules in the editor or are you hogging it for yourselves? :laughing:"
  },
  {
    "text": "",
    "time_stamp": "2024-01-31 12:09:06"
  },
  {
    "poster": {
      "poster_name": "Suman Ghosh",
      "poster_handle": "suman"
    },
    "time_stamp": "2024-01-31 22:43:17",
    "text": "<@UCY83QS6Q> Thanks for the quick update"
  }
]