[
  {
    "poster": {
      "poster_name": "KJ",
      "poster_handle": "karlon"
    },
    "time_stamp": "2019-04-17 03:40:17",
    "text": "Hi Community,\n\nIs there a way to use hubl so when I enter in a url for a RSS feed it looks like this link here(<https://prnt.sc/nd33ib>) versus how it would look currently if you enter it into hubSpot here?<http://cultuurwerkt.wezz.io/wp-content/uploads/cart_product_feeds/Google/test.xml>"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-04-17 05:02:37",
    "text": "weird, maybe  <@U26AKMZ19> can help you :wink:"
  },
  {
    "poster": {
      "poster_name": "Mario Girón",
      "poster_handle": "mariogironm"
    },
    "time_stamp": "2019-04-17 07:17:33",
    "text": "Hi, is there anyway to access the browser session variables from hubl? (Localstorage, cookies or something like this)",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-04-17 07:18:12"
      },
      {
        "time_stamp": "2019-04-17 07:18:36"
      },
      {
        "time_stamp": "2019-04-17 07:19:02"
      },
      {
        "time_stamp": "2019-04-17 08:32:35"
      }
    ]
  },
  {
    "subtype": "thread_broadcast",
    "time_stamp": "2019-04-17 07:18:12",
    "text": "`{{ request.cookies }}`"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-17 07:18:36",
    "text": "`|pprint` it to get a better understanding of how that works"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-17 07:19:02",
    "text": "related:\n<https://designers.HubSpot.com/docs/hubl/hubl-supported-variables#http-request-variables>"
  },
  {
    "poster": {
      "poster_name": "Kane Small",
      "poster_handle": "kane.small"
    },
    "time_stamp": "2019-04-17 07:23:38",
    "edited": {
      "time_stamp": "2019-04-17 07:23:49"
    },
    "text": "Hey all, is it possible to retrieve the oldest blog post from a particular blog with HubL? Atm, I can only see it being possible by knowing the blog post ID for example and using `blog_post_by_id` but, you'd have to know the blog post ID which isn't ideal."
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-17 07:26:05",
    "text": "maybe a reverse filter and grab the first post?"
  },
  {
    "poster": {
      "poster_name": "Kane Small",
      "poster_handle": "kane.small"
    },
    "time_stamp": "2019-04-17 07:27:21",
    "text": "I assume you mean apply the `|reverse` filter to for example the `blog_recent_posts` function but, that is only limited to 200 :confused:"
  },
  {
    "poster": {
      "poster_name": "Kane Small",
      "poster_handle": "kane.small"
    },
    "time_stamp": "2019-04-17 07:27:31",
    "edited": {
      "time_stamp": "2019-04-17 07:27:34"
    },
    "text": "Unless there's a different way? :sweat_smile:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-17 07:27:58",
    "text": "yea, there’s no way as far as I’m aware, not unless you abuse the /all page"
  },
  {
    "poster": {
      "poster_name": "Kane Small",
      "poster_handle": "kane.small"
    },
    "time_stamp": "2019-04-17 07:28:10",
    "text": "haha, yeah thought that might be the case"
  },
  {
    "poster": {
      "poster_name": "Kane Small",
      "poster_handle": "kane.small"
    },
    "time_stamp": "2019-04-17 07:28:12",
    "text": "thanks anyway guys"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-17 07:28:30",
    "text": "sorry we couldn’t be of more help"
  },
  {
    "poster": {
      "poster_name": "Kane Small",
      "poster_handle": "kane.small"
    },
    "time_stamp": "2019-04-17 07:28:36",
    "text": "np"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-17 07:29:26",
    "text": ":disappointed:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-17 07:29:43",
    "text": "darn limits"
  },
  {
    "poster": {
      "poster_name": "Kane Small",
      "poster_handle": "kane.small"
    },
    "time_stamp": "2019-04-17 07:30:26",
    "text": "hehe"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-17 07:32:50",
    "text": "I would say sort the blog posts in the blog dashboard find the oldest post then use blog_post_by_id. I realize it’s not “automatic” but that’s not going to change often"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-17 07:32:59",
    "edited": {
      "time_stamp": "2019-04-17 07:33:11"
    },
    "text": "you don’t usually backdate posts to be older than previous posts lol"
  },
  {
    "poster": {
      "poster_name": "Kane Small",
      "poster_handle": "kane.small"
    },
    "time_stamp": "2019-04-17 07:34:59",
    "edited": {
      "time_stamp": "2019-04-17 07:36:30"
    },
    "text": "that is a valid point :sweat_smile:, I will check the client requirements again but, thanks for that idea :pray:"
  },
  {
    "poster": {
      "poster_name": "Mario Girón",
      "poster_handle": "mariogironm"
    },
    "time_stamp": "2019-04-17 08:32:35",
    "text": "thank you. It was just in front of my nose :slightly_smiling_face:. Too much time programming :slightly_smiling_face: jejeje. Thank you again"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-04-17 10:56:13",
    "edited": {
      "time_stamp": "2019-04-17 10:56:57"
    },
    "text": "When using the `page_by_id` function, is it possible to grab values from modules on that page? Something like\n```\n{{ page_by_id(item).widgets.name_of_widget.field.value }}\n```",
    "reply_count": 24,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-04-17 11:10:24"
      },
      {
        "time_stamp": "2019-04-17 11:10:41"
      },
      {
        "time_stamp": "2019-04-17 11:13:22"
      },
      {
        "time_stamp": "2019-04-17 11:13:49"
      },
      {
        "time_stamp": "2019-04-17 11:14:08"
      },
      {
        "time_stamp": "2019-04-17 11:14:28"
      },
      {
        "time_stamp": "2019-04-17 11:15:01"
      },
      {
        "time_stamp": "2019-04-17 11:15:07"
      },
      {
        "time_stamp": "2019-04-17 11:17:00"
      },
      {
        "time_stamp": "2019-04-17 11:18:06"
      },
      {
        "time_stamp": "2019-04-17 11:18:30"
      },
      {
        "time_stamp": "2019-04-17 11:18:51"
      },
      {
        "time_stamp": "2019-04-17 11:20:59"
      },
      {
        "time_stamp": "2019-04-17 11:21:35"
      },
      {
        "time_stamp": "2019-04-17 11:21:50"
      },
      {
        "time_stamp": "2019-04-17 11:22:11"
      },
      {
        "time_stamp": "2019-04-17 11:22:23"
      },
      {
        "time_stamp": "2019-04-17 11:22:26"
      },
      {
        "time_stamp": "2019-04-17 11:22:31"
      },
      {
        "time_stamp": "2019-04-17 11:23:34"
      },
      {
        "time_stamp": "2019-04-17 11:23:34"
      },
      {
        "time_stamp": "2019-04-17 11:23:46"
      },
      {
        "time_stamp": "2019-04-17 11:24:15"
      },
      {
        "time_stamp": "2019-04-17 11:24:35"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-17 11:10:24",
    "text": "Yes it is. I can’t remember the exact path to the fields, something like `{{page_by_id(item).widget_data.nameofwidget.field.value}}`"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-17 11:10:41",
    "text": "pretty printing it may help you find the exact path"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-04-17 11:13:22",
    "text": "thats what I have been doing but I will try with `.widget_data` my worry is some of the data is not pulling in the modules"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-04-17 11:13:49",
    "text": "no go on widget_data"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-17 11:14:08",
    "text": "did `widgets` work?"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-04-17 11:14:28",
    "text": "yea but it still doesnt pull the info i need"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-04-17 11:15:01",
    "text": "I was able to do it all the way up to `.widgets` but then it doesnt look like in the output you can reference it like you can with widget_data"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-17 11:15:07",
    "text": "is it just a matter of the info not updating , or a matter of the fields not returning data?"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-04-17 11:17:00",
    "text": "both"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-04-17 11:18:06",
    "text": "ill have to rework it a bit to get what I need on this, I have a plan, i think I am just trying to do something that is not possible"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-17 11:18:30",
    "text": "not sure it matters at all, but normally when i do this i set `page_by_id(item)` to a variable and do it off the variable instead.\n\n`variable.widgets.module.fieldname.value` etc"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-04-17 11:18:51",
    "text": "ill try it"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-04-17 11:20:59",
    "text": "looks like it does the same thing, just not pulling all the data in"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-17 11:21:35",
    "text": "bizarre. and you’re sure the page is published with the latest version of the data in that module"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-04-17 11:21:50",
    "text": "Yup"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-04-17 11:22:11",
    "edited": {
      "time_stamp": "2019-04-17 11:22:12"
    },
    "text": "the way it is is I have a page with a flexible colum, in there is a module with info populated"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-17 11:22:23",
    "text": "ahhh"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-04-17 11:22:26",
    "text": "I am using page_by_id to grab that page in a module"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-17 11:22:31",
    "text": "k, yeah so the issue is the flex column"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-04-17 11:23:34",
    "text": "I can see the module output when I use `widgets` or `allWidget` granted this will always be at position 0 so I can grab it all the time, but the problem is that not all the info from that module is in there"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-17 11:23:34",
    "text": "the module gets a wacky id so you have to do a `|selectattr()` on  an array of widgets in the flex column if i recall correctly"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-17 11:23:46",
    "edited": {
      "time_stamp": "2019-04-17 11:24:12"
    },
    "text": "ahh, :shrug: I can only assume there’s some kinda weird server caching / performance thing going on"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-04-17 11:24:15",
    "text": "it has the image field, the repeater field with output, but not the general text"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-04-17 11:24:35",
    "text": "idk, i am just going to hardocde the module in, its a heading banner so it will always be there"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-17 11:51:01",
    "text": "am i incorrect in thinking that the following code should sort all of the posts by publish date?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-17 11:51:02",
    "edited": {
      "time_stamp": "2019-04-17 11:51:14"
    },
    "text": "```{% set posts = blog_webinars + blog_blog + blog_video + blog_white_papers | sort(true, false, 'publish_date')%}```"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-17 11:51:35",
    "text": "it should sort only blog_white_papers by date"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-17 11:51:51",
    "text": "why?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-17 11:52:00",
    "text": "i thought iy would sort posts"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-17 11:52:03",
    "text": "ohh"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-17 11:52:04",
    "text": "i see"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-17 11:52:28",
    "text": ":laughing:  it’s okay been there done that"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-17 11:52:35",
    "text": "meh"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-17 11:52:43",
    "text": "today has been full of these"
  },
  {
    "poster": {
      "poster_name": "Ryan Lucena",
      "poster_handle": "ryanl"
    },
    "time_stamp": "2019-04-17 20:43:47",
    "text": "Hello Guys How to select specific Tag you want to display in the Post Filter using Hubl, not the default Post Filter Module",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-04-18 08:37:40"
      }
    ]
  },
  {
    "text": "",
    "time_stamp": "2019-04-17 20:43:50"
  },
  {
    "text": "",
    "time_stamp": "2019-04-17 20:44:50"
  }
]