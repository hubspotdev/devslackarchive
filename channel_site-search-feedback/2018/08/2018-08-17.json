[
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-17 10:30:31",
    "text": "just starting to get into using HS site search.\n\nJust wondering are HubDB contents and text in custom modules(not in fields) included in search results?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-17 10:31:35",
    "text": "I ask because I have a page with file downloads and if you search the file names in the main site search it doesn’t return results. The same goes for the word “filter” which is included in the custom module but isn’t in a field itself"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-17 10:33:55",
    "text": "They can be"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-17 10:34:38",
    "edited": {
      "time_stamp": "2018-08-17 10:34:50"
    },
    "text": "lol Elaboration please"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-17 10:44:53",
    "text": "well you are supposed to add &amp;tableId=TABLEIDNUM"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-17 10:45:02",
    "text": "but  havent tried using it yet"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-17 10:47:20",
    "edited": {
      "time_stamp": "2018-08-17 10:47:28"
    },
    "text": "Maybe i should clarify - I have a custom module that pulls it’s data from HubDB - I’ve added it to a page, it doesn’t appear that data is being used for results.\n\nSo what I’m wanting: any of the text that is printed to the html by that module should be in the search index.\n\nI do not really want someone to be able to find the HubDB itself in the results.(if that’s what the &amp;tableID=##### does)"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-17 10:47:57",
    "text": "Yeah stilll not sure."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-17 10:49:12",
    "edited": {
      "time_stamp": "2018-08-17 10:49:18"
    },
    "text": "the table in question has to be used by a dynamic page"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-17 10:51:23",
    "text": "hmm, in my case the page isn’t a dynamic page - just a normal custom module pulling a HubDB.\n_firing up the :robot_face: :mage: spotlight_\n<@U6GNQ7JBU> -Happy Friday, any thoughts on the above?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-17 10:52:42",
    "text": "Super secret endpoint I added last week: `<http://api.hubapi.com/contentsearch/v2/search/all?portalId=3787170&amp;type=SITE_PAGE&amp;verbose=true|api.hubapi.com/contentsearch/v2/search/all?portalId=3787170&amp;type=SITE_PAGE&amp;verbose=true>`"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-17 10:53:00",
    "text": "Requires hapikey but should show you exactly what's indexed"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-17 10:53:19",
    "text": "Don't hit it too hard"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-08-17 10:53:24",
    "text": "its amazing!"
  },
  {
    "time_stamp": "2018-08-17 10:53:33",
    "text": ""
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-17 10:54:47",
    "edited": {
      "time_stamp": "2018-08-17 10:54:51"
    },
    "text": "That is Cool <@U6GNQ7JBU>"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-17 10:54:54",
    "text": "Search uses a text extractor to try to find the relevant content on your page (as opposed to things like menus or footer information). I was planning on overhauling this to be more forgiving"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-17 10:56:15",
    "text": "Let me add an endpoint to look up by content id so you don't have to download all the data"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-17 11:07:52",
    "text": "I will actually be changing this in a few minutes so you have to do `<http://api.hubapi.com/contentsearch/v2/search/&lt;contentId&gt;?portalId=&lt;portalId&gt;&amp;type=&lt;searchType&gt;|api.hubapi.com/contentsearch/v2/search/&lt;contentId&gt;?portalId=&lt;portalId&gt;&amp;type=&lt;searchType&gt;>` rather than listing all content in the portal"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-17 11:08:56",
    "edited": {
      "time_stamp": "2018-08-17 11:09:01"
    },
    "text": "<@U6GNQ7JBU> will the dynamic pages be indexed for searching by default or do you have to use a tableId query?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-17 11:10:16",
    "text": "They should be enabled by default"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-17 11:10:24",
    "text": "The id of the page is the same id of the row"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-17 11:10:28",
    "text": "If you are not seeing that let me know"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-17 11:12:44",
    "edited": {
      "time_stamp": "2018-08-17 11:14:15"
    },
    "text": "think i did that prematurely(used the content id instead of all). thank you for this matt"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-17 11:13:06",
    "text": "ok.. what i was wondering is .. does the column info need to be in the page for the search engine to find it?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-17 11:14:36",
    "text": "for instance can i have an unused column solely for search purposes? Almost like having  keywords/phrases"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-17 11:14:51",
    "text": "that the search can use to find my page."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-17 11:16:04",
    "text": "It appears that nothing from the custom module is indexed at all. (unless I’m not understanding the data being returned)"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-17 11:19:13",
    "text": "I am seeing some info from another custom module being shown in the index elsewhere. Are custom modules indexed periodically or instant(on publish)"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-17 11:32:00",
    "text": "Can you link me to a page?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-08-17 11:33:54",
    "text": "sure DMing it"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-17 12:28:04",
    "text": "Testing the changes in QA now :eyes:"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-17 13:55:04",
    "text": "<@U6GNQ7JBU> Was wondering about the last comment I made here."
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-17 13:55:23",
    "text": "They should be indexed by default"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-17 13:55:27",
    "text": "When you publish the table"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-17 13:55:35",
    "text": "Or update content linked to a table"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-17 13:57:18",
    "text": "The one restriction is if you power multiple dynamic pages with the same row, I haven't figured out a way to keep these seperate"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-17 14:24:54",
    "text": "No just one."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-17 14:25:59",
    "text": "But that makes me feel better. Case use is a client that has competitor part numbers they want clients to be able to search for. But dont want to display the competitor part number in the page."
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-17 14:27:03",
    "text": "Why not use an `icontains` filter for the column? Content Search only looks at the rendered HTML of the page"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-17 14:27:36",
    "text": "ah ok.."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-17 14:27:50",
    "text": "yeah I am divided as to use content search vs rolling my own."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-17 14:27:56",
    "text": "for that exact reason"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-17 14:28:18",
    "text": "just have a lot of logic if nothing is there."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-17 14:28:24",
    "text": "but that what it is."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-17 15:18:45",
    "edited": {
      "time_stamp": "2018-08-17 15:19:04"
    },
    "text": "<@U6GNQ7JBU> One more question if you dont mind about the search"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-17 15:19:37",
    "text": "how are you pulling in the elements? Will invisible elements get indexed?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-17 15:24:19",
    "text": "Not sure if the extractor looks at CSS, I can check"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-17 15:26:32",
    "text": "ok.. also how does the system look at partial matches?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-17 15:26:54",
    "text": "becasuse there was a couple time i think it should have matched and it didnt"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-17 15:28:30",
    "text": "It breaks terms into edge ngrams"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-17 15:29:05",
    "text": "so testing becomes: te, tes, test, testi, testin, testing so you can have partial match starting at the beginning of the word"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-17 15:29:13",
    "text": "Which is why autocomplete works"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-17 15:29:30",
    "edited": {
      "time_stamp": "2018-08-17 15:29:36"
    },
    "text": "ok… numbers are the same i guess"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-08-17 15:43:47",
    "edited": {
      "time_stamp": "2018-08-17 15:43:59"
    },
    "text": "Found this a while back though you might wanna have a look see. Not sure if it would be of use but seems pretty interesting. <http://fusejs.io/>"
  }
]