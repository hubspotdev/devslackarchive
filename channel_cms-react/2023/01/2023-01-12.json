[
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 07:50:37",
    "text": "I'll be able to add drag and drop area HubL code to a `whatever.hubl.html` template right?",
    "reply_count": 22,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-01-12 07:51:11"
      },
      {
        "time_stamp": "2023-01-12 07:51:34"
      },
      {
        "time_stamp": "2023-01-12 07:52:28"
      },
      {
        "time_stamp": "2023-01-12 07:52:32"
      },
      {
        "time_stamp": "2023-01-12 07:53:29"
      },
      {
        "time_stamp": "2023-01-12 07:54:05"
      },
      {
        "time_stamp": "2023-01-12 07:55:10"
      },
      {
        "time_stamp": "2023-01-12 07:56:28"
      },
      {
        "time_stamp": "2023-01-12 07:57:24"
      },
      {
        "time_stamp": "2023-01-12 07:57:35"
      },
      {
        "time_stamp": "2023-01-12 07:58:55"
      },
      {
        "time_stamp": "2023-01-12 08:09:18"
      },
      {
        "time_stamp": "2023-01-12 08:15:34"
      },
      {
        "time_stamp": "2023-01-12 08:16:58"
      },
      {
        "time_stamp": "2023-01-12 08:17:20"
      },
      {
        "time_stamp": "2023-01-12 08:19:07"
      },
      {
        "time_stamp": "2023-01-12 08:23:38"
      },
      {
        "time_stamp": "2023-01-12 08:26:26"
      },
      {
        "time_stamp": "2023-01-12 08:29:49"
      },
      {
        "time_stamp": "2023-01-12 08:30:27"
      },
      {
        "time_stamp": "2023-01-12 08:31:20"
      },
      {
        "time_stamp": "2023-01-12 08:31:59"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-12 07:51:11",
    "text": "Yes, though we don’t fully have JS modules working inside D&amp;D areas yet though."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 07:51:34",
    "text": "ok, great. I thought this was the case but got worried for a sec :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 07:52:28",
    "text": "I'm imagining a workflow where I build a standalone js module, make it available everywhere, and then drag it into any template"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 07:52:32",
    "text": "that's pretty damn amazing"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-12 07:53:29",
    "edited": {
      "time_stamp": "2023-01-12 07:53:37"
    },
    "text": "Yup, that is our intention. To make JS modules act like existing custom (HubL) modules that you can use anywhere (and to someone using the page editor they don’t know the difference)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 07:54:05",
    "text": "I get excited every time this clicks :laughing:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 07:55:10",
    "text": "the only \"problem\" I can imagine is not having access to the same state between modules. Are there any plans to have something like \"context\" be available?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-12 07:56:28",
    "edited": {
      "time_stamp": "2023-01-12 07:56:51"
    },
    "text": "Yup, there definitely is a plan for that (we often refer to it as “sharing state between islands”). We’ve toyed with a few different approaches to that but haven’t nailed down what the API should look/feel like.\n\nSo hearing how you’d like it to work/feel would be helpful"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 07:57:24",
    "text": "I don't think it's a real problem for me at the moment but I'll definitely keep thinking about it. The only potential short-term use case would be something like \"dark mode\""
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 07:57:35",
    "text": "which I think would be handled with css vars in any case"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 07:58:55",
    "text": "from the perspective of someone who knows about 30% of how React works + has never used regular React context—I'd say something like a HubSpot created hook that I can import and then grab values from"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-12 08:09:18",
    "text": "Couple questions (its ok if you are not sure):\n• Would you expect to use/share these “context” values only in components inside of islands? Or in the components that only server-render HTML too?\n• Would you expect to be able to change these “context” values after the browser loaded? (Like one island triggers a “context” change that causes other islands to re-render with new data)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 08:15:34",
    "text": "• in my understanding so far, if something isn't an island then it is static 100% of the time (no props, no context, nothing). Does that question suggest that modules can be used without the island part but still include props? \n• Yea, I think that's the main use case. The ability to trigger changes across islands. "
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 08:16:58",
    "text": "(I'm rewatching that youtube presentation btw for a big picture refresher of what exists)"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-12 08:17:20",
    "text": "Right now the only way JS modules get props is from field values (that can be changed in the page editor)."
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-12 08:19:07",
    "edited": {
      "time_stamp": "2023-01-12 08:19:42"
    },
    "text": "But I could potentially imagine something like:\n• In the hubl template, set some “make sure this data is available to all JS modules and partials on the page”\n• And then there is a hook for JS components to get at ^\n• … and maybe that “share data from template context” is the _same_ “context” used to share data across islands (at least that template shared data is the starting point of the data shared between islands)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 08:23:38",
    "text": "where is that template shared data coming from in that scenario?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-12 08:26:26",
    "text": "How about a hubl tag like `{% something_js_context value1=hubl_variable value2=site_settings.background_color … %}`  that you can include in the HubL template?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 08:26:45",
    "text": "For new folks, I think it would make sense to include a regular js module example that does not involve islands. I thought that both were required to work and only just realized that you could have a separate module with just props but no interactivity or state"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 08:29:49",
    "text": "that probably works, and then `value1`  could be updated from an island"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 08:30:27",
    "text": "and if it was a placeholder (like an empty array), it could then be populated via a fetch from an island?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-12 08:31:20",
    "text": "Exactly"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 08:31:59",
    "text": "that works for me :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 08:52:03",
    "text": "do I use this guide if my ultimate goal is to POST to HubDB? <https://developers.HubSpot.com/docs/platform/serverless-functions>",
    "reply_count": 22,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-01-12 08:53:02"
      },
      {
        "time_stamp": "2023-01-12 08:53:48"
      },
      {
        "time_stamp": "2023-01-12 08:54:10"
      },
      {
        "time_stamp": "2023-01-12 08:56:06"
      },
      {
        "time_stamp": "2023-01-12 08:57:09"
      },
      {
        "time_stamp": "2023-01-12 08:57:48"
      },
      {
        "time_stamp": "2023-01-12 08:57:55"
      },
      {
        "time_stamp": "2023-01-12 08:58:09"
      },
      {
        "time_stamp": "2023-01-12 08:58:36"
      },
      {
        "time_stamp": "2023-01-12 08:59:15"
      },
      {
        "time_stamp": "2023-01-12 08:59:48"
      },
      {
        "time_stamp": "2023-01-12 09:00:44"
      },
      {
        "time_stamp": "2023-01-12 09:03:04"
      },
      {
        "time_stamp": "2023-01-12 09:03:45"
      },
      {
        "time_stamp": "2023-01-12 09:04:02"
      },
      {
        "time_stamp": "2023-01-12 09:05:05"
      },
      {
        "time_stamp": "2023-01-12 09:05:16"
      },
      {
        "time_stamp": "2023-01-12 09:05:23"
      },
      {
        "time_stamp": "2023-01-12 09:05:28"
      },
      {
        "time_stamp": "2023-01-12 09:05:50"
      },
      {
        "time_stamp": "2023-01-12 09:05:56"
      },
      {
        "time_stamp": "2023-01-12 09:06:38"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-12 08:53:02",
    "text": "Yes, I believe so"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-12 08:53:48",
    "text": "Couldn't you just create the post request inside of your normal js file because it's all running serverside with react?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-12 08:54:10",
    "edited": {
      "time_stamp": "2023-01-12 08:54:39"
    },
    "text": "By making a new route for that request (don't know if that's the correct verbiage)"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-12 08:56:06",
    "text": "No, there are no “routes” and our JS component infra isn’t running a “regular sever” like that. The only way in to execute these JS components right now is via the `js_module` and `js_partial` HubL tags"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-12 08:57:09",
    "text": "Oh understood, so basically everything is being sent to the client on page load"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-12 08:57:48",
    "text": "Not quite. Those JS modules and JS partials are server rendered and “sitched” into the HTML that the HubL template renders."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-12 08:57:55",
    "text": "Still very much a Noob at HubSpot Islands"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 08:58:09",
    "text": "<@U01QVR44MEY> we all are"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-12 08:58:36",
    "text": "Yeah, the only time client side code comes into play is when you have an island. It takes a little time to wrap your head around"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-12 08:59:15",
    "edited": {
      "time_stamp": "2023-01-12 08:59:55"
    },
    "text": "But the state (interactivity element) is serverside right?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-12 08:59:48",
    "text": "It depends on what you mean by “state” :wink:…"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-12 09:00:44",
    "text": "<@UDHT6N5SM> made a good point earlier, how it is useful to create a JS  partial that has _no islands_ and see how it looks, what  HTML that gets included in the page response is. And then to add an island, pass props to that island, and then look at the HTML and compare\n\nComing back to “state”…"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-12 09:03:04",
    "text": "Your JS partial get get props passed in (via hubl params to `js_partial`) and your JS module can get props passed in via module field values. In a way that is _state_ and by default that state is server-side.\n\nNow if you want, you can choose to pass that server state down to and island (via `&lt;Island module=… prop1=… &gt;` ). And then the components in that island can use that value (on the server _and later_ the browser) to do `useState(startingValueFromServer)`"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-12 09:03:45",
    "text": "Ok, this is making a more sense"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-12 09:04:02",
    "text": "thank you for humoring me <@UCY83QS6Q>"
  },
  {
    "text": "",
    "time_stamp": "2023-01-12 09:05:05"
  },
  {
    "time_stamp": "2023-01-12 09:05:16",
    "text": "I need a safe space to ask dumb questions"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-12 09:05:23",
    "text": "You beat me to the gif"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-12 09:05:28",
    "text": "I was sorting through them"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 09:05:50",
    "text": "safe place to ask dumb questions is priceless"
  },
  {
    "text": "",
    "time_stamp": "2023-01-12 09:05:56"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-01-12 09:06:38",
    "text": "haha, I forgot you can see what I ask giphy :laughing:  <https://HubSpotdev.slack.com/archives/C04AY1H2204/p1673539550532889?thread_ts=1673538723.141439&amp;cid=C04AY1H2204>"
  },
  {
    "text": "",
    "time_stamp": "2023-01-12 09:07:58"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 09:08:07",
    "text": "it makes sense that if part of this fails the whole thing fails"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 09:08:08",
    "text": "but damn it"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 09:23:55",
    "text": "hoping to avoid future issues, I'm creating a serverless.json file...I'm pretty sure I can use the \"app\" version instead of the \"path\" version but it's unclear in this context"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 09:24:12",
    "text": "the `serverless` folder is inside of the project folder"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 09:24:48",
    "text": "eh, the endpoint version at least looks like something I've seen before. I'll try that one first..."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 09:34:50",
    "text": "should I expect that serverless folder to show up here?"
  },
  {
    "text": "",
    "time_stamp": "2023-01-12 09:34:55"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 09:35:09",
    "text": "should it be inside the app folder?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 09:37:12",
    "text": "there really isn't an exact tutorial to follow (that I could find)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 09:37:36",
    "text": "this one: <https://developers.HubSpot.com/docs/cms/guides/getting-started-with-serverless-functions> suggests that we use `watch` which doesn't seem right for a project",
    "reply_count": 57,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-01-12 09:45:29"
      },
      {
        "time_stamp": "2023-01-12 09:45:58"
      },
      {
        "time_stamp": "2023-01-12 09:46:08"
      },
      {
        "time_stamp": "2023-01-12 09:46:17"
      },
      {
        "time_stamp": "2023-01-12 09:46:30"
      },
      {
        "time_stamp": "2023-01-12 09:46:39"
      },
      {
        "time_stamp": "2023-01-12 09:46:51"
      },
      {
        "time_stamp": "2023-01-12 09:47:06"
      },
      {
        "time_stamp": "2023-01-12 09:48:19"
      },
      {
        "time_stamp": "2023-01-12 09:48:33"
      },
      {
        "time_stamp": "2023-01-12 09:48:48"
      },
      {
        "time_stamp": "2023-01-12 09:48:48"
      },
      {
        "time_stamp": "2023-01-12 09:48:54"
      },
      {
        "time_stamp": "2023-01-12 09:49:59"
      },
      {
        "time_stamp": "2023-01-12 09:50:10"
      },
      {
        "time_stamp": "2023-01-12 09:50:21"
      },
      {
        "time_stamp": "2023-01-12 09:51:08"
      },
      {
        "time_stamp": "2023-01-12 09:51:58"
      },
      {
        "time_stamp": "2023-01-12 09:52:54"
      },
      {
        "time_stamp": "2023-01-12 09:53:02"
      },
      {
        "time_stamp": "2023-01-12 09:54:33"
      },
      {
        "time_stamp": "2023-01-12 09:55:11"
      },
      {
        "time_stamp": "2023-01-12 09:55:36"
      },
      {
        "time_stamp": "2023-01-12 09:55:51"
      },
      {
        "time_stamp": "2023-01-12 09:57:09"
      },
      {
        "time_stamp": "2023-01-12 09:57:45"
      },
      {
        "time_stamp": "2023-01-12 09:57:59"
      },
      {
        "time_stamp": "2023-01-12 09:58:21"
      },
      {
        "time_stamp": "2023-01-12 09:58:48"
      },
      {
        "time_stamp": "2023-01-12 09:59:49"
      },
      {
        "time_stamp": "2023-01-12 10:00:26"
      },
      {
        "time_stamp": "2023-01-12 10:00:44"
      },
      {
        "time_stamp": "2023-01-12 10:03:07"
      },
      {
        "time_stamp": "2023-01-12 10:03:15"
      },
      {
        "time_stamp": "2023-01-12 10:03:25"
      },
      {
        "time_stamp": "2023-01-12 10:03:52"
      },
      {
        "time_stamp": "2023-01-12 10:03:59"
      },
      {
        "time_stamp": "2023-01-12 10:07:24"
      },
      {
        "time_stamp": "2023-01-12 10:07:41"
      },
      {
        "time_stamp": "2023-01-12 10:09:43"
      },
      {
        "time_stamp": "2023-01-12 10:09:52"
      },
      {
        "time_stamp": "2023-01-12 10:09:56"
      },
      {
        "time_stamp": "2023-01-12 11:46:58"
      },
      {
        "time_stamp": "2023-05-23 07:44:47"
      },
      {
        "time_stamp": "2023-05-23 07:58:17"
      },
      {
        "time_stamp": "2023-05-23 08:00:06"
      },
      {
        "time_stamp": "2023-05-23 08:00:28"
      },
      {
        "time_stamp": "2023-05-23 08:10:02"
      },
      {
        "time_stamp": "2023-05-23 08:11:10"
      },
      {
        "time_stamp": "2023-05-23 08:11:40"
      },
      {
        "time_stamp": "2023-05-23 08:14:46"
      },
      {
        "time_stamp": "2023-05-23 08:15:18"
      },
      {
        "time_stamp": "2023-05-23 08:15:42"
      },
      {
        "time_stamp": "2023-05-23 08:16:13"
      },
      {
        "time_stamp": "2023-05-23 08:16:25"
      },
      {
        "time_stamp": "2023-05-23 08:17:15"
      },
      {
        "time_stamp": "2023-05-23 08:18:11"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-01-12 09:45:29",
    "text": "hey andrey, this is a little out of my expertise but i think these docs of getting serverless working with the new projects structure might be what you’re looking for? <https://developers.HubSpot.com/docs/platform/serverless-functions>"
  },
  {
    "text": "specifically this structure seems relevant",
    "time_stamp": "2023-01-12 09:45:58"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 09:46:08",
    "text": "thanks, yea, I'm trying to follow along with that"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 09:46:17",
    "text": "but it's unclear how to deploy that serverless folder"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 09:46:30",
    "text": "\"regular\" project deploy doesn't seem to work"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-01-12 09:46:39",
    "edited": {
      "time_stamp": "2023-01-12 09:46:41"
    },
    "text": ":man-facepalming: sorry didn’t read close enough above"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 09:46:51",
    "text": "no worries, I appreciate the help"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 09:47:06",
    "text": "I'm close to figuring it out I think but there's just so much"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-01-12 09:48:19",
    "text": "is your build currently succeeding? or still partially failing like in the screenshot"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 09:48:33",
    "text": "it's succeeding but I don't see a \"serverless\" folder"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 09:48:48",
    "text": "not sure if that folder needs to be inside of the apps folder maybe?"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-01-12 09:48:48",
    "text": "i think you need to add that within your `app` folder"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 09:48:54",
    "text": "I'll try that"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 09:49:59",
    "text": "that was probably it, thank you!"
  },
  {
    "text": "",
    "time_stamp": "2023-01-12 09:50:10"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 09:50:21",
    "text": "hopefully that endpoint exists somewhere...."
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-01-12 09:51:08",
    "text": "no problem! yeah i think you’ll want to create everything within the `serverless` folder in the docs yourself, and then our build picks up on it and deploys it"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-01-12 09:51:58",
    "edited": {
      "time_stamp": "2023-01-12 09:52:00"
    },
    "text": "`serverless.json`, `package.json`, and then whatever your serverless function’s file is (referenced in the `file` entry in `serverless.json` )"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 09:52:54",
    "text": "what do you think the equivalent test of this kind of thing might be? `&lt;<https://www.example.com>&gt;/_hcms/api/&lt;endpoint-name/path&gt;` (trying things out now)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 09:53:02",
    "text": "trying the proxied version + the live version"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-01-12 09:54:33",
    "text": "so in your `serverless.json` theres a section something like\n```\"endpoints\": {\n    \"path/to/endpoint\": {\n      \"file\": \"githubUserFunction.js\"\n    }\n  }```\n"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-01-12 09:55:11",
    "text": "`path/to/endpoint` and `githubUserFunction.js`  are up to you - whatever you put in `path-to-endpoint` will replace `&lt;endpoint-name/path&gt;` in that URL when you call it"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-01-12 09:55:36",
    "text": "thats the path you’re choosing for the serverless function at whatever filename replaces `githubUserFunction.js`"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-01-12 09:55:51",
    "text": "and then you just need your domain replacing <http://example.com|example.com>"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-01-12 09:57:09",
    "text": "i might be misinterpreting your question though"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 09:57:45",
    "text": "everything you wrote is definitely helpful. thank you. I think I have that set up but a test request doesn't seem to be working"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 09:57:59",
    "text": "I was wondering if it only works through localhost or the proxied version or the live site"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 09:58:21",
    "text": "but trying all of those now after checkin for typos/errros"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-01-12 09:58:48",
    "text": "ahh i see - our local dev server doesn’t run serverless functions so it would need to be referencing the deployed version"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-01-12 09:59:49",
    "text": "but i think from a local proxied JS-rendered component, you should be able to make a request to the deployed serverless function"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 10:00:26",
    "text": "hmm, ok, I think I made some progress. I was using the wrong url (has to be the root domain)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 10:00:44",
    "edited": {
      "time_stamp": "2023-01-12 10:00:51"
    },
    "text": "getting this error at the moment:\n```{\"error\":\"The endpoint GET colors has not been configured for portal xxxxxx\"}```"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 10:03:07",
    "text": "probably because in `app.json` I have public set to false"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 10:03:15",
    "text": "and it's an unauthenticated GET request so far"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 10:03:25",
    "text": "trying true"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 10:03:52",
    "text": "nope. has to be false. I'll try authenticated"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 10:03:59",
    "text": "hopefully that's it"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-01-12 10:07:24",
    "text": "it looks like the previous build of your project failed"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-01-12 10:07:41",
    "text": "was that error pasted above in the test request or the build failure?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 10:09:43",
    "text": "the test request"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-01-12 10:09:52",
    "text": "could you paste your `serverless.json` contents? here or over DM"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-12 10:09:56",
    "text": "I just added a secret, redeploying now"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-01-12 11:46:58",
    "text": "to put the resolution to the issue here somewhere searchable: currently the `serverless.json` file schema requires `appFunctions` to be set, if only to an empty object"
  }
]