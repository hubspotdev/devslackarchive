[
  {
    "poster": {
      "poster_name": "Anthony Perez",
      "poster_handle": "anthony249"
    },
    "time_stamp": "2022-09-28 01:06:52",
    "text": "Hi <@U02KH4V10BS>! the way to do this is like: but replaced with your path     `{{ require_css(get_asset_url(\"../../css/layout.min.css\")) }}`"
  },
  {
    "poster": {
      "poster_name": "Anthony Perez",
      "poster_handle": "anthony249"
    },
    "time_stamp": "2022-09-28 01:12:51",
    "text": "HI Nicholas, just letting you know i got this solved, i was indeed pulling an incorrect variable since its a multi select field in the hubdb, this is now all solved and i now know how to concatenate the hubl so thats a double W"
  },
  {
    "poster": {
      "poster_name": "Dror Limer",
      "poster_handle": "dror"
    },
    "time_stamp": "2022-09-28 06:08:11",
    "text": "Hi guys :man-raising-hand:\ni've been asked by a client to use an external image CDN yet i'm still new to HubSpot CMS and kind of clueless about how to implement\nwhat would be the simplest / easiest method to implement such a change ?...\nis there a global buffer like the_content in wordpress ? any internal setting i can use ? a special app?...\nany help would be appreciated :pray:",
    "reply_count": 16,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2022-09-28 07:01:26"
      },
      {
        "time_stamp": "2022-09-28 07:23:29"
      },
      {
        "time_stamp": "2022-09-28 08:02:28"
      },
      {
        "time_stamp": "2022-09-28 08:11:48"
      },
      {
        "time_stamp": "2022-09-28 08:22:11"
      },
      {
        "time_stamp": "2022-09-28 08:24:24"
      },
      {
        "time_stamp": "2022-09-28 08:24:45"
      },
      {
        "time_stamp": "2022-09-28 08:25:04"
      },
      {
        "time_stamp": "2022-09-28 08:25:54"
      },
      {
        "time_stamp": "2022-09-28 08:31:18"
      },
      {
        "time_stamp": "2022-09-28 08:32:20"
      },
      {
        "time_stamp": "2022-09-28 08:39:30"
      },
      {
        "time_stamp": "2022-09-28 08:41:58"
      },
      {
        "time_stamp": "2022-09-28 08:42:35"
      },
      {
        "time_stamp": "2022-09-28 08:43:14"
      },
      {
        "time_stamp": "2022-09-28 08:48:35"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2022-09-28 07:01:26",
    "text": "this is an interesting request from a client. What is their reasoning?"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2022-09-28 07:04:02",
    "text": "this markup renders nothing\n```{% set start_date_format = '%B %e, %Y' %}\n{{ event.start|datetimeformat(start_date_format) }}```\nIs it not possible to set a `datetimeformat` with a variable?",
    "reply_count": 17,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2022-09-28 07:20:31"
      },
      {
        "time_stamp": "2022-09-28 07:21:29"
      },
      {
        "time_stamp": "2022-09-28 07:29:30"
      },
      {
        "time_stamp": "2022-09-28 07:31:09"
      },
      {
        "time_stamp": "2022-09-28 07:32:00"
      },
      {
        "time_stamp": "2022-09-28 07:32:30"
      },
      {
        "time_stamp": "2022-09-28 07:34:47"
      },
      {
        "time_stamp": "2022-09-28 07:35:46"
      },
      {
        "time_stamp": "2022-09-28 07:36:42"
      },
      {
        "time_stamp": "2022-09-28 07:37:52"
      },
      {
        "time_stamp": "2022-09-28 07:40:10"
      },
      {
        "time_stamp": "2022-09-28 07:41:16"
      },
      {
        "time_stamp": "2022-09-28 07:42:41"
      },
      {
        "time_stamp": "2022-09-28 07:49:40"
      },
      {
        "time_stamp": "2022-09-28 07:51:30"
      },
      {
        "time_stamp": "2022-09-28 07:52:25"
      },
      {
        "time_stamp": "2022-09-28 08:05:00"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andreas Wessolly",
      "poster_handle": "webdesign"
    },
    "time_stamp": "2022-09-28 07:20:31",
    "text": "maybe you need to add\n``` |datetimeformat ```\nas well, according to the docs it should be in combination with the Directives\n\n```{{ content.updated|datetimeformat(\"%B %e, %Y\") }}```"
  },
  {
    "poster": {
      "poster_name": "Andreas Wessolly",
      "poster_handle": "webdesign"
    },
    "time_stamp": "2022-09-28 07:21:29",
    "text": "So in your Case:\n\n```{% set start_date_format =  datetimeformat('%B %e, %Y' )%} ```\n"
  },
  {
    "poster": {
      "poster_name": "Dror Limer",
      "poster_handle": "dror"
    },
    "time_stamp": "2022-09-28 07:23:29",
    "text": "Well they've already uploaded 1000's of monster images (many 1MB+ PNGs etc...).\nHubSpot's image compression lowers that to 400-600kb / image, which is nice but still 6 times the recommended 100-150kb target for mobile devices"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2022-09-28 07:29:30",
    "text": "I’m not following <@UBT0AHWLD>… would I implement your solution like `{{ event.start|start_date_format }}`"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2022-09-28 07:31:09",
    "edited": {
      "time_stamp": "2022-09-28 07:31:31"
    },
    "text": "regardless… that didn’t work :disappointed:"
  },
  {
    "poster": {
      "poster_name": "Andreas Wessolly",
      "poster_handle": "webdesign"
    },
    "time_stamp": "2022-09-28 07:32:00",
    "text": "i think you would need to add the fformat \"'%B %e, %Y'\n\" as well"
  },
  {
    "poster": {
      "poster_name": "Andreas Wessolly",
      "poster_handle": "webdesign"
    },
    "time_stamp": "2022-09-28 07:32:30",
    "text": "``` {{ event.start|start_date_format(\"%B %e, %Y\")  }} ```"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2022-09-28 07:34:47",
    "text": "I’m trying to set the format with a variable though…"
  },
  {
    "poster": {
      "poster_name": "Ville Pekkarinen",
      "poster_handle": "ville"
    },
    "time_stamp": "2022-09-28 07:35:46",
    "text": "You might have to convert `event.start` to a date object"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2022-09-28 07:36:42",
    "text": "it is a date object"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2022-09-28 07:37:52",
    "text": "even with this markup it doesn’t work\n```{% set my_date_format = '%B %e, %Y' %}\n{{ content.updated|datetimeformat(my_date_format) }}```"
  },
  {
    "poster": {
      "poster_name": "Ville Pekkarinen",
      "poster_handle": "ville"
    },
    "time_stamp": "2022-09-28 07:40:10",
    "text": "hnngh, works for me"
  },
  {
    "poster": {
      "poster_name": "Ville Pekkarinen",
      "poster_handle": "ville"
    },
    "time_stamp": "2022-09-28 07:41:16",
    "text": "and `content.updated` is some unix timestamp?"
  },
  {
    "text": ":thinking_face:",
    "time_stamp": "2022-09-28 07:42:41"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2022-09-28 07:49:40",
    "text": "<@UU4T3609E> it now works!\n\nI stripped all of my code and retyped it… I must have had a weird character or some typo there. I think that calls for a walk/brain break :rolling_on_the_floor_laughing:\n\nThanks again and thank you <@UBT0AHWLD> as well"
  },
  {
    "poster": {
      "poster_name": "Ville Pekkarinen",
      "poster_handle": "ville"
    },
    "time_stamp": "2022-09-28 07:51:30",
    "text": ":D classic! Good it got sorted out"
  },
  {
    "poster": {
      "poster_name": "Andreas Wessolly",
      "poster_handle": "webdesign"
    },
    "time_stamp": "2022-09-28 07:52:25",
    "text": "indeed, glad it works"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 08:02:28",
    "text": "so this is more about image compression and proper file sizes?\n\nSounds like image compression, resizing and optimization is the issue not a cdn\n\nUsing a cdn in HubSpot, you would just need to change the target of your images in each of your pages.\n\nI imagine you could cobble together a macro to do this for you…\n\nThere are optimization libraries that have apis that allow you to do this sort of optimization like <https://github.com/GoogleChromeLabs/squoosh>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 08:05:00",
    "text": "how weird!"
  },
  {
    "poster": {
      "poster_name": "Dror Limer",
      "poster_handle": "dror"
    },
    "time_stamp": "2022-09-28 08:11:48",
    "text": "Manually going thru 1000's of images is out of scope, so they've opted to use a dedicated image CDN to handle everything transparently.\nwhich tools can i leverage to implement that ?"
  },
  {
    "poster": {
      "poster_name": "Dror Limer",
      "poster_handle": "dror"
    },
    "time_stamp": "2022-09-28 08:22:11",
    "text": "for example with wordpress i can use many plugins or even brute-force a global search&amp;replace on the final HTML buffer, without having to go into every single theme file...\nanything like that in HS? any other creative ideas ? hidden setting that i've missed ?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 08:24:24",
    "text": "that is the macro i’m talking about, you would need to rework all your modules to use a macro to brute force your way around"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 08:24:45",
    "text": "you could also use an image optimziaiton api like I posted above as well and use the files api to optimize all of your issues"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 08:25:04",
    "text": "the problem is your client has an expectation on what the scope is, and you aren’t driving that conversation."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 08:25:54",
    "text": "and call me opinatted or wrong — but you need to explain to your client that doing these things in real time on page load is not the right solution —  that it is a band aid.\n\nyou are just allowing the problem to fester and grow"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 08:27:38",
    "text": "awesome! glad it got solved, nice work"
  },
  {
    "poster": {
      "poster_name": "Dror Limer",
      "poster_handle": "dror"
    },
    "time_stamp": "2022-09-28 08:31:18",
    "text": "okay thanks :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 08:32:20",
    "text": "but macros are what you’re looking for to override the default behavior"
  },
  {
    "poster": {
      "poster_name": "Dror Limer",
      "poster_handle": "dror"
    },
    "time_stamp": "2022-09-28 08:39:30",
    "text": "will a macro allow me to modify elements outside it's own scope ?...\ncan i build a macro that will search&amp;replace urls in every single module in use or i can use it on the base file ?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 08:41:58",
    "text": "you build a macro like\n```{% macro replaceFile(url) %}\n{{ url|replace('<http://domain.com/|domain.com/>', '<http://cdn.com/|cdn.com/>') }}\n{% endmacro %}\n\nand then you would do\n\n&lt;img src=\"{{ replaceFile(module.image.src) }}\"&gt;```\n"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 08:42:35",
    "text": "using local development, find and replace globally will allow you to migrated this across the codebase quickly"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 08:43:14",
    "text": "you could do an import in each module to bring in a macros html page — or you could add it to the top of every module. I prefer importing it and having quite a few macros to help me out"
  },
  {
    "poster": {
      "poster_name": "Dror Limer",
      "poster_handle": "dror"
    },
    "time_stamp": "2022-09-28 08:48:35",
    "text": "okay that's a good start 10x :pray:"
  },
  {
    "text": "I’ve never been able to get `selectattr` to grab multiselect fields from hubdb correctly. It looks like the filter from `hubdb_table_rows()` works correctly but not selectattr. I feel like they should be the same. What am I doing wrong? <@U25PYL3Q8> <@U26BLKGE4> Any secrets?\n```{%set test = hubdb_table_rows(dynamic_page_hubdb_table_id|default(2663790), \"topics__icontains=Children\")%}\n{% set topic_count = table.selectattr(\"topics\", \"containing\", \"Children\")%}\nTest hubdb Filter: {{test|length}}\n&lt;br&gt;&lt;br&gt;\nselectAttr filter: {{topic_count|length}}```",
    "time_stamp": "2022-09-28 11:13:12",
    "edited": {
      "time_stamp": "2022-09-28 11:16:11"
    },
    "reply_count": 74,
    "reply_users_count": 5,
    "replies": [
      {
        "time_stamp": "2022-09-28 11:20:52"
      },
      {
        "time_stamp": "2022-09-28 11:22:17"
      },
      {
        "time_stamp": "2022-09-28 11:22:33"
      },
      {
        "time_stamp": "2022-09-28 11:23:01"
      },
      {
        "time_stamp": "2022-09-28 11:24:04"
      },
      {
        "time_stamp": "2022-09-28 11:24:40"
      },
      {
        "time_stamp": "2022-09-28 11:26:59"
      },
      {
        "time_stamp": "2022-09-28 11:27:53"
      },
      {
        "time_stamp": "2022-09-28 11:28:15"
      },
      {
        "time_stamp": "2022-09-28 11:28:24"
      },
      {
        "time_stamp": "2022-09-28 11:28:36"
      },
      {
        "time_stamp": "2022-09-28 11:28:38"
      },
      {
        "time_stamp": "2022-09-28 11:28:52"
      },
      {
        "time_stamp": "2022-09-28 11:28:53"
      },
      {
        "time_stamp": "2022-09-28 11:29:09"
      },
      {
        "time_stamp": "2022-09-28 11:29:12"
      },
      {
        "time_stamp": "2022-09-28 11:29:50"
      },
      {
        "time_stamp": "2022-09-28 11:51:01"
      },
      {
        "time_stamp": "2022-09-28 11:51:04"
      },
      {
        "time_stamp": "2022-09-28 11:51:07"
      },
      {
        "time_stamp": "2022-09-28 11:52:08"
      },
      {
        "time_stamp": "2022-09-28 12:10:03"
      },
      {
        "time_stamp": "2022-09-28 12:11:10"
      },
      {
        "time_stamp": "2022-09-28 12:11:12"
      },
      {
        "time_stamp": "2022-09-28 12:11:40"
      },
      {
        "time_stamp": "2022-09-28 12:11:49"
      },
      {
        "time_stamp": "2022-09-28 12:15:20"
      },
      {
        "time_stamp": "2022-09-28 12:16:59"
      },
      {
        "time_stamp": "2022-09-28 12:17:49"
      },
      {
        "time_stamp": "2022-09-28 12:17:59"
      },
      {
        "time_stamp": "2022-09-28 12:18:16"
      },
      {
        "time_stamp": "2022-09-28 12:18:29"
      },
      {
        "time_stamp": "2022-09-28 12:18:33"
      },
      {
        "time_stamp": "2022-09-28 12:18:39"
      },
      {
        "time_stamp": "2022-09-28 12:18:47"
      },
      {
        "time_stamp": "2022-09-28 12:19:34"
      },
      {
        "time_stamp": "2022-09-28 12:20:00"
      },
      {
        "time_stamp": "2022-09-28 12:20:11"
      },
      {
        "time_stamp": "2022-09-28 12:54:13"
      },
      {
        "time_stamp": "2022-09-28 12:55:26"
      },
      {
        "time_stamp": "2022-09-28 12:55:29"
      },
      {
        "time_stamp": "2022-09-28 12:55:51"
      },
      {
        "time_stamp": "2022-09-28 12:55:53"
      },
      {
        "time_stamp": "2022-09-28 12:56:01"
      },
      {
        "time_stamp": "2022-09-28 12:56:45"
      },
      {
        "time_stamp": "2022-09-28 12:56:50"
      },
      {
        "time_stamp": "2022-09-28 12:57:26"
      },
      {
        "time_stamp": "2022-09-28 13:13:48"
      },
      {
        "time_stamp": "2022-09-28 13:17:29"
      },
      {
        "time_stamp": "2022-09-28 13:18:00"
      },
      {
        "time_stamp": "2022-09-28 13:18:23"
      },
      {
        "time_stamp": "2022-09-28 13:18:37"
      },
      {
        "time_stamp": "2022-09-28 13:18:50"
      },
      {
        "time_stamp": "2022-09-28 14:42:58"
      },
      {
        "time_stamp": "2022-09-28 14:44:57"
      },
      {
        "time_stamp": "2022-09-28 14:45:25"
      },
      {
        "time_stamp": "2022-09-28 14:45:43"
      },
      {
        "time_stamp": "2022-09-28 14:45:59"
      },
      {
        "time_stamp": "2022-09-28 14:46:22"
      },
      {
        "time_stamp": "2022-09-28 14:48:39"
      },
      {
        "time_stamp": "2022-09-28 14:49:27"
      },
      {
        "time_stamp": "2022-09-28 14:49:35"
      },
      {
        "time_stamp": "2022-09-28 14:50:44"
      },
      {
        "time_stamp": "2022-09-29 04:04:49"
      },
      {
        "time_stamp": "2022-09-29 04:13:01"
      },
      {
        "time_stamp": "2022-09-29 05:36:36"
      },
      {
        "time_stamp": "2022-09-29 05:36:45"
      },
      {
        "time_stamp": "2022-09-29 07:18:13"
      },
      {
        "time_stamp": "2022-09-30 01:19:28"
      },
      {
        "time_stamp": "2022-09-30 06:02:41"
      },
      {
        "time_stamp": "2022-09-30 08:09:10"
      },
      {
        "time_stamp": "2022-09-30 08:36:39"
      },
      {
        "time_stamp": "2022-09-30 08:40:31"
      },
      {
        "time_stamp": "2022-09-30 08:50:25"
      }
    ]
  },
  {
    "text": "Do you know if any of these short hand expressions work?",
    "time_stamp": "2022-09-28 11:20:52"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2022-09-28 11:22:17",
    "text": "Only thought would be that maybe the data type of the value isn’t a string when that filter evaluates, might be something like `{value:Children}`"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 11:22:33",
    "text": "true true"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 11:23:01",
    "text": "Also maybe the `in` filter?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 11:24:04",
    "text": "I’ve always had problems with this any time I use it and would use like mapping to solve the issue or creating a new array of items and using a count for that"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 11:24:40",
    "text": "`selectattr` is one of those items that I wish had much better documenation around and examples"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-09-28 11:26:59",
    "text": "<@U25PYL3Q8> I’ve always just mapped them manually myself as well. `selectattr`  always seems to work well aside from multiselect."
  },
  {
    "poster": {
      "poster_name": "David Roma",
      "poster_handle": "droma"
    },
    "time_stamp": "2022-09-28 11:27:06",
    "text": "<@U03BW6DSSF9> I fixed this issue by giving the element a default background color in the fields.json"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 11:27:53",
    "text": "well time to take your master class lol"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 11:28:15",
    "text": "Mark me down for the class aswell"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 11:28:24",
    "text": "yo"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 11:28:36",
    "text": "i’m really thinking of doing somethign on twitch or youtube"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 11:28:38",
    "text": "on friday nights"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-09-28 11:28:52",
    "text": "<@U6W3H6YN8> I think you and I had a back and forth a ways back about something like this. <@U7SL518D6> Any insight on how the selectattr filter works? is the behavior expected to be the same as running the `hubdb_table_rows()` ?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 11:28:53",
    "text": "lets go through problems on slack and record how we debug them"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 11:29:09",
    "text": "maybe we could do somethign aroudn these different HubSpot things as well"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-09-28 11:29:12",
    "text": "This is historically how ive always done it <https://devbeej.com/library/filtering-rows-in-hubdb/>"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-09-28 11:29:50",
    "text": "Its just verbose - and annoying when the filter should do it natively…"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 11:51:01",
    "edited": {
      "time_stamp": "2022-09-28 11:57:31"
    },
    "text": "```{%set test = hubdb_table_rows(dynamic_page_hubdb_table_id|default(2663790), \"topics__icontains=Children\")%}\n\n{% set topic_count = hubdb_table_rows(dynamic_page_hubdb_table_id|default(2663790))|selectattr(\"topics\", \"containing\", \"Children\") %}\n\n\nTest hubdb Filter: {{test|length}}\n&lt;br&gt;&lt;br&gt;\nselectAttr filter: {{topic_count|length}}```"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 11:51:04",
    "text": "This works"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 11:51:07",
    "text": "<@UQWGKUEN7>"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 11:52:08",
    "edited": {
      "time_stamp": "2022-09-28 12:01:25"
    },
    "text": "Just updated it to work with your table and dynamic page"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-09-28 12:10:03",
    "text": "Wait so running selectattr on the hubDB call works when it’s not stored in a variable?"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-09-28 12:11:10",
    "text": "Either way I won’t be able to do that. I’ll need to automate this filter process so that I can do it across all filters. And I think there is a limit of calling hubdb_table_rows 10 times or so"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 12:11:12",
    "text": "It should work the exact same way"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 12:11:40",
    "text": "Ah true true the 10 times gets you pretty quick"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 12:11:49",
    "text": "GraphQL TIME!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 12:15:20",
    "edited": {
      "time_stamp": "2022-09-28 12:15:56"
    },
    "text": "Here's the code to do it with store the table in a variable:\n```{% set table = hubdb_table_rows(dynamic_page_hubdb_table_id || 2663790) %}\n\n{% set test = hubdb_table_rows(dynamic_page_hubdb_table_id || 2663790, \"topics__icontains=Children\") %}\n\n{% set topic_count = table|selectattr(\"topics\", \"containing\", \"Children\") %}\n\nTest hubdb Filter: {{test|length}}\n&lt;br&gt;&lt;br&gt;\nselectAttr filter: {{topic_count|length}}```"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-09-28 12:16:59",
    "text": "This is no different than what I had originally correct?"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-09-28 12:17:49",
    "text": "Topics in your example is a multi select?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 12:17:59",
    "text": "Single pipe vs double pipe"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 12:18:16",
    "text": "Looks like you had a filter for default?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 12:18:29",
    "text": "Could that have been the issue?"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-09-28 12:18:33",
    "text": "Default is a filter"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 12:18:39",
    "text": "Oh"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 12:18:47",
    "text": "No you were using '.' instead of '|' on the line \"{% set topic_count \" etc"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-09-28 12:19:34",
    "text": "Hahaha yea thats def my bad there"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-09-28 12:20:00",
    "text": "Out to lunch now so I’ll swap that out for the obvious filter pipe hahaha"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-09-28 12:20:11",
    "text": "Thanks team "
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 12:54:13",
    "edited": {
      "time_stamp": "2022-09-28 12:54:15"
    },
    "text": "Oh just now realizing that the column I was testing on was a single line text"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 12:55:26",
    "text": ":clown_face::clown_face:"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 12:55:29",
    "text": ":face_palm:"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 12:55:51",
    "edited": {
      "time_stamp": "2022-09-28 14:15:38"
    },
    "text": "The columns were named \"Name\" and \"Names\""
  },
  {
    "time_stamp": "2022-09-28 12:55:53",
    "text": "back to the drawing board"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 12:56:01",
    "text": "Dumb naming convention"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 12:56:45",
    "text": "Name as a default item, I've never used the field in hubdb "
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-09-28 12:56:50",
    "text": "Hahaha rats so my silly pipe error wasn’t the fix?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 12:57:26",
    "text": "It may have fixed something but not the real problem. :joy:"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 13:13:48",
    "text": "Shouldn't this work:\n```{% set topic_count = table|selectattr(\"topics\"|map(\"name\")|join(', '), \"string_containing\", \"Children\") %}```"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-09-28 13:17:29",
    "text": "Well topics is just a string in this case I dont think you can apply map to that string"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 13:18:00",
    "text": "I thought you said topics was a multi-select?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 13:18:23",
    "text": "You have topics in “”"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 13:18:37",
    "text": "Oh true"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 13:18:50",
    "text": "yep yep, now I see there error of my ways"
  },
  {
    "text": "This was my workaround for the time being\n\n```{% set podcastTopics = [] %}\n{% for row in podcasts %}\n  {% for topic in row.topics %}\n    {% set topicName = topic.name %}\n    {% set obj = {\"name\": topicName}%}\n    {% do podcastTopics.append(obj)%}\n  {% endfor %}\n{% endfor %}\n\n{%- macro buildList(array,type) -%}\n&lt;ul&gt;\n  {% for topic in array|unique%}\n    {% set topic_count = array|selectattr(\"name\", 'eq', topic.name)|length%}\n    &lt;li&gt;&lt;a class=\"filter-link\" href=\"\" data-type=\"{{type}}\" data-filter-name=\"{{topic.name}}\"&gt;{{topic.name}} ({{topic_count}})&lt;/a&gt;&lt;/li&gt;\n  {% endfor %}\n&lt;/ul&gt;\n{% endmacro %}```",
    "time_stamp": "2022-09-28 14:42:58"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 14:44:57",
    "text": "Nice! I think that's pretty much as efficient as you can get it"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 14:45:25",
    "text": "Dang `|selectattr`"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-09-28 14:45:43",
    "text": "Right oh… Lame sauce to the max"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 14:45:59",
    "text": "I was reading through the code and trying to figure out if there was any reason for this: <https://github.com/HubSpot/jinjava/blob/master/src/main/java/com/HubSpot/jinjava/lib/filter/SelectAttrFilter.java>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 14:46:22",
    "text": "I have a problem with {{ touching text but otherwise this seems perfect"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-09-28 14:48:39",
    "text": "’man doesnt have issues with all lower-case text but freaks out at the sight of curly braces touching the contained text :stuck_out_tongue: :thinking_face:"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 14:49:27",
    "text": "he's from florida"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-09-28 14:49:35",
    "text": ":joy:"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2022-09-28 14:50:44",
    "text": "Lol I'm a psychopath I know"
  },
  {
    "text": "Hi all, I use {% for loop %} to display the blog names and keep generating this  &amp;nbsp; HTML code. Is there a way to remove them? I read the Hub cms docs and filter's can resolve the issue.",
    "time_stamp": "2022-09-28 23:10:27",
    "reply_count": 5,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2022-09-29 07:34:22"
      },
      {
        "time_stamp": "2022-09-29 07:34:29"
      },
      {
        "time_stamp": "2022-09-29 07:34:38"
      },
      {
        "time_stamp": "2022-10-03 01:07:49"
      },
      {
        "time_stamp": "2022-10-03 07:11:36"
      }
    ]
  }
]