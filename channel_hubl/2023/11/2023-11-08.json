[
  {
    "poster": {
      "poster_name": "Dirk van der Giesen",
      "poster_handle": "dvandergiesen"
    },
    "time_stamp": "2023-11-08 05:32:47",
    "edited": {
      "time_stamp": "2023-11-08 05:41:00"
    },
    "text": "Dear Community, i use this string with variables to get to my images in the file manager.\n```<img src=\"https://{{request.domain}}/hubfs/{{hub_id}}/products/{{item.image_1}}```\nIs there a shorter/single variable that get's me there as well especially for this part:\n```https://{{request.domain}}/hubfs/{{hub_id}}/```\nThx",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-11-08 10:44:57"
      },
      {
        "time_stamp": "2023-11-09 03:37:14"
      },
      {
        "time_stamp": "2023-11-09 11:31:00"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Nich Mueller",
      "poster_handle": "nich"
    },
    "time_stamp": "2023-11-08 05:35:03",
    "edited": {
      "time_stamp": "2023-11-08 05:49:33"
    },
    "text": "Thanks Evelynn, I had another friend suggest a version of using the Blog Post API... but maybe not in the same way you suggested.\n\n\"The way we did this for another client before, was creating a backend and deploying it do digital ocean, then creating hubdb and webhook that will add new rows into hubdb everytime new blog post is published, then in hubdb we will have all blog posts as rows and will use hubdb_table_rows instead of blog_recent_posts for displaying results for blog posts, that way we are able to achieve displaying of all blog posts, this was the only way we found for this purpose.\"\n\nI think we will probably end up going with some version of Blog Posts API / HubDB, and the listing page will pull HubDB rows for the filter-able listing content"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-08 06:31:58",
    "text": "Do you mean the contact profile image? Currently this isn't possible"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2023-11-08 06:32:16",
    "text": "Holy smokes, bringing a 5-year old thread back from the grave!"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2023-11-08 06:34:37",
    "edited": {
      "time_stamp": "2023-11-08 06:38:05"
    },
    "text": "<@UEQQ2AGEP> You’d have to do something like\n```{% unless loop.index == 1 || loop.index == 2 %}```"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2023-11-08 06:37:36",
    "text": "`&amp;&amp;` Is the ‘and’ operator so the statement you wrote is saying ‘unless it is the first and second loop’. The loop can’t be both the first and second at the same time so we want to say, ‘unless this is the first OR second loop’"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2023-11-08 06:40:19",
    "text": "We also have to write `loop.index` on either side of the `||` , otherwise it’s like saying, “Unless we are on the first loop, or the number two”"
  },
  {
    "poster": {
      "poster_name": "Evelynn Ulsh",
      "poster_handle": "evelynn"
    },
    "time_stamp": "2023-11-08 10:44:57",
    "text": "In what context are you using this? Needing to hard-code in references to HubFS seems like a pretty specialized use case, so knowing a little bit more might help to find something more suitable."
  },
  {
    "poster": {
      "poster_name": "Melvin Cruz",
      "poster_handle": "email"
    },
    "time_stamp": "2023-11-08 21:29:27",
    "edited": {
      "time_stamp": "2023-11-08 21:37:09"
    },
    "text": "Hi there,  just a quick question, I have this weird output, I'm using Product Library with around 184 products\n\n*1st code* can only output  around 100 items for some reason :(\n`{% set product_count = 1000 %}`\n`{% set products = crm_objects(\"product\",\"limit=\"~product_count,\"id,price,createdate,name,hs_images,description,hs_url,category, stock, hs_product_type,hs_sku, shopify_id\") %}`\n\n`{% for product in products.results %}`\n  `{{ product.name }}`\n`{% endfor %}`\n\n*2nd code* using GraphQL can output everything without issue :)\n`query MyQuery {`\n  `CRM {`\n    `product_collection(limit: 1000) {`\n      `items {`\n        `_metadata {`\n          `id`\n        `}`\n        `name`\n        `price`\n        `hs_images`\n        `createdate`\n        `category`\n        `description`\n        `hs_sku`\n        `hs_url`\n        `stock`\n        `hs_product_type`\n        `shopify_id`\n      `}`\n    `}`\n  `}`\n`}`\n\n`{% set contactCollectionData = module.data_query.data.CRM.product_collection  %}`\n`{% set applications = contactCollectionData.items %}`\n\n`{% for application in applications %}`\n  `{{ application.name }}`\n`{% endfor %}`\n\nWhat is the problem in the 1st code? Thanking you in advance\n\njust tagging you <@U7SL518D6>",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-11-08 21:39:51"
      },
      {
        "time_stamp": "2023-11-08 21:43:24"
      },
      {
        "time_stamp": "2023-11-08 21:44:51"
      }
    ]
  },
  {
    "text": "Hi\ncrm_objects has the limit to return only 100 objects.\n\nYou can read more about it here\n<https://developers.HubSpot.com/docs/cms/hubl/functions>",
    "time_stamp": "2023-11-08 21:39:51"
  },
  {
    "poster": {
      "poster_name": "Melvin Cruz",
      "poster_handle": "email"
    },
    "time_stamp": "2023-11-08 21:43:24",
    "edited": {
      "time_stamp": "2023-11-08 21:45:17"
    },
    "text": "Thanks much <@U05KESBSAJ0>, i do not notice that limit in the docs.. now I understand why it is not working. So the only solution is GraphQL"
  },
  {
    "poster": {
      "poster_name": "Swapit Hub",
      "poster_handle": "info458"
    },
    "time_stamp": "2023-11-08 21:44:51",
    "text": "You are welcome!"
  }
]