[
  {
    "poster": {
      "poster_name": "Miika Voutilainen",
      "poster_handle": "miika.voutilainen"
    },
    "time_stamp": "2018-12-19 06:23:49",
    "text": "When Form field is added to custom module there isn't field that gives you a change to send form notifications to specified email addresses instead of the form defaults. Is there way to do this? I have not found a solution.",
    "reply_count": 5,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2018-12-19 07:10:31"
      },
      {
        "time_stamp": "2018-12-19 07:13:54"
      },
      {
        "time_stamp": "2018-12-19 08:17:18"
      },
      {
        "time_stamp": "2018-12-19 23:54:42"
      },
      {
        "time_stamp": "2018-12-20 01:00:38"
      }
    ]
  },
  null,
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2018-12-19 07:10:31",
    "text": "instead of using the value in your module, use the \"copy code snippet\" button... then in the module you can use the following attribute \"notifications_override_email_addresses\""
  },
  {
    "poster": {
      "poster_name": "Tim Joyce",
      "poster_handle": "tim"
    },
    "time_stamp": "2018-12-19 07:13:54",
    "text": "so, it would be something like :\n{% form form_to_use=\"{{ module.my_form.form_id }}\"  notifications_override_email_addresses=\"JSON LIST OF CONTACTS HERE\" %}"
  },
  {
    "poster": {
      "poster_name": "Theresa Weaver",
      "poster_handle": "theresa.weaver"
    },
    "time_stamp": "2018-12-19 07:40:28",
    "edited": {
      "time_stamp": "2018-12-19 07:43:08"
    },
    "text": "yeah I think they are more familiar with page editing and database editing, so I am going to try this route. So I need to invest a little more time in figuring out how to call specific column types (i.e. images, select, dates and time etc.) from the databases"
  },
  {
    "poster": {
      "poster_name": "Michele Herzog",
      "poster_handle": "mherzog"
    },
    "time_stamp": "2018-12-19 08:17:18",
    "text": "also worth taking a look at the default form module to see this- you can add a boolean to toggle the overrides on and off, then an email address field for the overrides. Looks like this:\n```    notifications_are_overridden='{{ module.notifications_are_overridden }}',\n    notifications_override_email_addresses='{{ module.notifications_override_email_addresses }}'``` when you add it to the hubl.\n\nWe're working on documentation for this this week."
  },
  {
    "poster": {
      "poster_name": "Joe",
      "poster_handle": "joe"
    },
    "time_stamp": "2018-12-19 08:49:04",
    "text": "<@U7SL518D6> and <@U25PYL3Q8>, you two blowing my mind here with those hubl shorthands and ternary operators you guys were talking about the other day. didn't think things like that would be available to do in the design manager"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2018-12-19 09:42:38",
    "edited": {
      "time_stamp": "2018-12-19 09:43:23"
    },
    "text": "The cool thing about hubl, it’s based off another language. That language has a much larger scale so the interpreter/compiler/whatever the term is picks up this stuff. You can do most of this type of stuff with other languages so you just attempt to apply what you know from somewhere else and say WHY NOT? <@UAQHN1F2Q> <@U7SL518D6> "
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-12-19 09:50:51",
    "text": "Quote to live by:\n&gt; just attempt to apply what you know from somewhere else and say WHY NOT?"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-12-19 09:51:08",
    "text": "<https://gph.is/1Ha76dN>"
  },
  {
    "poster": {
      "poster_name": "Joe",
      "poster_handle": "joe"
    },
    "time_stamp": "2018-12-19 09:56:11",
    "edited": {
      "time_stamp": "2018-12-19 09:57:12"
    },
    "text": "exactly. i try to incorporate the knowledge from other platforms / languages, its just getting the right syntax in place for it to work.\nlike actually trying some of the base jinja functionality in some HubSpot coded templates to make maintenance easier on myself and my team.\n`{% extends 'some_template_partial.html %}` and `{% block some_name %}` tags became so helpful and reminded me of the way handlebars syntax from Bigcommerce's themeing works"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-12-19 09:57:35",
    "text": "I don’t know anything about jinja, but I did stay at a Holiday Inn Express last night."
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-12-19 15:34:03",
    "text": "Four new filters added to HubL: `union`, `intersect`, `difference`, and `symmetric_difference`. Check them out <https://designers.HubSpot.com/docs/hubl/hubl-supported-filters#union> and thanks for the idea <@U3T21PDBK>"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-12-19 15:38:07",
    "text": "<https://gph.is/2smtVVn>"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-12-19 17:33:35",
    "text": "i love seeing ideas come to life!"
  },
  {
    "poster": {
      "poster_name": "Miika Voutilainen",
      "poster_handle": "miika.voutilainen"
    },
    "time_stamp": "2018-12-19 23:54:42",
    "text": "Thank you <@UDC5GRX6E> &amp; <@UBFA10FMF>"
  }
]