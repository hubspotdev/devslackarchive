[
  {
    "poster": {
      "poster_name": "Alyssa Wilie",
      "poster_handle": "amwilie"
    },
    "time_stamp": "2020-08-12 07:21:56",
    "text": "Hiya, I'm trying to fetch file manager files. I have the tool and access key all set up; the designer manager fetch/upload/watch works perfectly fine but whenever I try to do a filemanager fetch it just does.... nothing. Doesn't even give me an error.",
    "reply_count": 5,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2020-08-12 07:47:35"
      },
      {
        "time_stamp": "2020-08-12 07:54:01"
      },
      {
        "time_stamp": "2020-08-12 08:20:22"
      },
      {
        "time_stamp": "2020-08-12 08:21:14"
      },
      {
        "time_stamp": "2020-08-12 09:49:56"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Gregory Cornelius",
      "poster_handle": "gcornelius"
    },
    "time_stamp": "2020-08-12 07:25:13",
    "text": "what kinds of changes have you made?"
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2020-08-12 07:47:35",
    "text": "what fetch command are you running?"
  },
  {
    "poster": {
      "poster_name": "Alyssa Wilie",
      "poster_handle": "amwilie"
    },
    "time_stamp": "2020-08-12 07:54:01",
    "text": "hs filemanager fetch --portal=****** /custom-video-thumbnails"
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2020-08-12 08:20:22",
    "text": "i think you need a parameter for the upstream source?  hs filemanager fetch --portal=123456 [src-path] [dest-path]"
  },
  {
    "poster": {
      "poster_name": "Alyssa Wilie",
      "poster_handle": "amwilie"
    },
    "time_stamp": "2020-08-12 08:21:14",
    "text": "I tried that as well, no dice."
  },
  {
    "poster": {
      "poster_name": "Melinda Green",
      "poster_handle": "melinda.green"
    },
    "time_stamp": "2020-08-12 09:49:56",
    "text": ":disappointed:"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2020-08-12 15:50:03",
    "text": "<@U22VBL87M> well, quite a bitâ€¦"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2020-08-12 15:52:10",
    "text": "big changes are to markup of custom modules. Thats a whole sidebar thing because when migrating over to the new local build process with the CLI a few months ago, I created a entire new file structure, thinking I could just search and replace the path to the new modules in the templates. Alas, a living module is tied to the original module content once you create it. changing the `path` makes no difference."
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2020-08-12 15:52:43",
    "text": "so my first challenge is going through, creating new modules and duplicating the content into the new module so I can actual impact the markup when i push a change."
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2020-08-12 15:53:22",
    "text": "not a huge deal, but some modules appear 15+ times, so thats copying pasting content a bunch of times just to get it into the right module"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2020-08-12 15:54:00",
    "text": "but beyond that, I am refactoring a bunch of the css, and with using scss compiled to a single css file."
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2020-08-12 15:54:53",
    "text": "my approach at this point is to hang onto the old css file before I push to master and reference the new css file as well, just in the interim incase there is any markup that relies on the old css"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2020-08-12 15:55:31",
    "edited": {
      "time_stamp": "2020-08-12 15:57:24"
    },
    "text": "so basically `&lt;style old css&gt;` then `&lt;style new css&gt;` in the head, then phase out `&lt;style old css&gt;` once I get all the pages switched over to the new versions, copy updated, etc"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2020-08-12 15:57:40",
    "text": "sounds like a decent approach?"
  },
  {
    "poster": {
      "poster_name": "Douglas Welcome",
      "poster_handle": "dwelcome"
    },
    "time_stamp": "2020-08-12 15:58:27",
    "text": "I realize all this is probably avoidable with themes, (I am still new to those), but this is for a site built in the now ancient local dev server days"
  },
  {
    "text": "",
    "time_stamp": "2020-08-12 15:59:56"
  }
]