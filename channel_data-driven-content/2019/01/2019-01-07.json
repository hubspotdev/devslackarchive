[
  null,
  null,
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-07 06:55:05",
    "text": "pretty sure you have to have the | next to the filter name"
  },
  null,
  null,
  null,
  null,
  null,
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-07 12:27:55",
    "text": "what would be the most user friendly way of adding a unique form to a dynamic page.  sometimes they may want a default form, sometimes they want to create a specific form for the page."
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-07 12:28:36",
    "text": "i was going to add a column for the form ID, but that isnt immediately visible for the layperson to grab"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-07 12:31:13",
    "text": "that is my only struggle with this problem.  just need it to be easy."
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-07 12:31:38",
    "text": "with that being said, be cool if there was form column type :slightly_smiling_face:",
    "reply_count": 27,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-01-07 12:38:39"
      },
      {
        "time_stamp": "2019-01-07 12:40:38"
      },
      {
        "time_stamp": "2019-01-07 12:40:47"
      },
      {
        "time_stamp": "2019-01-07 12:45:57"
      },
      {
        "time_stamp": "2019-01-07 12:46:56"
      },
      {
        "time_stamp": "2019-01-07 12:47:21"
      },
      {
        "time_stamp": "2019-01-07 12:47:41"
      },
      {
        "time_stamp": "2019-01-07 12:48:03"
      },
      {
        "time_stamp": "2019-01-07 12:48:32"
      },
      {
        "time_stamp": "2019-01-07 12:50:20"
      },
      {
        "time_stamp": "2019-01-07 12:50:48"
      },
      {
        "time_stamp": "2019-01-07 12:50:57"
      },
      {
        "time_stamp": "2019-01-07 12:51:02"
      },
      {
        "time_stamp": "2019-01-07 12:51:40"
      },
      {
        "time_stamp": "2019-01-07 12:51:48"
      },
      {
        "time_stamp": "2019-01-07 12:52:15"
      },
      {
        "time_stamp": "2019-01-07 12:52:44"
      },
      {
        "time_stamp": "2019-01-07 12:52:56"
      },
      {
        "time_stamp": "2019-01-07 12:53:12"
      },
      {
        "time_stamp": "2019-01-07 12:53:31"
      },
      {
        "time_stamp": "2019-01-07 12:53:34"
      },
      {
        "time_stamp": "2019-01-07 12:54:06"
      },
      {
        "time_stamp": "2019-01-07 12:54:12"
      },
      {
        "time_stamp": "2019-01-07 12:54:19"
      },
      {
        "time_stamp": "2019-01-07 12:54:22"
      },
      {
        "time_stamp": "2019-01-07 12:54:52"
      },
      {
        "time_stamp": "2019-01-07 12:55:21"
      }
    ]
  },
  null,
  null,
  {
    "poster": {
      "poster_name": "James Cutler",
      "poster_handle": "jcutler"
    },
    "time_stamp": "2019-01-07 12:38:39",
    "text": "Agreed! Expanding the column types to include more selectors (like in custom modules) would really expand the things you can do with HubDB.\nI would say getting the form ID would be the best way to go (as in, would enable you to hardcode customized embed code, where the form ID is dynamically placed, depending on the HubDB row you're on.\nThat said, I hear you on the ID being not the easiest thing for the layperson to find. I suppose if you didn't need to customize the embed code, you could have the end user copy the embed code itself from the forms tool, and paste that into the row cell :shrug:"
  },
  null,
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-07 12:40:38",
    "text": "yeah.  sounds about where i am.  is it frowned upon using the embed code within HubSpot itself?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-07 12:40:47",
    "text": "that would be the easiest"
  },
  {
    "poster": {
      "poster_name": "James Cutler",
      "poster_handle": "jcutler"
    },
    "time_stamp": "2019-01-07 12:45:57",
    "text": "Well, one of the drawbacks of the embed code on HS pages is that it does not provide all of the form options that you get when using the HS form module. But from a technical standpoint, I don't think there is anything wrong with it (especially because there is not a clean way to weave JS into your form through the form module.)\nAnother option for you is to use the HubL form tag (<https://designers.HubSpot.com/docs/hubl/hubl-supported-tags#form>) - this _does_ allow you to flex all of the form options, but it would require that the user be able to plug in the form ID."
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-07 12:46:56",
    "text": "Can you do a child table column?"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-07 12:47:21",
    "text": "maybe have the forms listed on out in one table like `Name, ID` and then just populate that with \"Approved\" forms for use?"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-07 12:47:41",
    "text": "might be some extra work but at least this way when they are in the main hubdb table, they will have a dropdown to select the form"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-07 12:48:03",
    "text": "hmmmm"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-07 12:48:32",
    "text": "or you can do a field called Form, use form name and Id with a separator and then simply strip the text out when using the variable"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-07 12:50:20",
    "text": "for this child table, i would have to populate the table manually?  can that be automated?"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-07 12:50:48",
    "text": "might be able to use an api hook to do it but it would be manually"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-07 12:50:57",
    "text": "meh"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-07 12:51:02",
    "text": "lol yeaaaaa"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-07 12:51:40",
    "text": "i also dont understand your next idea"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-07 12:51:48",
    "text": "what are they adding?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-07 12:52:15",
    "text": "i mean, what are theyplugging into the field"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-07 12:52:44",
    "text": "it would be the same thing just a normal select column with the values added in for them"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-07 12:52:56",
    "text": "ah"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-07 12:53:12",
    "text": "otherwise, I would say just use form ID or even the embed should work too"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-07 12:53:31",
    "text": "i know there a few pages where we've used the embed code so we can leverage other things in the embed"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-07 12:53:34",
    "text": "like on load and such"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-07 12:54:06",
    "text": "would it be crazy to have them add the url of the browser while in the form and then strip out all but id?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-07 12:54:12",
    "text": "`<https://app.HubSpot.com/forms/3955296/editor/192ce734-6536-4bc6-adbf-45cb5df3293e/edit/form>`"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-07 12:54:19",
    "text": "and remove the unk"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-07 12:54:22",
    "text": "junk"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-07 12:54:52",
    "text": "nevermind.  embed code is going to be the winner today"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-07 12:55:21",
    "text": "yea id go embed code"
  },
  null,
  null,
  {
    "poster": {
      "poster_name": "Chandler Ives",
      "poster_handle": "cives"
    },
    "time_stamp": "2019-01-07 14:43:59",
    "text": "using the HubSpot Json API feed to pull in posts from my \"events blog\"  but I need a field in my post with the date of the event in order to plot it on a calendar.  What field would you use to get a date into the json object",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-01-08 08:35:54"
      },
      {
        "time_stamp": "2019-01-08 08:38:21"
      },
      {
        "time_stamp": "2019-01-08 08:41:30"
      },
      {
        "time_stamp": "2019-01-08 08:42:21"
      }
    ]
  },
  null,
  null
]