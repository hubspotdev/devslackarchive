[
  {
    "poster": {
      "poster_name": "Matt",
      "poster_handle": "mtunney"
    },
    "time_stamp": "2019-05-30 07:08:23",
    "edited": {
      "time_stamp": "2019-05-30 07:20:23"
    },
    "text": "Hi - can I use child tables and multi level template to generate the query params for a table?\nI need to provide some filtering of a large set of rows. For example this could be by industry and month/year.\n\nI've ran through the documentation to use foreign tables and how to update the output of the table using query parameters. This works ok, but relies on url parameters.\n\nIs is possible use multi level templates with either child tables or foreign id tables to achieve similar filter but with unique urls rather that url parameters:\n\nexamples:\n`?industry=tech` =&gt; `/industry/tech`\n`?industry=tech&amp;date=apr-19` =&gt; `/industry/tech/date/apr19`\n`?date=apr-19` =&gt; `/date/apr19`"
  },
  {
    "poster": {
      "poster_name": "Matt",
      "poster_handle": "mtunney"
    },
    "time_stamp": "2019-05-30 07:10:53",
    "text": "Additionally, i might need to add in pagination controls if the data length is over a certain value"
  },
  {
    "poster": {
      "poster_name": "Justin",
      "poster_handle": "justin145"
    },
    "time_stamp": "2019-05-30 07:29:03",
    "text": "Ive got an Image gallery generated by HubDB with 2 filters working great. How can I get the two filters to work separately. ie. only be able to use one at a time?"
  },
  {
    "poster": {
      "poster_name": "Justin",
      "poster_handle": "justin145"
    },
    "time_stamp": "2019-05-30 07:30:12",
    "text": "It’s currently combining the two query: {% set table = hubdb_table_rows(XXXXXX, applicationquery + statequery) %}",
    "reply_count": 6,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-05-30 07:39:17"
      },
      {
        "time_stamp": "2019-05-30 08:29:02"
      },
      {
        "time_stamp": "2019-05-30 09:26:59"
      },
      {
        "time_stamp": "2019-05-30 09:44:35"
      },
      {
        "time_stamp": "2019-05-30 09:44:54"
      },
      {
        "time_stamp": "2019-05-30 13:29:11"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt",
      "poster_handle": "mtunney"
    },
    "time_stamp": "2019-05-30 07:39:17",
    "edited": {
      "time_stamp": "2019-05-30 07:43:26"
    },
    "text": "I just tried this\n```{% set applicationquery = \"\" %}\n{% set statequery = \"\" %}\n\n{% if <http://request.query_dict.app|request.query_dict.app> != \"show-all\" &amp;&amp; <http://request.query_dict.app|request.query_dict.app> is truthy %}\n    {% set applicationquery = \"&amp;app=\"~<http://request.query_dict.app|request.query_dict.app>|urlencode %}\n{% endif %}\n{% if request.query_dict.state != \"show-all\" &amp;&amp; request.query_dict.state is truthy %}\n    {% set statequery = \"&amp;state=\"~request.query_dict.state|urlencode %}\n{% endif %}\n{% set queryparam = applicationquery ~ statequery %}\n{% set table = hubdb_table_rows(dynamic_page_hubdb_table_id, queryparam)%}```\n\nand it seems to work pretty well"
  },
  {
    "poster": {
      "poster_name": "Justin",
      "poster_handle": "justin145"
    },
    "time_stamp": "2019-05-30 08:29:02",
    "text": "Awesome.. I will give it a try. Thank you so much!"
  },
  {
    "poster": {
      "poster_name": "Justin",
      "poster_handle": "justin145"
    },
    "time_stamp": "2019-05-30 09:26:59",
    "text": "SO this is still combining the 2 queries right? How can I make one “reset to View-All” if the other is used?"
  },
  {
    "poster": {
      "poster_name": "Matt",
      "poster_handle": "mtunney"
    },
    "time_stamp": "2019-05-30 09:44:35",
    "text": "As this is url params - you can generate the select to have a default option of \"Show all\""
  },
  {
    "poster": {
      "poster_name": "Matt",
      "poster_handle": "mtunney"
    },
    "time_stamp": "2019-05-30 09:44:54",
    "text": "see this tut <https://designers.HubSpot.com/docs/tutorials/how-to-build-a-real-estate-listing-with-hubdb>"
  },
  {
    "poster": {
      "poster_name": "Karan Kumar",
      "poster_handle": "karanjalendere"
    },
    "time_stamp": "2019-05-30 11:03:40",
    "text": "Is there any way to create frontend user authentication like login password in HubSpot for front end user",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-05-30 11:10:06"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Patrick Eng",
      "poster_handle": "patrick404"
    },
    "time_stamp": "2019-05-30 11:10:06",
    "text": "Like content membership? <https://www.HubSpot.com/product-updates/create-membership-content-using-marketing-hub>"
  },
  {
    "poster": {
      "poster_name": "Francois-Xavier",
      "poster_handle": "francois.x.emond.b"
    },
    "time_stamp": "2019-05-30 12:45:00",
    "text": "Hey all, first message up on slack HS. I am currently working on building a FAQ page for the people I work for. I wanted to integrate a search bar that could scrub a hubdb table (hubDB:keywords) for keywords and return a list of similar questions (hubDB:questions) with their answer(hubDB:answers) (I mostly figured out how to do that by now).\n\nWhat I am stuck on is adding a feature that will store the exact search query inside of an other hubDB table so that the Marketing team can better narrow down customer needs and properly update the FAQ page.\n\nI am not sure what method I should use OAuth 2.0 or https or API Key...\nI don't know either if such a function would be considered in:\n \"All other requests using authentication follow the standard limits.\"\nMentionned on the HubDB API Overview",
    "reply_count": 6,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-05-30 12:48:58"
      },
      {
        "time_stamp": "2019-05-30 13:11:04"
      },
      {
        "time_stamp": "2019-05-30 13:14:09"
      },
      {
        "time_stamp": "2019-05-30 13:20:30"
      },
      {
        "time_stamp": "2019-06-13 12:35:56"
      },
      {
        "time_stamp": "2019-06-13 12:37:21"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-05-30 12:48:58",
    "text": "Hey <@UJTA4DG02> welcome to the slack! Since you are going to be hiding an authenticated endpoint, you should be making these request from server. I mention this because most times people are using HubDB it’s from the front-end.  In order to protect your api key or oauth token from being exposed, we require authenticated calls to come from backend or server-side.   If this is only going to be used by a single customer, then API key is fine for this sort of thing. If it’s something you are looking to package up and let multiple customers use, then OAuth 2.0 would be better"
  },
  {
    "poster": {
      "poster_name": "Francois-Xavier",
      "poster_handle": "francois.x.emond.b"
    },
    "time_stamp": "2019-05-30 13:11:04",
    "text": "<@UFBNA9K9A> I do want the FAQ section to be on the public domain of the website, no login required.\nNow if I understand correctly, saving the search query to a HubDB Table will require authentification and hence will require a OAuth.\n\nIf I was to omit the function that saves the query for later consultation by the marketing team, I would only need regular hubl variables/macros?\n\nthanks for the quick response by the way"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-05-30 13:14:09",
    "text": "NP. Correct, getting the contents of a HubDB table does not require any authentication. Also to be clear, you can use the API key with out require any kind of user interaction, but that does mean you have to create a server (I suggest something like AWS or Google App Engine) to make that request to HubSpot"
  },
  {
    "poster": {
      "poster_name": "Francois-Xavier",
      "poster_handle": "francois.x.emond.b"
    },
    "time_stamp": "2019-05-30 13:20:30",
    "text": "Gotcha! sounds like some testing  and trials are in order! I'll see how it turns out and get back to you if I am unsuccessful"
  },
  {
    "poster": {
      "poster_name": "Justin",
      "poster_handle": "justin145"
    },
    "time_stamp": "2019-05-30 13:29:11",
    "text": "Gotcha. I had it all working as per the real estate page. Added a .change function to each select to reset the values to show all. Thanks again for your help."
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-05-30 13:41:13",
    "text": "is there any plan to have custom modules post data to hubdb?",
    "reply_count": 14,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2019-05-30 13:45:09"
      },
      {
        "time_stamp": "2019-05-30 13:49:58"
      },
      {
        "time_stamp": "2019-05-30 14:06:04"
      },
      {
        "time_stamp": "2019-05-30 14:08:03"
      },
      {
        "time_stamp": "2019-05-30 14:24:48"
      },
      {
        "time_stamp": "2019-05-30 14:25:23"
      },
      {
        "time_stamp": "2019-05-30 14:25:55"
      },
      {
        "time_stamp": "2019-05-30 14:29:00"
      },
      {
        "time_stamp": "2019-05-30 14:43:08"
      },
      {
        "time_stamp": "2019-05-30 14:51:33"
      },
      {
        "time_stamp": "2019-05-30 14:52:02"
      },
      {
        "time_stamp": "2019-05-31 06:41:55"
      },
      {
        "time_stamp": "2019-05-31 06:42:30"
      },
      {
        "time_stamp": "2019-05-31 06:48:23"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-05-30 13:45:09",
    "text": "How would you use something like this?  Generally it’s not something we want to allow because they end up on a website that anyone has access to and they could fill your HubDB table with junk."
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-05-30 13:49:58",
    "text": "For example, users would enter property data in a custom module on a property template and see it display data on the front-end.\n\nThe custom module would be only available on a specific page template (so users couldn’t randomly put it on a landing page) and fill the table with junk.\n\nIn this use case, users could see what they are entering, and then a listing page would show data from hubdb – which has been updated by the custom module."
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-05-30 14:06:04",
    "text": "honestly what could quickly solve my particular delima <@UFBNA9K9A> is a image gallery column in hubdb. Are there any plans for that?"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-05-30 14:08:03",
    "text": "Not that I know of, one thing that comes to mind as a workaround is a link to a child table where each row is a bunch of images with some max number defined by the number of columns on the child table"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-05-30 14:24:48",
    "text": "yeah, the client wants to have about 100 rows with a max of 30 images per row. A child table of 3000 rows might be a little much"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-05-30 14:25:23",
    "edited": {
      "time_stamp": "2019-05-30 14:25:40"
    },
    "text": "that would just be miles to scroll and a pain to edit"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-05-30 14:25:55",
    "text": "Yeah that’s a lot"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-05-30 14:29:00",
    "text": "I guess I’ll have to get a little old school and create a blog for this particular use case"
  },
  {
    "poster": {
      "poster_name": "Tony Strack",
      "poster_handle": "tstrack"
    },
    "time_stamp": "2019-05-30 14:43:08",
    "text": "I had this same predicament today...needed an image gallery in a HubDB table. Ended up going the blog route as well."
  },
  {
    "poster": {
      "poster_name": "James Cutler",
      "poster_handle": "jcutler"
    },
    "time_stamp": "2019-05-30 14:51:33",
    "text": "Hacky workaround - add a list of comma-separated image URLs in a text column in HubDB."
  },
  {
    "poster": {
      "poster_name": "James Cutler",
      "poster_handle": "jcutler"
    },
    "time_stamp": "2019-05-30 14:52:02",
    "text": "(For when you need to use HubDB and don't want to limit # of images)"
  },
  {
    "poster": {
      "poster_name": "Francois-Xavier",
      "poster_handle": "francois.x.emond.b"
    },
    "time_stamp": "2019-05-30 22:23:07",
    "text": "I'm curious, can a function exist and be called from a HubDB table?"
  }
]