[
  {
    "text": "Just discovered that `<https://js.hsforms.net/forms/v2.js>` is 428kb. Surely some of this code could be reduced? Actually snap of the code.",
    "time_stamp": "2019-08-19 05:07:10",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-08-19 05:23:29"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon K. Wheeler",
      "poster_handle": "jon.k.wheeler"
    },
    "time_stamp": "2019-08-19 05:23:29",
    "text": "At this point I'd hope to see forms using preact since it's like (3kb), and not an old react version. The react version is so old it still spits out react ids on the dom nodes. But that has nothing to do with that box-shadow code I'm guessing no one could justify."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-19 05:52:48",
    "text": "The vast majority of that file is localization"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-19 05:53:48",
    "text": "And becasue it is GZIPPED it is only sending \t\n115.2 KB"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-19 06:00:18",
    "text": "Actually it is not gzipped it is using  a format called Brotli . So it is only 106k"
  },
  {
    "poster": {
      "poster_name": "Jon K. Wheeler",
      "poster_handle": "jon.k.wheeler"
    },
    "time_stamp": "2019-08-19 06:38:15",
    "text": "Ahh, good to know"
  },
  {
    "poster": {
      "poster_name": "Jon K. Wheeler",
      "poster_handle": "jon.k.wheeler"
    },
    "time_stamp": "2019-08-19 06:48:41",
    "text": "Wonder how low it'd get without the bloat code though."
  },
  {
    "poster": {
      "poster_name": "Jon K. Wheeler",
      "poster_handle": "jon.k.wheeler"
    },
    "time_stamp": "2019-08-19 09:30:01",
    "edited": {
      "time_stamp": "2019-08-19 10:13:35"
    },
    "text": "Is there anyway to get around the `onFormSubmit` requiring to use jQuery (for forms)? I know I can attach a listener to the form object itself, but curious about in the embed code."
  },
  {
    "poster": {
      "poster_name": "Jon Miller",
      "poster_handle": "jon748"
    },
    "time_stamp": "2019-08-19 10:42:53",
    "text": "is there a way to exclude the default jquery files from templates in HubSpot? I don't use jquery on my end and would love to not have the resources loading for no reason (unless there is magic happening on the HS side that requires jQuery)",
    "reply_count": 11,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-08-19 10:44:39"
      },
      {
        "time_stamp": "2019-08-19 10:48:16"
      },
      {
        "time_stamp": "2019-08-19 10:48:44"
      },
      {
        "time_stamp": "2019-08-19 10:49:10"
      },
      {
        "time_stamp": "2019-08-19 10:51:16"
      },
      {
        "time_stamp": "2019-08-19 10:53:45"
      },
      {
        "time_stamp": "2019-08-19 10:54:56"
      },
      {
        "time_stamp": "2019-08-19 12:05:00"
      },
      {
        "time_stamp": "2019-08-19 12:07:33"
      },
      {
        "time_stamp": "2019-08-19 12:13:00"
      },
      {
        "time_stamp": "2019-08-19 12:13:07"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-08-19 10:44:39",
    "text": "I’m pretty sure they use it for their forms… there are a few of us who have requested this"
  },
  {
    "poster": {
      "poster_name": "Jon Miller",
      "poster_handle": "jon748"
    },
    "time_stamp": "2019-08-19 10:48:16",
    "text": "ok thanks for looping me in to that <@U3T21PDBK>"
  },
  {
    "poster": {
      "poster_name": "Jon Miller",
      "poster_handle": "jon748"
    },
    "time_stamp": "2019-08-19 10:48:44",
    "text": "do you know if it would be possible to just use the forms api and not any native HubSpot built forms as a workaround?"
  },
  {
    "poster": {
      "poster_name": "Jon Miller",
      "poster_handle": "jon748"
    },
    "time_stamp": "2019-08-19 10:49:10",
    "text": "or are we just strapped to jQuery being loaded until HS lets us ignore it?"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-08-19 10:51:16",
    "text": "I guess you could try to set jQuery to be in the footer in site settings, and then instead of using a coded template with `{{ standard_footer_includes }}`… you could just manually insert your hs tracking code (which is part of that hubL tag). I’ve never done that before… but it’s worth a shot"
  },
  {
    "poster": {
      "poster_name": "Jon Miller",
      "poster_handle": "jon748"
    },
    "time_stamp": "2019-08-19 10:53:45",
    "text": "yea I can try that. I know my CLI yells at me when I try and push any templates without the the `{{ standard_footer_includes }}` up to HubSpot. Ill give it shot. Thanks John."
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-08-19 10:54:56",
    "text": "definitely test, and test some more. I’ve never tried a template without that. let me know how it goes!"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-08-19 12:05:00",
    "edited": {
      "time_stamp": "2019-08-19 12:05:48"
    },
    "text": "thats a required thing.\nTho there is a work around:\nYou can basically cut off all you want from there like:\n`{{ standard_footer_includes|cut(\"&lt;script src...\") }}`\nYou only need to check how is exactly inside the var (you can use `pprint` for it).\nAnd ofc, double check that everything works as expected without jQuery :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-08-19 12:07:33",
    "text": "There are some possible issues to expect:\ndefault tab module and several CMs from the marketplace won't work at all as they expect to have  such version of jQuery loaded.\nBut if you have all of that under control it should be good enough"
  },
  {
    "poster": {
      "poster_name": "Jon Miller",
      "poster_handle": "jon748"
    },
    "time_stamp": "2019-08-19 12:13:00",
    "text": "<@U7ADCU3BM> but if we are putting a custom solution together then hopefully we would run into no major issues."
  },
  {
    "poster": {
      "poster_name": "Jon Miller",
      "poster_handle": "jon748"
    },
    "time_stamp": "2019-08-19 12:13:07",
    "text": "Thanks for the guidance here."
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-08-19 15:17:20",
    "edited": {
      "time_stamp": "2019-08-19 15:17:30"
    },
    "text": "Is there a way to trigger an event (i.e. add an ID) when an HS form is valid but not yet submitted?"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-08-19 15:18:23",
    "text": "I would think that it would live somewhere between 'onFormRead' and 'onFormSubmit' but...",
    "reply_count": 27,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-08-19 16:22:45"
      },
      {
        "time_stamp": "2019-08-19 17:55:09"
      },
      {
        "time_stamp": "2019-08-19 17:57:18"
      },
      {
        "time_stamp": "2019-08-19 17:57:24"
      },
      {
        "time_stamp": "2019-08-19 17:58:19"
      },
      {
        "time_stamp": "2019-08-19 17:58:28"
      },
      {
        "time_stamp": "2019-08-19 17:59:26"
      },
      {
        "time_stamp": "2019-08-19 18:01:22"
      },
      {
        "time_stamp": "2019-08-19 18:02:02"
      },
      {
        "time_stamp": "2019-08-19 18:03:56"
      },
      {
        "time_stamp": "2019-08-19 18:03:59"
      },
      {
        "time_stamp": "2019-08-19 18:08:40"
      },
      {
        "time_stamp": "2019-08-19 18:17:31"
      },
      {
        "time_stamp": "2019-08-19 18:18:14"
      },
      {
        "time_stamp": "2019-08-19 18:20:08"
      },
      {
        "time_stamp": "2019-08-19 18:20:38"
      },
      {
        "time_stamp": "2019-08-19 18:27:31"
      },
      {
        "time_stamp": "2019-08-19 18:28:08"
      },
      {
        "time_stamp": "2019-08-19 18:28:38"
      },
      {
        "time_stamp": "2019-08-19 18:41:10"
      },
      {
        "time_stamp": "2019-08-19 18:41:18"
      },
      {
        "time_stamp": "2019-08-19 18:41:26"
      },
      {
        "time_stamp": "2019-08-19 18:52:25"
      },
      {
        "time_stamp": "2019-08-19 19:15:45"
      },
      {
        "time_stamp": "2019-08-19 19:29:21"
      },
      {
        "time_stamp": "2019-08-19 19:29:57"
      },
      {
        "time_stamp": "2019-08-19 19:33:07"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-08-19 16:22:45",
    "text": "So would this be before the submit button is pressed?"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-08-19 17:55:09",
    "text": "In my mind, yes -- in sync with the form validation (if form is valid then do this)"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-08-19 17:57:18",
    "text": "Gotcha, the only way to do that is to check when each of the fields lose focus and see if they are all valid. Otherwise we won't know when they are done filling out the form other than hitting the submit button"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-08-19 17:57:24",
    "text": "gotchya"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-08-19 17:58:19",
    "text": "All of these issues are stemming from the challenge of triggering a workflow on form submit on a dynamically generated page, fyi -- same project as what we chatted about earlier today"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-08-19 17:58:28",
    "text": "It's.... been an interesting experience finding a workaround"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-08-19 17:59:26",
    "text": "Gotcha, any reason you couldn't wait for the form to be submitted? That seems like it would be simpler"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-08-19 18:01:22",
    "text": "We have to check submission on a per-unique-page basis so that the contact is sent down a specific pipeline per dynamic page generated that has a form"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-08-19 18:02:02",
    "text": "there isn't currently a way to select dynamic pages within the workflow interface (or dump in hard URLs to force it to check for that trigger)"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-08-19 18:03:56",
    "edited": {
      "time_stamp": "2019-08-19 18:05:29"
    },
    "text": "I've ended up creating an event per-dynamic-gated-page with a unique #ID per page wrapped around the form , catching the onFormSubmitted &amp;&amp; callback wrapping the event trigger in the 'Custom Trigger' option in events --- and then we are selecting the Event within the workflow to tirgger the workflow"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-08-19 18:03:59",
    "text": ":joy:"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-08-19 18:08:40",
    "text": "You could also set a hidden field on the form as the page is generated. Either add a column or reuse one to track which page you are on"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-08-19 18:17:31",
    "text": "That would still result in needing to set a custom trigger within an event, yes?"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-08-19 18:18:14",
    "text": "unfortunately the workflow trigger within the form params doesn't work within custom modules, so that is unavailable."
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-08-19 18:20:08",
    "text": "Hmm maybe I don't know what you mean by event. This solution won't need a trigger for Enterprise events. It will be the using contact property equal to x"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-08-19 18:20:38",
    "text": "It would need to be set up from the workflows tool, not from the form or the module"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-08-19 18:27:31",
    "text": ":neutral_face: would that be something set using contact properties from within the workflow options?"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-08-19 18:28:08",
    "text": "As part of the criteria of the workflow"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-08-19 18:28:38",
    "text": "So contact submitted form x with contact property of page name equal to y"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-08-19 18:41:10",
    "text": "I'll have to look into this"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-08-19 18:41:18",
    "text": "thanks for the thoughts on it!"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-08-19 18:41:26",
    "text": "No problem"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-08-19 18:52:25",
    "text": "Okay -- spoke with one of my people who manages the contact properties a bit more closely - her concern on that is that if they go to another page for another resource download before the full trigger occurs (in the case of a lag) that property will be overwritten and thus will never fire the workflow enrollment"
  },
  {
    "poster": {
      "poster_name": "Maria Filipe",
      "poster_handle": "maria.filipe"
    },
    "time_stamp": "2019-08-19 19:15:45",
    "edited": {
      "time_stamp": "2019-08-19 19:17:51"
    },
    "text": "Maybe I'm a bit off use case (not a developer, but developing...) , but would appending the value to the property work? We're not using dynamic generated pages, but have done this with our event pages - onFormReady we set the value of 3 hidden fields (3 different properties) with: last event registered code (holds most recent value); events registered (appends the code to a string of all events the contact registered for); timestamp. The \"code\" is unique, compiled per page and we then use it in lists, workflows, etc."
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-08-19 19:29:21",
    "text": "hm"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-08-19 19:29:57",
    "text": "I'll take a look at that and do some testing with these thoughts. This is a bit outside my normal playground, but hey! Learning and whatnot!"
  },
  {
    "poster": {
      "poster_name": "Maria Filipe",
      "poster_handle": "maria.filipe"
    },
    "time_stamp": "2019-08-19 19:33:07",
    "text": "the universe is our playground :slightly_smiling_face:  Hope it helps you, even if it just triggers another way to achieve what you need"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-19 20:59:55",
    "text": "<@UDFTHC6PK> `$('input:valid')`",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-08-19 21:16:58"
      },
      {
        "time_stamp": "2019-08-19 21:17:19"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-08-19 21:16:58",
    "text": ":neutral_face: night owls :wink:"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-08-19 21:17:19",
    "text": ":slightly_smiling_face:"
  }
]