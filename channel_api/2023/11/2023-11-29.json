[
  {
    "poster": {
      "poster_name": "Clare F.",
      "poster_handle": "clare"
    },
    "time_stamp": "2023-11-29 06:25:02",
    "text": "So I'm looking for a way to take the `MAX` of multiple dates and wondering if anyone has any ideas. Either a custom formula or custom code would work. I'm looking to achieve something like this with probably six or seven dates (`OR` if for booleans, but hopefully the formula makes sense otherwise):\n\n```( MAX ( [properties.hs_latest_sequence_enrolled_date] , [properties.hs_sales_email_last_clicked] )) OR ( MAX ( [properties.hs_sales_email_last_opened] ,  [properties.hs_email_last_open_date] ))```",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-11-29 08:30:09"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Pete Nicholls (HubDo)",
      "poster_handle": "pete970"
    },
    "time_stamp": "2023-11-29 07:06:35",
    "text": "Also agree 100% - I’ve seen your tips on that for pulling a ton of objects. Luckily we haven’t faced that as yet, and hopefully won’t unless we start doing migrations."
  },
  {
    "poster": {
      "poster_name": "Colton Watson",
      "poster_handle": "cwatson"
    },
    "time_stamp": "2023-11-29 07:23:07",
    "text": "How are new updates on previously merged records handled? Contact A is merged into Contact B to become Contact B. Contact A is pushed a new property update or Deal from external db. Does that route properly to Contact B to update the new primary record?",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-11-29 08:32:15"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 07:28:00",
    "text": "Cool cool, let me know if you need help setting it up in the future"
  },
  {
    "poster": {
      "poster_name": "Casper Kraken (HubDo)",
      "poster_handle": "casper928"
    },
    "time_stamp": "2023-11-29 07:28:32",
    "text": "Thank you very much Carter, will do for sure when this issue comes up :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Andriy",
      "poster_handle": "andriy.prots94"
    },
    "time_stamp": "2023-11-29 08:23:21",
    "text": "Hi,\n• i create a new field  - <https://prnt.sc/UEdkmUMg9qoP>\n• then created a new order with a new field - <https://prnt.sc/TlfUGE8bM6jk>\nBut I don't see this value in your system - <https://prnt.sc/QEp2EN2fu3W->\nWhy?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-11-29 08:30:09",
    "text": "not sure what language this is as this is in api. \n\nin javascript <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max|https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max>\n\nsuper simple. whatever language you are using should have this. \n\nif this is hubl, not sure if there is filter. however the formula would be looping through and whatever number is &gt; all numbers would be the max. \n\nif dates were before 1970 or whenever datetimestamps go to negative , this should still work as the most date in the future \n\nyou would want to compare the timestamp not the date string. "
  },
  {
    "poster": {
      "poster_name": "Andriy",
      "poster_handle": "andriy.prots94"
    },
    "time_stamp": "2023-11-29 08:31:28",
    "text": "2. Second question\nHow to add line_items to the deals through the API ?\nMaybe you use: Swagger || ReDoc || Postman Collections?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-11-29 08:32:15",
    "text": "are you updating this via contact ids and storing them in a system/db? if so you’d need to verify that the contact id is the same record. \n\nmight be easier via email if you have merges. \n\ni have no clue what you are actually doing with these updates, how they are getting merged etc. this is about vague answer for a vague question "
  },
  {
    "poster": {
      "poster_name": "Andriy",
      "poster_handle": "andriy.prots94"
    },
    "time_stamp": "2023-11-29 08:33:06",
    "text": "1. Fist question - is no longer relevant, i find - <https://prnt.sc/FoneS_xIP9tD>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-11-29 08:35:59",
    "text": "glad you solved that first one. i think you should spend a bit more time reading through documentation, personally. you are asking how to do things without even attempting them. \n\nthe documentation reference pages help you build out the queries on the page by adding your authorization. then you have curl and other related instructions on how to build these. \n\nas far as how you should do them, that is up to you. i’d do it in the code while creating the deals. "
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-11-29 08:37:11",
    "text": "good idea carter i’ve seen you mention that before and wish I would’ve remembered that four weeks ago"
  },
  {
    "poster": {
      "poster_name": "Andriy",
      "poster_handle": "andriy.prots94"
    },
    "time_stamp": "2023-11-29 08:39:29",
    "text": "Do you use: Swagger || ReDoc || Postman Collections?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 09:11:16",
    "text": "I wish there was that would be really cool"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-11-29 09:25:17",
    "text": " no. i prefer using axios. i tend to avoid packages if possible now.\n\ni dislike how postman collections are brought in and organized. i just create my own. \n\ni use postman for initial api testing sometimes coupled with local dev or an online repl account to get my calls set up from postman, set up paging,more results, filtering responses. then move those to production code. \n\nthat’s just my workflow now. i’ve had dozens of different ways over the years.  i used to test things in a terminal and make curl requests. \n\ni love online repls because i can spin up something quickly and it doesn’t mess up my repo folder. i work with a lot of crappy apis and sometimes need an easy way to share screen etc. this just allows me to do that nicely. \n"
  },
  {
    "text": "How can I obtain the items ordered from a deal?",
    "time_stamp": "2023-11-29 09:48:45",
    "edited": {
      "time_stamp": "2023-11-29 09:49:16"
    },
    "reply_count": 5,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-11-29 09:49:33"
      },
      {
        "time_stamp": "2023-11-29 09:50:24"
      },
      {
        "time_stamp": "2023-11-29 09:50:40"
      },
      {
        "time_stamp": "2023-11-29 09:53:47"
      },
      {
        "time_stamp": "2023-11-29 09:57:15"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 09:49:33",
    "text": "Specifically the line items in order?"
  },
  {
    "text": "You can use the line item search api to get the line items for a particular deal id:",
    "time_stamp": "2023-11-29 09:50:24"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 09:50:40",
    "text": "Using the search through associations: <https://developers.HubSpot.com/docs/api/crm/search#search-through-associations>"
  },
  {
    "poster": {
      "poster_name": "Carlos Rodriguez",
      "poster_handle": "crodriguez952"
    },
    "time_stamp": "2023-11-29 09:53:47",
    "text": "thanks"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 09:57:15",
    "text": "of course bro"
  },
  {
    "text": "Had a nice rate limiting workaround for custom coded workflows if anyone is interested - use the random split branch and short delays to feed records into the custom coded workflows. Bit of a hack, but it’s pretty easy. Thought I’d share in case anyone searches for API rate limits.",
    "time_stamp": "2023-11-29 10:00:43",
    "reply_count": 12,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-11-29 10:07:33"
      },
      {
        "time_stamp": "2023-11-29 10:08:21"
      },
      {
        "time_stamp": "2023-11-29 10:09:01"
      },
      {
        "time_stamp": "2023-11-29 10:09:32"
      },
      {
        "time_stamp": "2023-11-29 10:09:33"
      },
      {
        "time_stamp": "2023-11-29 10:10:39"
      },
      {
        "time_stamp": "2023-11-29 10:11:14"
      },
      {
        "time_stamp": "2023-11-29 10:12:01"
      },
      {
        "time_stamp": "2023-11-29 10:15:05"
      },
      {
        "time_stamp": "2023-11-29 10:18:25"
      },
      {
        "time_stamp": "2023-11-29 10:18:48"
      },
      {
        "time_stamp": "2023-11-29 10:21:46"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 10:07:33",
    "text": "Yeah this is kinda the classic hacky way around the rate limiting"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 10:08:21",
    "text": "The better way is using the throw error in the catch statements so that the workflow action will retry automatically with exponential backoff"
  },
  {
    "poster": {
      "poster_name": "Parker Short",
      "poster_handle": "parker"
    },
    "time_stamp": "2023-11-29 10:09:01",
    "text": "I tried that and couldn’t tell that anything ever got retried."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 10:09:32",
    "text": "Do you have your code? there's possibly a problem with it"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 10:09:33",
    "edited": {
      "time_stamp": "2023-11-29 10:09:50"
    },
    "text": "```Please note: if the call fails due to a rate limiting error, or a 429 or 5XX error from axios or @HubSpot/api-client, HubSpot will reattempt to execute your action for up to three days, starting one minute after failure. Subsequent failures will be retried at increasing intervals, with a maximum gap of eight hours between tries.```"
  },
  {
    "poster": {
      "poster_name": "Parker Short",
      "poster_handle": "parker"
    },
    "time_stamp": "2023-11-29 10:10:39",
    "text": "sure"
  },
  {
    "poster": {
      "poster_name": "Parker Short",
      "poster_handle": "parker"
    },
    "time_stamp": "2023-11-29 10:11:14",
    "text": "```const HubSpot = require('@HubSpot/api-client');\n\nexports.main = async (event, callback) =&gt; {\n    const dealId = event.inputFields['hs_object_id'];\n    const codeNames = [\n        { userKey: 'HubSpot_owner_id', codeKey: 'deal_owner_sales_code' },\n    ];\n\n    let dealUsers = [];\n    codeNames.forEach(codeName =&gt; {\n        let ownerId = event.inputFields[codeName.userKey];\n        if (ownerId) {\n            dealUsers.push({ ownerId, propertyName: codeName.codeKey });\n        }\n    });\n\n    const HubSpotClient = new HubSpot.Client({ accessToken: process.env.hapikey });\n\n    dealUsers.forEach(dealUser =&gt; {\n        setSalesCode(HubSpotClient, dealUser.ownerId, dealUser.propertyName, dealId);\n    });\n}\n\nasync function setSalesCode(HubSpotClient, ownerId, propertyName, dealId) {\n    try {\n        const tableIdOrName = 'sales_codes';\n        const ownerResponse = await HubSpotClient.apiRequest({\n            method: 'GET',\n            path: `/crm/v3/owners/${ownerId}?archived=false`\n        });\n\n        if (!ownerResponse.ok) {\n            throw new Error('Failed to fetch owner data');\n        }\n\n        const ownerData = await ownerResponse.json();\n        if (!ownerData) return;\n\n        const { email } = ownerData;\n        const salesCodeResponse = await HubSpotClient.apiRequest({\n            method: 'GET',\n            path: `/cms/v3/hubdb/tables/${tableIdOrName}/rows?properties=codes&amp;limit=10&amp;email_address=${email}`\n        });\n\n        if (!salesCodeResponse.ok) {\n            throw new Error('Failed to fetch sales code data');\n        }\n\n        const salesCodeData = await salesCodeResponse.json();\n        if (!salesCodeData || salesCodeData.total !== 1) return;\n\n        const [result] = salesCodeData.results;\n        if (!result) return;\n\n        const code = result.values.codes;\n        if (!code) return;\n\n        await HubSpotClient.crm.deals.basicApi.update(dealId, {\n            properties: {\n                [propertyName]: code\n            }\n        });\n    } catch (error) {\n        console.error('Error setting sales code:', error);\nthrow error;\n    }\n}```\n"
  },
  {
    "poster": {
      "poster_name": "Parker Short",
      "poster_handle": "parker"
    },
    "time_stamp": "2023-11-29 10:12:01",
    "text": "I played around on the error piece for quite a while, and had lists set up to keep an eye on it, and it never went down after the initial workflow run"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 10:15:05",
    "text": "Interesting, yeah it looks like your code is setup correctly"
  },
  {
    "text": "How strange... I just did a test and it's working... it didn't work previously :(",
    "time_stamp": "2023-11-29 10:15:43"
  },
  {
    "poster": {
      "poster_name": "Adan Camacho",
      "poster_handle": "adanc"
    },
    "time_stamp": "2023-11-29 10:15:59",
    "text": "Thanks very much buddy!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 10:16:15",
    "text": "of course bro"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 10:16:22",
    "text": "good work!"
  },
  {
    "poster": {
      "poster_name": "Adan Camacho",
      "poster_handle": "adanc"
    },
    "time_stamp": "2023-11-29 10:16:40",
    "text": ":sunglasses:"
  },
  {
    "poster": {
      "poster_name": "Parker Short",
      "poster_handle": "parker"
    },
    "time_stamp": "2023-11-29 10:18:25",
    "text": "I found that whole process to be pretty confusing. The record would “Complete” the workflow even though it had been rate-limited in the custom code piece. Seems like it should work more like a delay block if it gets rate limited"
  },
  {
    "poster": {
      "poster_name": "Parker Short",
      "poster_handle": "parker"
    },
    "time_stamp": "2023-11-29 10:18:48",
    "text": "might’ve been an issue with multiple HubSpot API calls is my guess, but the retry thing didn’t work for me"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 10:21:46",
    "text": "Yeah very interesting, I'll keep a look out for similar issues"
  },
  {
    "text": "Has anyone been able to create a quota via API on node?\n\nI receive error 500 and no explanations",
    "time_stamp": "2023-11-29 12:08:05"
  },
  {
    "poster": {
      "poster_name": "Giacomo G",
      "poster_handle": "giacomo.g"
    },
    "time_stamp": "2023-11-29 12:26:53",
    "text": "This thing is driving me crazy, since I do not find any documented working example to follow to create a quote through API in Node",
    "reply_count": 11,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-11-29 13:22:58"
      },
      {
        "time_stamp": "2023-11-29 13:23:24"
      },
      {
        "time_stamp": "2023-11-30 07:22:34"
      },
      {
        "time_stamp": "2023-11-30 07:25:56"
      },
      {
        "time_stamp": "2023-11-30 09:33:40"
      },
      {
        "time_stamp": "2023-11-30 09:39:03"
      },
      {
        "time_stamp": "2023-11-30 09:47:50"
      },
      {
        "time_stamp": "2023-12-01 10:17:53"
      },
      {
        "time_stamp": "2023-12-02 23:26:18"
      },
      {
        "time_stamp": "2023-12-02 23:26:37"
      },
      {
        "time_stamp": "2023-12-02 23:27:22"
      }
    ]
  },
  {
    "text": "Was this a random error or was this clear intent to 'get' my contact list? HELP! Why would this request url come through as the first API Call from an affiliate who is supposed to be importing leads to my HubSpot crm? Does this Request URL mean they input that on their end? Which means they essentially attempted to get my contact list?\nMETHOD: GET  REQUEST URL /contactslistseg/v1/lists/all/contacts/all\n\nThey were only granted crm.objects.contacts.write   so they did not have permissions to do this, but I'm just trying to wrap my head around this. Please help me out, thanks!",
    "time_stamp": "2023-11-29 12:54:32",
    "reply_count": 8,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-11-29 13:25:10"
      },
      {
        "time_stamp": "2023-11-29 13:25:32"
      },
      {
        "time_stamp": "2023-11-29 13:25:46"
      },
      {
        "time_stamp": "2023-11-29 13:25:57"
      },
      {
        "time_stamp": "2023-11-29 13:26:34"
      },
      {
        "time_stamp": "2023-11-29 13:27:21"
      },
      {
        "time_stamp": "2023-11-29 15:48:33"
      },
      {
        "time_stamp": "2023-11-29 15:52:33"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 13:22:58",
    "text": "I personally haven't created a quote using the SDK before just through the endpoints directly with Axios"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 13:23:24",
    "text": "The code in the docs worked great for me, the Curl code into Postman, and then the generate axios code in postman"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 13:25:10",
    "text": "Yeah that is an attempt to get a list of contacts. <https://legacydocs.HubSpot.com/docs/methods/lists/get_list_contacts>"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 13:25:32",
    "text": "but the endpoint is all messed up, looks like they forgot / in a couple of places"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 13:25:46",
    "text": "you also have to use a list id, which I would assume they don't have"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 13:25:57",
    "text": "list_ids will be a numberic"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 13:26:34",
    "text": "I would be very very careful about handing out private access tokens to people that aren't direct employees"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 13:27:21",
    "text": "what's the end goal? what are you trying to accomplish? There's probably a better way to do things that doesn't involve giving someone your keys"
  },
  {
    "poster": {
      "poster_name": "Joshua Klein",
      "poster_handle": "klein.joshua.a"
    },
    "time_stamp": "2023-11-29 14:24:50",
    "text": "hi - have a more broad/open ended question (I'm new to HubSpot) - is there a way to dump events out of HubSpot to a 3rd party analytics tool? Is this the right API for doing that? <https://developers.HubSpot.com/docs/api/events/web-analytics>",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-11-29 14:47:15"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Dawid Kokoszka",
      "poster_handle": "dawid.kokoszka"
    },
    "time_stamp": "2023-11-29 14:25:21",
    "text": "ok, I got the expected result, but I have another issue now. All test calls have been made via Postman and when I try to fetch data via browser there is a CORS origin issue there.\n\nIs it not possible to make calls directly from the website via JS?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 14:47:15",
    "text": "So, HubSpot has a lot of different types of events (some have APIs and some don't), and usually, each has a separate API. Which event type are you trying to export?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-11-29 14:54:37",
    "text": "ya. you need a serverless function to hit the api. it won’t work through the browser. \n\nonly form submission api will allow a browser call"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-11-29 14:55:18",
    "text": "the idea is that you publicly expose your api key by having it in the browser. any smart person can inspect code and find your api keys and cause havoc "
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-11-29 14:55:39",
    "text": "that’s why you put it in the backend, where you can hide api keys"
  },
  {
    "poster": {
      "poster_name": "Tyler Samani-Sprunk",
      "poster_handle": "tyler594"
    },
    "time_stamp": "2023-11-29 15:41:53",
    "text": "Does anyone know of a way to get the line items associated with a payment via API?",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-11-29 16:00:39"
      },
      {
        "time_stamp": "2023-11-29 16:01:47"
      },
      {
        "time_stamp": "2023-11-29 16:07:45"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Mike",
      "poster_handle": "info909"
    },
    "time_stamp": "2023-11-29 15:48:33",
    "text": "Leads who opt in through their opt in/landing page, are to import into my crm. Essentially they are referring me leads, but specifically the goal is to import the opt is as they come in through their landing page, into my crm, so I can call them and sell them my services."
  },
  {
    "poster": {
      "poster_name": "Somdeb Mukherjee",
      "poster_handle": "somdeb2007"
    },
    "time_stamp": "2023-11-29 15:48:51",
    "text": "Hello All,\n\nI am trying to create an API integration with HubSpot using Python.\n\nWas able to successfully Hit the API and get back contacts data but output shows only few fields.\nHere is my code so far:\nfrom HubSpot import HubSpot\nfrom HubSpot.crm.objects import ApiException\n\napi_client = HubSpot()\napi_client.access_token = '***-***-********-****-****-****-************'\ntry:\n   all_contacts = api_client.crm.contacts.get_all()\n   for itm in all_contacts:\n       print(itm)\nexcept ApiException as e:\n   print(\"Exception when requesting custom objects: %s\\n\" % e)\n\nOutput JSON has only 13 fields, I need to see 57 fields.\n\nAny inputs/tips/help in solving this will really be much appriciated.",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-11-29 16:02:52"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Mike",
      "poster_handle": "info909"
    },
    "time_stamp": "2023-11-29 15:52:33",
    "text": "thanks for the responses I appreciate it. What better option is there? From my experience Api was usually the best way to go, but we could do Zapier, in that case wouldn't they still need my login?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-11-29 16:00:39",
    "text": "do the line items show up on a deal? i haven’t messed around with payments or know what/if the api exists. quick google and there is no payments api that i see. if it is on the deal then the line item api should work with the associated deal"
  },
  {
    "poster": {
      "poster_name": "Tyler Samani-Sprunk",
      "poster_handle": "tyler594"
    },
    "time_stamp": "2023-11-29 16:01:47",
    "text": "Nope, that's the issue. I need to get them from the payment and update an existing deal."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-11-29 16:02:52",
    "text": "you can add a properties to that, not sure how to do in python but the docs should help maybe. \n\ngenerally the way to go is to get contacts, then loop through the result and call an individual contact and ask for the 57 properties you need. \n\n<https://developers.HubSpot.com/docs/api/crm/contacts|https://developers.HubSpot.com/docs/api/crm/contacts>"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-11-29 16:07:45",
    "text": "let me talk to someone and see what they know. if anyone else knows go ahead!"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2023-11-29 20:00:02",
    "text": "are private apps not allowed to access *`/crm/v3/objects/products` api?*",
    "reply_count": 10,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-11-29 20:01:56"
      },
      {
        "time_stamp": "2023-11-29 20:01:59"
      },
      {
        "time_stamp": "2023-11-29 20:02:12"
      },
      {
        "time_stamp": "2023-11-29 20:03:02"
      },
      {
        "time_stamp": "2023-11-29 20:04:11"
      },
      {
        "time_stamp": "2023-11-29 20:05:43"
      },
      {
        "time_stamp": "2023-11-29 20:06:19"
      },
      {
        "time_stamp": "2023-11-29 20:06:28"
      },
      {
        "time_stamp": "2023-11-29 20:06:58"
      },
      {
        "time_stamp": "2023-11-29 23:40:52"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 20:01:56",
    "text": "They are"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 20:01:59",
    "text": "e-commerce scope"
  },
  {
    "text": "",
    "time_stamp": "2023-11-29 20:02:12"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-11-29 20:03:02",
    "text": ":wave: "
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 20:04:11",
    "text": ":hotdog:"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2023-11-29 20:05:43",
    "text": "dope. I didn’t save the postman auth :man-facepalming::skin-tone-2: on the parent… then got an error that said auth is OAuth 2.0"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 20:06:19",
    "text": "you're good bro, just disappointed that you broke the emoji chain"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-11-29 20:06:28",
    "text": "haha"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2023-11-29 20:06:58",
    "text": ":melting_face:"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2023-11-29 23:40:52",
    "text": "hahahahahaha what a good way to end my night. "
  },
  {
    "poster": {
      "poster_name": "Dawid Kokoszka",
      "poster_handle": "dawid.kokoszka"
    },
    "time_stamp": "2023-11-30 00:25:24",
    "text": "I understand, but this is too much - I created a private site in HS and I would like to have a module that I can put there, and this module has inside its own JS scope the logic to query the API - is it impossible?"
  }
]