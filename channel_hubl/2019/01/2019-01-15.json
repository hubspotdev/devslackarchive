[
  null,
  {
    "poster": {
      "poster_name": "Chris Knowles",
      "poster_handle": "chris618"
    },
    "time_stamp": "2019-01-15 05:40:26",
    "text": "Is there a function I can use instead of 'blog_recent_posts' which doesn't have a 200 post limit?",
    "reply_count": 5,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-01-15 06:30:00"
      },
      {
        "time_stamp": "2019-01-15 06:43:27"
      },
      {
        "time_stamp": "2019-01-15 06:45:05"
      },
      {
        "time_stamp": "2019-01-15 06:50:01"
      },
      {
        "time_stamp": "2019-01-15 08:04:31"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-01-15 05:52:28",
    "edited": {
      "time_stamp": "2019-01-15 05:55:39"
    },
    "text": "I'm rendering out the post content in an articles page just need to add the first keyword to the title tag"
  },
  {
    "poster": {
      "poster_name": "Ben John Bagley",
      "poster_handle": "ben371"
    },
    "time_stamp": "2019-01-15 05:55:54",
    "text": "Just noticed the title is already there"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-01-15 06:30:00",
    "text": "I think you have to use the api for that"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-01-15 06:30:42",
    "text": "is there a native hubl function to get a list of all pages? even drafts and content staging? or do I have to use the api?",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-01-15 07:05:45"
      },
      {
        "time_stamp": "2019-01-15 07:06:17"
      },
      {
        "time_stamp": "2019-01-15 07:14:29"
      },
      {
        "time_stamp": "2019-01-15 07:15:02"
      }
    ]
  },
  null,
  {
    "poster": {
      "poster_name": "Umakant - MakeWebBetter",
      "poster_handle": "umakantsharma"
    },
    "time_stamp": "2019-01-15 06:43:27",
    "text": "yes you have to use the api for that <@UFB9AJJMA> i think, as there is no function i found to get posts without post limit\n<https://designers.HubSpot.com/en/docs/hubl/hubl-supported-functions>"
  },
  {
    "poster": {
      "poster_name": "Chris Knowles",
      "poster_handle": "chris618"
    },
    "time_stamp": "2019-01-15 06:45:05",
    "text": "Thanks both"
  },
  {
    "poster": {
      "poster_name": "Umakant - MakeWebBetter",
      "poster_handle": "umakantsharma"
    },
    "time_stamp": "2019-01-15 06:50:01",
    "edited": {
      "time_stamp": "2019-01-15 06:50:20"
    },
    "text": "this api endpoint will work for you <@UFB9AJJMA> <https://developers.HubSpot.com/docs/methods/blogv2/get_blog_posts>"
  },
  {
    "poster": {
      "poster_name": "Shawn Bristow",
      "poster_handle": "captshawn"
    },
    "time_stamp": "2019-01-15 07:04:22",
    "text": "What is your Hub ID <@UEZ3125LL>?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-15 07:05:45",
    "text": "think you’re going to need the API for that"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-15 07:06:17",
    "text": "I don’t know of even a way to loop through pages without creating a manual function that you’d need to know all of the page ID’s for"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-01-15 07:14:29",
    "text": "yeah, I think you’re right. I was hoping someone from HS would chime in and go, “well, actually there is a beta function that… ” haha."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-15 07:15:02",
    "text": "haha, gotta say, that does happen fairly often"
  },
  null,
  null,
  {
    "poster": {
      "poster_name": "Josh Saunders",
      "poster_handle": "jsaunders"
    },
    "time_stamp": "2019-01-15 07:50:35",
    "text": "<@U22PNRAJD> 5163161 Thx!"
  },
  null,
  {
    "poster": {
      "poster_name": "Chris Knowles",
      "poster_handle": "chris618"
    },
    "time_stamp": "2019-01-15 08:04:31",
    "text": "Thank Umakant. Just a thought on this, if I was using a blog template would the core functionality still have the 200 post limit?"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2019-01-15 08:13:56",
    "edited": {
      "time_stamp": "2019-01-15 08:14:35"
    },
    "text": "Is there a way to know how meta are auto filled by HubSpot ? (author, description, og:description, twitter:description, twitter:title)\nIn which template ? And is it possible to update them ?",
    "reply_count": 33,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-01-15 08:18:32"
      },
      {
        "time_stamp": "2019-01-15 08:19:01"
      },
      {
        "time_stamp": "2019-01-15 08:19:21"
      },
      {
        "time_stamp": "2019-01-15 08:20:02"
      },
      {
        "time_stamp": "2019-01-15 08:21:35"
      },
      {
        "time_stamp": "2019-01-15 08:21:57"
      },
      {
        "time_stamp": "2019-01-15 08:22:49"
      },
      {
        "time_stamp": "2019-01-15 08:23:25"
      },
      {
        "time_stamp": "2019-01-15 08:23:39"
      },
      {
        "time_stamp": "2019-01-15 08:30:12"
      },
      {
        "time_stamp": "2019-01-15 08:33:21"
      },
      {
        "time_stamp": "2019-01-15 08:34:07"
      },
      {
        "time_stamp": "2019-01-15 08:34:21"
      },
      {
        "time_stamp": "2019-01-15 08:34:35"
      },
      {
        "time_stamp": "2019-01-15 08:35:32"
      },
      {
        "time_stamp": "2019-01-15 08:35:51"
      },
      {
        "time_stamp": "2019-01-15 08:36:08"
      },
      {
        "time_stamp": "2019-01-15 08:36:34"
      },
      {
        "time_stamp": "2019-01-15 08:37:01"
      },
      {
        "time_stamp": "2019-01-15 08:37:21"
      },
      {
        "time_stamp": "2019-01-15 08:37:25"
      },
      {
        "time_stamp": "2019-01-15 08:37:47"
      },
      {
        "time_stamp": "2019-01-15 08:38:06"
      },
      {
        "time_stamp": "2019-01-15 08:38:45"
      },
      {
        "time_stamp": "2019-01-15 08:40:09"
      },
      {
        "time_stamp": "2019-01-15 08:40:50"
      },
      {
        "time_stamp": "2019-01-15 08:41:12"
      },
      {
        "time_stamp": "2019-01-15 08:44:36"
      },
      {
        "time_stamp": "2019-01-15 08:44:51"
      },
      {
        "time_stamp": "2019-01-15 08:44:54"
      },
      {
        "time_stamp": "2019-01-15 08:45:58"
      },
      {
        "time_stamp": "2019-01-15 08:46:20"
      },
      {
        "time_stamp": "2019-01-15 08:53:01"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Chris Abplanalp",
      "poster_handle": "cabplanalp"
    },
    "time_stamp": "2019-01-15 08:15:23",
    "text": "Is there a “Help Text” parameter for custom Blog template fields using “export_to_template_context=True”, I am adding a choice field to my Blog post template and wanted to add some Help Text, I do not see in the documentation here: <https://designers.HubSpot.com/docs/hubl/export-to-template-context> with a parameter for help text just default text, it would be helpful.",
    "reply_count": 14,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-01-15 08:17:48"
      },
      {
        "time_stamp": "2019-01-15 08:26:11"
      },
      {
        "time_stamp": "2019-01-15 08:27:01"
      },
      {
        "time_stamp": "2019-01-15 08:34:37"
      },
      {
        "time_stamp": "2019-01-15 08:35:00"
      },
      {
        "time_stamp": "2019-01-15 09:27:39"
      },
      {
        "time_stamp": "2019-01-15 09:28:48"
      },
      {
        "time_stamp": "2019-01-15 09:29:03"
      },
      {
        "time_stamp": "2019-01-15 09:29:13"
      },
      {
        "time_stamp": "2019-01-15 09:29:33"
      },
      {
        "time_stamp": "2019-01-15 09:31:10"
      },
      {
        "time_stamp": "2019-01-15 09:31:46"
      },
      {
        "time_stamp": "2019-01-15 09:37:10"
      },
      {
        "time_stamp": "2019-01-15 09:40:15"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-15 08:17:48",
    "text": "No unfortunately not\n\nYou can specify helptext if you use a custom module though"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-15 08:18:32",
    "text": "author is set by blog post setting author.\ntwitter photo is the featured image, description is meta description setting in post setting."
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2019-01-15 08:19:01",
    "text": "Thanks <@U7SL518D6> for your quick answer"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2019-01-15 08:19:21",
    "text": "My problem is that I want to custom these fields"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2019-01-15 08:20:02",
    "text": "to improve SEO but I don't have to possibility to define them on a template, don't I ?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-15 08:21:35",
    "text": "we can’t customize them really except through HS’s interface(the settings tab of the page or post). With HubDB dynamic pages the HS team posted just yesterday a solution for managing meta info via HubDB for those pages. (it’s unreleased at this time)"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2019-01-15 08:21:57",
    "text": ":disappointed:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-15 08:22:49",
    "text": "I know the SEO stuff is something they’re actively working on, I don’t think they want to give up control completely however since they have the ability to do smart things to automatically improve SEO for some pages."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-15 08:23:25",
    "text": "<@U2H3TT8F2> created <#CF540P856|seo> where he’s posted an article on some problems and solutions to HS seo stuff"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2019-01-15 08:23:39",
    "text": "I will check Thanks"
  },
  {
    "poster": {
      "poster_name": "Chris Abplanalp",
      "poster_handle": "cabplanalp"
    },
    "time_stamp": "2019-01-15 08:26:11",
    "text": "<@U7SL518D6>, thanks but we have a pretty elaborate setup using custom fields for blog templates and then custom modules pulling in those fields to a somewhat feed type page from multiple blogs, so we are setting fields for marketing to edit in the Blog posts, so its all in one spot for them. Just thought there was maybe an parameter option I was missing, we will just have to communicate the purpose of the fields."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-15 08:27:01",
    "edited": {
      "time_stamp": "2019-01-15 08:28:04"
    },
    "text": "you can actually still do that with custom modules inside the blog posts, it makes the hubl for grabbing the vars on other pages slightly harder but I’ve found for clients that need that level of UI it’s worth it."
  },
  {
    "poster": {
      "poster_name": "Shawn Bristow",
      "poster_handle": "captshawn"
    },
    "time_stamp": "2019-01-15 08:27:08",
    "text": "You should now be all set <@UEZ3125LL>"
  },
  null,
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-15 08:30:12",
    "text": "Hey <@U3TR96G84> Jon was correct. If you need to further customize the SEO field, you can use JS to change them. For pages like dyamic pages or listing pages, as Jon mentioned, the dev team is currently working on fixes for dynamic pages (hubdb) to be able to have fields that correspond to them in the hubDB tables. For listing pages like blog/author listing pages, you'd want to use JS to customize those. They are currently working on implementing a quick fix for SEO audit issues on those pages with the ability to customize later on for people"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2019-01-15 08:33:21",
    "edited": {
      "time_stamp": "2019-01-15 08:33:27"
    },
    "text": "Thanks <@U2H3TT8F2> for your complements. If I change meta with JS google will correctly crawl my pages ?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-15 08:34:07",
    "text": "I would guess that JS you’d want to load in the head of your pages and be it’s own file separate from your other JS\nseo.js if you will"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-15 08:34:21",
    "text": "as I think you need to update the meta tags right away"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-15 08:34:35",
    "text": "to prevent google from grabbing the info HS loads initially"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-15 08:34:37",
    "text": "you can try to use `span` tags in the label and them add inline css to style them."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-15 08:35:00",
    "text": "that works?"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-15 08:35:32",
    "text": "Google renders JS before evaluation so you should be fine"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2019-01-15 08:35:51",
    "text": "Ok guys thanks a lot for your feedbacks"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-15 08:36:08",
    "text": "<https://searchengineland.com/tested-googlebot-crawls-javascript-heres-learned-220157>"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-15 08:36:34",
    "text": "thats the resource I found when I was doing all my inital research, I tested and it does work"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-15 08:37:01",
    "text": "for example: <https://www.google.com/search?q=site%3Ablog.wsol.com&amp;rlz=1C1GCEU_enUS820US820&amp;oq=site%3Ablog.wsol.com&amp;aqs=chrome..69i57j69i58j69i59l3.3241j0j7&amp;sourceid=chrome&amp;ie=UTF-8>"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-15 08:37:21",
    "text": "you'll see on our blog listing pages that we have `| Page ##` appended"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-15 08:37:25",
    "text": "that was done via JS"
  },
  {
    "poster": {
      "poster_name": "Jon Chim",
      "poster_handle": "jchim"
    },
    "time_stamp": "2019-01-15 08:37:43",
    "text": "I see I’m unable to view featured blog images when using this hubl {% if content.post_list_summary_featured_image %}\n              &lt;a href=“{{ content.absolute_url }}“&gt;&lt;img src=“{{ content.post_list_summary_featured_image }}” alt=“{{ content.featured_image_alt_text }}” class=“hs-featured-image-blog”&gt;&lt;/a&gt;\n              {% endif %}"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-15 08:37:47",
    "text": "This is something I believe they are going to start adding by default soon though"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2019-01-15 08:38:06",
    "text": "amazing. I will share with you what I will make for my client"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-15 08:38:45",
    "text": ":+1:"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-15 08:40:09",
    "text": "I just finished talking with the HS person in charge of it all but he is checking in with the team. They will be rolling out a plan to hardcode the page numbers onto those listing pages so we dont have to do it via JS. When that will happen is unknown right now as it would be a global change to all customers so they need to be delicate and test it out well"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-15 08:40:50",
    "text": "that’s interesting"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-15 08:41:12",
    "text": "didn’t know Google cared much about the listing page pagination, but makes sense"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-15 08:44:36",
    "text": "wasnt so much for Google's doing it was because when you use things like SEMRush or Moz, they wont evalutae JS so they think everything is the same title and all that"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-15 08:44:51",
    "text": "ahh"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-15 08:44:54",
    "text": "so it scores you extremely low on HS sites (around ~60%)"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-15 08:45:58",
    "text": "Google may call out some stuff in search console but I havent explored that far, my stuff was really just going on the Site Audits and what not, though I would image with all pages having same titles and no canonicals, it would for sure cause google to be confused"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-15 08:46:20",
    "text": "yea"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2019-01-15 08:53:01",
    "text": "totally agree <@U2H3TT8F2>"
  },
  null,
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-01-15 09:11:18",
    "edited": {
      "time_stamp": "2019-01-15 09:11:44"
    },
    "text": "Hey guys! What is your favourite method to display repeated element in a grid using for loop and CSS?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-01-15 09:14:50",
    "text": "```\n&lt;div class=\"flex-container\"&gt;\n  {% for item in module.paste %}\n   &lt;div class=\"repeated element\"&gt;&lt;/div&gt;\n  {% endfor %}\n&lt;/div&gt;\n```",
    "reply_count": 38,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-01-15 09:26:51"
      },
      {
        "time_stamp": "2019-01-15 09:26:58"
      },
      {
        "time_stamp": "2019-01-15 09:27:46"
      },
      {
        "time_stamp": "2019-01-15 09:33:21"
      },
      {
        "time_stamp": "2019-01-15 09:36:52"
      },
      {
        "time_stamp": "2019-01-15 09:37:29"
      },
      {
        "time_stamp": "2019-01-15 09:39:27"
      },
      {
        "time_stamp": "2019-01-15 09:39:53"
      },
      {
        "time_stamp": "2019-01-15 09:40:06"
      },
      {
        "time_stamp": "2019-01-15 09:40:36"
      },
      {
        "time_stamp": "2019-01-15 09:40:43"
      },
      {
        "time_stamp": "2019-01-15 09:42:36"
      },
      {
        "time_stamp": "2019-01-15 09:42:43"
      },
      {
        "time_stamp": "2019-01-15 09:43:11"
      },
      {
        "time_stamp": "2019-01-15 09:43:59"
      },
      {
        "time_stamp": "2019-01-15 09:44:42"
      },
      {
        "time_stamp": "2019-01-15 09:46:31"
      },
      {
        "time_stamp": "2019-01-15 09:47:05"
      },
      {
        "time_stamp": "2019-01-15 09:47:05"
      },
      {
        "time_stamp": "2019-01-15 09:57:12"
      },
      {
        "time_stamp": "2019-01-15 09:57:53"
      },
      {
        "time_stamp": "2019-01-15 09:59:42"
      },
      {
        "time_stamp": "2019-01-15 10:00:00"
      },
      {
        "time_stamp": "2019-01-15 10:00:05"
      },
      {
        "time_stamp": "2019-01-15 10:00:21"
      },
      {
        "time_stamp": "2019-01-15 10:01:01"
      },
      {
        "time_stamp": "2019-01-15 10:01:13"
      },
      {
        "time_stamp": "2019-01-15 10:04:27"
      },
      {
        "time_stamp": "2019-01-15 10:04:45"
      },
      {
        "time_stamp": "2019-01-15 10:10:27"
      },
      {
        "time_stamp": "2019-01-15 10:11:05"
      },
      {
        "time_stamp": "2019-01-15 10:11:26"
      },
      {
        "time_stamp": "2019-01-15 10:12:14"
      },
      {
        "time_stamp": "2019-01-15 10:13:03"
      },
      {
        "time_stamp": "2019-01-15 10:13:24"
      },
      {
        "time_stamp": "2019-01-15 10:15:51"
      },
      {
        "time_stamp": "2019-01-15 10:21:52"
      },
      {
        "time_stamp": "2019-01-15 10:30:05"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-01-15 09:15:03",
    "text": "Then just setting the width with CSS"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-01-15 09:15:57",
    "text": "So on the container I do ```\njustify-content:flex-start;\nalign-items:stretch;\n```"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-01-15 09:16:15",
    "text": "Then add some margin to the inside elements so it hits your site margins"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-01-15 09:26:51",
    "text": ".flex-container {\n  display: grid;\n  justify-content:flex-start;\n  align-items:stretch;\n}"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-01-15 09:26:58",
    "text": "Like this?"
  },
  {
    "poster": {
      "poster_name": "Chris Abplanalp",
      "poster_handle": "cabplanalp"
    },
    "time_stamp": "2019-01-15 09:27:39",
    "text": "<@U2H3TT8F2>, so I tried to do this: {% choice “tile_button_dropdown_label” label=’Resource Home Tile Button Label&lt;span style=‘font-size:10px’&gt;Use this new field for setting the button label&lt;/span&gt;’, value=‘Read more’, choices=‘Read more, Watch now’ export_to_template_context=True %} but it did not read that span at all or show up in the Lable"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-01-15 09:27:46",
    "text": "it gives me someting weird..  <http://www.cognibox.com/-temporary-slug-04ba018a-4e11-4a75-9645-c39acb5fb5bf?hs_preview=dkDNvneH-7083863876>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-15 09:28:48",
    "text": "yea, unfortunately I don’t think that works. you might get lucky by encoding the characters but I doubt it"
  },
  {
    "poster": {
      "poster_name": "Chris Abplanalp",
      "poster_handle": "cabplanalp"
    },
    "time_stamp": "2019-01-15 09:29:03",
    "text": "oh wow though when I did not include the single quotes it looks like it did work"
  },
  {
    "text": "",
    "time_stamp": "2019-01-15 09:29:13"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-15 09:29:33",
    "text": "very cool, gonna have to use that trick myself"
  },
  {
    "poster": {
      "poster_name": "Chris Abplanalp",
      "poster_handle": "cabplanalp"
    },
    "time_stamp": "2019-01-15 09:31:10",
    "text": "yeah just a little display:block and it clears the title"
  },
  {
    "text": "",
    "time_stamp": "2019-01-15 09:31:46"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-01-15 09:33:21",
    "text": "when you say \"Then just setting the width with CSS\" you mean the width of the repeated element class?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-01-15 09:36:52",
    "text": "You should do display:flex on the container"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-15 09:37:10",
    "text": ":+1:"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-01-15 09:37:29",
    "text": "Then setting the width of the repeated elements with `flex:0 0 350px` or whatever your layout calls for"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-01-15 09:39:27",
    "text": "This is an excellent reference for flex: <https://css-tricks.com/snippets/css/a-guide-to-flexbox/>"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-01-15 09:39:53",
    "text": "Or if you want to use CSS grid like a weirdo you should talk to <@UD53A9UUR>"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-01-15 09:40:06",
    "text": "lol"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-15 09:40:15",
    "text": "I believe i posted either in Ideas or in the forum about adding a \"Help\" type field so you could style it. This way you can create better help text"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-15 09:40:36",
    "text": "ha"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-15 09:40:43",
    "text": "like a hero!"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-01-15 09:42:36",
    "text": "i'll try with flexbox it seems more easy to use then gris.. sorry <@UD53A9UUR>"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-01-15 09:42:43",
    "text": "grid*"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-15 09:43:11",
    "text": "once we kick IE 11 out, grid is going to be boss"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-01-15 09:43:59",
    "text": "Like a boss that snorts coke off of the register then yells at the customers"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-15 09:44:42",
    "text": "btw, you need to wrap you repeated-element in the flex container.  add flex-wrap to container.  give a percent width to items and adjust width with media queries"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-01-15 09:46:31",
    "text": "Yeah that’s what my for loop is mang"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-01-15 09:47:05",
    "text": "And flex-wrap, of course"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-15 09:47:05",
    "text": "i thought that link already incorporated the loop"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-01-15 09:57:12",
    "text": "I don't get what I'm doing wrong...\n```        &lt;section class=\"section flex-container\"&gt;\n                {% for item2 in item.resources %}\n          &lt;div class=\"repeated-element\"&gt;\n            &lt;a class=\"etude-card\" href=\"{{ item2.link }}\" %}\"&gt;\n              {% if item2.image.src %}\n\t\t\t          &lt;img src=\"{{ item2.image.src }}\" alt=\"{{ item2.image.alt }}\" width=\"{{ item2.image.width }}\" height=\"{{ item2.image.height }}\"&gt;\n\t\t          {% endif %}\n              &lt;div class=\"etude-card__title\"&gt;\n                {% inline_text field=\"title\" value=\"{{ item2.title }}\" %}\n              &lt;/div&gt;\n              &lt;span class=\"btn btn--primary btn--reversed\"&gt;\n                {% inline_text field=\"link_label\" value=\"{{ item2.link_label }}\" %}\n              &lt;/span&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n        &lt;/section&gt;```\n\n```.flex-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: stretch;\n}\n.repeated-element {\n width: 25%;}```"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-15 09:57:53",
    "text": "where is the endfor?"
  },
  {
    "poster": {
      "poster_name": "Ankita Yadav",
      "poster_handle": "ankitayadav"
    },
    "time_stamp": "2019-01-15 09:59:00",
    "text": "Hi, \nI would like to know is there any process to add mega menu in a HubSpot template from HubSpot navigation option, Or I'll have to create a mega menu using HTML CSS and hubl   and use that in my template. Also if I create a custom module for that, i wanted to reuse it in all my templates with some changes, what would be the easiest way to get that done without getting into code everytime?\n"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-15 09:59:42",
    "edited": {
      "time_stamp": "2019-01-15 09:59:53"
    },
    "text": "can you stick that in above the section closing tag?"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-01-15 10:00:00",
    "text": "oops it was under the &lt;/section&gt;"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-01-15 10:00:05",
    "text": "just placed it above"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-15 10:00:21",
    "text": "voila"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-15 10:01:01",
    "text": "if you dont want the second row to align center, remove the justify-content rule"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-15 10:01:04",
    "text": "Doing it with a custom module, you could always lock the module down and not allow editing of it within pages (this way there is one location to edit it) another option is using HubDB to control it. The only way to do mega menu is through either of those two menus as using the normal menu to do it would require alot of JS for strippingout html, wrapping html, replacing, and more",
    "reply_count": 10,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2019-01-15 10:07:02"
      },
      {
        "time_stamp": "2019-01-15 10:08:10"
      },
      {
        "time_stamp": "2019-01-15 10:08:18"
      },
      {
        "time_stamp": "2019-01-15 10:09:20"
      },
      {
        "time_stamp": "2019-01-15 10:13:21"
      },
      {
        "time_stamp": "2019-01-15 10:13:46"
      },
      {
        "time_stamp": "2019-01-15 10:19:20"
      },
      {
        "time_stamp": "2019-01-15 10:19:31"
      },
      {
        "time_stamp": "2019-01-15 10:20:19"
      },
      {
        "time_stamp": "2019-01-15 10:24:15"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-15 10:01:13",
    "text": "also, prefix that bad boy"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-01-15 10:04:27",
    "text": "You may need to set that repeated element width with like `flex:0 0 25%` too, sometimes the regular width tag doesn’t work or screws up cross-browser"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-01-15 10:04:45",
    "text": "and PREFIX THAT BAD BOY!"
  },
  {
    "poster": {
      "poster_name": "Ankita Yadav",
      "poster_handle": "ankitayadav"
    },
    "time_stamp": "2019-01-15 10:07:02",
    "text": "Thanks <@U2H3TT8F2>  so, It would be better if I use hubdb for that rather than a custom module "
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-01-15 10:08:10",
    "text": "I think either one would accomplish what you are looking for, Custom Modules might have more codebloat (wrappers on the different fields and misc classes) than if you went with HubDB where you would be generating the markup yourself and just outputting the values only"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-15 10:08:18",
    "text": "it purely matters how you want to handle the editing experience."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-15 10:09:20",
    "text": "though one important thing to note is that HubDB it’s easier to create infinitely nested links, whereas custom modules only allow fields to be nested 3 times, which may impact how you want to build it out"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-01-15 10:10:27",
    "text": "I'm not a full time coder, so I don't even know what \"prefix that\" mean :man-facepalming: sorry"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-15 10:11:04",
    "edited": {
      "time_stamp": "2019-01-15 10:15:57"
    },
    "text": "anyone got a trick for viewing dev info on an email preview?\n\nfigured it out for my specific case. might look into adding a way to jump to the dev info via chrome extension if it’s possible for emails.\n\n*update: it’s not possible to do via the chrome extension, I can’t get the access_token so I can’t make it work*"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-15 10:11:05",
    "text": "take that chunk of css and copy here: `<https://autoprefixer.github.io/>`"
  },
  {
    "poster": {
      "poster_name": "Josh Saunders",
      "poster_handle": "jsaunders"
    },
    "time_stamp": "2019-01-15 10:11:23",
    "text": "Thanks <@U22PNRAJD>! The settings look useful, will let you know any feedback"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-15 10:11:26",
    "text": "you will see a bunch of - rules show up"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-15 10:12:14",
    "text": "those are browser prefixes."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-01-15 10:13:03",
    "text": "Yeah, flex properties need some special stuff to cover all the browsers"
  },
  {
    "poster": {
      "poster_name": "Ankita Yadav",
      "poster_handle": "ankitayadav"
    },
    "time_stamp": "2019-01-15 10:13:21",
    "text": "Yes <@U7SL518D6>  that's true in case of custom module, thanks :blush:"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-15 10:13:24",
    "text": "good thing you didnt go the grid route"
  },
  {
    "poster": {
      "poster_name": "Umakant - MakeWebBetter",
      "poster_handle": "umakantsharma"
    },
    "time_stamp": "2019-01-15 10:13:46",
    "text": "but at the same time hubdb will restrict the reach of your module, as not everyone wants to use the mega menu have hubdb module, an simple cms user can love to use mega menu."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2019-01-15 10:15:51",
    "text": "Damn you dennis"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-15 10:19:20",
    "text": "yea that last one depends on if you’re submitting to marketplace or just building for a client.\n\nI have made modules that are hybrids - they allow using a HubDB for their data OR manual entry."
  },
  {
    "poster": {
      "poster_name": "Ankita Yadav",
      "poster_handle": "ankitayadav"
    },
    "time_stamp": "2019-01-15 10:19:31",
    "text": "Just to be clear,  I wanted the mega menu to be created for marketplace "
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-01-15 10:20:19",
    "text": "Then  you can still use HubDB - you just need to ahave a field to allow the user to select the HubDB.\n\nIf you want to also be able to sell to users who don’t have HubDB then make it also support manual entry via fields"
  },
  {
    "poster": {
      "poster_name": "Louis Chaussé",
      "poster_handle": "louis.chausse"
    },
    "time_stamp": "2019-01-15 10:21:52",
    "text": "oh. Good to know. Thank you!"
  },
  {
    "poster": {
      "poster_name": "Ankita Yadav",
      "poster_handle": "ankitayadav"
    },
    "time_stamp": "2019-01-15 10:24:15",
    "text": "Ok thanks <@U7SL518D6> "
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-01-15 10:30:05",
    "text": ":bam: "
  },
  {
    "poster": {
      "poster_name": "Josh Anthony",
      "poster_handle": "janthony"
    },
    "time_stamp": "2019-01-15 10:42:33",
    "text": "Should it be possible to return a dictionary using a macro?"
  },
  {
    "poster": {
      "poster_name": "Josh Anthony",
      "poster_handle": "janthony"
    },
    "time_stamp": "2019-01-15 10:42:56",
    "text": "My attempt seems to be returning the dictionary as a string.",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-01-15 10:52:24"
      },
      {
        "time_stamp": "2019-01-15 10:52:35"
      },
      {
        "time_stamp": "2019-01-15 11:01:15"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-01-15 10:52:24",
    "text": "Unfortunately it seems to only be able to return a string <https://github.com/HubSpot/jinjava/blob/master/src/main/java/com/HubSpot/jinjava/lib/tag/MacroTag.java>"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-01-15 10:52:35",
    "text": "You could use the `tojson` and `fromjson` filters to get around this"
  },
  {
    "poster": {
      "poster_name": "Josh Anthony",
      "poster_handle": "janthony"
    },
    "time_stamp": "2019-01-15 11:01:15",
    "edited": {
      "time_stamp": "2019-01-15 11:06:39"
    },
    "text": "Thanks, that works. Unfortunately, it seems I have to set the `tojson` at the end of the macro and use `fromjson` on the macro call itself, but at least it’s working."
  },
  {
    "poster": {
      "poster_name": "Shawn Bristow",
      "poster_handle": "captshawn"
    },
    "time_stamp": "2019-01-15 11:02:49",
    "text": "Thanks!"
  },
  {
    "poster": {
      "poster_name": "Jon Chim",
      "poster_handle": "jchim"
    },
    "time_stamp": "2019-01-15 11:17:14",
    "text": "actuualy “featured image” wasnt checked on in blog settings thanks!"
  },
  {
    "poster": {
      "poster_name": "Christine Austin",
      "poster_handle": "caustin"
    },
    "time_stamp": "2019-01-15 12:24:58",
    "text": "95% of those being blog articles, when youve been blogging for a decade, it ads up haha"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-01-15 12:25:35",
    "text": ":slightly_smiling_face:"
  },
  null,
  null,
  null
]