[
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-08-16 08:13:51",
    "text": "I’m not sure if this is by design or not. but the `blog_recent_tag_posts` function is returning duplicate posts in this scenario:\n`{{ blog_recent_tag_posts('default', ['tag-one', 'tag-two', 'tag-three'], 4) }}`\nIn this case, the marketers tagged one post with all 3 tags, and 3 of the 4 items returned in the loop is that post."
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-08-16 08:20:42",
    "text": "thats def sounds like a bug"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-08-16 08:23:33",
    "text": "I’d submit a support ticket on that"
  },
  {
    "poster": {
      "poster_name": "George Carless",
      "poster_handle": "george432"
    },
    "time_stamp": "2019-08-16 08:54:00",
    "text": "Quick q (and probably a faq, in which case sorry!) -- I've a module where if a repeater field contains a certain value, I don't want to do anything else. I'm iterating over it with a for loop to check for that value, but I can't set e.g. \"displayVar = false\" within the for loop because its scoping means it won't be available outside the loop.... is there any function to just return/exit the module without doing anything else?  Or, how can I have a globally scoped variable I can use for this purpose?"
  },
  {
    "poster": {
      "poster_name": "George Carless",
      "poster_handle": "george432"
    },
    "time_stamp": "2019-08-16 08:55:10",
    "text": "nm I just found <https://community.HubSpot.com/t5/CMS-Development/How-to-change-a-variable-outside-of-a-for-loop-Scoping-Issues/td-p/211117>",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-08-16 09:31:07"
      },
      {
        "time_stamp": "2019-08-16 10:43:07"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Scott",
      "poster_handle": "mscott"
    },
    "time_stamp": "2019-08-16 09:31:07",
    "edited": {
      "time_stamp": "2019-08-16 09:35:50"
    },
    "text": "That’s a nice more readable solution\nI found a more hacky way to do something similar but different,\nThis was some code I used to build a dictionary\nthe ‘.append’ function actually appends to the global dictionary ‘vars’, the variable inside the set is irrelevant but is needed for the hubl to run\n\n```\n{% set vars = [] %}\n{% for item in group %}\n\t{% set thisVariableDoesntDoAnything = vars.append(item.page.content_id) %}\n{% endfor %}\n```"
  },
  {
    "poster": {
      "poster_name": "Farooque Abdullah",
      "poster_handle": "farooqueab98"
    },
    "time_stamp": "2019-08-16 10:37:38",
    "text": ":+1:"
  },
  {
    "poster": {
      "poster_name": "George Carless",
      "poster_handle": "george432"
    },
    "time_stamp": "2019-08-16 10:43:07",
    "text": "Right, makes sense--thanks!"
  }
]