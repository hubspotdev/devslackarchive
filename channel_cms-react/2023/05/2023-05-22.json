[
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 08:55:30",
    "text": "Similar question to above, if I use a js-module to display blog posts (index page), can I be sure that that page will be indexed?",
    "reply_count": 13,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-05-22 08:58:22"
      },
      {
        "time_stamp": "2023-05-22 08:59:43"
      },
      {
        "time_stamp": "2023-05-22 08:59:57"
      },
      {
        "time_stamp": "2023-05-22 09:01:48"
      },
      {
        "time_stamp": "2023-05-22 09:02:15"
      },
      {
        "time_stamp": "2023-05-22 09:02:35"
      },
      {
        "time_stamp": "2023-05-22 09:02:37"
      },
      {
        "time_stamp": "2023-05-22 09:02:41"
      },
      {
        "time_stamp": "2023-05-22 09:03:21"
      },
      {
        "time_stamp": "2023-05-22 09:03:42"
      },
      {
        "time_stamp": "2023-05-22 09:05:49"
      },
      {
        "time_stamp": "2023-05-22 10:03:51"
      },
      {
        "time_stamp": "2023-05-22 10:04:54"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 08:56:02",
    "text": "should I try to pass in the initial blog posts as a prop and then use an island to update content dynamically?",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-05-22 08:59:18"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-05-22 08:58:22",
    "text": "The page will be indexed. Rendering your blog posts server side would _probably_ be better for SEO. That means not exclusively hitting the blog API after hydration and rendering on the client."
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-05-22 08:59:18",
    "text": "Essentially yes."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 08:59:43",
    "text": "is the only way to render on the client to pass in blog posts as a prop?"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-05-22 08:59:57",
    "text": "you mean render on the server?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 09:01:48",
    "text": "I think you answered the question in the other thread (just saw) but maybe I'm a bit confused now"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 09:02:15",
    "text": "if I pass in blog posts via a prop on the initial render (that would be server side rendering)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 09:02:35",
    "text": "after that I can make a fetch to filter blog posts and that would be client side rendering"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 09:02:37",
    "text": "right?"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-05-22 09:02:41",
    "text": "yes."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 09:03:21",
    "text": "ok, cool"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 09:03:42",
    "text": "thanks"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 09:05:49",
    "text": "and in a future that doesn't exist and isn't necessarily in the plans, if blog posts were to be loaded via GraphQL and then passed in as props, that would be a server side render?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 09:54:41",
    "text": "are there any plans to allow HubL on index.jsx pages? It would be cool if some kind of special tag or index.hubl page could be used to pass in props that load from HubL",
    "reply_count": 142,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2023-05-22 10:12:03"
      },
      {
        "time_stamp": "2023-05-22 10:13:42"
      },
      {
        "time_stamp": "2023-05-22 10:15:01"
      },
      {
        "time_stamp": "2023-05-22 10:15:30"
      },
      {
        "time_stamp": "2023-05-22 10:16:26"
      },
      {
        "time_stamp": "2023-05-22 10:19:26"
      },
      {
        "time_stamp": "2023-05-22 10:20:37"
      },
      {
        "time_stamp": "2023-05-22 10:20:47"
      },
      {
        "time_stamp": "2023-05-22 10:21:35"
      },
      {
        "time_stamp": "2023-05-22 10:21:57"
      },
      {
        "time_stamp": "2023-05-22 10:22:03"
      },
      {
        "time_stamp": "2023-05-22 10:22:14"
      },
      {
        "time_stamp": "2023-05-22 10:22:49"
      },
      {
        "time_stamp": "2023-05-22 10:23:59"
      },
      {
        "time_stamp": "2023-05-22 10:26:03"
      },
      {
        "time_stamp": "2023-05-22 10:29:37"
      },
      {
        "time_stamp": "2023-05-22 10:30:16"
      },
      {
        "time_stamp": "2023-05-22 10:30:20"
      },
      {
        "time_stamp": "2023-05-22 10:42:38"
      },
      {
        "time_stamp": "2023-05-22 10:43:55"
      },
      {
        "time_stamp": "2023-05-22 10:44:55"
      },
      {
        "time_stamp": "2023-05-22 10:46:32"
      },
      {
        "time_stamp": "2023-05-22 10:47:15"
      },
      {
        "time_stamp": "2023-05-22 11:22:59"
      },
      {
        "time_stamp": "2023-05-22 13:49:20"
      },
      {
        "time_stamp": "2023-05-22 13:49:57"
      },
      {
        "time_stamp": "2023-05-22 13:50:33"
      },
      {
        "time_stamp": "2023-05-22 13:51:41"
      },
      {
        "time_stamp": "2023-05-22 13:52:09"
      },
      {
        "time_stamp": "2023-05-22 13:52:40"
      },
      {
        "time_stamp": "2023-05-22 13:54:18"
      },
      {
        "time_stamp": "2023-05-22 13:54:22"
      },
      {
        "time_stamp": "2023-05-22 13:55:16"
      },
      {
        "time_stamp": "2023-05-22 13:55:40"
      },
      {
        "time_stamp": "2023-05-22 14:01:38"
      },
      {
        "time_stamp": "2023-05-22 14:01:41"
      },
      {
        "time_stamp": "2023-05-22 14:02:09"
      },
      {
        "time_stamp": "2023-05-22 14:02:14"
      },
      {
        "time_stamp": "2023-05-22 14:05:31"
      },
      {
        "time_stamp": "2023-05-22 14:05:35"
      },
      {
        "time_stamp": "2023-05-22 14:05:37"
      },
      {
        "time_stamp": "2023-05-22 14:06:03"
      },
      {
        "time_stamp": "2023-05-22 14:07:01"
      },
      {
        "time_stamp": "2023-05-22 14:07:13"
      },
      {
        "time_stamp": "2023-05-22 14:08:09"
      },
      {
        "time_stamp": "2023-05-22 14:09:45"
      },
      {
        "time_stamp": "2023-05-22 14:10:54"
      },
      {
        "time_stamp": "2023-05-22 14:11:05"
      },
      {
        "time_stamp": "2023-05-22 14:11:11"
      },
      {
        "time_stamp": "2023-05-22 14:11:22"
      },
      {
        "time_stamp": "2023-05-22 14:12:22"
      },
      {
        "time_stamp": "2023-05-22 14:12:23"
      },
      {
        "time_stamp": "2023-05-22 14:13:02"
      },
      {
        "time_stamp": "2023-05-22 14:13:05"
      },
      {
        "time_stamp": "2023-05-22 14:14:33"
      },
      {
        "time_stamp": "2023-05-22 14:19:10"
      },
      {
        "time_stamp": "2023-05-22 14:19:36"
      },
      {
        "time_stamp": "2023-05-22 14:21:13"
      },
      {
        "time_stamp": "2023-05-22 14:21:28"
      },
      {
        "time_stamp": "2023-05-22 14:21:37"
      },
      {
        "time_stamp": "2023-05-22 14:24:08"
      },
      {
        "time_stamp": "2023-05-22 14:26:27"
      },
      {
        "time_stamp": "2023-05-22 14:26:35"
      },
      {
        "time_stamp": "2023-05-22 14:26:56"
      },
      {
        "time_stamp": "2023-05-22 14:28:08"
      },
      {
        "time_stamp": "2023-05-22 14:28:19"
      },
      {
        "time_stamp": "2023-05-22 14:28:47"
      },
      {
        "time_stamp": "2023-05-22 14:29:11"
      },
      {
        "time_stamp": "2023-05-22 14:30:15"
      },
      {
        "time_stamp": "2023-05-22 14:30:23"
      },
      {
        "time_stamp": "2023-05-22 14:31:07"
      },
      {
        "time_stamp": "2023-05-22 14:31:16"
      },
      {
        "time_stamp": "2023-05-22 14:31:35"
      },
      {
        "time_stamp": "2023-05-22 14:31:53"
      },
      {
        "time_stamp": "2023-05-22 14:32:08"
      },
      {
        "time_stamp": "2023-05-22 14:34:13"
      },
      {
        "time_stamp": "2023-05-22 14:36:42"
      },
      {
        "time_stamp": "2023-05-22 14:37:22"
      },
      {
        "time_stamp": "2023-05-22 14:37:55"
      },
      {
        "time_stamp": "2023-05-22 14:40:23"
      },
      {
        "time_stamp": "2023-05-22 14:41:04"
      },
      {
        "time_stamp": "2023-05-22 14:41:19"
      },
      {
        "time_stamp": "2023-05-22 14:41:29"
      },
      {
        "time_stamp": "2023-05-22 14:41:35"
      },
      {
        "time_stamp": "2023-05-22 14:41:39"
      },
      {
        "time_stamp": "2023-05-22 14:42:10"
      },
      {
        "time_stamp": "2023-05-22 14:42:31"
      },
      {
        "time_stamp": "2023-05-22 14:43:13"
      },
      {
        "time_stamp": "2023-05-22 14:43:23"
      },
      {
        "time_stamp": "2023-05-22 14:45:29"
      },
      {
        "time_stamp": "2023-05-22 14:45:44"
      },
      {
        "time_stamp": "2023-05-22 14:46:10"
      },
      {
        "time_stamp": "2023-05-22 14:46:14"
      },
      {
        "time_stamp": "2023-05-22 14:46:18"
      },
      {
        "time_stamp": "2023-05-22 14:47:46"
      },
      {
        "time_stamp": "2023-05-22 14:48:16"
      },
      {
        "time_stamp": "2023-05-22 14:48:26"
      },
      {
        "time_stamp": "2023-05-22 14:48:49"
      },
      {
        "time_stamp": "2023-05-22 14:49:39"
      },
      {
        "time_stamp": "2023-05-22 15:09:16"
      },
      {
        "time_stamp": "2023-05-22 15:09:44"
      },
      {
        "time_stamp": "2023-05-22 15:10:08"
      },
      {
        "time_stamp": "2023-05-22 15:10:50"
      },
      {
        "time_stamp": "2023-05-22 15:10:55"
      },
      {
        "time_stamp": "2023-05-22 15:11:25"
      },
      {
        "time_stamp": "2023-05-22 15:11:34"
      },
      {
        "time_stamp": "2023-05-22 15:11:52"
      },
      {
        "time_stamp": "2023-05-22 15:13:34"
      },
      {
        "time_stamp": "2023-05-22 15:14:10"
      },
      {
        "time_stamp": "2023-05-22 15:14:36"
      },
      {
        "time_stamp": "2023-05-22 15:15:43"
      },
      {
        "time_stamp": "2023-05-22 15:15:53"
      },
      {
        "time_stamp": "2023-05-22 15:16:01"
      },
      {
        "time_stamp": "2023-05-22 15:17:47"
      },
      {
        "time_stamp": "2023-05-22 15:17:52"
      },
      {
        "time_stamp": "2023-05-22 15:17:58"
      },
      {
        "time_stamp": "2023-05-22 15:18:07"
      },
      {
        "time_stamp": "2023-05-22 15:18:21"
      },
      {
        "time_stamp": "2023-05-22 15:19:21"
      },
      {
        "time_stamp": "2023-05-22 15:19:59"
      },
      {
        "time_stamp": "2023-05-22 15:20:13"
      },
      {
        "time_stamp": "2023-05-22 15:20:20"
      },
      {
        "time_stamp": "2023-05-22 15:22:55"
      },
      {
        "time_stamp": "2023-05-22 15:22:58"
      },
      {
        "time_stamp": "2023-05-22 15:24:01"
      },
      {
        "time_stamp": "2023-05-22 15:25:32"
      },
      {
        "time_stamp": "2023-05-22 15:26:12"
      },
      {
        "time_stamp": "2023-05-22 15:26:49"
      },
      {
        "time_stamp": "2023-05-22 15:27:27"
      },
      {
        "time_stamp": "2023-05-22 15:27:37"
      },
      {
        "time_stamp": "2023-05-22 15:28:08"
      },
      {
        "time_stamp": "2023-05-22 15:28:23"
      },
      {
        "time_stamp": "2023-05-22 15:28:32"
      },
      {
        "time_stamp": "2023-05-22 15:30:43"
      },
      {
        "time_stamp": "2023-05-22 15:31:48"
      },
      {
        "time_stamp": "2023-05-22 15:31:54"
      },
      {
        "time_stamp": "2023-05-22 15:32:02"
      },
      {
        "time_stamp": "2023-05-22 15:32:52"
      },
      {
        "time_stamp": "2023-05-22 15:32:58"
      },
      {
        "time_stamp": "2023-05-22 15:33:14"
      },
      {
        "time_stamp": "2023-05-22 15:34:28"
      },
      {
        "time_stamp": "2023-05-22 15:35:23"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 09:57:09",
    "text": "For more context, I would use this to load blog content (because GraphQL can't be used)"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-05-22 10:03:51",
    "text": "Correct."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 10:04:54",
    "text": "Definitely hoping that becomes a real feature. Seems like a perfect solution"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-05-22 10:12:03",
    "edited": {
      "time_stamp": "2023-05-22 10:12:33"
    },
    "text": "Interesting idea :thinking_face:. Though I think I’d slightly prefer to solve for this with something like a HubL partial/module that calls out to a JS partial/module (rather than “injecting in” HubL on top of some JS component).\n\nI realize there are at least a few limitations there and it is definitely not ideal. But I worry that paths to “inject in” HubL to JS component are going to make things like our local proxy, storybook, be far more complex (what can work locally vs requires a HubL render from the server)."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 10:13:42",
    "text": "Maybe this can be solved with extended field.jsx components that allow for a query?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 10:15:01",
    "text": "The problem with HubL partials/modules that include HubL queries now is that they have to be manually added to a template. Most pages that we use are drag and drop"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 10:15:30",
    "text": "it's relatively easy to convert to a template but a bit of a pain"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 10:16:26",
    "text": "also, worth noting that my use case is really specific and has a different \"ideal\" solution — graphQL"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-05-22 10:19:26",
    "text": "Got it, good point about D&amp;D areas. Would it be possible to make a HubL theme module that does the necessary HubL querying and passes that data and necessary module field values to a JS partial to render?\n\nIt definitely would be annoying to have that module’s implementation cross between HubL code and a JS project (especially since they are published/deployed in different ways) … also you wouldn’t have JSX for fields, but I think it would work."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 10:20:37",
    "text": "honestly, I never even considered/realized I can use a partial inside of a module"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 10:20:47",
    "text": "I thought that wasn't allowed actually"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 10:21:35",
    "text": "if that's a thing it would definitely work in my case. I have to try that now actually"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 10:21:57",
    "text": "I have a js-module that fetches from HubDB"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 10:22:03",
    "text": "which I realized later might be bad for SEO"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 10:22:14",
    "text": "so I can do a module/partial combo to see how that works"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 10:22:49",
    "text": "the graphQL version of that doesn't work for me because the table needs to be selected (multiple options)"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-05-22 10:23:59",
    "text": "FYI, we have several HubL modules in production of the <https://designers.HubSpot.com/inspire> website that had their internal implementation ported from HubL -&gt; JS partial (helped us incrementally port things over)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 10:26:03",
    "text": "good to know (slightly hard to find your implementations though)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 10:29:37",
    "text": "<@UCY83QS6Q> just so that I'm clear, you're saying that in a theme module, in module.html, I can add\n```{% js_partial\n  path=\"@projects/project-folder/js-package/components/partials/Header.jsx\"\n  pageTitle=\"My page\"\n%}```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 10:30:16",
    "text": "I was under the impression that this could only be added to template files"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 10:30:20",
    "text": "but that's really good to know"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-05-22 10:42:38",
    "text": "Yup, you can definitely use `js_partial` inside of module HubL/html"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 10:43:55",
    "text": "awesome, I'm going to try with one of my modules now."
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-05-22 10:44:55",
    "text": "And <@UAYBXDG4U> I bet an example of doing ^ to show another option of component/hubl inter-op would be great for our new set of <https://github.com/HubSpot/cms-js-building-block-examples>"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 10:46:32",
    "edited": {
      "time_stamp": "2023-05-22 10:46:44"
    },
    "text": "I agree ^, it also has the benefit of being available in \"theme\" modules. Combing through \"all modules\" seems too \"advanced\" for some of our editors/marketers"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 10:47:15",
    "text": "but to be a grump...it is a pain to deploy lol"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 10:55:59",
    "text": "I'm getting an error when I try to import a js_partial into a module:\n```Error when server rendering @projects/theme-modules/cms-assets/components/partials/NestedTeamTabs.jsx\n(anonymous) @ -temporary-slug-3929444b-c5c3-47a3-bbf8-c29a1e824c50?hs_preview=yVInuxER-116591168687:2388```",
    "reply_count": 9,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-05-22 10:56:48"
      },
      {
        "time_stamp": "2023-05-22 10:57:03"
      },
      {
        "time_stamp": "2023-05-22 10:58:57"
      },
      {
        "time_stamp": "2023-05-22 11:00:26"
      },
      {
        "time_stamp": "2023-05-22 11:00:30"
      },
      {
        "time_stamp": "2023-05-22 11:01:33"
      },
      {
        "time_stamp": "2023-05-22 11:03:07"
      },
      {
        "time_stamp": "2023-05-22 11:03:41"
      },
      {
        "time_stamp": "2023-05-22 11:07:16"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 10:56:16",
    "text": "I do see in the console that a different project module is available"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 10:56:23",
    "text": "but don't see the one I am trying to load"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-05-22 10:56:48",
    "edited": {
      "time_stamp": "2023-05-22 10:57:01"
    },
    "text": "have you built and deployed the new JS partial"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 10:57:03",
    "text": "yes"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-05-22 10:58:57",
    "text": "Looks like `teamMembers` is undefined."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:00:26",
    "edited": {
      "time_stamp": "2023-05-22 11:00:40"
    },
    "text": "that was the original issue, but I just modified so that is being passed in properly"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:00:30",
    "text": "but getting the same error"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:01:33",
    "text": "I can remove some code to account for errors, I was seeing it worked in general but if it's crashing after loading that would be make sense"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:03:07",
    "text": "redploying now with a simplified version"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:03:41",
    "text": "do partials allow imports from external libraries?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:07:16",
    "text": "wrong default portal"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:18:35",
    "text": "what kinds of values can be passed in as props? it looks like\n```{% set teamMembers = hubdb_table_rows(XXXXXXXX) %}```\nrenders an array"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:18:40",
    "text": "but I can't pass it in as a prop?",
    "reply_count": 37,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-05-22 11:24:51"
      },
      {
        "time_stamp": "2023-05-22 11:25:40"
      },
      {
        "time_stamp": "2023-05-22 11:25:41"
      },
      {
        "time_stamp": "2023-05-22 11:26:15"
      },
      {
        "time_stamp": "2023-05-22 11:26:52"
      },
      {
        "time_stamp": "2023-05-22 11:27:20"
      },
      {
        "time_stamp": "2023-05-22 11:29:09"
      },
      {
        "time_stamp": "2023-05-22 11:30:31"
      },
      {
        "time_stamp": "2023-05-22 11:31:40"
      },
      {
        "time_stamp": "2023-05-22 11:31:59"
      },
      {
        "time_stamp": "2023-05-22 11:32:24"
      },
      {
        "time_stamp": "2023-05-22 11:33:54"
      },
      {
        "time_stamp": "2023-05-22 11:34:31"
      },
      {
        "time_stamp": "2023-05-22 11:34:54"
      },
      {
        "time_stamp": "2023-05-22 11:35:00"
      },
      {
        "time_stamp": "2023-05-22 11:35:19"
      },
      {
        "time_stamp": "2023-05-22 11:35:30"
      },
      {
        "time_stamp": "2023-05-22 11:35:46"
      },
      {
        "time_stamp": "2023-05-22 11:36:05"
      },
      {
        "time_stamp": "2023-05-22 11:36:29"
      },
      {
        "time_stamp": "2023-05-22 11:36:49"
      },
      {
        "time_stamp": "2023-05-22 11:37:04"
      },
      {
        "time_stamp": "2023-05-22 11:37:09"
      },
      {
        "time_stamp": "2023-05-22 11:37:12"
      },
      {
        "time_stamp": "2023-05-22 11:37:13"
      },
      {
        "time_stamp": "2023-05-22 11:37:27"
      },
      {
        "time_stamp": "2023-05-22 11:37:33"
      },
      {
        "time_stamp": "2023-05-22 11:37:59"
      },
      {
        "time_stamp": "2023-05-22 11:40:51"
      },
      {
        "time_stamp": "2023-05-22 11:40:52"
      },
      {
        "time_stamp": "2023-05-22 11:41:01"
      },
      {
        "time_stamp": "2023-05-22 11:43:05"
      },
      {
        "time_stamp": "2023-05-22 11:43:10"
      },
      {
        "time_stamp": "2023-05-22 11:46:07"
      },
      {
        "time_stamp": "2023-05-22 11:47:04"
      },
      {
        "time_stamp": "2023-05-22 11:48:50"
      },
      {
        "time_stamp": "2023-05-22 11:49:14"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-05-22 11:22:59",
    "text": "Yup, noted :ear:"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-05-22 11:24:51",
    "edited": {
      "time_stamp": "2023-05-22 11:25:36"
    },
    "text": "Hm, you can. Let me grab an example of something we have working from a module…"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-05-22 11:25:40",
    "text": "```{% set entries = hubdb_table_rows(entry_table_id, 'status=2&amp;orderBy=-hs_created_at&amp;limit=30').objects %}\n{% set is_filtered = ... omitted ...%}\n\n{% js_partial\n  path=\"@projects/inspire-js-rendering/js-rendering/components/partials/InspireSearchResults.tsx\"\n  entries={{ entries }}\n  entryTableOptions={{ { \"industry\": hubdb_table_column(entry_table_id, 'industry').options, \"company_size\": hubdb_table_column(entry_table_id, 'company_size').options, \"region\": hubdb_table_column(entry_table_id, 'region').options, \"functionality\": hubdb_table_column(entry_table_id, 'functionality').options, \"products_used\": hubdb_table_column(entry_table_id, 'products_used').options } }}\n  isFiltered={{ is_filtered }}\n  module={{ module }}\n  industryData={{ hubdb_table_rows(industry_table_id, 'orderBy=name').objects }}\n%}```"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:25:41",
    "text": "thanks"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-05-22 11:26:15",
    "edited": {
      "time_stamp": "2023-05-22 11:26:34"
    },
    "text": "That has examples of both a variable set from hubdb and passed as a param and doing a query inline in the params"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:26:52",
    "text": "very helpful, I think it was the `.objects` that was causing my issue"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:27:20",
    "text": "but also, I can't console.log from partials? because they are server rendered or no?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-05-22 11:29:09",
    "text": "I do not believe we’ve documented them, but we have `logWarn` and `logError` you can import from `@hubbspot/cms-components`  that will “save” the server logged values and replay those back in the browser"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-05-22 11:30:31",
    "text": "Those both take as many args (`…args`) as you’d like to pass and will pass those through to `console.warn`/`console.error`"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-05-22 11:31:40",
    "text": "Though, if the server rendering fails with an error ^ will probably not work (as we’ve currently implemented them? :thinking_face:…)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:31:59",
    "text": "k, I'm trying now"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:32:24",
    "text": "just trying to see what my props look like so I can properly format/access values"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 11:33:54",
    "edited": {
      "time_stamp": "2023-05-22 11:34:07"
    },
    "text": "are you working directly with `hs project upload` for each change? or using `cms-dev-server` to test first? `console.log` would work in the dev server though probably best to use `logWarn`/`logError` across both"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:34:31",
    "text": "I'"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:34:54",
    "text": "I'm using `hs project upload` because it's a partial inside of a theme module"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:35:00",
    "edited": {
      "time_stamp": "2023-05-22 11:35:08"
    },
    "text": "and the data isn't available otherwise"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 11:35:19",
    "text": "is that theme module on a page?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:35:30",
    "text": "yea"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 11:35:46",
    "edited": {
      "time_stamp": "2023-05-22 11:35:58"
    },
    "text": "you should then be able to do the `.<http://hslocal.net:3000|hslocal.net:3000>` proxying with that page and the dev server and the data will pass through to your local code"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:36:05",
    "text": "the page isn't published"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 11:36:29",
    "text": "ah ok nevermind then (for now)"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 11:36:49",
    "text": "just hoping to shorten your loop on each change"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 11:37:04",
    "text": "we have plans to track down getting proxying working for unpublished pages"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 11:37:09",
    "text": "sorry to distract"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:37:12",
    "text": "yea, I appreciate that!"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:37:13",
    "text": "no worries"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:37:27",
    "text": "quick sanity check, would I use logWarn like this:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:37:33",
    "text": "```import { logWarn } from '@HubSpot/cms-components';\n\nconst TeamTabs = (props) =&gt; {\n\n    logWarn(props);\n  ...```"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 11:37:59",
    "text": "looks right to me"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:40:51",
    "text": "that log isn't coming through"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:40:52",
    "text": "hmm.."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:41:01",
    "text": "let me try just logging text I guess"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:43:05",
    "text": "still nothing"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:43:10",
    "text": "maybe that only works for published pages too?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:46:07",
    "text": "removing the external import assuming that's causing an error that I can't see"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:47:04",
    "text": "nope"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 11:48:50",
    "text": "can you DM me the current portal ID you’re using?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 11:49:14",
    "text": "I ended up publishing to see if that might be related"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 13:49:20",
    "text": "<@UCY83QS6Q> mostly JFYI, I have this working but realized too late that I have interactive tabs"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 13:49:57",
    "text": "can I include a js_module inside of a theme module?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-05-22 13:50:33",
    "text": "No you can’t do module in module, but not sure what the interactive issue is… you can include Islands inside a JS partial"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 13:51:41",
    "text": ":exploding_head:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 13:52:09",
    "text": "the interactive issue is that I have to toggle between 2 tabs"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 13:52:40",
    "text": "but if I can include an island then I think I can make that work"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 13:54:18",
    "text": "is there an example anywhere of including an island inside a JS partial?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 13:54:22",
    "text": "that breaks me a bit"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-05-22 13:55:16",
    "text": "<https://github.com/HubSpot/cms-js-building-block-examples/blob/main/islands/islands-project/islands-app/components/partials/BasicIslandClock.jsx>"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 13:55:40",
    "text": "thank you!"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:01:38",
    "text": "this is more of a general React question but how do I forward along props in that island scenario?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:01:41",
    "text": "can I just do ...props?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-05-22 14:02:09",
    "text": "Yup `&lt;SomeComponent fooprop={value} {…otherProps} /&gt;`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:02:14",
    "text": "thank you"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:05:31",
    "text": "that works"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:05:35",
    "text": "man, what a journey"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:05:37",
    "text": "we all deserve a raise"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-05-22 14:06:03",
    "text": ":the_horns:"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:07:01",
    "text": "one last probably impossible thing, when the module initially loads, it shows something like \"server render fail/waiting for island\""
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:07:13",
    "text": "any way to not show that or to show something else in its place?"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 14:08:09",
    "text": "that sounds like potentially a runtime error in your island"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-05-22 14:09:45",
    "text": "You might want to try disabling javascript in your browser temporarily and seeing what the result is (or looking at the plain HTML source)."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:10:54",
    "text": "ok, thanks, I'll try"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:11:05",
    "text": "I render an empty &lt;ul&gt;"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:11:11",
    "text": "not sure if that's enough to cause an issue"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:11:22",
    "text": "but I'll check without it"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:12:22",
    "text": "it's not that, I do see an error actually"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:12:23",
    "text": "```Uncaught Error: Minified React error #419; visit <https://reactjs.org/docs/error-decoder.html?invariant=419> for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\n    at vj (react-combined.mjs:1:101207)\n    at Uk (react-combined.mjs:1:129829)\n    at Tk (react-combined.mjs:1:123777)\n    at Sk (react-combined.mjs:1:123708)\n    at Hk (react-combined.mjs:1:123577)\n    at Fk (react-combined.mjs:1:118754)\n    at w (react-combined.mjs:1:9881)\n    at MessagePort.N (react-combined.mjs:1:10242)```"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 14:13:02",
    "text": "yeah i’m not sure if there’s a good reason the other real errors aren’t surfacing in the console, but they’re this:"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 14:13:05",
    "edited": {
      "time_stamp": "2023-05-22 14:13:10"
    },
    "text": "```Warning: React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\n    at TeamTabs (file:///var/task/components/NestedTeamTabsIsland.js:5:3)\n    at Lazy\n    at Suspense\n    at div\n    at Island (file:///var/task/node_modules/@HubSpot/cms-components/dist/server/index.js:654:3)\n    at NestedTeamTabs\n2023-05-22T20:10:01.054Z c0ba5c10-06be-4ebb-865d-0e8e07771461 ERROR Warning: React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports. at TeamTabs (file:///var/task/components/NestedTeamTabsIsland.js:5:3) at Lazy at Suspense at div at Island (file:///var/task/node_modules/@HubSpot/cms-components/dist/server/index.js:654:3) at NestedTeamTabs```"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:14:33",
    "text": "thank you, that makes sense / I can fix that"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 14:19:10",
    "text": "thanks for finding this, we missed that runtime errors like this within islands don’t get surfaced in the same way as outside of islands"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:19:36",
    "text": "happy to help!"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:21:13",
    "text": "the fix I pushed didn't actually fix it"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:21:28",
    "text": "I have an older module that also exports with the same name"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:21:37",
    "text": "maybe that's causing a clash somewhere?"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 14:24:08",
    "text": "hmm odd. they work after the server pass too"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:26:27",
    "text": "in the proxy version I can see the errors"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:26:35",
    "text": "related to server/client conflicts"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 14:26:56",
    "text": ":+1: i bet in the terminal window you’re running the server from the other errors will also be there"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:28:08",
    "text": "I think if I add \"clientOnly\" to the island I'm back where I started lol"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 14:28:19",
    "text": "yeah there should be a better solution"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:28:47",
    "text": "I think for server/client ids you have a solution but in this case there's an aria-label involved"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 14:29:11",
    "edited": {
      "time_stamp": "2023-05-22 14:29:20"
    },
    "text": "`clientOnly` islands should be pretty rare. it seems like this is specifically an issue with resolving the radix imports which should be solvable\nIMO"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:30:15",
    "text": "is that something that I can do or something that needs an update on your end?"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 14:30:23",
    "text": "not sure yet"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:31:07",
    "text": "there are 2 errors, the first is related to adding a key, I can do that"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 14:31:16",
    "text": "could you try importing the components directly rather than using `* as` ?"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 14:31:35",
    "text": ":+1: good to fix the key ones but that i don’t think will fail the server render"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:31:53",
    "text": "k, I'll try updating the import too"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 14:32:08",
    "text": "e.g. `import { Root, List, Trigger, … } from '@radix-ui/react-tabs'`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:34:13",
    "text": "redploying now"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:36:42",
    "text": "I still see the errors, but interestingly enough, I don't see the \"server error/waiting\" message"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:37:22",
    "text": "oh, nevermind, I do"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:37:55",
    "text": "that message doesn't show up in the proxy version, only the real live version"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:40:23",
    "edited": {
      "time_stamp": "2023-05-22 14:40:32"
    },
    "text": "I have an if statement that controls what gets returned. Does that not make it not \"pure\" and that's causing the error?"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 14:41:04",
    "text": "nope this is a node.js module resolution issue nothing to do with your code (besides the import maybe, but both your original import and the one you’re using now should both work)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:41:19",
    "text": "gotcha"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:41:29",
    "text": "in case it's related, adding a key didn't work"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 14:41:35",
    "text": "reproducing it with a basic version of your code on my end to try to track down a fix"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:41:39",
    "text": "and there's nothing about having to include a key in the radix docs"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 14:42:10",
    "text": "the key part does have to do with your code - because you’re mapping over an array to return react components you need to give react keys for each one so that it can keep track of them"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 14:42:31",
    "text": "<https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key>"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:43:13",
    "text": "yea, I'm familiar with that but it's not registering that I have a key"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 14:43:23",
    "text": "ah sorry must have misread"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 14:45:29",
    "text": "what’s the current specific key error?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:45:44",
    "text": "```NestedTeamTabsIsland.jsx:37 Warning: Each child in a list should have a unique \"key\" prop.\n\nCheck the render method of `TeamTabs`. See <https://reactjs.org/link/warning-keys> for more information.\n    at li\n    at TeamTabs (<http://flatiron.com.localhost:3000/components/islands/NestedTeamTabsIsland.jsx?t=1684788282614:19:13>)\n    at ClientRenderContextProvider (<http://flatiron.com.localhost:3000/node_modules/.vite/deps/@HubSpot_cms-components.js?v=522540a4:74:3>)\n    at Suspense```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:46:10",
    "text": "and when I click on\n```<http://flatiron.com.localhost:3000/components/islands/NestedTea>```\nin that link where it jumps to a section"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:46:14",
    "text": "it jumps to the if statement"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:46:18",
    "text": "instead of the list items"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:47:46",
    "text": "I'm using 2 different strings `key=\"tab1\"`"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 14:48:16",
    "text": "yeah your key usage looks right to me at first glance. it’s just a warning though and not an error so i’m going to focus on the module resolution part"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:48:26",
    "text": "k, yea, for sure"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 14:48:49",
    "text": "I bet it's because it's not being passed in as a prop, the &lt;li&gt; should have the key but I'm adding it to the component"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 14:49:39",
    "edited": {
      "time_stamp": "2023-05-22 14:49:48"
    },
    "text": "i think the component is the right place, whatever the top level JSX is in the iteration"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 15:09:16",
    "text": "ah i knew i should have checked the repo earlier…<https://github.com/radix-ui/primitives/pull/2130>"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 15:09:44",
    "text": "`@radix-ui/react-tabs@1.0.6-rc.6` should work"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:10:08",
    "text": "oh, awesome, I'll try that now"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:10:50",
    "text": "do I just swap that and then redeploy?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:10:55",
    "text": "or do I have to \"upgrade\" somehow"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 15:11:25",
    "text": "you should yarn install or whatever locally probably too but the key is updating your package.json and then re-build/re-deploy"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:11:34",
    "text": "gotcha"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 15:11:52",
    "text": "we currently do a `yarn install` in the cloud when building so it’ll pick up the new version there if you specify it"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:13:34",
    "text": "let me double check that version, if I do `npm install @radix-ui/react-tabs@1.0.6-rc.6` it throws an error"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 15:14:10",
    "text": "ah whoops 1.0.4 sorry"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 15:14:36",
    "text": "`npm install @radix-ui/react-tabs@1.0.4-rc.6`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:15:43",
    "text": "k, that worked"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:15:53",
    "text": "I had to manually update package.json"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:16:01",
    "text": "redeploying now"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:17:47",
    "text": "that fixed it!"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:17:52",
    "text": "thank you so much for your help"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:17:58",
    "text": "+ the key thing went away..."
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 15:18:07",
    "text": "awesome!!"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 15:18:21",
    "edited": {
      "time_stamp": "2023-05-22 15:18:29"
    },
    "text": "the test page you sent me before is still showing the failed server render it is that not up to date"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:19:21",
    "text": "I'm checking on that page so hopefully that's a cache or temp thing"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 15:19:59",
    "text": "ah there we go"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:20:13",
    "text": "I'm going to remove those extra keys I added and see what happens"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:20:20",
    "text": "I feel like radix handles that in this tab scenario"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:22:55",
    "text": "yea, that wasn't necessary"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:22:58",
    "text": "but weird that it came up"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 15:24:01",
    "text": "yeah i guess all bets are off when passing non-components to react"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:25:32",
    "text": "I'm going to re-read the docs but it seems like I just made an interactive component that renders on the server"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:26:12",
    "text": "and there's some kind of fancy option that lets me load it when it's visible I think..."
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 15:26:49",
    "text": "there is but for this use case if it’s the main content you probably want it loading asap"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:27:27",
    "text": "it loads lower down the page (not sure if that makes a difference)"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 15:27:37",
    "text": "ah ok yeah. that option is for if it may never become visible, then it can be never loaded at all"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 15:28:08",
    "text": "so then `visible` or `idle` , which waits for all other page load activity to complete, might be good fits"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:28:23",
    "text": "that's so interesting"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:28:32",
    "text": "I'll try that"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:30:43",
    "text": "`hydrateOn=\"visible\"`"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:31:48",
    "text": "last question, so what actually gets loaded/hydrated?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:31:54",
    "text": "the first time around just HTML"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:32:02",
    "text": "and then when it hyrdrates all of the React stuff?"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 15:32:52",
    "text": "yup exactly, the hydration is the tree of javascript files starting with whatever `?island` module you chose loading and rendering with react"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 15:32:58",
    "edited": {
      "time_stamp": "2023-05-22 15:33:04"
    },
    "text": "to support whatever interactivity you have in those files"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-05-22 15:33:14",
    "text": "you can see the files load in in the network tab if you like"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-05-22 15:34:28",
    "text": "Also some info at <https://github.com/HubSpot/cms-js-building-block-examples/blob/main/docs/appendix.md#server-sideclient-side-rendering> (and the links)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-05-22 15:35:23",
    "text": "thank you both, I'll review in more detail"
  }
]