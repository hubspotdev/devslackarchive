[
  {
    "text": "Hi there, i’m trying to validate the request headers from HubSpot webhooks when triggered by a workflow, but i can’t seem to get any `X-HubSpot-Signature` properties in the header. Could someone help me out here? also tried to grab the App ID from my developer test account but got the error `INVALID_APP_ID`\n\nany help is greatly appreciated!",
    "time_stamp": "2023-02-28 03:21:26",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-02-28 04:34:07"
      },
      {
        "time_stamp": "2023-02-28 04:34:39"
      },
      {
        "time_stamp": "2023-02-28 06:29:30"
      }
    ]
  },
  {
    "text": "Hi folks,\nI am trying to get the value \"*Assigned to*\" from `tasks` and seems that it is not set as a property or I might be looking at the wrong place\nAny help with this? Thanks!\n• endpoint: `/crm/v3/objects/tasks`\n",
    "time_stamp": "2023-02-28 03:36:36",
    "reply_count": 11,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-02-28 06:30:28"
      },
      {
        "time_stamp": "2023-02-28 06:30:51"
      },
      {
        "time_stamp": "2023-02-28 06:31:11"
      },
      {
        "time_stamp": "2023-02-28 06:31:21"
      },
      {
        "time_stamp": "2023-02-28 06:31:38"
      },
      {
        "time_stamp": "2023-02-28 06:32:38"
      },
      {
        "time_stamp": "2023-02-28 06:32:46"
      },
      {
        "time_stamp": "2023-02-28 06:32:48"
      },
      {
        "time_stamp": "2023-02-28 06:33:23"
      },
      {
        "time_stamp": "2023-02-28 06:33:57"
      },
      {
        "time_stamp": "2023-02-28 06:34:10"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Nilesh Jadhav",
      "poster_handle": "nileshj"
    },
    "time_stamp": "2023-02-28 04:07:24",
    "text": "hello huys,, where to find portalid &amp; GUID in HubSpot",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-02-28 04:37:21"
      }
    ]
  },
  {
    "text": "",
    "time_stamp": "2023-02-28 04:07:41"
  },
  {
    "text": "Solved this.\n\nI was missing the *APP ID*, which I couldn’t find for ages. My account was specifically a test account created from a developer account.\n1. Call the oauth endpoint to get your APP ID (`appId` in response)\n2. Add this APP ID when selecting `Include request signature in header`",
    "time_stamp": "2023-02-28 04:34:07"
  },
  {
    "text": "",
    "time_stamp": "2023-02-28 04:34:39"
  },
  {
    "poster": {
      "poster_name": "Alberto Zordan",
      "poster_handle": "alberto.zordan"
    },
    "time_stamp": "2023-02-28 04:37:21",
    "edited": {
      "time_stamp": "2023-02-28 06:41:26"
    },
    "text": "You can read the portal id from the url of any page of your HS portal or click at the top right corner where there is your avatar and the portal name (the id is right there underneath the name).\nFor the form id the easiest way is to go to the forms' page, click on one to edit it and find the id in the url between \"/editor/\" and \"/edit/\""
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 06:29:30",
    "text": "is your app installed on this account?"
  },
  {
    "text": "",
    "time_stamp": "2023-02-28 06:30:28"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 06:30:51",
    "text": "It's going to show up as an id you can then use the owners endpoint to figure out the name and email"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 06:31:11",
    "text": "<https://developers.HubSpot.com/docs/api/crm/owners>"
  },
  {
    "poster": {
      "poster_name": "Jorge Simonovich",
      "poster_handle": "jorgesimonovich"
    },
    "time_stamp": "2023-02-28 06:31:21",
    "text": "One HubSpot user can create the task, and it can be assigned to other user"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 06:31:38",
    "text": "correct"
  },
  {
    "poster": {
      "poster_name": "Jorge Simonovich",
      "poster_handle": "jorgesimonovich"
    },
    "time_stamp": "2023-02-28 06:32:38",
    "text": "Found out this endpoint `/crm/v3/objects/tasks/properties`  that has more properties that the ones showed on the documentation, I found the solution!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 06:32:46",
    "text": "oh perfect"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 06:32:48",
    "text": "good work"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 06:33:23",
    "text": "yeah you can also find those properties in the property editor as well"
  },
  {
    "poster": {
      "poster_name": "Jorge Simonovich",
      "poster_handle": "jorgesimonovich"
    },
    "time_stamp": "2023-02-28 06:33:57",
    "text": "Thanks a lot for jumping on this :grinning:!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 06:34:10",
    "text": "of course, glad you found it"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 06:36:12",
    "text": "Nope so private apps use bearer tokens and these tokens are permanent (unless you delete the app) so you can just pop them into requests and use them forever"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 06:36:44",
    "text": "Sorry for the confuse with the hapikey you mentioned: \"\"Authorization: Bearer \" . APIKEY\n\nIs this correct, and is the API key the developer API key that I can retrieve from the dev account?\" and that confused me a little"
  },
  {
    "poster": {
      "poster_name": "Erik Pendleton",
      "poster_handle": "ependleton"
    },
    "time_stamp": "2023-02-28 08:36:00",
    "text": "Hey <@U01QVR44MEY>! Sure thing, thanks for taking a look –\n\n```const fileName = 'test_data.csv';\n\nconst importRequest = {\n    name: 'import(' + fileName + ')',\n    files: [\n        {\n            fileName: fileName,\n            fileImportPage: {\n                hasHeader: true,\n                columnMappings: [\n                    {\n                        columnName: 'email',\n                        propertyName: 'email',\n                        columnObjectType: 'CONTACT',\n                    },\n                    {\n                        columnName: 'policy_id',\n                        propertyName: 'policy_id',\n                        columnObjectType: '2-12641502',\n                    },\n                    {\n                        columnName: 'party_id',\n                        propertyName: 'party_id',\n                        columnObjectType: '2-12641507',\n                    },\n                ],\n            },\n        },\n    ],\n};```"
  },
  {
    "poster": {
      "poster_name": "Erik Pendleton",
      "poster_handle": "ependleton"
    },
    "time_stamp": "2023-02-28 08:37:38",
    "text": "Good to know about the order of the columns in the `importRequest` having to match the order of the .csv!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 08:52:09",
    "text": "and just to double check, policy_id and party_id aren't unique properties"
  },
  {
    "poster": {
      "poster_name": "Jody",
      "poster_handle": "jduffy"
    },
    "time_stamp": "2023-02-28 08:57:59",
    "text": "Hi, What's the correct way to get all notes and calls that are attached to a deal?",
    "reply_count": 13,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-02-28 09:00:07"
      },
      {
        "time_stamp": "2023-02-28 09:00:17"
      },
      {
        "time_stamp": "2023-02-28 09:00:31"
      },
      {
        "time_stamp": "2023-02-28 09:04:47"
      },
      {
        "time_stamp": "2023-02-28 09:05:37"
      },
      {
        "time_stamp": "2023-02-28 09:05:39"
      },
      {
        "time_stamp": "2023-02-28 09:06:43"
      },
      {
        "time_stamp": "2023-02-28 09:06:50"
      },
      {
        "time_stamp": "2023-02-28 09:06:54"
      },
      {
        "time_stamp": "2023-02-28 09:07:12"
      },
      {
        "time_stamp": "2023-02-28 09:07:23"
      },
      {
        "time_stamp": "2023-02-28 09:07:47"
      },
      {
        "time_stamp": "2023-02-28 09:08:01"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Erik Pendleton",
      "poster_handle": "ependleton"
    },
    "time_stamp": "2023-02-28 08:58:00",
    "text": "They actually are unique properties for those custom objects, with the intention being that HS would recognize these as existing objects (per the first import / Step 1) and then update them with a new associated contact. If I rebuild the custom objects without any required properties, the Step 2 import just creates a new/duplicate Party and Policy"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 08:58:26",
    "text": "ah understood"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 08:58:50",
    "text": "You'll want to use `\n```\"idColumnType\": \"HubSpot_ALTERNATE_ID\"```\n`"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 08:59:00",
    "text": "on those columns then"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 08:59:04",
    "text": "as well as email"
  },
  {
    "text": "",
    "time_stamp": "2023-02-28 08:59:15"
  },
  {
    "poster": {
      "poster_name": "Erik Pendleton",
      "poster_handle": "ependleton"
    },
    "time_stamp": "2023-02-28 08:59:37",
    "text": "Interesting, let me try that!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 09:00:07",
    "text": "I personally think using the search endpoint is the best way"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 09:00:17",
    "text": "<https://developers.HubSpot.com/docs/api/crm/search>"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 09:00:31",
    "text": "<https://developers.HubSpot.com/docs/api/crm/search#search-through-associations>"
  },
  {
    "poster": {
      "poster_name": "Jody",
      "poster_handle": "jduffy"
    },
    "time_stamp": "2023-02-28 09:04:47",
    "text": "Does that mean that I need to search for calls and notes separately?"
  },
  {
    "time_stamp": "2023-02-28 09:05:37",
    "text": "bingo"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 09:05:39",
    "text": "yep"
  },
  {
    "poster": {
      "poster_name": "Jody",
      "poster_handle": "jduffy"
    },
    "time_stamp": "2023-02-28 09:06:43",
    "text": "And just to make sure I fully understand. I would do a search on the calls endpoint for all calls associated to that deal using `associations.deal`"
  },
  {
    "poster": {
      "poster_name": "Jody",
      "poster_handle": "jduffy"
    },
    "time_stamp": "2023-02-28 09:06:50",
    "text": "then do the same on the notes endpoint?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 09:06:54",
    "text": "yes exactly"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 09:07:12",
    "text": "and the value you're going to use to search with is the deal id"
  },
  {
    "poster": {
      "poster_name": "Jody",
      "poster_handle": "jduffy"
    },
    "time_stamp": "2023-02-28 09:07:23",
    "text": "Amazing thanks. Realised that I had a report that was being generated via the v1 API so havint ot update."
  },
  {
    "poster": {
      "poster_name": "Jody",
      "poster_handle": "jduffy"
    },
    "time_stamp": "2023-02-28 09:07:47",
    "text": "Really appreciate the quick reply and helpful answer"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 09:08:01",
    "text": "of course, let me know if you run into any issues"
  },
  {
    "poster": {
      "poster_name": "Erik Pendleton",
      "poster_handle": "ependleton"
    },
    "time_stamp": "2023-02-28 09:44:14",
    "text": "This seems to have worked !!! <@U01QVR44MEY> <@U023FULKG1K>"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 09:44:32",
    "text": "Nice"
  },
  {
    "poster": {
      "poster_name": "Erik Pendleton",
      "poster_handle": "ependleton"
    },
    "time_stamp": "2023-02-28 09:47:10",
    "text": "Thank you so much!! :muscle: :brain:  Now that you mention it, I do recall seeing that column property mentioned in the API docs from your screenshot above, but it wasn't super clear that this was necessary here. How have you been learning about the Imports API? It seems like there isn't a ton of documentation/examples out there"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 09:47:57",
    "text": "Of course bro, I just learned that API inside and out because I've used it a lot"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 09:48:09",
    "text": "Yeah might need to write a blog on it..."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 09:48:16",
    "edited": {
      "time_stamp": "2023-02-28 09:48:25"
    },
    "text": "CC <@U03MLCLS5BN>"
  },
  {
    "text": "Hello,\nI am an analyst trying to get basic API calls to work. we are a small company just integrating into HubSpot. I'm learning as I go am a bit confused by the documentation.\nAcross the site I see warnings like the one attached warnings like the first image attached that API keys will no longer be able to used or generated well past the current date.\n\nOn the Authentication Overview page found here:\n<https://legacydocs.HubSpot.com/docs/methods/auth/oauth-overview>\n it gives the same warning  that the API key will no longer be able to be used and one should use either OAuth or a private app access token for authorization.\n\nOn my applications page There is a button: 'Get HubSpot API key' , also attached in an image.\n\nAll of the warning are telling me that I should no longer be able to generate an API key  at this date.\n\nIs the shutting down behind schedule? Is this button the Private app access token?\n\nI am very new to this, and have a ton to learn, it is very helpful to know you are going in the right direction.\n\nthank you",
    "time_stamp": "2023-02-28 10:50:21",
    "reply_count": 16,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-02-28 10:55:59"
      },
      {
        "time_stamp": "2023-02-28 10:56:10"
      },
      {
        "time_stamp": "2023-02-28 10:56:14"
      },
      {
        "time_stamp": "2023-02-28 10:56:25"
      },
      {
        "time_stamp": "2023-02-28 10:56:32"
      },
      {
        "time_stamp": "2023-02-28 10:57:42"
      },
      {
        "time_stamp": "2023-02-28 10:57:59"
      },
      {
        "time_stamp": "2023-02-28 10:58:13"
      },
      {
        "time_stamp": "2023-02-28 10:59:25"
      },
      {
        "time_stamp": "2023-02-28 11:00:43"
      },
      {
        "time_stamp": "2023-02-28 11:02:05"
      },
      {
        "time_stamp": "2023-02-28 11:02:44"
      },
      {
        "time_stamp": "2023-02-28 11:05:53"
      },
      {
        "time_stamp": "2023-02-28 11:06:08"
      },
      {
        "time_stamp": "2023-02-28 11:26:59"
      },
      {
        "time_stamp": "2023-02-28 11:27:13"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 10:55:59",
    "text": "So that second screenshot is a developer account"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 10:56:10",
    "text": "Developer apikeys aren't being shut down yet"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 10:56:14",
    "text": "Just normal api keys"
  },
  {
    "poster": {
      "poster_name": "Behavior Exchange",
      "poster_handle": "behaviorexchange"
    },
    "time_stamp": "2023-02-28 10:56:25",
    "text": "Yes"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 10:56:32",
    "text": "normal api keys are being phased out completely today, some people got an extension"
  },
  {
    "poster": {
      "poster_name": "Behavior Exchange",
      "poster_handle": "behaviorexchange"
    },
    "time_stamp": "2023-02-28 10:57:42",
    "text": "Ok, so it is different from the private app access token mentioned  on the Authentication Overview page"
  },
  {
    "poster": {
      "poster_name": "Behavior Exchange",
      "poster_handle": "behaviorexchange"
    },
    "time_stamp": "2023-02-28 10:57:59",
    "text": "the button found on the developer account"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 10:58:13",
    "text": "yes"
  },
  {
    "poster": {
      "poster_name": "Behavior Exchange",
      "poster_handle": "behaviorexchange"
    },
    "time_stamp": "2023-02-28 10:59:25",
    "text": "And since we are just beginning to integrate with HubSpot I should definitely not use the developer keys because they will be gone tomorrow"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 11:00:43",
    "text": "correct, you are also looking at a couple of different things, you are currently looking at apps (which can be installed on multiple accounts) I don't think you need this (correct me if I'm wrong), I think you just want to use a private app (basically the same as an apikey but limited and just for one account)"
  },
  {
    "poster": {
      "poster_name": "Behavior Exchange",
      "poster_handle": "behaviorexchange"
    },
    "time_stamp": "2023-02-28 11:02:05",
    "text": "yes, currently I am just trying to figure out basic calls.\n\nthe end goal would be to quickly import contacts from a separate database"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 11:02:44",
    "text": "yep so you'll want to use private apps: <https://developers.HubSpot.com/docs/api/private-apps>"
  },
  {
    "text": "Thank you Carter, I think that is what I was looking for",
    "time_stamp": "2023-02-28 11:05:53",
    "edited": {
      "time_stamp": "2023-02-28 11:06:28"
    }
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 11:06:08",
    "text": "Sick"
  },
  {
    "poster": {
      "poster_name": "Behavior Exchange",
      "poster_handle": "behaviorexchange"
    },
    "time_stamp": "2023-02-28 11:26:59",
    "text": "I have authentication working,\nthank you\n\nnow work begins"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 11:27:13",
    "text": "of course, no problem"
  },
  {
    "poster": {
      "poster_name": "Eric Goldman",
      "poster_handle": "eric732"
    },
    "time_stamp": "2023-02-28 13:03:24",
    "edited": {
      "time_stamp": "2023-02-28 13:06:46"
    },
    "text": "Howdy everyone - at Sequin, we’ve delved deep into the HubSpot API. Since we first wrote about our process last year, we’ve learned a lot about running this system in production with large HubSpot instances. We wanted to share what we learned by updating our blog post to cover\n1. How to detect deletes through the API\n2. How to sync relationships/associations\n3. How the `/search` endpoint behaves when objects are rapidly updated in HubSpot\nHopefully the community finds this helpful!\n\n<https://blog.sequin.io/HubSpot-to-postgres/>",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-02-28 13:17:30"
      },
      {
        "time_stamp": "2023-02-28 15:46:45"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 13:17:30",
    "text": "This is awesome, I'll read anything the Sequin team puts out"
  },
  {
    "poster": {
      "poster_name": "Mansoor Bahramand",
      "poster_handle": "mansoor"
    },
    "time_stamp": "2023-02-28 13:17:59",
    "text": "Hey everyone, I’m having troubles getting the deals search to work correctly. I keep getting an error where it can’t find the values property (it is there). Anyone else face this issue and have a solution?",
    "reply_count": 29,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-02-28 13:18:26"
      },
      {
        "time_stamp": "2023-02-28 13:20:13"
      },
      {
        "time_stamp": "2023-02-28 13:21:17"
      },
      {
        "time_stamp": "2023-02-28 13:21:50"
      },
      {
        "time_stamp": "2023-02-28 13:22:17"
      },
      {
        "time_stamp": "2023-02-28 13:23:20"
      },
      {
        "time_stamp": "2023-02-28 13:23:28"
      },
      {
        "time_stamp": "2023-02-28 13:23:38"
      },
      {
        "time_stamp": "2023-02-28 13:24:02"
      },
      {
        "time_stamp": "2023-02-28 13:25:12"
      },
      {
        "time_stamp": "2023-02-28 13:25:42"
      },
      {
        "time_stamp": "2023-02-28 13:25:50"
      },
      {
        "time_stamp": "2023-02-28 13:26:36"
      },
      {
        "time_stamp": "2023-02-28 13:27:19"
      },
      {
        "time_stamp": "2023-02-28 13:27:59"
      },
      {
        "time_stamp": "2023-02-28 13:28:27"
      },
      {
        "time_stamp": "2023-02-28 13:29:27"
      },
      {
        "time_stamp": "2023-02-28 13:29:58"
      },
      {
        "time_stamp": "2023-02-28 13:30:52"
      },
      {
        "time_stamp": "2023-02-28 13:31:08"
      },
      {
        "time_stamp": "2023-02-28 13:31:11"
      },
      {
        "time_stamp": "2023-02-28 13:31:24"
      },
      {
        "time_stamp": "2023-02-28 13:31:28"
      },
      {
        "time_stamp": "2023-02-28 13:31:32"
      },
      {
        "time_stamp": "2023-02-28 13:31:41"
      },
      {
        "time_stamp": "2023-02-28 13:32:18"
      },
      {
        "time_stamp": "2023-02-28 13:35:20"
      },
      {
        "time_stamp": "2023-02-28 13:35:29"
      },
      {
        "time_stamp": "2023-02-28 13:35:36"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 13:18:26",
    "edited": {
      "time_stamp": "2023-02-28 13:18:30"
    },
    "text": "you mean the deal amount property?"
  },
  {
    "poster": {
      "poster_name": "Mansoor Bahramand",
      "poster_handle": "mansoor"
    },
    "time_stamp": "2023-02-28 13:20:13",
    "text": "No, I am looking to search by a specific dropdown. Example: dropdown can have 4 values ( A, B, C, D)\n\nIn search I want to return all deals with values (A,C,D) .\n\nUsing operator “IN” and providing values as `[‘A’, ‘C’, ‘D’]"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 13:21:17",
    "text": "just ran a test and didn't have this issue"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 13:21:50",
    "edited": {
      "time_stamp": "2023-02-28 13:22:05"
    },
    "text": "are you trying to search for all deals with `a` and `c` and `d`? or just any that have any of those?"
  },
  {
    "poster": {
      "poster_name": "Mansoor Bahramand",
      "poster_handle": "mansoor"
    },
    "time_stamp": "2023-02-28 13:22:17",
    "text": "So the values can be either or"
  },
  {
    "poster": {
      "poster_name": "Mansoor Bahramand",
      "poster_handle": "mansoor"
    },
    "time_stamp": "2023-02-28 13:23:20",
    "text": "I would want all deals that are in any of those values"
  },
  {
    "poster": {
      "poster_name": "Mansoor Bahramand",
      "poster_handle": "mansoor"
    },
    "time_stamp": "2023-02-28 13:23:28",
    "text": "here is my code, can you spot something that is off"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 13:23:38",
    "text": "have you used the values array instead of IN?"
  },
  {
    "text": "",
    "time_stamp": "2023-02-28 13:24:02"
  },
  {
    "poster": {
      "poster_name": "Mansoor Bahramand",
      "poster_handle": "mansoor"
    },
    "time_stamp": "2023-02-28 13:25:12",
    "text": "So do you mean remove the operator and just keep it as EQ?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 13:25:42",
    "text": "yep try that"
  },
  {
    "poster": {
      "poster_name": "Mansoor Bahramand",
      "poster_handle": "mansoor"
    },
    "time_stamp": "2023-02-28 13:25:50",
    "edited": {
      "time_stamp": "2023-02-28 13:26:00"
    },
    "text": "Didn’t work it says it needs value"
  },
  {
    "text": "This is the response I am getting with the above code",
    "time_stamp": "2023-02-28 13:26:36"
  },
  {
    "text": "This filter is giving that error?",
    "time_stamp": "2023-02-28 13:27:19"
  },
  {
    "poster": {
      "poster_name": "Mansoor Bahramand",
      "poster_handle": "mansoor"
    },
    "time_stamp": "2023-02-28 13:27:59",
    "text": "Yeah if I change it to EQ, I’ll get some response"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 13:28:27",
    "text": "Ok that's strange that request shouldn't have that problem let me run a test on my end"
  },
  {
    "text": "When I try with EQ it doesn’t give me an error but it doesn’t return the results",
    "time_stamp": "2023-02-28 13:29:27"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 13:29:58",
    "text": "haha that's kinda funny"
  },
  {
    "poster": {
      "poster_name": "Mansoor Bahramand",
      "poster_handle": "mansoor"
    },
    "time_stamp": "2023-02-28 13:30:52",
    "text": "Yeah I don’t get it"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 13:31:08",
    "text": "you have limit set to 0"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 13:31:11",
    "text": "set it to 10"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 13:31:24",
    "text": "or 100"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 13:31:28",
    "text": "or 27"
  },
  {
    "poster": {
      "poster_name": "Mansoor Bahramand",
      "poster_handle": "mansoor"
    },
    "time_stamp": "2023-02-28 13:31:32",
    "text": "That was the results part"
  },
  {
    "poster": {
      "poster_name": "Mansoor Bahramand",
      "poster_handle": "mansoor"
    },
    "time_stamp": "2023-02-28 13:31:41",
    "text": "How funny!"
  },
  {
    "poster": {
      "poster_name": "Mansoor Bahramand",
      "poster_handle": "mansoor"
    },
    "time_stamp": "2023-02-28 13:32:18",
    "text": "I think that was both parts!"
  },
  {
    "poster": {
      "poster_name": "Mansoor Bahramand",
      "poster_handle": "mansoor"
    },
    "time_stamp": "2023-02-28 13:35:20",
    "text": "TY!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 13:35:29",
    "text": "of course"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 13:35:36",
    "text": "let me know if you have any other issues"
  },
  {
    "poster": {
      "poster_name": "Brandon Looker",
      "poster_handle": "brandon628"
    },
    "time_stamp": "2023-02-28 13:41:02",
    "text": "Hey <@U01QVR44MEY> maybe we take this in another thread as this is getting long but we followed your instructions and are still encountering issues. After marking the tiered scopes as optional, we are still getting an error of  `invalid scope name` . We have copy and pasted all of the scopes from the <https://developers.HubSpot.com/docs/api/working-with-oauth|doc> several times to ensure there were grammatical errors.\n\nSorry to be a bother with this, just cant for the life of me seem to get this corrected"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 14:56:19",
    "text": "Hey Brandon, yeah that is very strange do you want to share your request url? you can remove the client id to keep that secret"
  },
  {
    "poster": {
      "poster_name": "Niko Dixon",
      "poster_handle": "niko209"
    },
    "time_stamp": "2023-02-28 15:46:45",
    "text": "Top notch article. Well written, highly informative."
  },
  {
    "poster": {
      "poster_name": "Jakob Madsen",
      "poster_handle": "jakobbsm"
    },
    "time_stamp": "2023-02-28 15:58:54",
    "edited": {
      "time_stamp": "2023-02-28 16:02:51"
    },
    "text": "Hi everyone. I have encountered a case where one of the app users has \"Create and associate companies with contacts\" enabled which means that if I wish to do the process of: Create contact, call associate endpoint, then assuming it was unable to match due to domain I'd have a newly generated company and the one I associated. Is there a way to set the company on creation? I read that associatedcompanyid is deprecated due to many-to-many relationships. While not documented, I tried to give it a shot by adding associations like below to see if it worked like with notes, but it seemed to not do anything. (1234567890 would have been the correct company ID instead)\n```{\n    \"properties\": {\n        \"firstname\": \"TEST\",\n        \"email\": \"<mailto:notarealmail@example.com|notarealmail@example.com>\"\n    },\n    \"associations\": [\n        {\n            \"to\": {\n                \"id\": 1234567890\n            },\n            \"types\": [\n                {\n                    \"associationCategory\": \"HubSpot_DEFINED\",\n                    \"associationTypeId\": 1,\n                    \"label\": \"Primary\"\n                }\n            ]\n        },\n        {\n            \"to\": {\n                \"id\": 1234567890\n            },\n            \"types\": [\n                {\n                    \"associationCategory\": \"HubSpot_DEFINED\",\n                    \"associationTypeId\": 279\n                }\n            ]\n        }\n    ]\n}```",
    "reply_count": 6,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-02-28 18:16:58"
      },
      {
        "time_stamp": "2023-02-28 18:17:13"
      },
      {
        "time_stamp": "2023-03-01 13:10:23"
      },
      {
        "time_stamp": "2023-03-01 13:11:33"
      },
      {
        "time_stamp": "2023-03-01 13:12:40"
      },
      {
        "time_stamp": "2023-03-01 13:13:05"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Shalini Polimetla",
      "poster_handle": "spolimetla"
    },
    "time_stamp": "2023-02-28 17:34:13",
    "text": "Hi,\nI have created a view in my HubSpot and would like to get deals in that view. Is there a way to do that using postman?\nI am getting my deals now using this url \"<https://api.hubapi.com/crm/v3/objects/deals/>\" which is resulting in \"RecordID\namount\nclosedate\ncreatedAt\ncreatedate\ndealname\ndealstage\nhs_lastmodifieddate\nhs_object_id\nid\npipeline\nupdatedAt\"\nI need companyid, pipelineid,company name, etc. too",
    "reply_count": 57,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-02-28 18:14:58"
      },
      {
        "time_stamp": "2023-02-28 19:43:14"
      },
      {
        "time_stamp": "2023-02-28 19:43:36"
      },
      {
        "time_stamp": "2023-02-28 21:21:30"
      },
      {
        "time_stamp": "2023-03-01 10:35:49"
      },
      {
        "time_stamp": "2023-03-01 10:36:06"
      },
      {
        "time_stamp": "2023-03-01 10:37:21"
      },
      {
        "time_stamp": "2023-03-01 10:37:23"
      },
      {
        "time_stamp": "2023-03-01 10:38:24"
      },
      {
        "time_stamp": "2023-03-01 10:38:29"
      },
      {
        "time_stamp": "2023-03-01 10:44:13"
      },
      {
        "time_stamp": "2023-03-01 10:44:20"
      },
      {
        "time_stamp": "2023-03-01 10:44:36"
      },
      {
        "time_stamp": "2023-03-01 10:44:43"
      },
      {
        "time_stamp": "2023-03-01 10:44:51"
      },
      {
        "time_stamp": "2023-03-01 10:45:10"
      },
      {
        "time_stamp": "2023-03-01 10:45:13"
      },
      {
        "time_stamp": "2023-03-01 10:45:29"
      },
      {
        "time_stamp": "2023-03-01 10:45:32"
      },
      {
        "time_stamp": "2023-03-01 10:45:45"
      },
      {
        "time_stamp": "2023-03-01 10:45:49"
      },
      {
        "time_stamp": "2023-03-01 10:45:55"
      },
      {
        "time_stamp": "2023-03-01 10:46:07"
      },
      {
        "time_stamp": "2023-03-01 10:46:20"
      },
      {
        "time_stamp": "2023-03-01 10:47:08"
      },
      {
        "time_stamp": "2023-03-01 10:47:30"
      },
      {
        "time_stamp": "2023-03-01 10:47:42"
      },
      {
        "time_stamp": "2023-03-01 10:47:49"
      },
      {
        "time_stamp": "2023-03-01 10:47:53"
      },
      {
        "time_stamp": "2023-03-01 10:47:56"
      },
      {
        "time_stamp": "2023-03-01 10:48:18"
      },
      {
        "time_stamp": "2023-03-01 10:48:59"
      },
      {
        "time_stamp": "2023-03-01 10:49:46"
      },
      {
        "time_stamp": "2023-03-01 10:52:43"
      },
      {
        "time_stamp": "2023-03-01 10:53:14"
      },
      {
        "time_stamp": "2023-03-01 10:54:17"
      },
      {
        "time_stamp": "2023-03-01 10:54:45"
      },
      {
        "time_stamp": "2023-03-01 10:54:53"
      },
      {
        "time_stamp": "2023-03-01 10:56:55"
      },
      {
        "time_stamp": "2023-03-01 10:57:22"
      },
      {
        "time_stamp": "2023-03-01 10:57:38"
      },
      {
        "time_stamp": "2023-03-01 10:58:08"
      },
      {
        "time_stamp": "2023-03-01 10:58:53"
      },
      {
        "time_stamp": "2023-03-01 10:59:11"
      },
      {
        "time_stamp": "2023-03-01 11:00:02"
      },
      {
        "time_stamp": "2023-03-01 11:00:07"
      },
      {
        "time_stamp": "2023-03-01 11:00:10"
      },
      {
        "time_stamp": "2023-03-01 11:00:33"
      },
      {
        "time_stamp": "2023-03-01 11:00:42"
      },
      {
        "time_stamp": "2023-03-01 11:00:51"
      },
      {
        "time_stamp": "2023-03-01 11:01:03"
      },
      {
        "time_stamp": "2023-03-01 11:01:14"
      },
      {
        "time_stamp": "2023-03-01 11:02:02"
      },
      {
        "time_stamp": "2023-03-01 11:02:39"
      },
      {
        "time_stamp": "2023-03-01 11:02:54"
      },
      {
        "time_stamp": "2023-05-02 15:05:08"
      },
      {
        "time_stamp": "2023-05-03 07:21:47"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 18:14:58",
    "text": "you need to use filters to show certain deals in your view, which filters are you using"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 18:16:58",
    "text": "Nope so that way is really just for engagements like notes and emails"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 18:17:13",
    "text": "you can read the associations for a given object like that but not create"
  },
  {
    "poster": {
      "poster_name": "Shalini Polimetla",
      "poster_handle": "spolimetla"
    },
    "time_stamp": "2023-02-28 19:43:14",
    "text": "I didnt use any"
  },
  {
    "poster": {
      "poster_name": "Shalini Polimetla",
      "poster_handle": "spolimetla"
    },
    "time_stamp": "2023-02-28 19:43:36",
    "text": "no idea what to use"
  },
  {
    "poster": {
      "poster_name": "Aldo Carrillo",
      "poster_handle": "aldo652"
    },
    "time_stamp": "2023-02-28 21:01:43",
    "text": "<https://developers.HubSpot.com/docs/api/crm/associations/v3>  I guess you can use list associations type endpoint"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-02-28 21:21:30",
    "text": "well you can't create filters for a view in postman, if that's what you're asking. Sorry I'm just a little confused by what you're trying to do"
  }
]