[
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-14 04:37:15",
    "text": "<@UU34NMHJB> HubL don't seem to be supported yet but it does seem like it's something they are working on. There is GraphQL support that solves at least a big chunk of the issue (<https://github.com/HubSpot/cms-js-building-block-examples/tree/main/graphql-storybook|example here>)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-14 04:38:42",
    "text": "While I happen to be reorganizing my project, there's no significance to the `/island` `/module` `/partials` folders right? I'm wondering if I should instead just organize by component if I am always using an island (more or less)",
    "reply_count": 7,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-07-14 04:45:10"
      },
      {
        "time_stamp": "2023-07-14 06:00:30"
      },
      {
        "time_stamp": "2023-07-14 06:02:12"
      },
      {
        "time_stamp": "2023-07-14 06:02:17"
      },
      {
        "time_stamp": "2023-07-14 06:02:40"
      },
      {
        "time_stamp": "2023-07-14 06:03:18"
      },
      {
        "time_stamp": "2023-07-14 06:03:27"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-14 04:45:10",
    "text": "yea, looks like the dev server is expecting a /modules and /partials folder at the very least. Forgot about that"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-07-14 06:00:30",
    "text": "Yep - `/modules` and `/partials` is the convention by which the build process and dev server know to look for \"entry points\". You can though have very thin entry points if that helps organization and then have a `/components` directory or `/app` directory or whatever that those entry points import from."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-14 06:02:12",
    "text": "so far I have this:"
  },
  {
    "text": "",
    "time_stamp": "2023-07-14 06:02:17"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-14 06:02:40",
    "text": "technically I'd like to flip components and modules but wasn't sure if I could do that"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-14 06:03:18",
    "text": "although, not sure if I definitely want to do that..."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-14 06:03:27",
    "text": "this seems to work pretty well"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-14 06:04:42",
    "edited": {
      "time_stamp": "2023-07-14 06:05:53"
    },
    "text": "Is there a way to get around CORS policy when proxying but also making HS API requests using serverless functions?",
    "reply_count": 20,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-07-14 11:50:24"
      },
      {
        "time_stamp": "2023-07-14 11:50:52"
      },
      {
        "time_stamp": "2023-07-14 11:50:56"
      },
      {
        "time_stamp": "2023-07-14 11:54:15"
      },
      {
        "time_stamp": "2023-07-14 11:54:16"
      },
      {
        "time_stamp": "2023-07-14 11:55:31"
      },
      {
        "time_stamp": "2023-07-14 11:56:24"
      },
      {
        "time_stamp": "2023-07-14 11:57:38"
      },
      {
        "time_stamp": "2023-07-14 11:58:01"
      },
      {
        "time_stamp": "2023-07-14 11:58:47"
      },
      {
        "time_stamp": "2023-07-14 11:58:54"
      },
      {
        "time_stamp": "2023-07-14 11:59:03"
      },
      {
        "time_stamp": "2023-07-14 11:59:17"
      },
      {
        "time_stamp": "2023-07-14 12:00:02"
      },
      {
        "time_stamp": "2023-07-14 12:00:20"
      },
      {
        "time_stamp": "2023-07-14 12:00:41"
      },
      {
        "time_stamp": "2023-07-14 12:01:38"
      },
      {
        "time_stamp": "2023-07-14 12:01:58"
      },
      {
        "time_stamp": "2023-07-14 12:02:44"
      },
      {
        "time_stamp": "2023-07-14 12:03:04"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-07-14 06:05:43",
    "text": "Currently a GraphQL query is not able to have reference to a passed variable - the contact object for example as you say."
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-07-14 11:50:24",
    "text": "I thought we had a thread about this before and we made you able to call serverless functions through the same local proxy domain (so there would be no CORs issue). :eyes: …"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-14 11:50:52",
    "text": "hmm...let me look back — thought we never figured it out"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-07-14 11:50:56",
    "text": "<https://HubSpotdev.slack.com/archives/C04AY1H2204/p1685129244601289?thread_ts=1685039913.125219&amp;cid=C04AY1H2204>"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-14 11:54:15",
    "text": "OH YEAAAA, it's all coming back to me. And the solution is great"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-14 11:54:16",
    "text": "thank you"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-07-14 11:55:31",
    "text": "Adding a note for us to document this"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-14 11:56:24",
    "text": "I kinda miss that google doc"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-07-14 11:57:38",
    "text": "Interesting, anything specific better with ^ google doc compared to the <https://github.com/HubSpot/cms-js-building-block-examples#documentation> markdown files?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-14 11:58:01",
    "text": "there was something interesting about being able to see everything all at once"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-07-14 11:58:47",
    "text": "Got it, makes a ton of sense"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-07-14 11:58:54",
    "text": "maybe we should move onto whatever framework that every library uses these days, with the cmd+K search"
  },
  {
    "poster": {
      "poster_name": "Ben Briggs",
      "poster_handle": "bbriggs"
    },
    "time_stamp": "2023-07-14 11:59:03",
    "text": "e.g. <https://vitejs.dev/config/>"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-14 11:59:17",
    "text": "I use cmd+K everywhere for everything so yea"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-14 12:00:02",
    "text": "the experience for everyone going into these docs is probably wildly different"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-14 12:00:20",
    "text": "I was learning just regular react at the same time"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-14 12:00:41",
    "text": "it'll be tough to strike a balance but over-explaining is always best IMO"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-07-14 12:01:38",
    "text": "+1 to Ben’s point for us to make a full doc page with search built (source from our markdown files). Looks like Vite uses <https://vitepress.dev/> to create that"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-07-14 12:01:58",
    "text": "Probably going to wait on that for a bit though"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-14 12:02:44",
    "text": "I've heard a lot of great things about contentlayer for that kind of thing too"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-07-14 12:03:04",
    "text": "<https://www.contentlayer.dev/>"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-07-14 13:47:38",
    "text": "I wanted to follow up here and offer a pathway for how this can work. I'm in the process of adding an example in the examples repo - here is a PR <https://github.com/HubSpot/cms-js-building-block-examples/pull/20/files#diff-5e104f194cec451cd0bd42d9a0ff601f8dfccdf58b96c12981cf64bf404694feR56>\n\nThe general idea is that you can annotate a query essentially casting a variable that would be assumed in the render context (contact in this case) to a GraphQL variable."
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-07-14 13:48:59",
    "text": "There's another example in there where contact information is passed directly as HubL parameters which get mapped to `props.hublParameters` within the React \"entry point\"."
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-07-14 13:49:34",
    "text": "cc <@UDHT6N5SM>"
  },
  {
    "subtype": "thread_broadcast",
    "time_stamp": "2023-07-14 14:41:38",
    "text": "Thanks, Byron!  This is exactly what I was looking for.\n\nMy next roadblock is accessing proxied private content pages.  I get this error when I try to do that:\n```Error: Missing hub ID or content ID headers on HEAD request to <http://XXXXXXXX.hs-sites.com/react-test>\n    at fetchContentMetadata (file:///C:/Users/Will%20Brueske/Repositories/mj/cms-js-building-block-examples/hello-world/hello-world-project/hello-world-app/node_modules/@HubSpot/cms-dev-server/dist/run.js:1215:13)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at async proxyPageRouteHandler (file:///C:/Users/Will%20Brueske/Repositories/mj/cms-js-building-block-examples/hello-world/hello-world-project/hello-world-app/node_modules/@HubSpot/cms-dev-server/dist/run.js:1720:45)```\nAm I missing something, is this not implemented, or is it even on the roadmap?\n\nObviously this can be worked around on individual modules with the fallback contact in Byron's example query, but ideally I'd be able to interact with the entire page."
  }
]