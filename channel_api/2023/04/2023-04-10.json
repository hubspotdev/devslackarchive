[
  {
    "poster": {
      "poster_name": "Ali Afzal",
      "poster_handle": "ali.afzal"
    },
    "time_stamp": "2023-04-10 01:04:19",
    "text": "<@U01QVR44MEY>\nI think there is problem in HubSpot with this API\n`/crm/v3/objects/notes?associations=deal&amp;associationsIds={dealId}`\nThe param `associationsIds` is not working anymore. Can you please tell me any solution how I can retrieve notes against a specific Deal.",
    "reply_count": 2,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-04-10 07:43:47"
      },
      {
        "time_stamp": "2023-04-10 07:44:01"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jose Andrades Diaz",
      "poster_handle": "jose.andrades"
    },
    "time_stamp": "2023-04-10 01:38:26",
    "text": "Hi guys, not forgetting about you, we're exploring maybe using the Engagement API instead of Conversations API for what we want to achieve. We'll get back to you if we're still locked but thanks a lot for all your advises!"
  },
  {
    "poster": {
      "poster_name": "Nimit Rastogi",
      "poster_handle": "nimit"
    },
    "time_stamp": "2023-04-10 05:15:28",
    "text": "Hi,\nI'm trying to get all objects(both default and custom objects) through API, but I didn't find any API that will list out all the objects (default+custom) for a given HubSpot account.\nIf anyone has any idea, how to solve this problem, please help.",
    "reply_count": 4,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-04-10 07:55:12"
      },
      {
        "time_stamp": "2023-04-10 07:55:33"
      },
      {
        "time_stamp": "2023-04-10 07:56:34"
      },
      {
        "time_stamp": "2023-04-10 07:56:47"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Ayush Rastogi",
      "poster_handle": "ayush"
    },
    "time_stamp": "2023-04-10 06:29:26",
    "text": "Hey guys,\nI'm trying to get all the properties of a deal via this endpoint <https://api.hubapi.com/crm/v3/properties/deals/> but in some enumeration-type fields, I'm getting an empty array of options. How to get all the options of an enumeration field property?",
    "reply_count": 9,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-04-10 07:58:50"
      },
      {
        "time_stamp": "2023-04-10 12:54:27"
      },
      {
        "time_stamp": "2023-04-10 12:57:18"
      },
      {
        "time_stamp": "2023-04-10 12:57:23"
      },
      {
        "time_stamp": "2023-04-11 01:30:28"
      },
      {
        "time_stamp": "2023-04-11 06:56:41"
      },
      {
        "time_stamp": "2023-04-11 12:43:24"
      },
      {
        "time_stamp": "2023-04-11 15:10:14"
      },
      {
        "time_stamp": "2023-04-11 15:10:32"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 07:43:47",
    "text": "You'll want to use this endpoint:\n```/crm/v4/objects/deal/{dealid}/associations/notes```"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 07:44:01",
    "text": "That will pull all the notes for a particular deal"
  },
  {
    "poster": {
      "poster_name": "kirti baghele",
      "poster_handle": "kirti.baghele"
    },
    "time_stamp": "2023-04-10 07:44:37",
    "text": "Hello everyone,\nPlease help me to find list of contacts using BETWEEN operator.\n```{\n    \"filterGroups\": [\n      {\n        \"filters\": [\n            {\n                \"highValue\": \"2023-04-10T10:09:08.473Z\",\n                \"value\": \"2023-04-02T10:09:08.473Z\",\n                \"propertyName\": \"lastmodifieddate\",\n                \"operator\": \"BETWEEN\"\n                }\n            ]\n      }\n    ]\n  }```\n",
    "reply_count": 36,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-04-10 07:50:26"
      },
      {
        "time_stamp": "2023-04-10 07:53:22"
      },
      {
        "time_stamp": "2023-04-10 07:53:50"
      },
      {
        "time_stamp": "2023-04-10 07:54:31"
      },
      {
        "time_stamp": "2023-04-10 07:56:53"
      },
      {
        "time_stamp": "2023-04-10 07:57:35"
      },
      {
        "time_stamp": "2023-04-10 07:58:42"
      },
      {
        "time_stamp": "2023-04-10 07:59:03"
      },
      {
        "time_stamp": "2023-04-10 07:59:12"
      },
      {
        "time_stamp": "2023-04-10 07:59:37"
      },
      {
        "time_stamp": "2023-04-10 07:59:42"
      },
      {
        "time_stamp": "2023-04-10 08:00:08"
      },
      {
        "time_stamp": "2023-04-10 08:00:42"
      },
      {
        "time_stamp": "2023-04-10 08:01:17"
      },
      {
        "time_stamp": "2023-04-10 08:01:23"
      },
      {
        "time_stamp": "2023-04-10 08:01:56"
      },
      {
        "time_stamp": "2023-04-10 08:02:18"
      },
      {
        "time_stamp": "2023-04-10 08:03:03"
      },
      {
        "time_stamp": "2023-04-10 08:03:40"
      },
      {
        "time_stamp": "2023-04-10 08:05:02"
      },
      {
        "time_stamp": "2023-04-10 08:05:25"
      },
      {
        "time_stamp": "2023-04-10 08:05:42"
      },
      {
        "time_stamp": "2023-04-10 08:06:01"
      },
      {
        "time_stamp": "2023-04-10 08:06:09"
      },
      {
        "time_stamp": "2023-04-10 08:06:37"
      },
      {
        "time_stamp": "2023-04-10 08:06:50"
      },
      {
        "time_stamp": "2023-04-10 08:07:03"
      },
      {
        "time_stamp": "2023-04-10 08:11:01"
      },
      {
        "time_stamp": "2023-04-10 08:11:11"
      },
      {
        "time_stamp": "2023-04-10 08:11:15"
      },
      {
        "time_stamp": "2023-04-10 08:13:21"
      },
      {
        "time_stamp": "2023-04-10 08:13:33"
      },
      {
        "time_stamp": "2023-04-10 08:52:31"
      },
      {
        "time_stamp": "2023-04-10 08:52:48"
      },
      {
        "time_stamp": "2023-04-10 08:54:20"
      },
      {
        "time_stamp": "2023-04-10 08:54:29"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 07:50:26",
    "text": "The dates need to be epoc millisecond timestamps"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 07:53:22",
    "text": "so the request would look like this instead:\n```{\n    \"filterGroups\": [\n      {\n        \"filters\": [\n            {\n                \"highValue\": \"1681121348473\",\n                \"value\": \"1680430148473\",\n                \"propertyName\": \"lastmodifieddate\",\n                \"operator\": \"BETWEEN\"\n                }\n            ]\n      }\n    ]\n  }```"
  },
  {
    "poster": {
      "poster_name": "kirti baghele",
      "poster_handle": "kirti.baghele"
    },
    "time_stamp": "2023-04-10 07:53:50",
    "text": "thanks alot"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 07:54:31",
    "text": "of course"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 07:55:12",
    "text": "Currently there isn't any way to pull a complete list of objects through the api, the best way is to incrementally add 1 to the schemas endpoints"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 07:55:33",
    "text": "until you get an error, so start at 0-1 and finish at 0-135"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 07:56:34",
    "text": "That's just for the HubSpot objects for custom objects it's even harder, because the type ids don't start at one. Best way to do this is to just use the UI to find the object ids. It's in the listing pages url"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 07:56:47",
    "text": "I'm interested though, what's the usecase?"
  },
  {
    "poster": {
      "poster_name": "Vivien BOUANCHEAU",
      "poster_handle": "vivien.bouancheau"
    },
    "time_stamp": "2023-04-10 07:56:53",
    "text": "Hi <@U01QVR44MEY>!\nI'm looking to find a specific contact on HubSpot,\nMaybe you could help ?\n\nThanks a lot !\n```{\n    \"filterGroups\": [\n      {\n        \"filters\": [\n            {\n                \"highValue\": \"208888393993\",\n                \"value\": \"208888393993\",\n                \"propertyName\": \"bubble_id\",\n                \"operator\": \"EQ\"\n                }\n            ]\n      }\n    ]\n  }```"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 07:57:35",
    "text": "sure, what information do you have about the contact? how would you match this information normally in HubSpot (through the ui)"
  },
  {
    "poster": {
      "poster_name": "Vivien BOUANCHEAU",
      "poster_handle": "vivien.bouancheau"
    },
    "time_stamp": "2023-04-10 07:58:42",
    "text": "I'm trying to get a contact from Bubble (no-code platform), and the contact on HubSpot has got this bubble id.\nSo I prefer to filter by the bubble_id rather the email"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 07:58:50",
    "text": "That's exactly how that endpoint is supposed to return data (an array of property names), I think what you're looking for is this endpoint: `<https://api.hubapi.com/crm/v3/schemas/deals>`"
  },
  {
    "poster": {
      "poster_name": "Vivien BOUANCHEAU",
      "poster_handle": "vivien.bouancheau"
    },
    "time_stamp": "2023-04-10 07:59:03",
    "text": "the idea would be to get the HubSpot id from HubSpot to Bubble"
  },
  {
    "poster": {
      "poster_name": "Vivien BOUANCHEAU",
      "poster_handle": "vivien.bouancheau"
    },
    "time_stamp": "2023-04-10 07:59:12",
    "text": "(to search with the contact id in the future)"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 07:59:37",
    "text": "Is the bubble id unique?"
  },
  {
    "poster": {
      "poster_name": "Vivien BOUANCHEAU",
      "poster_handle": "vivien.bouancheau"
    },
    "time_stamp": "2023-04-10 07:59:42",
    "text": "yes"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 08:00:08",
    "text": "How about setting it as a unique property in the HubSpot UI do you think you can do that?"
  },
  {
    "poster": {
      "poster_name": "Vivien BOUANCHEAU",
      "poster_handle": "vivien.bouancheau"
    },
    "time_stamp": "2023-04-10 08:00:42",
    "text": "Hum, I don't know what you means exactly :confused: (i'm not a developer)"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 08:01:17",
    "text": "No problem, basically you can setup properties in HubSpot can you can tell HubSpot that all the values will be unique (so you can query by them at a later date)"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 08:01:23",
    "text": "<https://knowledge.HubSpot.com/crm-setup/manage-your-properties>"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 08:01:56",
    "text": "This would help in this project so that you don't need to use the search endpoint you can just query them like you normally would with the object id"
  },
  {
    "text": "",
    "time_stamp": "2023-04-10 08:02:18"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 08:03:03",
    "text": "To toggle this on just go into setting, then under objects =&gt; contacts =&gt; manage properties =&gt; find your bubble property, click edit and then toggle the unique property toggle"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 08:03:40",
    "text": "(those directions are very much suedo directions not click for click)"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 08:04:15",
    "text": "Sounds good, just ping me if you run into any roadblocks"
  },
  {
    "poster": {
      "poster_name": "Vivien BOUANCHEAU",
      "poster_handle": "vivien.bouancheau"
    },
    "time_stamp": "2023-04-10 08:05:02",
    "text": "damn.. it's not available for contacts"
  },
  {
    "poster": {
      "poster_name": "Vivien BOUANCHEAU",
      "poster_handle": "vivien.bouancheau"
    },
    "time_stamp": "2023-04-10 08:05:25",
    "text": "and it's a contact property"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 08:05:42",
    "text": "ah didn't know it was for contacts"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 08:06:01",
    "text": "yeah so the search api is going to be the best bet, let me grab that code for you"
  },
  {
    "poster": {
      "poster_name": "Vivien BOUANCHEAU",
      "poster_handle": "vivien.bouancheau"
    },
    "time_stamp": "2023-04-10 08:06:09",
    "text": "thank you so much !"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 08:06:37",
    "text": "```{\n    \"filterGroups\": [\n      {\n        \"filters\": [\n            {\n                \"value\": \"8X8X8X8\",\n                \"propertyName\": \"BUBBLEPROPERTYNAME\",\n                \"operator\": \"EQ\"\n                }\n            ]\n      }\n    ]\n}```"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 08:06:50",
    "text": "replace `BUBBLEPROPERTYNAME` with the property name"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 08:07:03",
    "text": "and `8X8X8X8X` with the value you want to search with"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 08:10:18",
    "text": "ah understood, so for that you'll use the propertiesWithHistory parameter"
  },
  {
    "poster": {
      "poster_name": "Vivien BOUANCHEAU",
      "poster_handle": "vivien.bouancheau"
    },
    "time_stamp": "2023-04-10 08:11:01",
    "text": "thanks,\nbut it looks like that it doesn't work :thinking_face:\ncan I post you the screenshot of what I wanna do ?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 08:11:11",
    "text": "sure"
  },
  {
    "poster": {
      "poster_name": "Vivien BOUANCHEAU",
      "poster_handle": "vivien.bouancheau"
    },
    "time_stamp": "2023-04-10 08:11:15",
    "text": "thanks!"
  },
  {
    "text": "",
    "time_stamp": "2023-04-10 08:11:54"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 08:12:07",
    "text": "This will return the timestamp of the last updated time for each property you request"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 08:12:20",
    "text": "(this is a url parameter)"
  },
  {
    "text": "I've got this answer,\nAnd behind i'm trying to get the answer id (so normally the contact id from HubSpot, and update the user on Bubble\nBut nothing is changing on Bubble side",
    "time_stamp": "2023-04-10 08:13:21"
  },
  {
    "poster": {
      "poster_name": "Vivien BOUANCHEAU",
      "poster_handle": "vivien.bouancheau"
    },
    "time_stamp": "2023-04-10 08:13:33",
    "text": "it's looks like they didn't find the contact"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 08:52:31",
    "text": "Oh interesting, are you also using bubble?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 08:52:48",
    "text": "I've never used it just FYI, so not entirely sure how to setup the action"
  },
  {
    "poster": {
      "poster_name": "Vivien BOUANCHEAU",
      "poster_handle": "vivien.bouancheau"
    },
    "time_stamp": "2023-04-10 08:54:20",
    "text": "yes i'm using Bubble"
  },
  {
    "poster": {
      "poster_name": "Vivien BOUANCHEAU",
      "poster_handle": "vivien.bouancheau"
    },
    "time_stamp": "2023-04-10 08:54:29",
    "text": "okay, I will look at it, thanks"
  },
  {
    "poster": {
      "poster_name": "Gabriel Madureira",
      "poster_handle": "gabriel148"
    },
    "time_stamp": "2023-04-10 09:37:04",
    "text": "Cross posting here:"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 11:43:06",
    "text": "Ah now I understand, yeah so that status is tied to associated payment and because there isn't a payments api yet you can't update that status"
  },
  {
    "poster": {
      "poster_name": "Byron Pokorniecki",
      "poster_handle": "byron.pokorniecki.ext"
    },
    "time_stamp": "2023-04-10 12:01:34",
    "text": "Hey,\n\nso it depends a bit what exactly you need, but here is a basic example json:\n\n```{\n  \"filterGroups\": [\n    {\n      \"filters\": [\n        {\n          \"value\": \"Test\",\n          \"propertyName\": \"bubble_id\",\n          \"operator\": \"EQ\"\n        }\n      ]\n    }\n  ],\n  \"properties\": [\n    \"firstname\"\n  ]\n}```\nHere we are searching for Contacts that have the value Test in the custom Property called bubble_id.\nFor the result we are currently only getting back the firstname as well as the standard fields like objectId."
  },
  {
    "poster": {
      "poster_name": "Byron Pokorniecki",
      "poster_handle": "byron.pokorniecki.ext"
    },
    "time_stamp": "2023-04-10 12:02:30",
    "text": "Important to understand is that the operator defines how to match the values. So in our current case the value in bubble_id has to be _exactly_  \"Test\""
  },
  {
    "poster": {
      "poster_name": "Byron Pokorniecki",
      "poster_handle": "byron.pokorniecki.ext"
    },
    "time_stamp": "2023-04-10 12:03:15",
    "text": "And if you need additional properties returned, you would just add more to the properties seperated with a  ,"
  },
  {
    "poster": {
      "poster_name": "Zachary Lukasiewicz",
      "poster_handle": "zlukasiewicz"
    },
    "time_stamp": "2023-04-10 12:12:31",
    "text": "Hi all, I am trying to create conditional approvals based on total quote discount.\n\nI used ChatGPT to write this out, but I'm curious if anyone has tried to do this before or if the code below would work?\n\nIf effect, I need to set the Quote Approver based on TCV, ACV, and Discount levels.\n\n--\n\n--\n\nconst HubSpot = require('@HubSpot/api-client');\n\nexports.main = (event, callback) =&gt; {\n\n  const HubSpotClient = new HubSpot.Client({\n    apiKey: process.env.HAPIKEY\n  });\n\n  //First, make a call to get deal associations\n  HubSpotClient.crm.deals.associationsApi.getAll(event.object.objectId, 'line_item').then((results) =&gt; {\n   //Because a separate api call is needed for each associated line item, and each one returns a promise\n   //where the promise is not dependent on any other call, each can be run using the Promise.all() method\n   //The map() method takes 2 arguments - an initial array and a function to apply to every item in the initial array\n   // then, returns an array of the results. in this case, it's an array of promises that each get line item details\n    let lineItemPromises = results.body.results.map(item =&gt; {\n      return HubSpotClient.crm.lineItems.basicApi.getById(<http://item.id/|item.id>, ['quantity', 'discount_amount', 'hs_product_id']).then(results =&gt; {\n        return results.body\n      })\n    })\n\n    //pass the array of promises into Promise.All, which then returns an array of all results, in this case the details\n    // of every line item api call request.\n    Promise.all(lineItemPromises).then(resultsArray =&gt; {\n      console.log(resultsArray)\n     //use the .filter() method to filter the array of results for just the line items that contribute to ARR\n      let arrLineItems = resultsArray.filter(item =&gt; {\n        return item.properties.hs_product_id &amp;&amp; item.properties.hs_product_id.includes('ARR')\n      })\n      console.log(`Number of ARR line items: ${arrLineItems.length}`)\n     //use the .reduce() method to sum the discount amount of all ARR line items\n      let discountAmount = arrLineItems.reduce((sum, item) =&gt; {\n       return sum + parseFloat(item.properties.discount_amount) * parseFloat(item.properties.quantity)\n      }, 0)\n      console.log(`Total discount amount for ARR line items: ${discountAmount}`)\n     //calculate the ARR based on the total price of all ARR line items\n      let arr = arrLineItems.reduce((sum, item) =&gt; {\n       return sum + parseFloat(item.properties.price) * parseFloat(item.properties.quantity)\n      }, 0)\n      console.log(`Total ARR: ${arr}`)\n     //calculate the discount / ARR ratio\n      let discountRatio = discountAmount / arr\n      console.log(`Discount / ARR ratio: ${discountRatio}`)\n     //update the original deal with the newly calculated property value\n      HubSpotClient.crm.deals.basicApi.update(event.object.objectId, {\n        'properties': {\n          'discount_to_arr_ratio': discountRatio.toString()\n        }\n      }).then(response =&gt; {\n        console.log(response.body);\n        callback({})\n      })\n    })\n  }).catch((err) =&gt; {\n    console.error(err)\n  })\n\n}",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-04-10 12:44:58"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 12:44:58",
    "text": "<https://HubSpotdev.slack.com/archives/C019VT42R8X/p1681149837139319>"
  },
  {
    "text": "Hey <@U01QVR44MEY>\nYes, I'm getting the correct properties but if any property is of enumeration type then in some cases it is returning an empty array of options. For example., if there is a property dealstage then it must return the available options under this property response but I'm getting an empty array of options.",
    "time_stamp": "2023-04-10 12:54:27",
    "edited": {
      "time_stamp": "2023-04-10 12:54:55"
    }
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 12:57:18",
    "text": "Yeah so the deal stage is a special property that is dependent on the pipeline, so you need to use this api: `/crm/v3/pipelines/deal/{pipelineId}/stages`"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 12:57:23",
    "text": "to pull the stages"
  },
  {
    "poster": {
      "poster_name": "Kevin-C",
      "poster_handle": "kevin285"
    },
    "time_stamp": "2023-04-10 15:25:12",
    "text": "Hey all,\n\ni trying to open an iframe from a custom CRM card.\n```{\n            type: \"button\",\n            text: \"Submit Form\",\n            onClick: {\n              type: \"IFRAME\",\n              width: 890,\n              height: 748,\n              uri: \"<https://example.com/iframe-contents>\",\n              associatedObjectProperties: [\"hs_object_id\"],\n            },\n          },```\nI am not getting the query parameter for the record ID from the associatedObjectProperties when the iframe opens. Might I be missing a step?",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-04-10 15:43:42"
      },
      {
        "time_stamp": "2023-04-10 18:10:21"
      },
      {
        "time_stamp": "2023-04-10 18:11:37"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-04-10 15:43:42",
    "text": "honestly I would just add the query parameter in through a variable in the url"
  },
  {
    "poster": {
      "poster_name": "Erin Wiggers",
      "poster_handle": "erin.wiggers"
    },
    "time_stamp": "2023-04-10 18:10:21",
    "text": "<@U021JKWA1GB> try something like this for the onClick:\n\n```onClick: {\n          type: 'IFRAME',\n          width: 700,\n          height: 400,\n          uri: 'YOUR_URL?objId=' + hs_object_id,\n        },```"
  },
  {
    "poster": {
      "poster_name": "Erin Wiggers",
      "poster_handle": "erin.wiggers"
    },
    "time_stamp": "2023-04-10 18:11:37",
    "edited": {
      "time_stamp": "2023-04-10 18:11:46"
    },
    "text": "and then make sure to send that property in the CRM card json\n``` \"fetch\": {\n      \"targetFunction\": \"crm-card\",\n      \"objectTypes\": [\n        {\n          \"name\": \"object\",\n          \"propertiesToSend\": [\"hs_object_id\"]\n        }\n      ]\n    }```"
  },
  {
    "poster": {
      "poster_name": "Ali Afzal",
      "poster_handle": "ali.afzal"
    },
    "time_stamp": "2023-04-10 23:56:58",
    "edited": {
      "time_stamp": "2023-04-10 23:59:08"
    },
    "text": "<@U01QVR44MEY>\nI have an issue please provide me a solution. Problem is that  when I get an attachment using API `<https://api.hubapi.com/filemanager/api/v3/files/{attachment_id}>` In the response I got two URLs to the attachment and the attribute `hidden` is also `false`.\n\"*s3_url*\": `\"<https://cdn1.HubSpot.com/hubfs/7285768/Arrivy/new%20attachment%20task%202-5997633667858432/{filename}>\",`\n\"*friendly_url*\": `\"<https://7285768.fs1.HubSpotusercontent-na1.net/hubfs/7285768/Arrivy/new%20attachment%20task%202-5997633667858432/{filename}>\"`,\nWhen I try to get (OR Read) file from one of this url it gives me that error. `Error: getaddrinfo EAI_AGAIN <http://7285768.fs1.HubSpotusercontent-na1.net|7285768.fs1.HubSpotusercontent-na1.net>` . Is there any solution to get rid of this error?",
    "reply_count": 11,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-04-11 07:02:55"
      },
      {
        "time_stamp": "2023-04-11 23:50:22"
      },
      {
        "time_stamp": "2023-04-11 23:59:54"
      },
      {
        "time_stamp": "2023-04-12 07:57:02"
      },
      {
        "time_stamp": "2023-04-12 07:59:12"
      },
      {
        "time_stamp": "2023-04-12 07:59:52"
      },
      {
        "time_stamp": "2023-04-12 08:01:24"
      },
      {
        "time_stamp": "2023-04-12 08:01:34"
      },
      {
        "time_stamp": "2023-04-12 08:02:59"
      },
      {
        "time_stamp": "2023-04-17 23:36:06"
      },
      {
        "time_stamp": "2023-04-18 06:47:15"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Ammar Maqsood",
      "poster_handle": "ammar"
    },
    "time_stamp": "2023-04-11 00:46:49",
    "edited": {
      "time_stamp": "2023-04-11 09:27:09"
    },
    "text": "Hi all,\nI was working with the HubSpot Files API and going through it's V3 documentation. I noticed that the `\"duplicateValidationStrategy\":\"REJECT\"` flag does not stop the file duplication whereas in the documentation it clearly mentions that this flag \"rejects the upload if a duplicate is found.\" I have verified that the file that is being duplicated is also the same and is not being modified or anything i.e. it's name. Would this be an issue with the HubSpot API?\nCan anyone help me with this issue the payload I am sending is this:\n\nPayload for upload Api:\n`{`\n\t`method: 'post',`\n\t`headers: {`\n\t\t`Authorization: 'Bearer &lt;TOKEN&gt;',`\n\t\t`'Content-Type': 'application/json'`\n\t\t`},`\n\t `data: '{`\n\t\t`\"url\": \"source_url\",`\n\t\t`\"access\":\"PUBLIC_INDEXABLE\",`\n\t\t`\"name\":\"filename\",`\n\t\t`\"folderId\":\"folderId\",`\n\t\t`\"duplicateValidationStrategy\":\"REJECT\",`\n\t\t`\"duplicateValidationScope\":\"EXACT_FOLDER\",`\n\t\t`\"overwrite\":false}',`\n\t\t`url: '<https://api.hubapi.com/files/v3/files/import-from-url/async>'`\n`}`\t",
    "reply_count": 28,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-04-11 00:50:22"
      },
      {
        "time_stamp": "2023-04-11 07:07:27"
      },
      {
        "time_stamp": "2023-04-11 09:15:50"
      },
      {
        "time_stamp": "2023-04-11 09:34:59"
      },
      {
        "time_stamp": "2023-04-12 00:19:27"
      },
      {
        "time_stamp": "2023-04-12 08:00:37"
      },
      {
        "time_stamp": "2023-04-12 10:18:49"
      },
      {
        "time_stamp": "2023-04-12 10:20:10"
      },
      {
        "time_stamp": "2023-04-12 23:59:37"
      },
      {
        "time_stamp": "2023-06-05 07:58:02"
      },
      {
        "time_stamp": "2023-06-05 07:59:25"
      },
      {
        "time_stamp": "2023-06-05 08:09:47"
      },
      {
        "time_stamp": "2023-06-05 08:10:09"
      },
      {
        "time_stamp": "2023-06-05 08:10:47"
      },
      {
        "time_stamp": "2023-06-05 08:10:56"
      },
      {
        "time_stamp": "2023-06-05 08:12:48"
      },
      {
        "time_stamp": "2023-06-05 08:13:11"
      },
      {
        "time_stamp": "2023-06-05 08:15:36"
      },
      {
        "time_stamp": "2023-06-05 08:15:46"
      },
      {
        "time_stamp": "2023-06-06 00:10:47"
      },
      {
        "time_stamp": "2023-06-06 00:11:01"
      },
      {
        "time_stamp": "2023-06-06 07:02:49"
      },
      {
        "time_stamp": "2023-06-06 07:02:53"
      },
      {
        "time_stamp": "2023-06-07 01:00:32"
      },
      {
        "time_stamp": "2023-06-07 01:02:46"
      },
      {
        "time_stamp": "2023-06-07 01:05:17"
      },
      {
        "time_stamp": "2023-06-08 05:04:10"
      },
      {
        "time_stamp": "2023-06-09 09:53:33"
      }
    ]
  },
  {
    "text": "Files being duplicated:",
    "time_stamp": "2023-04-11 00:50:22"
  }
]