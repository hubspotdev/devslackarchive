[
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2020-11-12 07:05:42",
    "text": "Hey <@U01CSDFJRR8> take a look at global form JS events: <https://legacydocs.HubSpot.com/global-form-events>"
  },
  {
    "poster": {
      "poster_name": "Junard Oclarit",
      "poster_handle": "junard.o"
    },
    "time_stamp": "2020-11-12 10:43:34",
    "text": "Hi there, I just want to ask for help on how can I add onFormSubmit callback to my HubSpot form? because I just notice there is already an `hbspt.forms.create(options);` created on my landing page. I just want to override it or add the onFormSubmit callback function. Thanks",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2020-11-12 13:18:45"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Chuck Taylor",
      "poster_handle": "chuck"
    },
    "time_stamp": "2020-11-12 12:45:47",
    "text": "Thanks <@U26BLKGE4>! I just came back here to post the solution I found which was available here: <https://legacydocs.HubSpot.com/docs/methods/forms/submit_form>\n\nI did a test using PostMan and it seemed to check out just fine. My plan was to chain my api call along with the POST request to the HubSpot API, and then at the end update the DOM."
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2020-11-12 13:09:19",
    "text": "you can definitely do that as well. I usually lean for the global event method myself only because it means the forms are still editable for our marketing teams, that way they don't need to rope in us developers when they want to make a modification."
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2020-11-12 13:18:45",
    "text": "you can either customize the embed function, or you could use global events: <https://legacydocs.HubSpot.com/global-form-events>"
  }
]