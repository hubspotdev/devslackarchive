[
  {
    "poster": {
      "poster_name": "Russell Benzing",
      "poster_handle": "rbenzing"
    },
    "time_stamp": "2021-06-09 06:36:48",
    "text": "yup. Thanks everyone."
  },
  {
    "poster": {
      "poster_name": "Stuart Grant",
      "poster_handle": "stuart-g"
    },
    "time_stamp": "2021-06-09 07:15:58",
    "text": "What is the most effective way to see all properties/keys of a Hubl object, beyond printing it in HTML? More specifically, is there any documentation or interface for blog contents? Thanks.",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2021-06-09 07:16:25"
      },
      {
        "time_stamp": "2021-06-09 07:16:38"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Joe O'Hara",
      "poster_handle": "johara"
    },
    "time_stamp": "2021-06-09 07:16:25",
    "text": "The `pprint` filter `object|pprint`"
  },
  {
    "poster": {
      "poster_name": "Stuart Grant",
      "poster_handle": "stuart-g"
    },
    "time_stamp": "2021-06-09 07:16:38",
    "text": "Beautiful. Thanks for the rapid reply."
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2021-06-09 13:09:23",
    "text": "There is also a type function that returns the type of whatever is passed into it"
  },
  {
    "poster": {
      "poster_name": "David V",
      "poster_handle": "davidva"
    },
    "time_stamp": "2021-06-09 13:32:36",
    "text": "hi all"
  },
  {
    "poster": {
      "poster_name": "David V",
      "poster_handle": "davidva"
    },
    "time_stamp": "2021-06-09 13:33:17",
    "text": "im doing a tutorial and would like to know where do i go/push to create a dummy hubl file like the tutorial is showing me? I find it confusing he doesn't say where to click or push. He is doing a example of making a macro to generate a rem value"
  },
  {
    "poster": {
      "poster_name": "David V",
      "poster_handle": "davidva"
    },
    "time_stamp": "2021-06-09 13:51:51",
    "text": "also when i type equals i get a dash? im really confused"
  },
  {
    "poster": {
      "poster_name": "David V",
      "poster_handle": "davidva"
    },
    "time_stamp": "2021-06-09 13:52:09",
    "text": "`{% macro rem(values) %}`\n`{% set baseline = 16 %}`\n`{% set cssValues = []%}`\n`{% for v in values %}`\n`{% set thisVal = v/baseline-'rem' %}`\n`{{ remvalue }} rem`\n`{% endmacro %}`"
  },
  {
    "poster": {
      "poster_name": "David V",
      "poster_handle": "davidva"
    },
    "time_stamp": "2021-06-09 13:52:23",
    "edited": {
      "time_stamp": "2021-06-09 13:52:41"
    },
    "text": "but in the editor i see a dash(-)"
  },
  {
    "text": "",
    "time_stamp": "2021-06-09 13:52:26"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2021-06-09 13:52:39",
    "text": "change the type size or set"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2021-06-09 13:52:44",
    "text": "usinmg the settings"
  },
  {
    "poster": {
      "poster_name": "David V",
      "poster_handle": "davidva"
    },
    "time_stamp": "2021-06-09 13:53:10",
    "text": "ooh ok lol sorry <@U38EZFVFE>"
  },
  {
    "poster": {
      "poster_name": "David V",
      "poster_handle": "davidva"
    },
    "time_stamp": "2021-06-09 13:53:17",
    "text": "i just zoomed with my wheel"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2021-06-09 13:53:21",
    "text": "yep:)"
  },
  {
    "poster": {
      "poster_name": "David V",
      "poster_handle": "davidva"
    },
    "time_stamp": "2021-06-09 13:58:04",
    "text": "next Q chad"
  },
  {
    "poster": {
      "poster_name": "David V",
      "poster_handle": "davidva"
    },
    "time_stamp": "2021-06-09 13:58:23",
    "text": "is there a way to like link VSCODE with intellisense to a project?"
  },
  {
    "poster": {
      "poster_name": "David V",
      "poster_handle": "davidva"
    },
    "time_stamp": "2021-06-09 13:58:33",
    "text": "so i can push files and have the intellisense?"
  },
  {
    "poster": {
      "poster_name": "David V",
      "poster_handle": "davidva"
    },
    "time_stamp": "2021-06-09 14:01:59",
    "text": "and is there a better tutorial on hubl as the example he did did nothing to my css?"
  },
  {
    "poster": {
      "poster_name": "David V",
      "poster_handle": "davidva"
    },
    "time_stamp": "2021-06-09 14:03:05",
    "text": "as i pushed save and it did nothing"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2021-06-09 15:00:28",
    "text": "<@U02162GK9SP> how do I develop locally on HubSpot"
  },
  {
    "time_stamp": "2021-06-09 15:00:30",
    "text": "The languages HubSpot currently supports are HubL (which is HubSpot's fork of Jinjava, a Jinja templating language ported to Java), HTML, JavaScript, and CSS. You can write back-end code on HubSpot in serverless functions. Serverless functions support Node.js. CMS Hub is a SaaS based CMS which is a direct extension of the HubSpot CRM. It is not a hosting platform where you have to directly configure the languages, server hardware, CDN etc. We do most of that work for you. That may result in fewer supported languages, and a little bit of an opinionated architecture, but the languages that are supported will work really well together and deliver a great experience.\n\nSome of the benefits of this system is that backups, server maintenance, updates, it's all handled for you, you can just focus on building powerful and cool stuff."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2021-06-09 15:00:53",
    "text": "That didn't help.",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2021-06-09 15:20:16"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2021-06-09 15:01:09",
    "text": "Google HubSpot cli"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-06-09 15:19:34",
    "text": "<@U02162GK9SP> get started with CLI"
  },
  {
    "time_stamp": "2021-06-09 15:19:35",
    "edited": {
      "time_stamp": "2021-06-09 15:19:38"
    },
    "text": "The CLI (Command Line Interface) provides a way to upload, fetch, and watch files to/from the developer file system. Because you are working with actual files on your computer it opens up a world of benefits like the ability to use your preferred code editors, build tools, version control like git, etc. Additionally the CLI provides a ton of helper benefits like `hs create` which lets you quickly create modules, serverless functions, themes from tried and true boilerplates. Additionally the CLI often gets features faster than the Design Manager because any features we add to the design manager also require UX design and front end development. With the CLI everything is file based, so as soon as we add functionality to the back-end we can make it available in the CLI. If you've been using HubSpot for a while but are new to the CLI we recommend our getting started with local development tutorial: <https://developers.HubSpot.com/docs/cms/guides/getting-started-with-local-development>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-06-09 15:20:16",
    "text": "I will need to train it better, it has some answers around this."
  }
]