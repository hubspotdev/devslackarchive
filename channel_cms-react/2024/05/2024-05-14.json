[
  {
    "poster": {
      "poster_name": "I Made Sariyanta",
      "poster_handle": "desar.sariyanta"
    },
    "time_stamp": "2024-05-14 03:33:44",
    "text": "Maybe this is mentioned somewhere, but the generated fields types file pull the times from the wrong path (in my case).\n\n```import { type DefaultValues, type LogoFieldType, type MenuFieldType, type BooleanFieldType, type TextFieldType, type LinkFieldType, type ChoiceFieldType, type ImageFieldType, type GroupFieldType, type Override } from \"@HubSpot/cms-components/fields\";```\nI didn't get the autocomplete when I use it in the component.\n\nHowever when I change the import path to this:\n```'@HubSpot/cms-components/types/fields'```\nit works.\n\nDid I do something wrong? Maybe in the tsconfig?\n\n```{\n    \"compilerOptions\": {\n        \"strict\": true,\n        \"esModuleInterop\": true,\n        \"skipLibCheck\": true,\n        \"forceConsistentCasingInFileNames\": true,\n        \"jsx\": \"react-jsx\",\n        \"moduleSuffixes\": [\n            \"\",\n            \".ts\",\n            \".tsx\"\n        ],\n        \"typeRoots\": [\n            \"types\",\n            \"node_modules/@types\"\n        ],\n        \"noEmit\": true,\n        \"allowImportingTsExtensions\": true\n    },\n    \"$schema\": \"<https://json.schemastore.org/tsconfig>\",\n    \"display\": \"Recommended\"\n}```",
    "reply_count": 7,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2024-05-14 03:44:13"
      },
      {
        "time_stamp": "2024-05-14 03:45:09"
      },
      {
        "time_stamp": "2024-05-14 05:54:13"
      },
      {
        "time_stamp": "2024-05-14 08:40:29"
      },
      {
        "time_stamp": "2024-05-14 08:41:53"
      },
      {
        "time_stamp": "2024-05-14 08:42:27"
      },
      {
        "time_stamp": "2024-05-17 13:32:48"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "I Made Sariyanta",
      "poster_handle": "desar.sariyanta"
    },
    "time_stamp": "2024-05-14 03:44:13",
    "text": "Ah, it was in the tsconfig."
  },
  {
    "text": "Now I have another issue:\nthe logo field is somehow never",
    "subtype": "thread_broadcast",
    "time_stamp": "2024-05-14 03:45:09"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-05-14 05:54:13",
    "text": "cc <@U03KUBBCK2N>"
  },
  {
    "poster": {
      "poster_name": "Jesse Maltese",
      "poster_handle": "jmaltese"
    },
    "time_stamp": "2024-05-14 08:40:29",
    "text": "Hi, yep this looks like a bug in the type definitions for LogoField specifically. Sorry about that. I’ll work on getting a fix out.\n\nOut of curiosity, what change did you need to make to your tsconfig to get it to work with the `@HubSpot/cms-components/fields` path?"
  },
  {
    "poster": {
      "poster_name": "I Made Sariyanta",
      "poster_handle": "desar.sariyanta"
    },
    "time_stamp": "2024-05-14 08:41:53",
    "text": "<@U03KUBBCK2N>,\nI added moduleResolution of commonjs.\nthen it works :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Jesse Maltese",
      "poster_handle": "jmaltese"
    },
    "time_stamp": "2024-05-14 08:42:27",
    "text": "Gotcha, and thank you for the bug report!"
  },
  {
    "poster": {
      "poster_name": "Josh GH",
      "poster_handle": "joshgh"
    },
    "time_stamp": "2024-05-14 12:21:39",
    "text": "Apologies <@U03KUBBCK2N>, I pasted the wrong code Friday. Just updated it above. We keep the fields definition for each module in their own file."
  },
  {
    "poster": {
      "poster_name": "Jesse Maltese",
      "poster_handle": "jmaltese"
    },
    "time_stamp": "2024-05-14 12:24:03",
    "text": "No problem! When I generate based on your `fields.tsx`, I get the following type:\n```type modulesFieldsType = DefaultValues&lt;{\n    people: Array&lt;Record&lt;\"_repeater\", {\n        x_id: TextFieldType;\n        description: Required&lt;RichTextFieldType&gt;;\n    }&gt;&gt;;\n}&gt;;```"
  },
  {
    "poster": {
      "poster_name": "Jesse Maltese",
      "poster_handle": "jmaltese"
    },
    "time_stamp": "2024-05-14 12:25:10",
    "text": "Just to double check, your `.types.ts` file has the autogen comment at the top?\n```// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n// Removing the above comment will disable type generation for this module\n// This file was created by @HubSpot/cms-dev-server, for more information see <https://github.HubSpot.com/cms-react/reference/js-modules.html#module-fields>```"
  },
  {
    "poster": {
      "poster_name": "Josh GH",
      "poster_handle": "joshgh"
    },
    "time_stamp": "2024-05-14 13:05:26",
    "text": ":facepalm: …and this time I pasted from the wrong branch. Need more coffee.\nUpdated the fields.tsx code _again_.\nIt now shows that using the RichTextFieldWrapper created above is what caused the problem.\n• The autogen comment is there\n• RichTextFieldWrapper successfully works as expected in prod when we manual type."
  },
  {
    "poster": {
      "poster_name": "Jesse Maltese",
      "poster_handle": "jmaltese"
    },
    "time_stamp": "2024-05-14 13:08:05",
    "edited": {
      "time_stamp": "2024-05-14 13:26:19"
    },
    "text": "Ah, yeah, that makes sense. The checks we have right now for the components that can be inside the final field object are super strict, so only the components that are exported from `@HubSpot/cms-components` will actually generate types and the others (such as custom components like your `RichTextFieldWrapper`) will be ignored.\n\nThe good news is that I’m pretty close to putting up a change that will support custom components, so hopefully this problem will go away in a while."
  },
  {
    "poster": {
      "poster_name": "Jesse Maltese",
      "poster_handle": "jmaltese"
    },
    "time_stamp": "2024-05-14 13:08:27",
    "text": "We probably should have some alerting for when we skip stuff like this though, sorry about that."
  },
  {
    "poster": {
      "poster_name": "Josh GH",
      "poster_handle": "joshgh"
    },
    "time_stamp": "2024-05-14 13:51:56",
    "text": "Thanks for the clarity. I’ll look forward to the custom component support. My whole team loves how much y’all have been iterating and improving."
  },
  {
    "poster": {
      "poster_name": "Josh GH",
      "poster_handle": "joshgh"
    },
    "time_stamp": "2024-05-14 14:57:51",
    "text": "Is there any way for the generated ChoiceFieldType to include the choices that were defined in the ChoiceField? We’re currently extending the generated type as a workaround.\nOr does ChoiceFieldType include them &amp; we can update accordingly?"
  },
  {
    "poster": {
      "poster_name": "Josh GH",
      "poster_handle": "joshgh"
    },
    "time_stamp": "2024-05-14 15:07:52",
    "text": "For instance\n```&lt;ChoiceField\n      label=\"Aspect Ratio\"\n      name=\"aspect_ratio\"\n      choices={[\n        ['square', 'Regular Square'],\n        ['large-square', 'Large Square'],\n        ['tall', 'Tall'],\n        ['wide', 'Wide'],\n      ]}\n      default={'square'}\n    &gt;&lt;/ChoiceField&gt;```\ngets typed as a ChoiceFieldType that is\n```(parameter) aspect_ratio: string | number | (string | number)[]```\ninstead of\n```(parameter) aspect_ratio: 'square' | 'large-square' | 'tall' | 'wide'```\n"
  },
  {
    "poster": {
      "poster_name": "Jesse Maltese",
      "poster_handle": "jmaltese"
    },
    "time_stamp": "2024-05-14 15:09:38",
    "text": "Currently there isn’t a way, our type only ever pulls from whatever the default value type is, but at some point during prototyping it did actually behave like this. I can revisit this with the team since is very possible and seems useful."
  },
  {
    "poster": {
      "poster_name": "Jesse Maltese",
      "poster_handle": "jmaltese"
    },
    "time_stamp": "2024-05-14 15:20:25",
    "edited": {
      "time_stamp": "2024-05-14 15:20:38"
    },
    "text": "Would you want\n```aspect_ratio: 'square' | 'large-square' | 'tall' | 'wide'```\nor\n```aspect_ratio: ['square', 'Regular Square'] | ['large-square', 'Large Square'] | ['tall', 'Tall'] | ['wide', 'Wide'] ```"
  },
  {
    "poster": {
      "poster_name": "Josh GH",
      "poster_handle": "joshgh"
    },
    "time_stamp": "2024-05-14 15:25:56",
    "text": "I’m going to check with the team, but I suspect the first.\n\nMy understanding is that when we use\n```&lt;ChoiceField\n      label=\"Aspect Ratio\"\n      name=\"aspect_ratio\"\n      choices={[\n        ['square', 'Regular Square'],\n        ['large-square', 'Large Square'],\n        ['tall', 'Tall'],\n        ['wide', 'Wide'],\n      ]}\n    &gt;&lt;/ChoiceField&gt;```\n`'square'` is what is actually returned &amp; accessable from the code. I thought that `'Regular Square'` is the equivalent of that choice’s `label` . &amp; since the label’s only purpose is setting up the HubSpot editor UI, I thought we generally don’t have access to them from the returned values of any fields.\n\nIs that correct?"
  },
  {
    "text": "Is there a way to get project react based modules to show as part of a theme?",
    "time_stamp": "2024-05-14 15:31:42",
    "reply_count": 2,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2024-05-14 15:56:10"
      },
      {
        "time_stamp": "2024-05-14 15:56:21"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jesse Maltese",
      "poster_handle": "jmaltese"
    },
    "time_stamp": "2024-05-14 15:35:57",
    "edited": {
      "time_stamp": "2024-05-14 15:36:02"
    },
    "text": "Yep, that is correct as far as I know too"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-05-14 15:56:10",
    "text": "Not Yet. However a project based workflow for themes is in the works which would enable this. "
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-05-14 15:56:21",
    "text": "Cannot comment on timeline "
  },
  {
    "poster": {
      "poster_name": "Josh GH",
      "poster_handle": "joshgh"
    },
    "time_stamp": "2024-05-14 17:45:51",
    "edited": {
      "time_stamp": "2024-05-14 18:04:20"
    },
    "text": "I think I’ve figured it out.\nOriginally\n• We had the manual definition for the return of a `ColorField` set to `string` (which seemed to work sometimes :shrug:). \nThen\n• We converted to generated types & it changed to `Required<ColorFieldType>` .\n• That made us update our color usage, in our case using the hex code.\n• After uploading, our module disappears from the page, but stays in the sidebar’s “Page Contents”.\nDisabling the autogeneration & setting the type to `Required<string>` fixes it & brings back the module on the page.\nRemoving the all the code using that color and removing it from the fields and type also brings back the module"
  }
]