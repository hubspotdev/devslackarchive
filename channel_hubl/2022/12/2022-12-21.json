[
  {
    "text": "Weird situation with `|groupby()` filter. Does anyone know how to print only the name of the field?\n\nI’m trying to group hubdb rows based on column named “heading”. When I use HubSpot’s <https://developers.HubSpot.com/docs/cms/hubl/filters#groupby|example code>, there will be also id, order and label visible. I tried also to print what type the `group.grouper` is and it is String – not object or dictionary.\n```{% set rows = hubdb_table_rows(dynamic_page_hubdb_row.hs_child_table_id, queryparam) %}\n  \n&lt;div&gt;\n  &lt;ul&gt;\n  {% for group in rows|groupby('heading') %}\n    &lt;li&gt;{{ group.grouper }}&lt;/li&gt;\n  {% endfor %}\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n&lt;div style=\"padding-top:50px;\"&gt;\n{% for group in rows|groupby('heading') %}\n  {{ group.grouper|pprint }}\n{% endfor %}\n&lt;/div&gt;```",
    "time_stamp": "2022-12-21 04:57:36",
    "edited": {
      "time_stamp": "2022-12-21 04:58:36"
    },
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2023-01-05 06:43:24"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Twentyninetimes",
      "poster_handle": "tech817"
    },
    "time_stamp": "2022-12-21 07:53:11",
    "text": "Does anyone know a way to make a sort of setTimeout function with hubl code?\n\nI would like to test the impact in performance scores when parking {{ standard_footer_includes }} rendition for e.g. 3 seconds",
    "reply_count": 8,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2022-12-21 08:38:24"
      },
      {
        "time_stamp": "2022-12-21 08:44:14"
      },
      {
        "time_stamp": "2022-12-21 09:16:49"
      },
      {
        "time_stamp": "2022-12-21 09:17:03"
      },
      {
        "time_stamp": "2022-12-21 09:17:36"
      },
      {
        "time_stamp": "2022-12-21 09:17:40"
      },
      {
        "time_stamp": "2022-12-21 09:18:01"
      },
      {
        "time_stamp": "2022-12-21 09:46:04"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-12-21 08:38:24",
    "text": "I'm sure it's possible but I just tried for an hour to build one with no success have you tried using the {{ unixtimestamp() }} function to pull in the current time before and after the footer?"
  },
  {
    "poster": {
      "poster_name": "Twentyninetimes",
      "poster_handle": "tech817"
    },
    "time_stamp": "2022-12-21 08:44:14",
    "text": "<@U01QVR44MEY> I was looking at it but wondered how I would keep track if the value changed e.g. 3 or 5 seconds from its original value.\n\nFor now I did this - kinda hacky:\n\n<https://community.HubSpot.com/t5/CMS-Development/Removing-dynamically-added-scripts-from-lt-head-gt-section/m-p/731746#M32020>"
  },
  {
    "text": "How do people \"debug/console log\" when we have to use the `hs watch` command to upload and refresh the page 'up there'?\nFor example in the boilerplates' \"/templates/blog-post.html\" there is this magic `content` type you can use and get certain blog post data from, but how in the world am I suppose to know what \"exists\"? Since this is not strongly typed my first thought was to log out the object like `{{ content }}` , and this reveals some data (although not everything, and no property-names).\n\nAs you can see in the image, \"logging out\" `content` did not contain information like the emtpy array or the existing `post-body` property :thinking_face:\nThese are properties I've just seen by looking at the rest of the boilerplate-blog-post html code, I would have no idea that those properties exist otherwise.\nSo, how do you deal with this? Did I miss some logging/debugging documentation?\n(this blog-post.html is underneath /templates/ and does not have fields.json, module.js etc)",
    "time_stamp": "2022-12-21 09:09:00",
    "reply_count": 7,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2022-12-21 09:12:04"
      },
      {
        "time_stamp": "2022-12-21 09:19:15"
      },
      {
        "time_stamp": "2022-12-21 09:19:49"
      },
      {
        "time_stamp": "2022-12-21 09:19:51"
      },
      {
        "time_stamp": "2022-12-21 09:22:18"
      },
      {
        "time_stamp": "2022-12-21 09:24:08"
      },
      {
        "time_stamp": "2022-12-21 09:39:29"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jonas R",
      "poster_handle": "jonas.rolstad"
    },
    "time_stamp": "2022-12-21 09:12:04",
    "edited": {
      "time_stamp": "2022-12-21 09:12:23"
    },
    "text": "Other solutions have a \"view json\" option of sorts, to see the page/module/etc s' data"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-12-21 09:16:49",
    "text": "Nice work"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-12-21 09:17:03",
    "text": "Let me know if you figure out a way to get the timeout working"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-12-21 09:17:36",
    "text": "I know that I've been able to get hubl to go into an infinite loop but I haven't figured out how to exit that loop at the correct time"
  },
  {
    "poster": {
      "poster_name": "Twentyninetimes",
      "poster_handle": "tech817"
    },
    "time_stamp": "2022-12-21 09:17:40",
    "text": "Thanks :slightly_smiling_face: I will for sure"
  },
  {
    "poster": {
      "poster_name": "Twentyninetimes",
      "poster_handle": "tech817"
    },
    "time_stamp": "2022-12-21 09:18:01",
    "text": "And thanks for your efforts. Really appreciated man"
  },
  {
    "poster": {
      "poster_name": "Twentyninetimes",
      "poster_handle": "tech817"
    },
    "time_stamp": "2022-12-21 09:19:15",
    "text": "Did you try {{ content|pprint }} ?"
  },
  {
    "poster": {
      "poster_name": "Twentyninetimes",
      "poster_handle": "tech817"
    },
    "time_stamp": "2022-12-21 09:19:49",
    "text": "Don’t know if it’ll add anything more, but worth a shot. I agree about the general hardships of finding documentation for some things tho"
  },
  {
    "poster": {
      "poster_name": "Jonas R",
      "poster_handle": "jonas.rolstad"
    },
    "time_stamp": "2022-12-21 09:19:51",
    "text": "I just read that section of the documentation now :eyes: giving it a go"
  },
  {
    "poster": {
      "poster_name": "Jonas R",
      "poster_handle": "jonas.rolstad"
    },
    "time_stamp": "2022-12-21 09:22:18",
    "text": "It output TONS of stuff :sweat_smile: but better than the minimal output I had before :+1:"
  },
  {
    "poster": {
      "poster_name": "Twentyninetimes",
      "poster_handle": "tech817"
    },
    "time_stamp": "2022-12-21 09:24:08",
    "text": "Ask and you shall receive :smile:"
  },
  {
    "poster": {
      "poster_name": "Jonas R",
      "poster_handle": "jonas.rolstad"
    },
    "time_stamp": "2022-12-21 09:39:29",
    "text": "Apparently we also have `|tosjon` , which is even nicer. I did run into some problems with it on larger objects though - where online json formatters failed to prettyfy &amp; structure it"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-12-21 09:46:04",
    "text": "of course"
  },
  {
    "poster": {
      "poster_name": "Twan Derks",
      "poster_handle": "twan"
    },
    "time_stamp": "2022-12-21 10:42:24",
    "text": "Hi,\n\nCan someone help me please, i wont get a filter work if i use a hubdb select column:\n\n```#  label: \"Hubdb listing\"\n#  description: \"Query that retrieves and filters roles in different ways. When filtering by company we need to find the company first and then fetch its associated roles. We use the directives @skip and @include to control which query will run. The last two queries fetch the values we use for generating the filtering options in the UI.\"\n#  $offset: {{ request.query_dict.offset || 0 }}\n#  $limit: {{ (module.cards_per_row * module.rows_per_page) || 5 }}\n#  $job_status: {{ request.query_dict.location || '' }}\n#  $salary: {{ request.query_dict.department || '' }}\n\nquery role_listings(\n  $offset: Int, \n  $limit: Int, \n  $job_status: [HS_Enum],\n  $salary: [HS_Enum]) {\n    HUBDB {\n      # Gets roles when there is either no filtering, or we're filtering by location and/or department.\n      vacatures_by_salary_job_status:  graphql_download_collection(limit: $limit, offset: $offset, filter: {salary_requirement__eq: $salary, job_time__eq: $job_status}) {\n        items {\n          _metadata { \n            id\n          }\n          salary_requirement\n          job_time\n        }\n        hasMore\n        limit\n        offset\n        total\n      }\n\n      # Retrieves all available departments and locations to show in dropdown boxes on the role listing page\n      # as available filters.\n      salary_and_job_status_filter_options: graphql_download_collection(limit: 1000) {\n        items {\n          salary_requirement\n          job_time\n        }\n      }\n    }\n  }```"
  },
  {
    "poster": {
      "poster_name": "Twan Derks",
      "poster_handle": "twan"
    },
    "time_stamp": "2022-12-21 10:43:28",
    "text": "If i do the filter with a string hubdb column it works, but i want filter by a select or multiselect hubdb colomn"
  },
  {
    "poster": {
      "poster_name": "Twan Derks",
      "poster_handle": "twan"
    },
    "time_stamp": "2022-12-21 10:48:35",
    "text": "```  $job_status: [HS_Enum],\n  $salary: [HS_Enum]```\nBoth are hubdb columns with a select type"
  },
  {
    "poster": {
      "poster_name": "Simon Gugala",
      "poster_handle": "simon722"
    },
    "time_stamp": "2022-12-21 10:55:05",
    "text": "Did you figure this out?"
  }
]