[
  null,
  null,
  null,
  null,
  {
    "poster": {
      "poster_name": "Reg Desgroseilliers",
      "poster_handle": "reg"
    },
    "time_stamp": "2017-01-18 13:55:15",
    "text": "Has anyone done anything cool with a real estate listing gridview page with HubDB? I'd love to check it out :stuck_out_tongue:"
  },
  {
    "poster": {
      "poster_name": "Remington Begg",
      "poster_handle": "remingtonbegg"
    },
    "time_stamp": "2017-01-18 14:00:54",
    "text": "We are currently building out a HUB Db Version of something similar to this. But this is actually done as a blog. <http://www.schomesfl.com/floor-plans>"
  },
  {
    "poster": {
      "poster_name": "Reg Desgroseilliers",
      "poster_handle": "reg"
    },
    "time_stamp": "2017-01-18 14:10:20",
    "text": "very cool! <@U25C65C3S> I wouldn't have even thought to attempt that as a blog. It works great!"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2017-01-18 14:18:21",
    "text": "I was thinking that HubDB would be problematic with listings as you would still need a page that it would link to correct? So you would have a column in the db that houses the url of the \"view\" button. Correct? There would be no way to create a page/url while using HubDB is there?"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2017-01-18 14:18:36",
    "text": "maybe I am just not connecting everything in my head when working through this."
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2017-01-18 14:20:17",
    "text": "HubDB is designed to replace using the blog for this kind of thing. Currently you can create a page that either displays a listing page or a detail page based on query parameters. Soon you’ll be able to define a bona fide path that maps to a hubdb row."
  },
  {
    "poster": {
      "poster_name": "Remington Begg",
      "poster_handle": "remingtonbegg"
    },
    "time_stamp": "2017-01-18 14:21:05",
    "text": "<@U2H1Q3F8R> only issue we've found (and why we're transitioning) is for any search queries"
  },
  {
    "poster": {
      "poster_name": "Reg Desgroseilliers",
      "poster_handle": "reg"
    },
    "time_stamp": "2017-01-18 14:22:35",
    "text": "<@U2H3TT8F2> exactly, The way i'm planning on implementing it is mainly as a grid/list view of properties with a row for the url of the actual listing page."
  },
  {
    "poster": {
      "poster_name": "Remington Begg",
      "poster_handle": "remingtonbegg"
    },
    "time_stamp": "2017-01-18 14:22:40",
    "text": "We've implemented something similar using 2 layouts with different query dicts"
  },
  {
    "poster": {
      "poster_name": "Remington Begg",
      "poster_handle": "remingtonbegg"
    },
    "time_stamp": "2017-01-18 14:22:40",
    "text": "<https://www.xicall.com/products>"
  },
  {
    "poster": {
      "poster_name": "Remington Begg",
      "poster_handle": "remingtonbegg"
    },
    "time_stamp": "2017-01-18 14:22:50",
    "text": "This is using HubDB"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2017-01-18 14:23:07",
    "text": "<@U22PJPGK0> for the detail page, you wouldnt be able to have a url structure in it like \"<http://domain.com/product-one-detail|domain.com/product-one-detail>\" and then <http://domain.com/product-two-detail|domain.com/product-two-detail>\" could you?"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2017-01-18 14:23:18",
    "text": "soon :slightly_smiling_face:",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2017-04-04 11:20:39"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2017-01-18 14:24:02",
    "text": "separate analytics too"
  },
  {
    "poster": {
      "poster_name": "Remington Begg",
      "poster_handle": "remingtonbegg"
    },
    "time_stamp": "2017-01-18 14:24:20",
    "text": "we're doing it with a small query like p=this-is-the-full-name"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2017-01-18 14:24:50",
    "text": "yeah, that’s the best way for now"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2017-01-18 14:25:17",
    "text": "<@U25C65C3S> so like \"<http://domain.com/detail?p=this-is-url|domain.com/detail?p=this-is-url>\" correct?"
  },
  {
    "poster": {
      "poster_name": "Remington Begg",
      "poster_handle": "remingtonbegg"
    },
    "time_stamp": "2017-01-18 14:25:27",
    "text": "yup!"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2017-01-18 14:25:42",
    "text": "kk thats what I figured would be the only way (for now)"
  },
  {
    "poster": {
      "poster_name": "Remington Begg",
      "poster_handle": "remingtonbegg"
    },
    "time_stamp": "2017-01-18 14:27:37",
    "text": "I've done it as two layouts (considering the future enhancements) <http://domain.com/listing|domain.com/listing> (with searchable query params) and then <http://domain.com/detail?p=product-detail-name|domain.com/detail?p=product-detail-name>"
  }
]