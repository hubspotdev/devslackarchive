[
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2018-10-17 05:48:28",
    "text": "hello and Good morning all."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-10-17 07:03:51",
    "text": "good morning"
  },
  {
    "poster": {
      "poster_name": "Remington Begg",
      "poster_handle": "remingtonbegg"
    },
    "time_stamp": "2018-10-17 07:15:07",
    "text": "whatup!"
  },
  {
    "poster": {
      "poster_name": "Kayla Sutcliffe",
      "poster_handle": "michaela.sutcliffe"
    },
    "time_stamp": "2018-10-17 07:25:03",
    "text": "Good afternoon!"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-10-17 07:28:25",
    "text": "I’d be willing to build that into the extension. Would have to figure out a way to make the optional textbox bit work without adjusting some permissions for the extension, but I think it’s doable.\n\nHad another thought as I was thinking about this last night.\n\nYou guys might actually be able to do this server-side. Whenever a user uses the extension for this it adds a query parameter to the url `?cacheBuster=` then a randomly generated number.\n\nSince you guys already have query parameters for hs debug and whatnot which change the outputted source, you likely could track every time someone uses the cachebuster on a HubSpot site.\n\nNot just that, you could conditionally load some JS and inject a little floater icon(like you do with the sprocket menu) which contains a form  allowing the user to tell you what information wasn’t updated.\n\nNot trying to put it all on you guys, I would still go the API route if you want to go that way I was just thinking technically you’re already getting the URLs that people using this on, you’re just not set up to track it."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-10-17 07:36:39",
    "text": "I can tell you though you’re going to see a fair amount of data coming in -\n<https://spin.d.pr/eFDYC4+>\n\nOn average it gets used 170 - 225 times a weekday.\n\nwhere you see the chart drop to next to nothing that’s on the weekends - turns out HubSpot devs have lives :stuck_out_tongue:"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-10-17 08:08:54",
    "text": "Fixed"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-10-17 08:09:35",
    "text": "such kind people"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-10-17 08:10:36",
    "text": "If you look at the cache tags returned from the request you now see `DB-849598`"
  },
  {
    "poster": {
      "poster_name": "Libo Song",
      "poster_handle": "lsong"
    },
    "time_stamp": "2018-10-17 08:13:56",
    "text": "I do have the cache buster requests logged. Let me see what we can do there."
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-10-17 08:20:56",
    "text": "appears to be working!"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2018-10-17 08:20:58",
    "text": "thanks again"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-10-17 08:26:29",
    "text": "Clever man"
  },
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-10-17 14:01:18",
    "text": "Is there a best practice to change the sequencing of rows in HubDB once the table is already built?"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-10-17 14:02:02",
    "text": "I recently built out a testimonial page in HubDB and the client would like the last two testimonials to be at the top. Here is a link to the page that I'm working on: <https://www.responsiveinboundmarketing.com/testimonials>"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2018-10-17 14:03:54",
    "text": "<@U2LEJ045D> what I've done a few times is add a new number column in hubdb titled \"sort_order\" then use that with the sort filter on the for loop like so"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2018-10-17 14:04:03",
    "text": "`{% for resource in resources|sort(False, False,'sort_order') %}`",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2018-10-17 14:20:08"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-10-17 14:04:28",
    "text": "oh cool <@U7V9DQ31P>"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2018-10-17 14:04:30",
    "text": "the only gotcha is you have to make sure all rows have a number or nothing will display in the for loop."
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-10-17 14:04:45",
    "text": "oh ok great"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-10-17 14:04:48",
    "text": "let me try that"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-10-17 14:04:52",
    "text": "thanks for your help!"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-10-17 14:08:17",
    "text": "that worked great <@U7V9DQ31P>!"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-10-17 14:08:19",
    "text": "appreciate it"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2018-10-17 14:08:37",
    "text": "no problem! the hubl filter makes it pretty easy"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-10-17 14:10:49",
    "text": "I’ve done something similar with a column that allows you to give set a priority to items via a number."
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-10-17 14:16:35",
    "text": "yeah that's sweet"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-10-17 14:20:08",
    "text": "you can actually sort in the hubdb rows function itself then you dont have to use |sort, you can also chain multiple things to sort by then"
  },
  null,
  null,
  null
]