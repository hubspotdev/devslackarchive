[
  {
    "poster": {
      "poster_name": "Maria Filipe",
      "poster_handle": "maria.filipe"
    },
    "time_stamp": "2019-04-23 08:58:56",
    "text": "Thanks <@UEYNCDE2Y>! Not sure how I would implement that though.... I have a custom module  which I load in the head so my content editors can decide whether to use the default theme colors or select different ones (this module doesn't render in the page, it's only in the UI). If they select different colors, then I set a variable {{theme_color}} to that value and export to template. I can use it \"manually\" across the elements in the template, but I'm not able to use those values to override the ones defined in the css or to import/call those variables to replace the ones there... Not sure if this is even possible..."
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-23 12:52:06",
    "text": "anyone see what/ if i am doing something wrong here?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-23 12:52:17",
    "text": "```{% if content.topic_list %}\n                  {% for topic in content.topic_list %}\n                  &lt;a class=\"post-topic-link\" href=\"{{ group.absolute_url }}/topic/{{ topic.slug }}\"&gt;\n                    {% if topic.name is string_startingwith \"t-\" %}\n                    {{ topic.name|replace \"t-\", \"\" }}\n                    {% elif topic.name is string_startingwith \"i-\" %}\n                    {{ topic.name|replace \"i-\", \"\" }} \n                    {% else %}\n                      {{ topic.name }}\n                    {% endif %}\n                  &lt;/a&gt;\n                  {% endfor %}\n{% endif %}```",
    "reply_count": 12,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-04-23 12:52:41"
      },
      {
        "time_stamp": "2019-04-23 12:54:08"
      },
      {
        "time_stamp": "2019-04-23 12:54:30"
      },
      {
        "time_stamp": "2019-04-23 12:54:43"
      },
      {
        "time_stamp": "2019-04-23 12:54:56"
      },
      {
        "time_stamp": "2019-04-23 12:55:17"
      },
      {
        "time_stamp": "2019-04-23 12:55:42"
      },
      {
        "time_stamp": "2019-04-23 12:57:11"
      },
      {
        "time_stamp": "2019-04-23 12:57:23"
      },
      {
        "time_stamp": "2019-04-23 12:57:31"
      },
      {
        "time_stamp": "2019-04-23 12:57:44"
      },
      {
        "time_stamp": "2019-04-23 12:57:50"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-23 12:52:41",
    "text": "the replace filter is not working :disappointed:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-23 12:54:08",
    "text": "you’re missing parenthesis"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-23 12:54:30",
    "text": "on the replace filter"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-23 12:54:43",
    "text": "damnit, jon"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-23 12:54:56",
    "text": ":beers:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-23 12:55:17",
    "text": ":sprocky: You’re missing a parenthesis….. somewhere…"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-23 12:55:42",
    "text": "i need a sprocky to follow me around"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-23 12:57:11",
    "text": "lol would be awesome to get custom Sprocky hats, you put your head in the center."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-23 12:57:23",
    "text": "wonder if my wife would knit one for me. lol"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-23 12:57:31",
    "text": "if she does, i will order one"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-23 12:57:44",
    "text": "my halloween costume may have changed"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-23 12:57:50",
    "text": "haha"
  },
  {
    "poster": {
      "poster_name": "Chris Conant",
      "poster_handle": "conant_chris"
    },
    "time_stamp": "2019-04-23 12:57:53",
    "edited": {
      "time_stamp": "2019-04-23 12:59:04"
    },
    "text": "You can use css &amp; js variables in a custom module but they have to be in the html/ hubl section and wrap them in a style/ script tags. You can use the `{% require %}` tags to load them in the appropriate spots. As an example, if you wanted to use a color variable for a background you could add a color field and then use something like:\n{% require_css %}\n&lt;style&gt;\n.my-element {\n  background-color: {{ module.color_field.color }};\n}\n&lt;/style&gt;\n{% end_require_css %}"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-04-23 12:58:23",
    "text": "is there a way to get a page’s url from it’s internal HubSpot ID?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-23 12:59:25",
    "text": "pagebyid then .absolute_url"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-04-23 13:00:18",
    "text": "pagebyid… is that a function?"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-04-23 13:01:14",
    "text": "<https://designers.HubSpot.com/en/docs/hubl/hubl-supported-functions#page-by-id>"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-23 13:02:22",
    "text": "(if the sidebar had a scroll bar by default, you would have found that quicker)"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-23 13:02:27",
    "text": "mmhmm"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-04-23 13:02:55",
    "text": "bahahaha… maybe display functions and filters by categories in the docs?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-23 13:03:10",
    "text": "yes!"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-04-23 13:03:38",
    "text": "if you create the idea, I will upvote it"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-23 13:03:54",
    "text": "you must have missed the lazy part of my original post"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-23 13:04:08",
    "text": "last time i tried to create an idea, i got an error"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-23 13:04:13",
    "text": "so i am boycotting it"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-04-23 13:04:27",
    "text": "it was a beautiful piece of prose, too"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-04-23 13:10:00",
    "edited": {
      "time_stamp": "2019-04-23 13:10:07"
    },
    "text": "Apparently `related_blog_posts` doesnt' accept in `blog_ids` the value `default` while the documentation shows it like that :thinking_face:"
  },
  {
    "text": "",
    "time_stamp": "2019-04-23 13:11:26"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-04-23 13:11:58",
    "edited": {
      "time_stamp": "2019-04-23 13:12:32"
    },
    "text": "```{% related_blog_posts \n    limit=2,\n    blog_ids=\"default\",\n    tags=content.tag_list|map(\"name\")|join(\", \"),\n    post_formatter=\"related_formatter\",\n    no_wrapper=true\n%}```",
    "reply_count": 12,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-04-23 13:13:20"
      },
      {
        "time_stamp": "2019-04-23 13:14:31"
      },
      {
        "time_stamp": "2019-04-23 13:15:00"
      },
      {
        "time_stamp": "2019-04-23 13:17:38"
      },
      {
        "time_stamp": "2019-04-23 13:17:55"
      },
      {
        "time_stamp": "2019-04-23 13:18:13"
      },
      {
        "time_stamp": "2019-04-23 13:18:14"
      },
      {
        "time_stamp": "2019-04-23 13:19:05"
      },
      {
        "time_stamp": "2019-04-23 13:24:43"
      },
      {
        "time_stamp": "2019-04-23 13:25:36"
      },
      {
        "time_stamp": "2019-04-23 13:26:52"
      },
      {
        "time_stamp": "2019-04-23 13:27:44"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2019-04-23 13:13:20",
    "text": "we'll fix the docs"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-04-23 13:14:31",
    "edited": {
      "time_stamp": "2019-04-23 13:14:40"
    },
    "text": "although its not accepting `content.parent_blog.id` neither (in the blog post template)"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-04-23 13:15:00",
    "edited": {
      "time_stamp": "2019-04-23 13:15:59"
    },
    "text": "tried to convert to string but same error\n`content.parent_blog.id|string`"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-23 13:17:38",
    "text": "Gonzalo try this"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-23 13:17:55",
    "text": "`blog_ids=\"{{yourblogidvarhere}}\"`"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2019-04-23 13:18:13",
    "text": "just omit the parameter"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-23 13:18:14",
    "text": "occasionally using the brackets solves problems"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2019-04-23 13:19:05",
    "text": "docs fixed"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-04-23 13:24:43",
    "text": "thanks!"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-04-23 13:25:36",
    "text": "no error but still no related articles now :sweat_smile:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-23 13:26:52",
    "text": "I’ve found that related posts tag to be a pain in the butt to get working correctly. had to result to some hackery because some attributes don’t do what you think they do."
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2019-04-23 13:27:44",
    "edited": {
      "time_stamp": "2019-04-23 13:38:45"
    },
    "text": "I am just using the tag list to filter (and right now, only one tag is in use) shouldn't be similar like the topic listing page/results?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-04-23 15:02:18",
    "edited": {
      "time_stamp": "2019-04-23 15:02:50"
    },
    "text": "sanity check:\n\n```\n {% module_block module \"module_20_years\" wrapping_html='', per_widget_wrapper_html='', overrideable=True, widget_name='WE - FW Image', path='/Email/######/Welcome series/Welcome Series Modules/WE - FW Image', use_image_cta_instead_of_standard_image=False, image='{\"src\":\"<https://pages>.####.com/hubfs/Welcome%20Email%20Series/Email2/Over-20-years-of-comfort-tech-research.jpeg\",\"alt\":\"Over 20 Years of Comfort Tech Research  - ######\",\"width\":601,\"height\":297}', label='WE - FW Image' %}\n{% end_module_block %}\n\n```\n\nThe editor is throwing a warning saying `cannot resolve property `src` on that module image src.\n\nbizzarely I have another instance of the module that works perfectly:\n\n```\n    {% module_block module \"module_##########\" wrapping_html='', per_widget_wrapper_html='', overrideable=True, widget_name='WE - FW Image', module_id=###5351, path='/Email/######/Welcome series/Welcome Series Modules/WE - FW Image', use_image_cta_instead_of_standard_image=False, image='{\"src\":\"<https://pages>.#######.com/hubfs/Welcome%20Email%20Series/Email2/Woman%20hugging%20blankets-100.jpg\",\"alt\":\"Woman hugging blankets\",\"width\":601,\"height\":297}', label='WE - FW Image' %}\n{% end_module_block %}\n```\n`#` sign is just obfuscating client info, not actually in the code.\n\nBecause of the error, when you create emails with this template, this module has no default value.",
    "reply_count": 5,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-04-24 12:57:54"
      },
      {
        "time_stamp": "2019-04-24 14:04:15"
      },
      {
        "time_stamp": "2019-04-24 14:22:51"
      },
      {
        "time_stamp": "2019-04-24 14:27:46"
      },
      {
        "time_stamp": "2019-04-24 14:53:28"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Maria Filipe",
      "poster_handle": "maria.filipe"
    },
    "time_stamp": "2019-04-23 17:55:37",
    "text": "Thanks <@U22PWJ41G>! And is there a way to use the values of those variables in my template stylesheet? My custom module is only for my content editors to select the page options (eg. country+event date which will set an eventcode used across forms, workflows, properties, sections to show/hide, event date, etc). In this case they can use the brand theme colors or a different set of theme colors. The template stylesheet has those variables across all elements. So the {{theme_color}} that is currently set in the template stylesheet would either use my default color value or the value each content editor defines for that page. Then any element with the class \"bg-theme\" would be styled with the right background color depending on the options the content editor selected. I'm giving this some further tries and see how it goes"
  }
]