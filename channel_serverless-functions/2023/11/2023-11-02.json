[
  {
    "poster": {
      "poster_name": "hammad ahmad",
      "poster_handle": "hammad.a"
    },
    "time_stamp": "2023-11-02 07:58:49",
    "text": "Thank you <@U039PUBV59N>, It works like a charm. Thanks a lot. :pray::pray:"
  },
  {
    "poster": {
      "poster_name": "Hugo Carvalho",
      "poster_handle": "hugo.carvalho"
    },
    "time_stamp": "2023-11-02 08:16:18",
    "edited": {
      "time_stamp": "2023-11-02 08:17:06"
    },
    "text": "Hi all!\n\nDoes anyone know how can i handle a simple bearer authentication in serveless functions ?\nI can't seem to find the authorization headers on my context...",
    "reply_count": 5,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-11-02 13:20:32"
      },
      {
        "time_stamp": "2023-11-07 10:51:06"
      },
      {
        "time_stamp": "2023-11-07 10:51:25"
      },
      {
        "time_stamp": "2023-11-08 04:07:52"
      },
      {
        "time_stamp": "2023-11-08 06:22:03"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Gaelan Brewer",
      "poster_handle": "gaelan.brewer"
    },
    "time_stamp": "2023-11-02 09:18:44",
    "text": "```{\n  \"name\": \"app_name.functions.output\",\n  \"version\": \"0.1.0\",\n  \"author\": \"Author Name\",\n  \"license\": \"MIT\",\n  \"type\": \"commonjs\"\n}```"
  },
  {
    "poster": {
      "poster_name": "Gaelan Brewer",
      "poster_handle": "gaelan.brewer"
    },
    "time_stamp": "2023-11-02 09:22:39",
    "edited": {
      "time_stamp": "2023-11-02 09:22:54"
    },
    "text": "I'm using Rollup.js to transpile and bundle my serverless project, so the *output* directory is where the generated serverless scripts are output. This allows me to use TypeScript, async/await, and to split my code up into modules, but does add some configuration complexity."
  },
  {
    "poster": {
      "poster_name": "hammad ahmad",
      "poster_handle": "hammad.a"
    },
    "time_stamp": "2023-11-02 13:20:32",
    "text": "<@U04S7UM6ATB> For development purposes, You can create .env file and save your credentials there. Access it in your code like this:\n```const hubSpotClient = new HubSpot.Client({\n    accessToken: process.env['PRIVATE_APP_ACCESS_TOKEN'],\n  });```\nIf you have saved the credentials using CLI command:\n```hs secrets add TestKey```\nthen it's saved in HubSpot backend. You just need to define the secret name in your serverless.json file like this:\n```{\n  \"runtime\": \"nodejs16.x\",\n  \"version\": \"1.0\",\n  \"appFunctions\": {\n    \"getYearlyShipments\":{\n      \"file\":\"get-yearly-shipments.js\",\n      \"secrets\":['TestKey']\n    }\n  }\n}```\nNow you can use it in your serverless function like this:\n```const hubSpotClient = new HubSpot.Client({\n    accessToken: context.secrets.TestKey\n  });```\nHope this helps."
  }
]