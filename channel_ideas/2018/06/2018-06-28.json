[
  {
    "poster": {
      "poster_name": "Joe",
      "poster_handle": "joe"
    },
    "time_stamp": "2018-06-28 07:31:41",
    "text": "Idea: text field in CMs to have color/font-size controls (because clients just *love* being able to override the css of their themes and templates).",
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-06-28 07:39:32"
      },
      {
        "time_stamp": "2018-06-28 07:52:50"
      },
      {
        "time_stamp": "2018-06-28 07:54:51"
      },
      {
        "time_stamp": "2018-06-28 07:55:26"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-28 07:39:32",
    "text": "they kind of already have that. There’s a styles tab in the page editor that gives some of those controls, plus you can set font size and color in rich text fields."
  },
  null,
  {
    "poster": {
      "poster_name": "Joe",
      "poster_handle": "joe"
    },
    "time_stamp": "2018-06-28 07:52:50",
    "text": "Right, from a raw module in a coded template. I'm referring to within a Custom Module (using it for an easy repeater)."
  },
  {
    "text": "<@UAQHN1F2Q> uploaded a file: <https://HubSpotdev.slack.com/files/UAQHN1F2Q/FBFL3NEUA/screen_shot_2018-06-28_at_9.53.36_am.jpg|Screen Shot 2018-06-28 at 9.53.36 AM.jpg>",
    "time_stamp": "2018-06-28 07:54:42"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-28 07:54:51",
    "text": "I was meaning they have those controls already on the page editor side. doesn’t matter if it’s a custom module or not.\n\nIf you’re trying to make it so they can re-use those styles, that’s a little different."
  },
  {
    "poster": {
      "poster_name": "Joe",
      "poster_handle": "joe"
    },
    "time_stamp": "2018-06-28 07:55:26",
    "text": "I've attached my screenshot of the editor view of the custom module."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-28 07:55:33",
    "text": "hit the back to LP stats link"
  },
  {
    "text": "<@UAQHN1F2Q> uploaded a file: <https://HubSpotdev.slack.com/files/UAQHN1F2Q/FBGHDPXK8/screen_shot_2018-06-28_at_9.55.37_am.jpg|Screen Shot 2018-06-28 at 9.55.37 AM.jpg>",
    "time_stamp": "2018-06-28 07:55:56"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-28 07:56:31",
    "text": "very weird. it used to be there. Guessing they found the implementation was buggy and temporarily hid the tab till they fix it"
  },
  {
    "poster": {
      "poster_name": "Joe",
      "poster_handle": "joe"
    },
    "time_stamp": "2018-06-28 07:58:01",
    "text": "Possibly. I can't remember ever seeing it on CMs since the Design Manager v2 updates. As a workaround for now, just have to tell my client to edit their &lt;h2&gt; content within the Richtext wysiwyg if they want to change that color. Thanks for the assist."
  },
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-06-28 15:45:50",
    "edited": {
      "time_stamp": "2018-06-28 15:47:54"
    },
    "text": "*idea*: Display somehow the child nodes of a variable.\nFor example in the blog template on hover `{{ post }}` will display:\n`{{ post.name }}`\n`{{ post.absolute_url }}`\n...\n\n\nI think there is something \"live\" already if you try to use a property and it doesn't exists on CMs but would be great see the possibilities in a easier way than the dev. info."
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-06-28 15:51:01",
    "text": "So you're saying like if you there was a way to delineate a variable for inspection, let's say {* post *} you could see a tooltip with the a child props tree in the preview, right? Or are you saying live in the code editor view?"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-06-28 15:55:32",
    "edited": {
      "time_stamp": "2018-06-28 15:59:06"
    },
    "text": "in the code editor:\nYou write `{{post}}` inside the blog template and then on hover you can see the child props.\nOr even better as in other IDEs if you write `{{post.` you can see a list of recommendations or auto-completion possibilities",
    "reply_count": 8,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-06-28 16:07:17"
      },
      {
        "time_stamp": "2018-06-28 16:10:43"
      },
      {
        "time_stamp": "2018-06-28 16:12:16"
      },
      {
        "time_stamp": "2018-06-28 16:13:11"
      },
      {
        "time_stamp": "2018-06-28 16:13:46"
      },
      {
        "time_stamp": "2018-06-28 16:14:51"
      },
      {
        "time_stamp": "2018-06-28 16:15:31"
      },
      {
        "time_stamp": "2018-06-28 16:15:33"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-06-28 15:57:13",
    "text": "so now I have two suggestions instead one :smile:"
  },
  {
    "text": "<@U7ADCU3BM> uploaded a file: <https://HubSpotdev.slack.com/files/U7ADCU3BM/FBFTUC3U3/image.png|autocompletion.png>",
    "time_stamp": "2018-06-28 15:58:57"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-28 16:07:17",
    "text": "Will actually figured out a way we might be able to add this through the chrome extension XD see HubL Snippets Auto-complete\n<https://github.com/williamspiro/HubSpot-Developer-Extension/issues/1>"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-06-28 16:10:43",
    "edited": {
      "time_stamp": "2018-06-28 16:12:15"
    },
    "text": "I missed that!\nOh that could be really cool, but I don't think that will be able to do that for variables, just the functions, blocks and filters :thinking_face:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-28 16:12:16",
    "text": "yea it looks pretty cool and easy to maintain, not sure how easy it will be though to implement inside the code editor without conflicting with the code editor itself though."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-28 16:13:11",
    "text": "well I guess you’re right if you have a custom named variable it might be an issue, but if you’re using the standard HS variables it could work"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-06-28 16:13:46",
    "text": "I think that maybe we can have some issues on auto-completion... depends on how the code is updated and managed."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-28 16:14:51",
    "text": "yea. I mean if you see the array of possible auto complete functions it would be easy to keep that updated. Yea occasionally it would not support a new function or new variable but adding it is litterally just adding a string"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-06-28 16:15:31",
    "text": "I agree though that if HS were to do this “natively” then that’d ultimately be better."
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-06-28 16:15:33",
    "text": "well yes, we can have also an array with default variables like `{{post}}` but thinking for example in content, it doesn't have the same props depend if you are in a page, blog etc. so I think that will be harder to do. Probably we will need to investigate if we can get the real info in live as the validator does."
  }
]