[
  {
    "text": "Hey, trying to create a html hubl template. To give the page creator more flexibility I have added a lot of modules. But it's a mess in the website editor. I wanted to know if there is a way to group modules so I can have distinct groups for sections of the page. Is there a template/tutorial I could look at that does this well?",
    "time_stamp": "2019-05-10 11:18:52",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-05-10 11:56:26"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-10 11:56:26",
    "text": "try grouping some of these into custom modules.  that will clean it up. if you use a flexible column, they will also be able to choose which modules they want on the page"
  },
  {
    "poster": {
      "poster_name": "Duncan Henderson",
      "poster_handle": "duncan879"
    },
    "time_stamp": "2019-05-10 13:51:53",
    "text": "Hi - I have some module code to have a RSS feed 3 in a row, and works great\n\n{% set rec_posts = blog_recent_posts('default', 3) %}\n&lt;div class=\"row-fluid-wrapper\"&gt;\n    &lt;div class=\"row-fluid\"&gt;\n\n        {% for rec_post in rec_posts %}\n\n            &lt;div class=\"span4\"&gt;\n                &lt;a href=\"{{rec_post.absolute_url}}\"&gt;\n                    &lt;img src=\"{{ rec_post.post_list_summary_featured_image }}\" alt=\"{{ rec_post.featured_image_alt_text }}\"&gt;\n                    &lt;h3&gt;{{ rec_post.name }}&lt;/h3&gt;\n                &lt;/a&gt;\n            &lt;/div&gt;\n\n        {% endfor %}\n\n    &lt;/div&gt;\n&lt;/div&gt;\n\nWhat I also need to do is filter these recent posts by a specific tag - for example the latest posts but tagged with \"media\" as an example. Any help please?  :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-10 14:59:52",
    "edited": {
      "time_stamp": "2019-05-10 15:02:21"
    },
    "text": "Is there a mechanism to apply a query filter to a blog similar to this snippet that I used for a hubDB for loop?\n```\n{% for row in hubdb_table_rows(&lt;tableID&gt;, &lt;APIquery&gt; ) %}\n        {{ news_card() }} \n{% endfor %}\n```\n\nFrom what I'm seeing there isn't an ability to directly apply an API query to any of the  blog variables....would anyone know if I'm missing something there within the documentation?",
    "reply_count": 23,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-05-10 15:03:09"
      },
      {
        "time_stamp": "2019-05-10 15:03:29"
      },
      {
        "time_stamp": "2019-05-10 15:08:52"
      },
      {
        "time_stamp": "2019-05-10 15:09:38"
      },
      {
        "time_stamp": "2019-05-10 15:10:22"
      },
      {
        "time_stamp": "2019-05-10 15:10:55"
      },
      {
        "time_stamp": "2019-05-10 15:11:32"
      },
      {
        "time_stamp": "2019-05-10 15:12:45"
      },
      {
        "time_stamp": "2019-05-10 15:13:10"
      },
      {
        "time_stamp": "2019-05-10 15:14:08"
      },
      {
        "time_stamp": "2019-05-10 15:14:24"
      },
      {
        "time_stamp": "2019-05-10 15:14:52"
      },
      {
        "time_stamp": "2019-05-10 15:15:54"
      },
      {
        "time_stamp": "2019-05-10 15:17:14"
      },
      {
        "time_stamp": "2019-05-10 15:20:05"
      },
      {
        "time_stamp": "2019-05-10 15:25:17"
      },
      {
        "time_stamp": "2019-05-13 07:16:32"
      },
      {
        "time_stamp": "2019-05-13 07:16:48"
      },
      {
        "time_stamp": "2019-05-13 07:33:42"
      },
      {
        "time_stamp": "2019-05-13 08:51:49"
      },
      {
        "time_stamp": "2019-05-14 10:24:54"
      },
      {
        "time_stamp": "2019-05-14 20:11:52"
      },
      {
        "time_stamp": "2019-05-15 07:56:05"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-10 15:03:09",
    "text": "unfortunately you are correct there isn’t.\n\nwhat you do have though are the blog recent posts, blog recent topic posts, and all those functions which piecemeal enable you to do similar things"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-10 15:03:29",
    "text": "but the downsides too are you can only do 200 posts with no pagination"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-10 15:08:52",
    "text": "Hm. Remember that thing from yesterday with the DB logic? Now with a blog! Yay!"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-10 15:09:38",
    "text": "yeek…. yeah… you’re going to have to manipulate data you pull using one of the blog post functions"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-10 15:10:22",
    "text": "there’s another way but it’s hackery and would take a lot of hours, you would not be limited to the 200 posts though"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-10 15:10:55",
    "text": "I don't think 'a lot of hours' is within the budget"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-10 15:11:32",
    "text": "lol, then go the “simpler” route and use blog recent topic posts do the same |random on it and only output the first post"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-10 15:12:45",
    "text": "a possibly more performant method would be to do a blog recent topic posts, get 200.\n\n`{{yourblogvar[randomNumber]|pprint}}`"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-10 15:13:10",
    "text": "then you wouldn’t actually be looping through so many and throwing out 199 posts"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-10 15:14:08",
    "text": "That would seem to be the more logical thing, but I think that skips over the date constraints"
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-05-10 15:14:24",
    "text": "Welp. Fun times! :joy_cat:"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2019-05-10 15:14:52",
    "text": "What are you trying to do? We'd much rather give you more powerful functions than have developers load 200 posts and throw away 199 of them."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-10 15:15:54",
    "text": "oh crap, forgot about the time constraints.\n\nwell, you can maybe do a  `|selectattr(publish_date,)`\nkinda thing(psuedo code there, I’m missing 1 or 2 params)"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-10 15:17:14",
    "text": "The way I understand it Jeff, Dana’s trying to pull data for 1 blog post that is within a date range at random"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-10 15:20:05",
    "text": "Jeff what might solve the issue is a blog_posts_by_date_range(blog_id,start,finish)"
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2019-05-10 15:25:17",
    "text": "I'd like to know a little more about the use case. Why would you want a random blog post?"
  }
]