[
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-08-14 08:28:14",
    "text": "So im running into an issue with the `contents.objects[#].publish_date_localized` when its used as is, the published date of the article shows, when you add `.date` to the end, todays date shows. Not sure why that happens or if its a bug of some kind. Its in a template a client bought, was just curious as to why this happens as you can't use the `datetimeformat` on it without going into the `.date` param so its throwing me off."
  },
  {
    "poster": {
      "poster_name": "jim mikecz",
      "poster_handle": "jim.m"
    },
    "time_stamp": "2018-08-14 09:14:11",
    "text": "Hey all. Running into a little snag here and hoping someone can help. I am trying to loop through the select options in a column of a HubDB table."
  },
  {
    "text": "",
    "time_stamp": "2018-08-14 09:14:36"
  },
  {
    "poster": {
      "poster_name": "jim mikecz",
      "poster_handle": "jim.m"
    },
    "time_stamp": "2018-08-14 09:15:20",
    "text": "I am looking through the docs but I don’t see an example of this usage scenario. If anyone can steer me in the right direction with this I’d appreciate it!"
  },
  {
    "poster": {
      "poster_name": "jim mikecz",
      "poster_handle": "jim.m"
    },
    "time_stamp": "2018-08-14 09:15:58",
    "text": "And to clarify--I have a column called “company”, and I am trying to generate the options HTML with a for loop."
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-14 09:16:38",
    "text": "If you add `{{ item }} ` in the loop, you can print out what fields the option object has"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-14 09:16:47",
    "text": "I believe it is `name` and `id`"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-14 09:16:58",
    "text": "So you would do something like `{{ item.name }}`"
  },
  {
    "poster": {
      "poster_name": "jim mikecz",
      "poster_handle": "jim.m"
    },
    "time_stamp": "2018-08-14 09:18:00",
    "text": "Ok. Thanks! Let me give that a try."
  },
  {
    "poster": {
      "poster_name": "jim mikecz",
      "poster_handle": "jim.m"
    },
    "time_stamp": "2018-08-14 09:25:03",
    "text": "Maybe I’m missing something simple here. Does the *.options attribute return an array?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-14 09:25:38",
    "text": "Yep"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-14 09:25:42",
    "text": "For the column"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-14 09:25:51",
    "text": "It return all the options"
  },
  {
    "poster": {
      "poster_name": "jim mikecz",
      "poster_handle": "jim.m"
    },
    "time_stamp": "2018-08-14 09:31:25",
    "text": "Ahh I see. I got it working here. Column name needs to be in quotes as well."
  },
  {
    "text": "",
    "time_stamp": "2018-08-14 09:32:21"
  },
  {
    "text": "I need to pull the list of topics for an entire blog into a dropdown, but topic_list is throwing errors. Any ideas?",
    "time_stamp": "2018-08-14 14:42:08",
    "edited": {
      "time_stamp": "2018-08-14 14:42:29"
    },
    "reply_count": 4,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-08-14 14:46:20"
      },
      {
        "time_stamp": "2018-08-14 14:46:31"
      },
      {
        "time_stamp": "2018-08-14 14:46:41"
      },
      {
        "time_stamp": "2018-08-14 14:48:58"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-14 14:46:20",
    "text": "You have to get the blog from the id"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-14 14:46:31",
    "text": "`job_search_blog` is either a number or `default`"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-08-14 14:46:41",
    "text": "Which doesn't have a `topic_list` property"
  },
  {
    "poster": {
      "poster_name": "eileenk",
      "poster_handle": "eileenk"
    },
    "time_stamp": "2018-08-14 14:48:58",
    "text": "Gotcha. Is there another way to pull the list of topics associated with a blog w/o using post_filter?"
  }
]