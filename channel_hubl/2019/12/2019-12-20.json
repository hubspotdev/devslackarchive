[
  {
    "text": "Hey y'all, I'm trying to get the last 4 characters of a hubl string variable.  I was trying to do that with regex replace, but the following code is throwing the error",
    "time_stamp": "2019-12-20 09:40:53",
    "reply_count": 25,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-12-20 10:03:51"
      },
      {
        "time_stamp": "2019-12-20 10:04:02"
      },
      {
        "time_stamp": "2019-12-20 10:07:10"
      },
      {
        "time_stamp": "2019-12-20 10:07:19"
      },
      {
        "time_stamp": "2019-12-20 10:12:23"
      },
      {
        "time_stamp": "2019-12-20 10:28:43"
      },
      {
        "time_stamp": "2019-12-20 10:29:59"
      },
      {
        "time_stamp": "2019-12-20 10:38:51"
      },
      {
        "time_stamp": "2019-12-20 10:41:52"
      },
      {
        "time_stamp": "2019-12-20 10:45:04"
      },
      {
        "time_stamp": "2019-12-20 10:47:44"
      },
      {
        "time_stamp": "2019-12-20 10:49:35"
      },
      {
        "time_stamp": "2019-12-20 10:51:10"
      },
      {
        "time_stamp": "2019-12-20 10:51:26"
      },
      {
        "time_stamp": "2019-12-20 11:45:21"
      },
      {
        "time_stamp": "2019-12-20 11:45:51"
      },
      {
        "time_stamp": "2019-12-20 11:46:02"
      },
      {
        "time_stamp": "2019-12-20 11:47:26"
      },
      {
        "time_stamp": "2019-12-20 11:47:29"
      },
      {
        "time_stamp": "2019-12-20 11:48:30"
      },
      {
        "time_stamp": "2019-12-20 11:49:07"
      },
      {
        "time_stamp": "2019-12-20 12:02:05"
      },
      {
        "time_stamp": "2019-12-20 12:05:16"
      },
      {
        "time_stamp": "2019-12-20 12:05:18"
      },
      {
        "time_stamp": "2019-12-20 12:06:06"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-12-20 09:41:07",
    "text": "```{% set string = \"asdflkasg13437391\" %}\n{% set lastfour = string|regex_replace(\".(?=.{4})\", \"\")  %}```"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-12-20 09:41:38",
    "text": "I checked elsewhere, and the regex validates... what am I doing wrong?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-12-20 10:03:51",
    "text": "Jinjava uses <https://github.com/google/re2/wiki/Syntax>"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-12-20 10:04:02",
    "text": "See <https://github.com/HubSpot/jinjava/blob/master/src/main/java/com/HubSpot/jinjava/lib/filter/RegexReplaceFilter.java#L54>"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-12-20 10:07:10",
    "text": "I am guessing that regex is using backtracking in some way"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-12-20 10:07:19",
    "text": "Can you just use a substring?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-12-20 10:12:23",
    "text": "`{{ test[test|length - 4:] }}`"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2019-12-20 10:28:43",
    "text": "I was just going to mention splitting the last 4 off  or doing substring"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2019-12-20 10:29:31",
    "text": "Not sure what you are doing wrong"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-12-20 10:29:59",
    "text": "Yep, that looks like a better way to do it! Thanks!"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-12-20 10:38:51",
    "text": "I am dumb and forgot that you can just do `{{ test[-4:] }}`"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-12-20 10:41:52",
    "text": "oh, slick!"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-12-20 10:45:04",
    "text": "Is there documentation on the [] and :? What do those mean? I'd like to share with my team"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-12-20 10:47:44",
    "text": "<https://python-reference.readthedocs.io/en/latest/docs/brackets/indexing.html>"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-12-20 10:49:35",
    "text": "Ahh, beautiful, thanks!"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-12-20 10:51:10",
    "text": "HubL is built on Jinjava which is the Java implementation of Jinja which is written in Python"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-12-20 10:51:26",
    "text": "So it tries to mimic python syntax as much as possible"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-12-20 11:26:03",
    "text": "Can you conditionally display a module in a template?",
    "reply_count": 15,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-12-20 11:27:41"
      },
      {
        "time_stamp": "2019-12-20 11:27:52"
      },
      {
        "time_stamp": "2019-12-20 11:28:43"
      },
      {
        "time_stamp": "2019-12-20 11:29:17"
      },
      {
        "time_stamp": "2019-12-20 11:29:39"
      },
      {
        "time_stamp": "2019-12-20 11:30:35"
      },
      {
        "time_stamp": "2019-12-20 11:31:22"
      },
      {
        "time_stamp": "2019-12-20 11:48:01"
      },
      {
        "time_stamp": "2019-12-20 11:48:35"
      },
      {
        "time_stamp": "2019-12-20 11:48:41"
      },
      {
        "time_stamp": "2019-12-20 11:49:04"
      },
      {
        "time_stamp": "2019-12-20 11:51:08"
      },
      {
        "time_stamp": "2019-12-20 11:54:49"
      },
      {
        "time_stamp": "2019-12-20 11:54:53"
      },
      {
        "time_stamp": "2019-12-20 11:59:35"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-12-20 11:27:41",
    "edited": {
      "time_stamp": "2019-12-20 11:28:12"
    },
    "text": "i.e.\n```{% if request.query_dict.team == \"Sales\" %}\n{% module \"\" path=\"\", label=\"Sales Hero\" %}\n{% else %}\n{% module \"\" path=\"\", label=\"Default Hero\" %}\n{% endif %}```"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-12-20 11:27:41",
    "text": "Condition on what?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-12-20 11:27:52",
    "text": "Ah"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-12-20 11:28:43",
    "text": "I’m assuming it’s better to just take care of things on the module level, but I was hoping for a quick and easy solution"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-12-20 11:29:17",
    "text": "Yea I am curious how this would impact the page editor"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-12-20 11:29:39",
    "text": "I think theoretically it would work, it just wouldn’t be nice to edit in the page editor"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-12-20 11:30:35",
    "text": "Currently I just see the `{% else %}` default module in the page editor"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-12-20 11:31:22",
    "text": "Oh well.  Easy enough to just build out this functionality at the module level"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-12-20 11:45:21",
    "text": "<@U6GNQ7JBU> So here's a fun question... the above works when I use it on a variable I've defined as a string. However, I get an error if I try to use it on the hubl variable for the name of the module\n```{% set string = \"asdflkasg13434321\" %}\n{{string}}\n{{string[-4:]}} &lt;!--this works --&gt;\n{{name}}\n{{name[-4:]}} &lt;!--this throws an error--&gt;```"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-12-20 11:45:51",
    "text": "It seems like maybe it's trying to evaluate the python expression before `name` is defined?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-12-20 11:46:02",
    "text": "How is `name` defined?"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-12-20 11:47:26",
    "text": "it's the name of the module, an inherent hubl variable inside the module code"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-12-20 11:47:29",
    "text": "module.name"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2019-12-20 11:48:01",
    "text": "team page? are you using hubdb already?"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-12-20 11:48:30",
    "text": "I also tried it with `module.name` with same result"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2019-12-20 11:48:35",
    "text": "Thats pretty much dynamic pages functionality"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2019-12-20 11:48:41",
    "text": "but runing on query dict"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2019-12-20 11:49:04",
    "text": "so probably not as efficient as dynamic pages -- would HS cache that properly of leave that uncached"
  },
  {
    "text": "",
    "time_stamp": "2019-12-20 11:49:07"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-12-20 11:51:08",
    "text": "No, I’ve got a job listing page, but I’m making it so you can filter by category.  The filtering is all based off of a query string, so I’m going to update the hero content based on the query string filter"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2019-12-20 11:54:49",
    "text": "how are you the job listings pulled in?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2019-12-20 11:54:53",
    "text": "repeater module or soemthing else"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-12-20 11:59:35",
    "text": "AJAX call to an external API"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-12-20 12:02:05",
    "text": "Ahh, you know what it is? It's erring because by default there's no module name, so the linter is detecting an error on upload... I bet if I put an if statement in there to check if the length is greater than 0 it will work."
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-12-20 12:05:16",
    "text": "Ah yes you are right"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-12-20 12:05:18",
    "text": "That is annoying"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2019-12-20 12:06:06",
    "text": "Yes, confirmed that works with an if statement around it.  Thanks Matt!"
  },
  {
    "poster": {
      "poster_name": "Josh McCarroll",
      "poster_handle": "josh"
    },
    "time_stamp": "2019-12-20 13:48:04",
    "text": "I noticed that the built-in post listing filter has most popular options by timeframe now (all-time, last year, last 6 months, etc.). Is there a way to do this with the blog_popular_posts(...) function? I’d rather use the HubL function instead of the built-in module because it allows for more freedom, but a client wants to do last 6 months and the documentation isn’t updated to show that as part of the HubL function.",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-12-20 14:08:13"
      },
      {
        "time_stamp": "2019-12-20 14:50:10"
      },
      {
        "time_stamp": "2019-12-23 13:28:36"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-12-20 14:08:13",
    "text": "I’ll add this now"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-12-20 14:50:10",
    "text": "`{{ blog_popular_posts(&lt;id&gt;, &lt;limit&gt;, '', 'popular_past_six_months') }}\"` looks like what you would want"
  }
]