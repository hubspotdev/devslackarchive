[
  null,
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2018-10-31 05:05:19",
    "text": "How can I create a filterQuery with a name like “San Francisco” ?\nWhen I use\nfilterQueryClients = “&amp;country__in=“~ dynamic_page_hubdb_row.country.name\n\nIt works well with Denver for example but the SPACE in San Francisco breaks the query\nAny ideas ?",
    "reply_count": 16,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2018-10-31 05:20:43"
      },
      {
        "time_stamp": "2018-10-31 05:32:02"
      },
      {
        "time_stamp": "2018-10-31 05:37:29"
      },
      {
        "time_stamp": "2018-10-31 05:38:01"
      },
      {
        "time_stamp": "2018-10-31 05:39:36"
      },
      {
        "time_stamp": "2018-10-31 05:40:49"
      },
      {
        "time_stamp": "2018-10-31 05:43:55"
      },
      {
        "time_stamp": "2018-10-31 05:43:59"
      },
      {
        "time_stamp": "2018-10-31 05:44:28"
      },
      {
        "time_stamp": "2018-10-31 05:44:41"
      },
      {
        "time_stamp": "2018-10-31 05:45:12"
      },
      {
        "time_stamp": "2018-10-31 05:45:14"
      },
      {
        "time_stamp": "2018-10-31 05:45:29"
      },
      {
        "time_stamp": "2018-10-31 05:45:35"
      },
      {
        "time_stamp": "2018-10-31 05:46:46"
      },
      {
        "time_stamp": "2018-10-31 06:52:05"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-10-31 05:20:43",
    "text": "you can try to wrap it with single quotes like:\nfilterQueryClients = “&amp;country__in='“~ dynamic_page_hubdb_row.country.name ~ \"'\""
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2018-10-31 05:32:02",
    "text": "Thanks <@U7ADCU3BM> I will try"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2018-10-31 05:37:29",
    "edited": {
      "time_stamp": "2018-10-31 05:38:02"
    },
    "text": "with filterQueryClients = “&amp;country__in=‘“~ dynamic_page_hubdb_row.country.name ~ “’”\n\n&amp;country__in=‘Munich’ : KO\n&amp;country__in=‘San Francisco’ : KO"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2018-10-31 05:38:01",
    "text": "with filterQueryClients = “&amp;country__in=“~ dynamic_page_hubdb_row.country.name\n\n&amp;country__in=Munich : OK\n&amp;country__in=San Francisco : KO"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-10-31 05:39:36",
    "text": "slightly difference tho:\n ’ !== '"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2018-10-31 05:40:49",
    "text": "sorry I don’t understand :disappointed:"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-10-31 05:43:55",
    "text": "sorry eng not my first lang but will try to explain:\n\nI think you have used apostrophe quote (not sure if this is the name in eng.) instead simple quotation mark"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-10-31 05:43:59",
    "text": "<https://en.wiktionary.org/wiki/%27>"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2018-10-31 05:44:28",
    "text": "Ok I’m not english too . French first :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-10-31 05:44:41",
    "text": "spanish here :stuck_out_tongue:"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-10-31 05:45:12",
    "text": "so you know, eng doesn't mess up that much with quotes they are pretty stright foward, we have several more so its more easy for us to mess up with it"
  },
  {
    "poster": {
      "poster_name": "LOIC BURDET",
      "poster_handle": "loic_burdet"
    },
    "time_stamp": "2018-10-31 05:45:14",
    "text": "My 2 parts speak spanish and I have a designer mexican girl"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-10-31 05:45:29",
    "text": "try to copy&amp;paste my quote: `'`"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-10-31 05:45:35",
    "text": "and use it for wrap"
  },
  {
    "poster": {
      "poster_name": "Gonzalo Torreras",
      "poster_handle": "gonzalo"
    },
    "time_stamp": "2018-10-31 05:46:46",
    "edited": {
      "time_stamp": "2018-10-31 06:13:20"
    },
    "text": "but anyway tho, I am not sure if that will work... I didn't worked that much with hubdb so #noidea"
  },
  null,
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2018-10-31 06:52:05",
    "text": "Have you tried <https://designers.HubSpot.com/docs/hubl/hubl-supported-filters#urlencode>"
  },
  null,
  null,
  null,
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-10-31 07:45:28",
    "text": "What is the best way to create a photo gallery on a dynamic page using HubDB? Does anyone have any best practices around this?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-10-31 07:46:00",
    "text": "row per image"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-10-31 07:46:22",
    "text": "I’m rebuilding a clients location pages (they have 90 locations). So I need a way to do this with HubDB. <https://www.pbcenters.com/California/Beverly-Hills/BEVERLY-HILLS-90210-office-space-BH3.aspx>"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-10-31 07:46:27",
    "text": "<http://kenwheeler.github.io/slick/>"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-10-31 07:46:42",
    "text": "Yeah I was going to use slick for sure <@U7SL518D6>"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-10-31 07:47:07",
    "text": "a child table maybe?"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-10-31 07:47:12",
    "text": "for each location?"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-10-31 07:47:32",
    "text": "with the images?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-10-31 07:49:03",
    "text": "oh I understand your problem, yea the best solution is probably to link 2 hubDBs using the foreign id/another table id, in a column\n\nThen if a value is specified in that column while looping through then you loop through the other HubDB"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-10-31 07:49:12",
    "text": "it would mean a lot of hubDB’s possibly"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-10-31 07:49:30",
    "text": "another solution is have a limited number of images and just use columns"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-10-31 07:49:57",
    "text": "right"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-10-31 07:50:02",
    "text": "yeah that makes sense"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-10-31 07:50:13",
    "text": "you think the better way is to just use columns?"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-10-31 07:50:18",
    "text": "that is what I was thinking"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-10-31 07:50:20",
    "text": "one table"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-10-31 07:50:40",
    "text": "that’s the easiest route. Also less messy"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-10-31 07:51:03",
    "text": "yeah"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-10-31 07:51:26",
    "text": "I guess the only downside is that the table gets to be pretty big"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-10-31 07:51:35",
    "text": "thanks for weighing in here <@U7SL518D6>"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-10-31 08:25:32",
    "text": "we built an product gallery where each dynamic page had a gallery, we did the column route in the table"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2018-10-31 08:29:01",
    "text": "<@U2LEJ045D> here is the code we used for something like this (i believe <@U6GNQ7JBU> helped with getting this in order for me originally)\n\n\n```\n// this gets all fields that are image fields\n{% set img_columns = hubdb_table(module.product_images_db).columns|selectattr(\"type\", \"equalto\", \"IMAGE\") %}\n\n//set emtpy var\n\t{% set slides = [] %}\n\n// for loop and \n  {% for img_column in img_columns %}\n    {% set image_data = dynamic_page_hubdb_row|attr(img_column.name) %}\n\t\t{% if image_data %}\n    {{ slides.append({\"img_src\": resize_image_url(image_data.url, 700, 0, 0)})| string | replace('true', '')}}\n\t\t{% endif %}\n  {% endfor %}\n```\n\nthen in the code where the gallery shows\n```\n// using normal gallery widget (as its using slick)\n{% gallery \n          \"Gallery\" \n          display_mode='thumbnail' \n          sizing='static', \n          transition='slide', \n          auto_advance='false', \n          overrideable=False, \n          show_pagination='False', \n          slides='{{ slides }}',\n      %}\n```"
  },
  {
    "poster": {
      "poster_name": "Jonathan Pavoni - Level 9",
      "poster_handle": "jonathanpavoni"
    },
    "time_stamp": "2018-10-31 09:10:46",
    "text": "thanks <@U2H3TT8F2>"
  },
  null,
  null
]