[
  {
    "poster": {
      "poster_name": "Mattias Hagberg",
      "poster_handle": "mattias.hagberg"
    },
    "time_stamp": "2019-02-20 07:28:44",
    "edited": {
      "time_stamp": "2019-02-20 07:29:12"
    },
    "text": "Hi! Quick question. I have a Post Listing module which lists out some blog posts. I'd like to prepend a FontAwesome icon to these list items. I'm currently adding them with javascript, but since the lists seem to be fetched dynamically during load I have to use an event listener and add them after window.load - this of course makes the icons \"jump\" into place.\n\nIs there a more correct way of doing this?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 07:30:04",
    "text": "you could use CSS, and add a :before with the content being the code for the fontawesome icon"
  },
  {
    "poster": {
      "poster_name": "Mattias Hagberg",
      "poster_handle": "mattias.hagberg"
    },
    "time_stamp": "2019-02-20 07:32:42",
    "text": "Wow, nice brain fart from me, of course that's the way. Thanks :relieved:"
  },
  {
    "poster": {
      "poster_name": "Mattias Hagberg",
      "poster_handle": "mattias.hagberg"
    },
    "time_stamp": "2019-02-20 08:11:11",
    "text": "Is there an easy way to get a urlencoded `{{ content.absolute_url }}` somehow?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 08:12:14",
    "text": "I would think it already should be"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 08:12:34",
    "text": "but anyways yes look in the HubL docs for filters, and then search for URLEncode"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 08:12:51",
    "edited": {
      "time_stamp": "2019-02-20 08:12:58"
    },
    "text": "there’s a quick link in the debug tab of the chrome extension under documentation - if you have that."
  },
  {
    "poster": {
      "poster_name": "Mattias Hagberg",
      "poster_handle": "mattias.hagberg"
    },
    "time_stamp": "2019-02-20 08:24:35",
    "text": "Thanks! However, I'm not getting the example to work. I'm editing a Post Template using the example code straight up: ```{% text \"encode\" value=\"Escape &amp; URL encode this string\", label=\"Enter slug\", export_to_template_context=True %} \n{{ widget_data.encode.value|urlencode }}```\nDoesn't generate anything at all. Ideas?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 08:25:44",
    "text": "`{{content.absolute_url|urlencode}}`"
  },
  {
    "poster": {
      "poster_name": "Mattias Hagberg",
      "poster_handle": "mattias.hagberg"
    },
    "time_stamp": "2019-02-20 08:26:21",
    "text": "Ah, that easy huh. Thanks! :thumbsup:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 08:27:33",
    "text": "just purely out of curiosity, what’s the situation that you needed to urlencode a url?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-20 08:28:01",
    "text": "ohhh, like a share button i bet"
  },
  {
    "poster": {
      "poster_name": "Mattias Hagberg",
      "poster_handle": "mattias.hagberg"
    },
    "time_stamp": "2019-02-20 08:29:14",
    "text": "Exactly :slightly_smiling_face: Was not as lucky with `{{ content.name|urlencode }}`, getting the entire containing span element with it"
  },
  {
    "poster": {
      "poster_name": "Mattias Hagberg",
      "poster_handle": "mattias.hagberg"
    },
    "time_stamp": "2019-02-20 08:29:45",
    "edited": {
      "time_stamp": "2019-02-20 08:30:29"
    },
    "text": "`content.title` ofc :face_with_rolling_eyes:"
  }
]