[
  {
    "poster": {
      "poster_name": "Logan Armstrong",
      "poster_handle": "logan565"
    },
    "time_stamp": "2023-03-16 07:58:13",
    "text": "Hey all, first time working with webhooks, would appreciate any insights. I think this is pretty simple, I'm just trying to invite a user to a slack channel whenever they run through a workflow. I'm posting a webhook to the Slack URL for invites, but I'm a bit confused an authentication. Do I need to use a HubSpot app and get an auth token, or create a Slack app and get an auth token, or both?",
    "reply_count": 10,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-03-16 07:59:33"
      },
      {
        "time_stamp": "2023-03-16 07:59:43"
      },
      {
        "time_stamp": "2023-03-16 07:59:54"
      },
      {
        "time_stamp": "2023-03-16 08:00:02"
      },
      {
        "time_stamp": "2023-03-16 08:01:09"
      },
      {
        "time_stamp": "2023-03-16 08:41:44"
      },
      {
        "time_stamp": "2023-03-16 09:00:54"
      },
      {
        "time_stamp": "2023-03-16 09:01:18"
      },
      {
        "time_stamp": "2023-03-19 09:10:49"
      },
      {
        "time_stamp": "2023-03-19 09:14:33"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-16 07:59:33",
    "text": "You just need a slack User token"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-16 07:59:43",
    "text": "it needs to be passed in the headers"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-16 07:59:54",
    "text": "Authorization: Bearer USERTOKENHERE"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-16 08:00:02",
    "text": "Love this use case"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-16 08:01:09",
    "text": "FYI currently the webhook option isn't going to work for you because you can't really customize the header or body that well, so you'll need to use a private app"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-16 08:41:44",
    "text": "Do you need help writing the CCA?"
  },
  {
    "poster": {
      "poster_name": "Ryan Turner",
      "poster_handle": "ryan215"
    },
    "time_stamp": "2023-03-16 08:48:18",
    "text": "Hey guys, I have tickets that have a custom property hosting a Deal ID, I want to run those tickets through a workflow that uses the Webhook workflow function and use it to associate that ticket to the specific Deal in the Deal ID custom property.\n\nSo can you use the workflow Webhook function to POST changes to objects in the same HubSpot account? And if so, how would I go about doing that?",
    "reply_count": 12,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-03-16 08:49:30"
      },
      {
        "time_stamp": "2023-03-16 08:49:43"
      },
      {
        "time_stamp": "2023-03-16 08:50:15"
      },
      {
        "time_stamp": "2023-03-16 08:50:44"
      },
      {
        "time_stamp": "2023-03-16 08:51:03"
      },
      {
        "time_stamp": "2023-03-16 08:51:12"
      },
      {
        "time_stamp": "2023-03-16 08:51:53"
      },
      {
        "time_stamp": "2023-03-16 08:52:23"
      },
      {
        "time_stamp": "2023-03-16 08:52:52"
      },
      {
        "time_stamp": "2023-03-16 08:55:10"
      },
      {
        "time_stamp": "2023-03-16 08:55:16"
      },
      {
        "time_stamp": "2023-03-16 08:55:22"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-16 08:49:30",
    "text": "Nope do the webhook function is primary for connect external systems and keep them in sync, not for updating things in HubSpot."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-16 08:49:43",
    "text": "You'll want to use a Custom Coded Action to do the association"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-16 08:50:15",
    "text": "Let me know if you need help setting up the CCA"
  },
  {
    "poster": {
      "poster_name": "Ryan Turner",
      "poster_handle": "ryan215"
    },
    "time_stamp": "2023-03-16 08:50:44",
    "text": "I Definitely do. Is CCA HubSpot function?"
  },
  {
    "text": "",
    "time_stamp": "2023-03-16 08:51:03"
  },
  {
    "text": "",
    "time_stamp": "2023-03-16 08:51:12"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-16 08:51:53",
    "text": "<https://developers.HubSpot.com/docs/api/workflows/custom-code-actions>"
  },
  {
    "poster": {
      "poster_name": "Ryan Turner",
      "poster_handle": "ryan215"
    },
    "time_stamp": "2023-03-16 08:52:23",
    "text": "Unfortunately it's locked behind Ops Hub Pro, this isn't an important enough function to justify the upgrade, I can just make a simple Zap to do it"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-16 08:52:52",
    "text": "Yeah you definitely could, or Associ8 is an option"
  },
  {
    "poster": {
      "poster_name": "Ryan Turner",
      "poster_handle": "ryan215"
    },
    "time_stamp": "2023-03-16 08:55:10",
    "text": "We already have Zapier sending an email with a google form to write to a google sheet to notify HubSpot of a submission via Zap. I just wanted to move everything into HubSpot.\n\nIll just replace the google form with a HubSpot form, have it write to Googlesheets via workflow then just make a small Zap to use the captured Deal ID to switch a Deal property in HS. It's still a simpler and better solution than before, just not perfect."
  },
  {
    "poster": {
      "poster_name": "Ryan Turner",
      "poster_handle": "ryan215"
    },
    "time_stamp": "2023-03-16 08:55:16",
    "text": "Thanks for your help though"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-16 08:55:22",
    "text": "of course"
  },
  {
    "poster": {
      "poster_name": "Logan Armstrong",
      "poster_handle": "logan565"
    },
    "time_stamp": "2023-03-16 09:00:54",
    "text": "Got it, thanks Carter! I'll take a shot at the custom code and let you know if we run into any roadblocks – much appreciated!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-16 09:01:18",
    "text": "of course bro, just hit me up if you hit any roadblocks"
  },
  {
    "poster": {
      "poster_name": "Marissa Luedy",
      "poster_handle": "marissa.robinson"
    },
    "time_stamp": "2023-03-16 09:47:15",
    "text": "Howdy. I am trying to create a workflow for deduplicating companies based on their name. I found a “deduplicating contacts” code that I think I can refactor for the company name, but I am not sure where I would implement this? Is this a custom code workflow I plop in there?"
  },
  {
    "poster": {
      "poster_name": "Marissa Luedy",
      "poster_handle": "marissa.robinson"
    },
    "time_stamp": "2023-03-16 09:47:31",
    "text": "`/**`\n `* Searches for another contact with the same value of DEDUPE_PROPERTY.`\n `* - If no matches are found, nothing happens`\n `* - If one match is found, the enrolled contact is merged into the matching contact`\n `* - If more than one match is found, the action fails`\n `*/`\n\n`const DEDUPE_PROPERTY = 'phone';`\n\n`const HubSpot = require('@HubSpot/api-client');`\n\n`exports.main = (event, callback) =&gt; {`\n  `// Make sure to add your API key under \"Secrets\" above.`\n  `const HubSpotClient = new HubSpot.Client({`\n    `accessToken: process.env.secretName`\n  `});`\n\n  `HubSpotClient.crm.contacts.basicApi`\n    `.getById(event.object.objectId, [DEDUPE_PROPERTY])`\n    `.then(contactResult =&gt; {`\n      `let dedupePropValue = contactResult.body.properties[DEDUPE_PROPERTY];`\n\n      `console.log(Looking for duplicates based on ${DEDUPE_PROPERTY} = ${dedupePropValue});`\n      `HubSpotClient.crm.contacts.searchApi`\n        `.doSearch({`\n          `filterGroups: [{`\n            `filters: [{`\n              `propertyName: DEDUPE_PROPERTY,`\n              `operator: 'EQ',`\n              `value: dedupePropValue`\n            `}]`\n          `}]`\n        `})`\n        `.then(searchResults =&gt; {`\n          `let idsToMerge = searchResults.body.results`\n            `.map(object =&gt; object.id)`\n            `.filter(vid =&gt; Number(vid) !== Number(event.object.objectId));`\n\n          `if (idsToMerge.length == 0) {`\n            `console.log('No matching contact, nothing to merge');`\n            `return;`\n          `} else if (idsToMerge.length &gt; 1) {`\n            `console.log(Found multiple potential contact IDs ${idsToMerge.join(', ')} to merge);`\n            `throw new Error(\"Ambiguous merge; more than one matching contact\");`\n          `}`\n\n          `let idToMerge = idsToMerge[0];`\n          `console.log(Merging enrolled contact id=${event.object.objectId} into contact id=${idToMerge});`\n          `HubSpotClient`\n            `.apiRequest({`\n              `method: 'POST',`\n              `path: /contacts/v1/contact/merge-vids/${idToMerge},`\n              `body: {`\n                `vidToMerge: event.object.objectId`\n              `}`\n            `})`\n            `.then(mergeResult =&gt; {`\n              `console.log('Contacts merged!');`\n            `});`\n        `});`\n    `});`\n`};`",
    "reply_count": 9,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-03-16 09:47:55"
      },
      {
        "time_stamp": "2023-03-16 09:54:26"
      },
      {
        "time_stamp": "2023-03-16 09:54:38"
      },
      {
        "time_stamp": "2023-03-16 12:42:54"
      },
      {
        "time_stamp": "2023-03-16 12:43:13"
      },
      {
        "time_stamp": "2023-03-16 12:43:22"
      },
      {
        "time_stamp": "2023-03-16 13:00:23"
      },
      {
        "time_stamp": "2023-03-16 13:00:46"
      },
      {
        "time_stamp": "2023-03-16 13:06:04"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-16 09:47:55",
    "text": "Yep you can create a company workflow, and have a custom code action inside of it"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-16 09:54:26",
    "text": "The code would look like this:\n\n```/**\n * Searches for another contact with the same value of DEDUPE_PROPERTY.\n * - If no matches are found, nothing happens\n * - If one match is found, the enrolled contact is merged into the matching contact\n * - If more than one match is found, the action fails\n */\n\nconst DEDUPE_PROPERTY = 'phone';\n\nconst HubSpot = require('@HubSpot/api-client');\n\nexports.main = (event, callback) =&gt; {\n  // Make sure to add your API key under \"Secrets\" above.\n  const HubSpotClient = new HubSpot.Client({\n    accessToken: process.env.secretName\n  });\n\n  HubSpotClient.crm.companies.basicApi\n    .getById(event.object.objectId, [DEDUPE_PROPERTY])\n    .then(contactResult =&gt; {\n      let dedupePropValue = contactResult.body.properties[DEDUPE_PROPERTY];\n\n      console.log(Looking for duplicates based on ${DEDUPE_PROPERTY} = ${dedupePropValue});\n      HubSpotClient.crm.companies.searchApi\n        .doSearch({\n          filterGroups: [{\n            filters: [{\n              propertyName: DEDUPE_PROPERTY,\n              operator: 'EQ',\n              value: dedupePropValue\n            }]\n          }]\n        })\n        .then(searchResults =&gt; {\n          let idsToMerge = searchResults.body.results\n            .map(object =&gt; object.id)\n            .filter(vid =&gt; Number(vid) !== Number(event.object.objectId));\n\n          if (idsToMerge.length == 0) {\n            console.log('No matching contact, nothing to merge');\n            return;\n          } else if (idsToMerge.length &gt; 1) {\n            console.log(Found multiple potential contact IDs ${idsToMerge.join(', ')} to merge);\n            throw new Error(\"Ambiguous merge; more than one matching contact\");\n          }\n\n          let idToMerge = idsToMerge[0];\n          console.log(Merging enrolled company id=${event.object.objectId} into company id=${idToMerge});\n          HubSpotClient\n            .apiRequest({\n              method: 'POST',\n              path: /crm/v3/objects/companies/merge,\n              body: {\n  primaryObjectId: idToMerge,\n  objectIdToMerge: event.object.objectId\n}\n            })\n            .then(mergeResult =&gt; {\n              console.log('Companies merged!');\n            });\n        });\n    });\n};```\n"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-16 09:54:38",
    "text": "Haven't tested the above code but it should work"
  },
  {
    "poster": {
      "poster_name": "Marissa Luedy",
      "poster_handle": "marissa.robinson"
    },
    "time_stamp": "2023-03-16 12:42:54",
    "text": "Thanks <@U01QVR44MEY>!! Do you know how I would add multiple variables for it to look at to know what is a true duplicate?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-16 12:43:13",
    "text": "could you give me an example?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-16 12:43:22",
    "text": "like Company name or Company Phone right?"
  },
  {
    "poster": {
      "poster_name": "Marissa Luedy",
      "poster_handle": "marissa.robinson"
    },
    "time_stamp": "2023-03-16 13:00:23",
    "text": "Yes, like I would like to check company name, website &amp; phone to ensure its a real dupe."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2023-03-16 13:00:46",
    "edited": {
      "time_stamp": "2023-03-16 13:01:05"
    },
    "text": "And you want them all to match or if just one match?"
  },
  {
    "poster": {
      "poster_name": "Marissa Luedy",
      "poster_handle": "marissa.robinson"
    },
    "time_stamp": "2023-03-16 13:06:04",
    "text": "all to match :slightly_smiling_face:"
  }
]