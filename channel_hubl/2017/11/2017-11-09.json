[
  null,
  null,
  {
    "poster": {
      "poster_name": "Thomas Bennedbæk",
      "poster_handle": "thomas_katalysator"
    },
    "time_stamp": "2017-11-09 07:50:05",
    "text": "Is there a way to remove or update the &lt;link rel=\"canonical\"&gt; element in standard_header_includes, so you can use a custom canonical URL on a page?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2017-11-09 08:27:17",
    "text": "No.. unfortunately there is not.. you can retrieve it but not set it"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-09 11:23:21",
    "text": "<@U4W2EG8RY> what is your purpose for doing it?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-09 11:23:44",
    "text": "If you fix it using a script, most likely google will read it the way you change it."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-09 11:24:40",
    "text": "here is an older article about it (2015)"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-09 11:24:40",
    "text": "<https://searchengineland.com/tested-googlebot-crawls-javascript-heres-learned-220157>"
  },
  {
    "poster": {
      "poster_name": "Thomas Bennedbæk",
      "poster_handle": "thomas_katalysator"
    },
    "time_stamp": "2017-11-09 11:30:38",
    "text": "Thanks for sharing, <@U25PYL3Q8>, looks promising! Trying to avoid duplicate content issues for a client who has two landing pages that contain the same information but have different logo/branding"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-09 11:31:20",
    "text": "yeah, that will work for you then."
  },
  {
    "poster": {
      "poster_name": "Thomas Bennedbæk",
      "poster_handle": "thomas_katalysator"
    },
    "time_stamp": "2017-11-09 11:32:14",
    "text": "Awesome, cheers :smile: :+1:"
  },
  {
    "poster": {
      "poster_name": "Jon Leibham",
      "poster_handle": "jon282"
    },
    "time_stamp": "2017-11-09 13:51:25",
    "text": "Hey everyone, I'm trying to target a hubSpot form select element with querySelector using the name attribute but it isn't recognized. I'm using it like this document.querySelector('select[name=foo]); I've tried with the dom fully loaded and even with a setTimeout after dom loads but it keeps returning undefined. Any ideas on why this is happening? If I use the google console on a live page I'm able to find the element no problem."
  },
  null,
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-09 14:25:32",
    "text": "<@U7G631G5P> you need to target forms on window.load"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-09 14:25:58",
    "text": "not on the dom loading, because it is loading the from after the dom is loaded"
  },
  {
    "poster": {
      "poster_name": "Jon Leibham",
      "poster_handle": "jon282"
    },
    "time_stamp": "2017-11-09 14:26:20",
    "text": "yeah I tried that with window.addEventListener('load', foo());"
  },
  {
    "poster": {
      "poster_name": "Jon Leibham",
      "poster_handle": "jon282"
    },
    "time_stamp": "2017-11-09 14:26:46",
    "text": "I wasn't sure if it was something goofy happening with HubSpot."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-09 14:28:03",
    "text": "i'll dm you"
  },
  {
    "text": "<@U25PYL3Q8> uploaded a file: <https://HubSpotdev.slack.com/files/U25PYL3Q8/F7XDAC9HP/has_anyone_else_used_js_to_target_a_form_on_load_like_this_.js|has anyone else used JS to target a form on load like this?>",
    "time_stamp": "2017-11-09 14:55:08"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-09 14:55:33",
    "text": "I've always used $(window).load -- and the JS way shoudl work but isn't"
  },
  {
    "poster": {
      "poster_name": "Tony Narisi",
      "poster_handle": "tonynarisi"
    },
    "time_stamp": "2017-11-09 15:06:02",
    "text": "I’ve always used window.onload, which should behave equivalent to .addEventListener(‘load’). The only issue I can see with the above is that foo is being invoked, but should just be passed in as the parameter:\n`window.addEventListener('load', foo);`"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-09 15:13:14",
    "text": "ahh"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2017-11-09 15:13:20",
    "text": "<@U7G631G5P> maybe try that out"
  }
]