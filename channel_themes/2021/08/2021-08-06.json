[
  {
    "poster": {
      "poster_name": "Pawan Kumar",
      "poster_handle": "pawanpepz"
    },
    "time_stamp": "2021-08-06 07:35:25",
    "text": "Hi. Is it just me or email alerts for template/theme purchases are no longer working?\n\nHaven't received a single one since the new marketplace went live!",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2021-08-10 01:58:18"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-08-06 08:07:58",
    "edited": {
      "time_stamp": "2021-08-06 08:12:45"
    },
    "text": "Hey there Sercan,\n\nThe extends part is the critical part. It’s effectively the same. The difference is that we provide a way for a child theme to add child CSS and child JS in a way that’s not intimidating.\n\n\n\n1. The point of child themes is that the parent can be updated safely.  Any child theme files will override the parent theme’s equivalent files. So if say the child theme overrides a parent file that’s received updates, the owner of the child theme may want to update their child theme’s file to contain some of those updates that they see in the parent file - since their file likely was cloned from a prior version. You can compare against the parent version of the file to see what changes occurred.\n\n\n2. If you update the child themes fields.json the child theme will use those fields instead of the parent theme’s fields and values. They are not the same fields. I’m not confident but, you may be able to delete the child theme’s `fields.json` to get the original values back. That said you would lose any changes you made to that `fields.json`.\n\n\n3. The new method is the same as the old method. There isn’t really “switching” because it’s the same. Just add a child js and child css file.  This would not be a breaking change. We simply automatically load `child.js` and `child.css` in any template that contains `standard_header_includes` . It’s meant as a standard tool for keeping allowing customization without worrying about overriding the parent theme’s code directly. This is often useful for users who are not full developers but know enough CSS to make small changes."
  },
  {
    "text": "<@U7SL518D6>\nHey Jon,\n3) The main difference is the old method having a fields.json file and the new method does not. (Screenshot 1)\n• If you remove the fields.json file from the old method child theme, all page styles are lost and Editor Tool does not allow us to edit theme settings.\n• If you do not remove the fields.json file from the old method child theme, you cannot get the new theme settings updates coming from the parent theme\n• To get the latest fields.json file (theme settings) updates from the parent theme, again, copy fields.json from parent and paste fields.json to the child.\n    ◦ But this causes a problem: If you set all theme level settings before setting this process and do this process, YES you get the latest theme level settings updates BUT all theme settings before you have set have gone such as CTA color, font size, color, etc.\n    ◦ To solve the problem (Let's say I have given up on getting new updates from the parent, and just want to recover my theme settings), I restore the previous fields.json file on the Child theme, It does not work, I cannot get the theme settings on Pages on Child before I set such as CTA color, font size, color, etc.\n• Now, I have a different problem rather than those above. (Screenshot 2 and 3)\nWhen I change theme settings (Primary color, CTA, and Nav Color) on Home Page that is structured with Old Method Child Theme, Changes do not appear on both preview and live mode.\nIf I create New Method Child Theme (no fields.json file with this new method), everything works well.\n\n\n*Briefly:* How will customers who create child themes with the old method receive updates without these problems?\n\n<@UA5DFM7CK>\nHey Kevin,\nAny idea? Have you ever seen this kind of thing?",
    "time_stamp": "2021-08-06 13:00:26"
  },
  {
    "poster": {
      "poster_name": "Kevin Fremon",
      "poster_handle": "kevin"
    },
    "time_stamp": "2021-08-06 13:11:09",
    "text": "<@U012CSYFNUV> thanks for the mention in this convo as it's one I'm currently experiencing creating a child theme (new method) for my own website.  I was surprised to see that transferring the fields.json file was no long an option.\n\nAs I go through the process more on my own accord I'll likely have more to offer to this conversation."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-08-06 13:11:45",
    "edited": {
      "time_stamp": "2021-08-06 13:12:32"
    },
    "text": "Clarifying. The ONLY thing you need to extend a theme/create a child theme is the extends statement. Theme extensions are child themes. The author of a child theme can choose to override the `fields.json` just like any other asset in the theme.\n\n&gt; If you remove the fields.json file from the old method child theme, all page styles are lost and Editor Tool does not allow us to edit theme settings.\nIf you delete the fields.json in your child theme, the parent theme’s fields.json should be what’s used. Any values set in the theme editor to the child theme would not carry over to the parent theme because the files are different. If you are unable to edit theme settings at all for some reason let us know. That would not be the expected behavior.\n\n&gt; If you do not remove the fields.json file from the old method child theme, you cannot get the new theme settings updates coming from the parent theme\nYou would copy the `fields.json` updates from the parent theme’s `fields.json`  that you want to keep. Just like if you override a template file, the child file will override the parent."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-08-06 13:14:29",
    "edited": {
      "time_stamp": "2021-08-06 13:15:39"
    },
    "text": "&gt; But this causes a problem: If you set all theme level settings before setting this process and do this process, YES you get the latest theme level settings updates BUT all theme settings before you have set have gone such as CTA color, font size, color, etc.\nThis would only happen if the parent theme or child theme changed the hierarchy of the fields.\n\nFor example if the parent theme went from having fields all on the first level, to nesting them in groups. That is a breaking change, and would be a breaking change even for sites not using a child theme, because the values would be stored to the  first level."
  },
  {
    "poster": {
      "poster_name": "Peter Rastello",
      "poster_handle": "peter"
    },
    "time_stamp": "2021-08-06 14:29:10",
    "text": "I'm working on the CMS practicum theme fields in fields.json. Trouble is, the Google font family I am using in the &lt;head&gt; statement and defined as a font field in fields.json doesn't show up properly in the Edit Theme Settings of the website pages that are created. There is a setting for changing font and color, but it doesn't impact anything and the defaults are not what I setup in fields.json.\n\nI can't figure out where I went wrong, have done the following:\n\n1. Head of top-level html file includes this:     \n    a. &lt;link rel=\"stylesheet\" href=\"<https://fonts.googleapis.com/css?family=Ubuntu%7CLora>\"&gt;\n2. fields.json includes font field, but a bit big to put in here\n3. Body of css file includes this: \n    a. font: {{theme.global_fonts.primary_font.font}};\n    b. I have double-checked the above to make sure it properly references the font field in the json\nHope this makes sense, help appreciated, It's probably something obvious I left out, pulling out clumps of my own hair at this point...",
    "reply_count": 8,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2021-08-07 03:34:51"
      },
      {
        "time_stamp": "2021-08-07 03:36:25"
      },
      {
        "time_stamp": "2021-08-10 18:17:51"
      },
      {
        "time_stamp": "2021-08-11 03:38:07"
      },
      {
        "time_stamp": "2021-08-11 03:39:18"
      },
      {
        "time_stamp": "2021-08-13 15:58:45"
      },
      {
        "time_stamp": "2021-08-13 16:09:03"
      },
      {
        "time_stamp": "2021-08-14 09:48:02"
      }
    ]
  }
]