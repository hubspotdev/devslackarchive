[
  {
    "poster": {
      "poster_name": "Mitja Lewin",
      "poster_handle": "m.lewin"
    },
    "time_stamp": "2022-06-18 03:10:14",
    "edited": {
      "time_stamp": "2022-06-22 05:48:08"
    },
    "text": "*Six things from my wishlist that make the work more comfortable.* Inconspicuous but effective.",
    "reply_count": 7,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2022-06-18 03:10:23"
      },
      {
        "time_stamp": "2022-06-18 03:10:26"
      },
      {
        "time_stamp": "2022-06-20 03:06:12"
      },
      {
        "time_stamp": "2022-06-20 05:13:38"
      },
      {
        "time_stamp": "2022-06-22 05:40:17"
      },
      {
        "time_stamp": "2022-06-22 05:50:47"
      },
      {
        "time_stamp": "2022-06-22 08:53:14"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Mitja Lewin",
      "poster_handle": "m.lewin"
    },
    "time_stamp": "2022-06-18 03:10:23",
    "text": "*1.* Is the option for the *fields variable* on modules, as is already the case for DND modules. See:\n<https://developers.HubSpot.com/en/docs/cms/building-blocks/modules/using-modules-in-templates#passing-fields-that-have-dnd-associated-parameters>\n\n*Detail:* Templates have two files for me, one with the markup for the layout and a second with macros for the demo content. Via copy paste button, I can simply copy the object from the modul preview with my demo content configuration into my demo content template file and hand it over to the DND Layout via the `fields` Variable. For normal modules in tempaltes, I always have to individually compare every variable and assign them individually. It would be easier if both modules could work with the same fields object."
  },
  {
    "poster": {
      "poster_name": "Mitja Lewin",
      "poster_handle": "m.lewin"
    },
    "time_stamp": "2022-06-18 03:10:26",
    "edited": {
      "time_stamp": "2022-06-18 03:14:07"
    },
    "text": "*2.* Is the option to *disable module editing* for content editors by passing a Variable like `export_to_template_context=True`. But maybe with the name: `disable_in_content_editor=True`. And it's only for normal module syntax, not for the dnd-modules.\n\n*Detail:* I often use the markup of a module without using the content from the user editor fields. For example on dynamic pages. Or another case is inherited content. Then there is always the possibility that the content is overwritten by user input. To prevent this, I am currently store the module markup into a macro. Or have to copy the HTML part of the module, and place them hardcoded in my template. I try to avoid haveing extra cloned modules without fields, to prevent the editing options. I don't need macros for the module HTML part in extra files, when I could fully disable the editing of a module from template side. And keep the code base for all use cases on the same place, inside the module where it belongs."
  }
]