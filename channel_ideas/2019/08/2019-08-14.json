[
  {
    "poster": {
      "poster_name": "Chris Knowles",
      "poster_handle": "chris618"
    },
    "time_stamp": "2019-08-14 03:50:43",
    "text": "Would be great to get an update on this, seems like it's been in the works for quite some time now"
  },
  {
    "poster": {
      "poster_name": "Chris Knowles",
      "poster_handle": "chris618"
    },
    "time_stamp": "2019-08-14 04:06:49",
    "text": "Based on this thread it seems like SMART content within custom modules is in development, but that was almost a year ago, it'd be great to get an update on this as it will make a massive difference as to how I build sites currently in the pipeline: <https://community.HubSpot.com/t5/HubSpot-Ideas/Enable-Smart-Content-on-Rich-Text-in-Custom-Modules/idi-p/11184/page/2#comments>"
  },
  {
    "poster": {
      "poster_name": "Grant Bunyan",
      "poster_handle": "grantbunyan"
    },
    "time_stamp": "2019-08-14 07:46:18",
    "text": "Please can we have a method to return blog posts that match multiple tags? Currently there appears to only be be a way to return posts that match any, rather than all in a given list:\n\n`blog_recent_tag_posts('default', ['tag-slug-1', 'tag-slug-2', 'tag-slug-3'], 5)`\n\nAlso, the above doesn’t appear to accept tag slugs as variables, which makes things worse. I think that’s a bug though."
  },
  {
    "poster": {
      "poster_name": "Chris Knowles",
      "poster_handle": "chris618"
    },
    "time_stamp": "2019-08-14 08:09:11",
    "text": "<@UJJQP7UB0> you could maybe create an array of your applicable tags then check if your post matches anything in it?",
    "reply_count": 2,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-08-14 08:23:28"
      },
      {
        "time_stamp": "2019-08-14 08:32:24"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Grant Bunyan",
      "poster_handle": "grantbunyan"
    },
    "time_stamp": "2019-08-14 08:23:28",
    "text": "My biggest issue is the limitation on quantity returned to `contents`. Say I want to check for an  additional tag match on a `<http://myblog.com/tag/my-tag|myblog.com/tag/my-tag>` by checking for the tag in `content.topic_list`, it’ll only do so on what appears to be a single page of a set of results, making it look as though there are fewer or no results, when there are more on other pages.\n\nATM I’m spinning in circles trying to find a solution. I’ve considered:\n\n// Union of the contents returned by each paginated page – can’t work out how to access the other paginated page contents though\n\n// Intersecting the results of two `blog_recent_tag_posts()` somehow – lack of ability to apply tag as variable is a blocker for me here so far."
  },
  {
    "poster": {
      "poster_name": "Grant Bunyan",
      "poster_handle": "grantbunyan"
    },
    "time_stamp": "2019-08-14 08:32:24",
    "edited": {
      "time_stamp": "2019-08-14 08:33:00"
    },
    "text": "My current approach attempt is using url params to apply tag filters, looping through the all articles listing e.g `<http://my-blog.com/all?category=tag-1&amp;filter=tag-2>`\n\nWhere `category` is the first tag to match, and `filter` the second.\n\nOf course this removes pagination complications but perhaps other properties as it’s a `simple_list_page`.\n\nSeems like a heck of a lot of effort for something that is probably a common use case."
  }
]