[
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-05-17 06:03:45",
    "text": "Are you using the storybook implementation that comes with the dev server?"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2024-05-17 07:57:44",
    "edited": {
      "time_stamp": "2024-05-17 08:08:26"
    },
    "text": "Can we get a basic single page routing example in the example projects? Would also love a pagination example too. _And also a module/island that is used for hubdb dynamic driven pages_"
  },
  {
    "poster": {
      "poster_name": "Fábio Englert Moutinho",
      "poster_handle": "fabio379"
    },
    "time_stamp": "2024-05-17 08:12:25",
    "text": "yes"
  },
  {
    "poster": {
      "poster_name": "Fábio Englert Moutinho",
      "poster_handle": "fabio379"
    },
    "time_stamp": "2024-05-17 08:13:39",
    "text": "having a module wrap a component (that has state) with an Island works well. I was thinking that if Modules could have state it would save me some boilerplate code of having to have a separate component for it"
  },
  {
    "subtype": "thread_broadcast",
    "time_stamp": "2024-05-17 10:04:52",
    "edited": {
      "time_stamp": "2024-05-17 10:06:45"
    },
    "text": "Hi all, just wanted to let you know we’ve released an update for the `@HubSpot/cms-dev-server` and `@HubSpot/cms-components` that includes:\n• Bug fixes for types being inferred as `never`\n• Choice fields now infer as a union of their possible values\n• Support for custom components inside of your fields object!\nThat means you can now write the following code:\n```const MyCustomField = ({ children }: { children?: any }) => (\n  <FieldGroup label={'Custom Group'} name={'wrapper'}>\n    <LogoField label=\"Number Field 1\" name=\"my_logo\" required showLoading={true} />\n    <ChoiceField\n      label={'choices'}\n      name={'choices'}\n      choices={[\n        ['choice1', 'Choice 1'],\n        ['choice2', 'Choice 2'],\n        ['choice3', 'Choice 3'],\n      ]}\n    />\n  </FieldGroup>\n);\n\nexport const fields = (\n  <ModuleFields>\n    <MyCustomField />\n  </ModuleFields >\n);```\nand get the following inferred types\n```  const my_logo = fieldValues.wrapper.my_logo\n  // ^? my_logo: { src?: string | undefined; alt?: string | undefined; ... }\n\n  const choices = fieldValues.wrapper.choices\n  // ^? const choices: \"choice1\" | \"choice2\" | \"choice3\"```"
  },
  {
    "poster": {
      "poster_name": "Jesse Maltese",
      "poster_handle": "jmaltese"
    },
    "time_stamp": "2024-05-17 10:06:32",
    "text": "And thank you all for the feedback so far :HubSpot:!"
  },
  {
    "poster": {
      "poster_name": "Fábio Englert Moutinho",
      "poster_handle": "fabio379"
    },
    "time_stamp": "2024-05-17 10:45:59",
    "text": "exactly what we needed this week! :grin:"
  },
  {
    "poster": {
      "poster_name": "Fábio Englert Moutinho",
      "poster_handle": "fabio379"
    },
    "time_stamp": "2024-05-17 10:46:04",
    "text": "thanks!"
  },
  {
    "text": "I’m one of those weird people who uses Firefox and I have a bunch of privacy settings checked to disable tracking. These settings block a significant number of scripts needed for CMS-React components to work. I don’t know if there’s anything server-side that can be done to fix this (I suspect the root of the problem is that Firefox sends the `DNT: 1` header with these requests and the server respects it - which is the right thing to do, I guess? Not a devops guy). Here’s some screen captures of FF settings and the network panel of what gets blocked.",
    "time_stamp": "2024-05-17 11:26:56",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-05-17 11:27:57"
      },
      {
        "time_stamp": "2024-05-28 20:41:36"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Rich McNeary",
      "poster_handle": "rich960"
    },
    "time_stamp": "2024-05-17 11:27:57",
    "text": "Also I can reproduce the problem in a web page preview in a new tab. Like this: `<https://45415490.hs-sites.com/-temporary-slug-67b2f225-e206-4c7b-9a44-830f1d18c821?hs_preview=ELoOqhMB-167723224188>`"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2024-05-17 11:32:03",
    "text": "I see. Islands will continue the be server/client boundary."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-05-17 11:57:44",
    "edited": {
      "time_stamp": "2024-05-17 12:15:55"
    },
    "text": "any chance the github example projects have a styles fieldGroup with all of the common padding and margin options?\n```// updated with solution\n<SpacingField\n        name=\"spacing\"\n        label=\"Spacing\"\n        default={{\n          margin: {\n            bottom: { units: \"px\", value: 20 },\n          },\n        }}\n      />```"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-05-17 11:59:27",
    "text": "a \"copy example\" option would be so great on the github field-types page"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-05-17 11:59:57",
    "text": "anybody else like fields but kind of hate piecing them together the first time around?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-05-17 12:08:57",
    "text": "whoops, I guess it is like that already (nice). I'll leave this up for future reference..."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-05-17 12:09:56",
    "text": "but still, a \"copy example\" concept I think would be helpful for all of the cases where you need to set defaults and values directly"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-05-17 12:26:26",
    "text": "using these styles is a little frustrating potentially. Ends up looking like:\n```      style={{\n        marginBottom: `${styles.spacing.margin.bottom.value}${styles.spacing.margin.bottom.units}`,\n      }}```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-05-17 12:26:35",
    "text": "is there an easier way?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-05-17 12:35:30",
    "edited": {
      "time_stamp": "2024-05-17 12:36:34"
    },
    "text": "and eventually:\n```style={{\n        marginTop:\n          styles.spacing.margin?.top?.value && styles.spacing.margin?.top?.units\n            ? `${styles.spacing.margin.top.value}${styles.spacing.margin.top.units}`\n            : \"0\",\n        marginBottom:\n          styles.spacing.margin?.bottom?.value &&\n          styles.spacing.margin?.bottom?.units\n            ? `${styles.spacing.margin.bottom.value}${styles.spacing.margin.bottom.units}`\n            : \"0\",\n        paddingTop:\n          styles.spacing.padding?.top?.value &&\n          styles.spacing.padding?.top?.units\n            ? `${styles.spacing.padding.top.value}${styles.spacing.padding.top.units}`\n            : \"0\",\n        paddingRight:\n          styles.spacing.padding?.right?.value &&\n          styles.spacing.padding?.right?.units\n            ? `${styles.spacing.padding.right.value}${styles.spacing.padding.right.units}`\n            : \"0\",\n        paddingBottom:\n          styles.spacing.padding?.bottom?.value &&\n          styles.spacing.padding?.bottom?.units\n            ? `${styles.spacing.padding.bottom.value}${styles.spacing.padding.bottom.units}`\n            : \"0\",\n        paddingLeft:\n          styles.spacing.padding?.left?.value &&\n          styles.spacing.padding?.left?.units\n            ? `${styles.spacing.padding.left.value}${styles.spacing.padding.left.units}`\n            : \"0\",\n      }}```",
    "reply_count": 2,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2024-05-17 12:44:54"
      },
      {
        "time_stamp": "2024-05-17 12:45:16"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-05-17 12:44:54",
    "text": "here's a helper function to help reduce this down:\n```const formatStyles = (styles) =&gt; {\n  const getValue = (property) =&gt;\n    property?.value &amp;&amp; property?.units\n      ? `${property.value}${property.units}`\n      : \"0\";\n\n  return {\n    marginTop: getValue(styles.spacing.margin?.top),\n    marginBottom: getValue(styles.spacing.margin?.bottom),\n    paddingTop: getValue(styles.spacing.padding?.top),\n    paddingRight: getValue(styles.spacing.padding?.right),\n    paddingBottom: getValue(styles.spacing.padding?.bottom),\n    paddingLeft: getValue(styles.spacing.padding?.left),\n  };\n};\n\nexport { formatStyles };```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2024-05-17 12:45:16",
    "text": "is this the approach you would take?"
  },
  {
    "poster": {
      "poster_name": "Jesse Maltese",
      "poster_handle": "jmaltese"
    },
    "time_stamp": "2024-05-17 13:32:48",
    "edited": {
      "time_stamp": "2024-05-17 13:33:01"
    },
    "text": "Hi - FYI the `never` bug should be fixed in the latest version of `@HubSpot/cms-components` <https://HubSpotdev.slack.com/archives/C04AY1H2204/p1715961892098779?thread_ts=1714483010.136149&cid=C04AY1H2204>"
  },
  {
    "poster": {
      "poster_name": "Josh GH",
      "poster_handle": "joshgh"
    },
    "time_stamp": "2024-05-17 13:41:25",
    "text": "Perfect timing!"
  },
  {
    "poster": {
      "poster_name": "Rich McNeary",
      "poster_handle": "rich960"
    },
    "time_stamp": "2024-05-17 14:42:14",
    "text": "There is an error in the <https://github.HubSpot.com/cms-react/reference/cms-dev-server.html#fields-type-generation|Fields Type Generation doc> (took me a long time to figure out why types weren’t being generated). Currently it says:\n&gt; If you are using Typescript in your CMS React project, you can make use of the `--generateFieldTypes` argument of the dev server.\nThe flag is misspelled it should be `--generateFieldsTypes`  - note the “s” after “Field”.",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2024-05-17 17:04:48"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jesse Maltese",
      "poster_handle": "jmaltese"
    },
    "time_stamp": "2024-05-17 17:04:48",
    "text": "Oops, sorry about that. I will put up a correction right now. Thank you for reporting"
  }
]