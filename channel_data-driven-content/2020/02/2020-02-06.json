[
  {
    "poster": {
      "poster_name": "Glen Satchwell",
      "poster_handle": "glen.satchwell"
    },
    "time_stamp": "2020-02-06 04:30:06",
    "text": "<@U25C65C3S> Yeah for sure, would be very useful!"
  },
  {
    "poster": {
      "poster_name": "Jeff Main",
      "poster_handle": "jmain"
    },
    "time_stamp": "2020-02-06 15:52:56",
    "edited": {
      "time_stamp": "2020-02-06 15:53:53"
    },
    "text": "hey folks! not sure if this is possible. I'd like to create a custom module so that a user on a front-facing webpage can type in a text string of a HubDB row id, which would create a filter like this `{% set row = hubdb_table_row(12345, {{ module.row_id }} ) %}` . this unfortunately gives a syntax error. is there any workaround? or what would y'all suggest to let someone easily select what row of content to pull through?",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2020-02-06 15:56:09"
      },
      {
        "time_stamp": "2020-02-06 15:56:14"
      },
      {
        "time_stamp": "2020-02-06 16:00:21"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Joel Warren",
      "poster_handle": "joel"
    },
    "time_stamp": "2020-02-06 15:55:54",
    "text": "you just need to remove the {{ }} since you can't echo within {% tags?",
    "reply_count": 27,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2020-02-06 16:16:45"
      },
      {
        "time_stamp": "2020-02-06 16:16:53"
      },
      {
        "time_stamp": "2020-02-06 16:17:13"
      },
      {
        "time_stamp": "2020-02-06 16:18:42"
      },
      {
        "time_stamp": "2020-02-06 17:08:49"
      },
      {
        "time_stamp": "2020-02-06 17:08:54"
      },
      {
        "time_stamp": "2020-02-06 17:09:11"
      },
      {
        "time_stamp": "2020-02-06 17:09:54"
      },
      {
        "time_stamp": "2020-02-06 20:48:50"
      },
      {
        "time_stamp": "2020-02-06 20:49:20"
      },
      {
        "time_stamp": "2020-02-07 07:56:51"
      },
      {
        "time_stamp": "2020-02-07 07:57:29"
      },
      {
        "time_stamp": "2020-02-07 07:57:43"
      },
      {
        "time_stamp": "2020-02-07 07:58:26"
      },
      {
        "time_stamp": "2020-02-07 07:58:56"
      },
      {
        "time_stamp": "2020-02-07 07:59:10"
      },
      {
        "time_stamp": "2020-02-07 07:59:55"
      },
      {
        "time_stamp": "2020-02-07 08:00:12"
      },
      {
        "time_stamp": "2020-02-07 08:00:31"
      },
      {
        "time_stamp": "2020-02-07 08:01:02"
      },
      {
        "time_stamp": "2020-02-07 08:01:37"
      },
      {
        "time_stamp": "2020-02-07 08:02:40"
      },
      {
        "time_stamp": "2020-02-07 08:03:01"
      },
      {
        "time_stamp": "2020-02-07 08:03:20"
      },
      {
        "time_stamp": "2020-02-07 08:04:20"
      },
      {
        "time_stamp": "2020-02-07 08:04:29"
      },
      {
        "time_stamp": "2020-02-07 08:04:47"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Gobi Selvaraj",
      "poster_handle": "gselvaraj"
    },
    "time_stamp": "2020-02-06 15:56:09",
    "text": "{% set row_id =  module.row_id  %}\n{% set row = hubdb_table_row(12345, row_id ) %}"
  },
  {
    "poster": {
      "poster_name": "Gobi Selvaraj",
      "poster_handle": "gselvaraj"
    },
    "time_stamp": "2020-02-06 15:56:14",
    "text": "Can u try like this?"
  },
  {
    "poster": {
      "poster_name": "Jeff Main",
      "poster_handle": "jmain"
    },
    "time_stamp": "2020-02-06 15:59:35",
    "edited": {
      "time_stamp": "2020-02-06 15:59:53"
    },
    "text": "ha. thanks <@UDARG2NKZ>. appreciate the simple assist. :faceplam:"
  },
  {
    "poster": {
      "poster_name": "Jeff Main",
      "poster_handle": "jmain"
    },
    "time_stamp": "2020-02-06 16:00:21",
    "text": "thanks for the help! Joel replied that i just had to remove the {{ }} and i'm good from here on out. thanks!"
  },
  {
    "poster": {
      "poster_name": "Jeff Main",
      "poster_handle": "jmain"
    },
    "time_stamp": "2020-02-06 16:16:45",
    "text": "one more follow-up, for my own understanding if you wouldn't mind!"
  },
  {
    "poster": {
      "poster_name": "Jeff Main",
      "poster_handle": "jmain"
    },
    "time_stamp": "2020-02-06 16:16:53",
    "text": "what if i were looking to do something like this"
  },
  {
    "poster": {
      "poster_name": "Jeff Main",
      "poster_handle": "jmain"
    },
    "time_stamp": "2020-02-06 16:17:13",
    "text": "`{% for row in hubdb_table_rows(12345,\"episodes={{ module.row_id }}\") %}`"
  },
  {
    "poster": {
      "poster_name": "Jeff Main",
      "poster_handle": "jmain"
    },
    "time_stamp": "2020-02-06 16:18:42",
    "text": "filtering this way gives a syntax error, and removing the {{ }} doesnt work either, because there's no foreign row ID for \"row_id\". it's expecting the actual number."
  },
  {
    "poster": {
      "poster_name": "Joel Warren",
      "poster_handle": "joel"
    },
    "time_stamp": "2020-02-06 17:08:49",
    "text": "Maybe the concatenate symbol?"
  },
  {
    "poster": {
      "poster_name": "Joel Warren",
      "poster_handle": "joel"
    },
    "time_stamp": "2020-02-06 17:08:54",
    "text": "I'm a bit rusty on hubl"
  },
  {
    "poster": {
      "poster_name": "Joel Warren",
      "poster_handle": "joel"
    },
    "time_stamp": "2020-02-06 17:09:11",
    "text": "{% for row in hubdb_table_rows(12345,\"episodes=\"~ module.row_id) %}"
  },
  {
    "poster": {
      "poster_name": "Joel Warren",
      "poster_handle": "joel"
    },
    "time_stamp": "2020-02-06 17:09:54",
    "text": "I write more php and think of it in a similar way, you don't echo a variable in an instance like this, just output or add it to a string,etc"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2020-02-06 20:48:50",
    "text": "There are two ways to start a HubL statement: `{{` or `{%`. Once you are within HubL you no longer need to use"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2020-02-06 20:49:20",
    "text": "As Joel mentioned you can concatenate strings with the `~` operator"
  }
]