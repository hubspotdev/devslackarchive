[
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2020-10-07 10:35:21",
    "text": "it really just depends – if you have – or will have – over 5 brands, then things could become difficult to maintain. But the benefits might outweigh the costs for your use case. If I know more about what you were using the data for then I might could weigh in more on it"
  },
  {
    "poster": {
      "poster_name": "Derek Shelby Jones",
      "poster_handle": "whatadayderek"
    },
    "time_stamp": "2020-10-07 10:46:57",
    "text": "hmm yeah. so i have over 700 rows currently... im just trying to figure out a way to organize to build out better filterable options for users.."
  },
  {
    "poster": {
      "poster_name": "Derek Shelby Jones",
      "poster_handle": "whatadayderek"
    },
    "time_stamp": "2020-10-07 10:50:41",
    "text": "what format when pushing from api to hubdb should the \"Date and time\" column be? \"1602063422.464248\" does not work. when i do an api pull for an existing entry in the table. the return i get is  \"1571108400000\"",
    "reply_count": 2,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2020-10-07 11:20:05"
      },
      {
        "time_stamp": "2020-10-07 11:20:25"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Derek Shelby Jones",
      "poster_handle": "whatadayderek"
    },
    "time_stamp": "2020-10-07 10:51:52",
    "text": "i should note that by end of year it will be well over 1k rows, which i believe there is a table limit on hubdb"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2020-10-07 10:53:39",
    "text": "when you say users, you mean editors?"
  },
  {
    "poster": {
      "poster_name": "Derek Shelby Jones",
      "poster_handle": "whatadayderek"
    },
    "time_stamp": "2020-10-07 10:53:56",
    "text": "no, visitors."
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2020-10-07 10:54:32",
    "text": "you can filter with hubl or javascript"
  },
  {
    "poster": {
      "poster_name": "Derek Shelby Jones",
      "poster_handle": "whatadayderek"
    },
    "time_stamp": "2020-10-07 10:54:45",
    "text": "using they car example, a way for a vistor to search by color, make, year, etc."
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2020-10-07 10:55:21",
    "text": "yep, I suggest you look at some hubdb example with filter options"
  },
  {
    "poster": {
      "poster_name": "Derek Shelby Jones",
      "poster_handle": "whatadayderek"
    },
    "time_stamp": "2020-10-07 11:03:19",
    "text": "yeah i have been through that. im trying to go deeper."
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-10-07 11:20:05",
    "text": "Hi <@U013KTK1XBL> the timestamp should include miliseconds. Looks like you’re sending seconds (looks like a typical .getTime/1000 without rounding."
  },
  {
    "poster": {
      "poster_name": "Kieran",
      "poster_handle": "kieran073"
    },
    "time_stamp": "2020-10-07 11:20:25",
    "text": "See here: <https://legacydocs.HubSpot.com/docs/methods/hubdb/hubdb_overview>"
  }
]