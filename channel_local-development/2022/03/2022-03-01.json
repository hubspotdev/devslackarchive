[
  {
    "poster": {
      "poster_name": "Gabriela Vargas",
      "poster_handle": "gaby.tloz"
    },
    "time_stamp": "2022-03-01 10:59:51",
    "text": "Has anyone experienced issues with the `hs fetch` command? I am trying to create a workflow that works for teams but after testing it yesterday I noticed I lost folders and data from modules that were modified in production, like the fetch command with a  `--overwrite` flag didn't actually replaced my local files, so I was left with a version of the file that was neither the local version...\n```&lt;div class=\"my-module\"&gt;&lt;/div&gt; ```\nnor my prod version...\n```&lt;div class=\"my-module\"&gt;\n  &lt;div&gt;\n    {% if  module.something %}\n      &lt;p&gt;\n        {{ module.text }}\n      &lt;/p&gt;\n    {% endif %}\n  &lt;/div&gt;\n&lt;/div&gt; ```\nIn my overwritten local version it was more like...\n```&lt;div class=\"my-module\"&gt;\n  &lt;div&gt;\n  &lt;/div&gt;\n&lt;/div&gt; ```\nAnd the json file for the fields was not updated\n\nWhich was solved easily by copying the module from prod, but this is only possible since I am the only one in the project, and I was aware of the changes. I am not sure if I am using the tool as intended, but that was certainly unexpected, since any random can actually mess with stuff in prod I always have to make a fetch.\n\n-------\n\nAlso, is there a flag for a hard update with `hs upload` ? I get the feeling that I might be able to work around the fetch issue if I can push the local environment that already has the latest version via git repositories of the site (since the default workflow is pulling the latest version, right?), but doing an upload right now leaves locally deleted folders in the production environment, when in my desired approach I would like it to be deleted (so you don't have to keep track of every single change your teammates make if it's not relevant to your task)",
    "reply_count": 11,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2022-03-01 12:30:50"
      },
      {
        "time_stamp": "2022-03-01 12:33:16"
      },
      {
        "time_stamp": "2022-03-01 12:34:26"
      },
      {
        "time_stamp": "2022-03-01 12:35:37"
      },
      {
        "time_stamp": "2022-03-01 12:35:43"
      },
      {
        "time_stamp": "2022-03-01 12:36:04"
      },
      {
        "time_stamp": "2022-03-01 12:36:11"
      },
      {
        "time_stamp": "2022-03-01 12:37:10"
      },
      {
        "time_stamp": "2022-03-01 12:41:38"
      },
      {
        "time_stamp": "2022-03-01 14:07:30"
      },
      {
        "time_stamp": "2022-03-01 14:26:42"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-03-01 12:30:50",
    "text": "<@U02RW89P7TQ> sorry to hear that you are having issues with the fetch command. The fetch command should always be pulling whatever is in the DM. If you are basing “production” off of a git branch I would double check to make sure that it is in line with what is in the DM."
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-03-01 12:33:16",
    "text": "That being said — the only time that `--overwrite` has not worked for me is when i’ve added the flag in the incorrect place or I have used an incorrect path either for the src or dest."
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-03-01 12:34:26",
    "text": "The `watch` command also has a `--remove` flag which will delete any files in the DM that are not in your local env."
  },
  {
    "poster": {
      "poster_name": "Gabriela Vargas",
      "poster_handle": "gaby.tloz"
    },
    "time_stamp": "2022-03-01 12:35:37",
    "text": "Ok, just verifying I am not doing this incorrectly\nI do not usually use a watch command, so I will give it a try when I have a chance\nThanks!"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-03-01 12:35:43",
    "text": "So if you run a `watch --remove --initial-upload`  it will essentially be the “hard update” that you are descirbing."
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-03-01 12:36:04",
    "text": "You will just have to kill it right away if you don’t want to actually watch the files :stuck_out_tongue:"
  },
  {
    "poster": {
      "poster_name": "Gabriela Vargas",
      "poster_handle": "gaby.tloz"
    },
    "time_stamp": "2022-03-01 12:36:11",
    "text": "exactly"
  },
  {
    "poster": {
      "poster_name": "Gabriela Vargas",
      "poster_handle": "gaby.tloz"
    },
    "time_stamp": "2022-03-01 12:37:10",
    "text": "I usually avoid watch commands, so I might just be  sabotaging myself"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-03-01 12:41:38",
    "text": "Oh man — I live by them haha"
  },
  {
    "poster": {
      "poster_name": "Gabriela Vargas",
      "poster_handle": "gaby.tloz"
    },
    "time_stamp": "2022-03-01 14:07:30",
    "text": "Well, regardless, I am not feeling like a salmon today, so I'll just go with the flow this time\nthanks again"
  },
  {
    "poster": {
      "poster_name": "BJ Szyjakowski",
      "poster_handle": "bj.s"
    },
    "time_stamp": "2022-03-01 14:26:42",
    "text": "Haha you bet!"
  }
]