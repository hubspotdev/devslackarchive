[
  null,
  null,
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 11:51:53",
    "text": "Can anyone tell me why this think it's 0?  Am I referencing the number field value incorrectly?"
  },
  {
    "text": "<@UB3NK2G00> uploaded a file: <https://HubSpotdev.slack.com/files/UB3NK2G00/FBNST1EH0/image.png|image.png>",
    "time_stamp": "2018-07-11 11:52:02"
  },
  {
    "text": "A file, which can't be shown because your team is past the free storage limit, was commented on.",
    "time_stamp": "2018-07-11 11:54:09"
  },
  {
    "text": "<@UB3NK2G00> uploaded a file: <https://HubSpotdev.slack.com/files/UB3NK2G00/FBNSUTJNN/image.png|image.png>",
    "time_stamp": "2018-07-11 11:54:38"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-07-11 11:56:00",
    "text": "Maybe you need a property like num_columns.value? not sure, the documentation could definitely use some improvement on these fields"
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 11:56:37",
    "text": "Yeah, I've been trying in vain to get values from the number field for hours now.. lol."
  },
  {
    "text": "<@UB3NK2G00> uploaded a file: <https://HubSpotdev.slack.com/files/UB3NK2G00/FBPU1PUVD/image.png|image.png>",
    "time_stamp": "2018-07-11 11:57:04"
  },
  {
    "text": "<@UB3NK2G00> uploaded a file: <https://HubSpotdev.slack.com/files/UB3NK2G00/FBNAFCN49/image.png|image.png>",
    "time_stamp": "2018-07-11 11:57:16"
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 11:57:22",
    "text": "No error if I hard-code the number"
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 11:57:50",
    "text": "And if I output the num_columns variable, it renders fine on the front-end",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2018-07-11 14:21:49"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-07-11 11:57:56",
    "text": "have you tried putting the default down in the |divisible(num_columns|default(4))"
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 11:58:01",
    "text": "including after filtering with |int"
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 11:58:06",
    "text": "yeah"
  },
  {
    "text": "<@UB3NK2G00> uploaded a file: <https://HubSpotdev.slack.com/files/UB3NK2G00/FBPU2QMNK/image.png|image.png>",
    "time_stamp": "2018-07-11 11:58:26"
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 11:59:00",
    "text": "I'm new to Hubl, but I've been developing for years.  I'm honestly losing faith and interest in this platform.  It's very restrictive and seems to need a lot of refinement to be production read."
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 12:00:08",
    "text": "If I do develop another HubSpot website, I'm thinking I'll use the API and host on my own server where I get basic things like being able to loop through an array and setting a variable with scope outside of that loop.. lol.   Being able to use provided functions on provided fields seems like a basic request here."
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 12:01:23",
    "text": "Due to limitations in the platform, I've had to restructure the way I'm styling the blog 4 times, because each time I try one way of rendering it, I discover the language doesn't support variable handling like I need it to."
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-07-11 12:02:08",
    "text": "what is it you need to accomplish with the variables? scope issues are definitely _trying_… but there are workarounds"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-07-11 12:02:57",
    "text": "ex: if you need to set a variable to the results of a loop, create a {% macro %} function for it to return the string (and set the result of the macro function to the variable)"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-07-11 12:03:13",
    "text": "as soon as I started doing that scope issues (while still existent) became far less annoying"
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 12:03:59",
    "text": "yeah, I've gone down that path.  unfortunately, I need to handle post objects, it seems macros don't let you pass blog post objects.  their properties aren't available."
  },
  {
    "text": "<@UB3NK2G00> uploaded a file: <https://HubSpotdev.slack.com/files/UB3NK2G00/FBNT27NE6/image.png|image.png>",
    "time_stamp": "2018-07-11 12:04:07"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-07-11 12:04:15",
    "text": "Return a blog post ID from the macro"
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 12:04:16",
    "text": "solution for my current problem... kludgy as hell.. haha"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-07-11 12:04:24",
    "text": "then call blog_post_by_id(&lt;returned_id&gt;)"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-07-11 12:04:29",
    "edited": {
      "time_stamp": "2018-07-11 12:05:52"
    },
    "text": "^^ yields object data"
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 12:06:09",
    "text": "that might have worked.  I ended up finding another solution by outputting everything and will just handle display logic in JS"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-07-11 12:06:32",
    "text": "There is also a way to get variables out of loops/functions you just add em to an array that exists out of the loop "
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 12:06:54",
    "text": "btw, I really appreciate your help guys.  you both have been very helpful."
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-07-11 12:06:55",
    "edited": {
      "time_stamp": "2018-07-11 12:07:18"
    },
    "text": "i.e. {% set array = array+whatever? <@U7SL518D6>",
    "reply_count": 5,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2018-07-11 12:25:40"
      },
      {
        "time_stamp": "2018-07-11 12:26:23"
      },
      {
        "time_stamp": "2018-07-11 13:23:00"
      },
      {
        "time_stamp": "2018-07-11 13:46:32"
      },
      {
        "time_stamp": "2018-07-11 14:19:00"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-07-11 12:07:01",
    "text": "within the loop"
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 12:07:20",
    "text": "I was under the impression all set commands were local scope.  that is helpful for sure",
    "reply_count": 28,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2018-07-11 12:07:35"
      },
      {
        "time_stamp": "2018-07-11 12:07:47"
      },
      {
        "time_stamp": "2018-07-11 12:07:53"
      },
      {
        "time_stamp": "2018-07-11 12:08:55"
      },
      {
        "time_stamp": "2018-07-11 12:09:23"
      },
      {
        "time_stamp": "2018-07-11 12:09:54"
      },
      {
        "time_stamp": "2018-07-11 12:10:00"
      },
      {
        "time_stamp": "2018-07-11 12:10:03"
      },
      {
        "time_stamp": "2018-07-11 12:10:41"
      },
      {
        "time_stamp": "2018-07-11 12:10:43"
      },
      {
        "time_stamp": "2018-07-11 12:10:53"
      },
      {
        "time_stamp": "2018-07-11 12:11:08"
      },
      {
        "time_stamp": "2018-07-11 12:11:09"
      },
      {
        "time_stamp": "2018-07-11 12:11:13"
      },
      {
        "time_stamp": "2018-07-11 12:11:55"
      },
      {
        "time_stamp": "2018-07-11 12:12:36"
      },
      {
        "time_stamp": "2018-07-11 12:12:37"
      },
      {
        "time_stamp": "2018-07-11 12:13:08"
      },
      {
        "time_stamp": "2018-07-11 12:13:17"
      },
      {
        "time_stamp": "2018-07-11 12:13:27"
      },
      {
        "time_stamp": "2018-07-11 12:13:33"
      },
      {
        "time_stamp": "2018-07-11 12:13:52"
      },
      {
        "time_stamp": "2018-07-11 12:15:27"
      },
      {
        "time_stamp": "2018-07-11 12:16:01"
      },
      {
        "time_stamp": "2018-07-11 12:16:03"
      },
      {
        "time_stamp": "2018-07-11 12:18:20"
      },
      {
        "time_stamp": "2018-07-11 12:18:29"
      },
      {
        "time_stamp": "2018-07-11 12:20:04"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-07-11 12:07:35",
    "text": "I was too TBH"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-07-11 12:07:47",
    "text": "But if what Jon says is true, that opens up a whole other realm of possibilities for me :wink:"
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 12:07:53",
    "text": "definitely"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-07-11 12:08:55",
    "edited": {
      "time_stamp": "2018-07-11 12:09:20"
    },
    "text": "Yeah the scope trick has been a closely guarded secret at my work. Lol don't tell anyone. *Said broadcast in the channel*"
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 12:09:23",
    "text": "lol"
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 12:09:54",
    "text": "i'm building a site for a client that wants categories / subcategories / tags / search for their blogs.. haha"
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 12:10:00",
    "text": "that was a fun little trip down insanity lane"
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 12:10:03",
    "text": "haha"
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 12:10:41",
    "text": "but I finally figured out a solution.  just sucks it took a day to do it in Hubl and HubDB when I could have done it much faster in another platform or language."
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-07-11 12:10:43",
    "text": "Yes - but these are the experiments that teach us the most :wink:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-07-11 12:10:53",
    "text": "Ahh yeah we actually use the blog topics to handle all of that traditionally but we use prefixes on the topic names to split them in the UI"
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 12:11:08",
    "text": "makes sense"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-07-11 12:11:09",
    "text": "Allows the client to add their own down the road without us"
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 12:11:13",
    "text": "yeah"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-07-11 12:11:55",
    "text": "IDK - that is a fairly advanced use case for a “new to HubL” project… if you had a year of experience doing (super airquote) “Easier” stuff then it wouldn’t seem so bad"
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 12:12:36",
    "text": "haha, yeah"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-07-11 12:12:37",
    "text": "Oh yeah sorry with the topics thing you're right lil advanced"
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 12:13:08",
    "text": "yeah, I don't think the HubSpot certification would have helped"
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 12:13:17",
    "text": "but you guys' pro tips are very helpful indeed"
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 12:13:27",
    "text": "where are you guys located?  I'm in LA."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-07-11 12:13:33",
    "text": "WI"
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 12:13:52",
    "text": "you've been helping me.. but hopefully I can return the favor one day."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-07-11 12:15:27",
    "text": "That's why we help :wink:. including shameless self promotion in T minus 5 seconds"
  },
  null,
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-07-11 12:16:01",
    "text": "<https://chrome.google.com/webstore/detail/HubSpot-developer-extensi/gebemkdecnlgbcanplbgdpcffpdnfdfo?utm_source>"
  },
  {
    "poster": {
      "poster_name": "Michael Grubbs",
      "poster_handle": "mgrubbs"
    },
    "time_stamp": "2018-07-11 12:16:03",
    "text": "Quebec Canada !"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-07-11 12:16:11",
    "text": "Is there a way to pull a value out of a hubl array? Like the equivalent of arr[4]."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-07-11 12:16:24",
    "text": "Follow up, can I change the value of a variable?"
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-07-11 12:17:26",
    "text": "And I know I can grab the value by doing a loop and checking the iteration, I didn’t know if there was a more simple way."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-07-11 12:18:20",
    "text": "_In 90's video game ad voice_ \"level up your HubSpot game the extension.... Now you're playing with power!\""
  },
  {
    "poster": {
      "poster_name": "Mitchum Owen",
      "poster_handle": "mitchum"
    },
    "time_stamp": "2018-07-11 12:18:29",
    "text": ":smile:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-07-11 12:20:04",
    "text": "This extension was made by a few of us on the dev slack to make a lot of dev related things easier.\n\nBunch of updates coming in the next couple weeks."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-07-11 12:25:40",
    "text": "I'm away from computer ATM but basically you set an empty array to a variable outside the loop then inside the loop set a variable like `set _dummyvar = outsidevar.append(value)`\n\nNote the append funtion might be spelled different am typing on my phone"
  },
  {
    "poster": {
      "poster_name": "Ian McNair",
      "poster_handle": "ianrmcnair"
    },
    "time_stamp": "2018-07-11 12:26:20",
    "text": "`arr[4]` should do what you expect, for a list at least."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-07-11 12:26:23",
    "text": "But that's the basic idea. Your array var on the outside now has the value as it's only item."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-07-11 12:29:43",
    "text": "But doing something like arr[4] = “Sandwich” wouldn’t work."
  },
  {
    "poster": {
      "poster_name": "Peter Emerson",
      "poster_handle": "pete-the-balls-guy"
    },
    "time_stamp": "2018-07-11 12:39:16",
    "text": "Ah I think I figured out what I need to do, I’m just going to make the array from values set previously so I don’t have to modify them."
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-07-11 13:23:00",
    "text": "Also, I could be wrong about this, but when I use append, it's not treated as a function but rather more like a property, therefore {{}} rather than {%%}. That's just from my experience though, to my knowledge there is no official documentation on append in HubL"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2018-07-11 13:46:32",
    "text": "Remember hubl is really jinja"
  },
  {
    "poster": {
      "poster_name": "Mark Ryba",
      "poster_handle": "mryba"
    },
    "time_stamp": "2018-07-11 14:19:00",
    "text": "usually... but there can be differences. Hence why I said no documentation in HubL lol. Never know what might change.."
  },
  {
    "poster": {
      "poster_name": "Jeff Boulter",
      "poster_handle": "boulter"
    },
    "time_stamp": "2018-07-11 14:21:49",
    "text": "perhaps this is just an editor? The editor, there’s no value defined. Do you get an error in the preview?"
  },
  null
]