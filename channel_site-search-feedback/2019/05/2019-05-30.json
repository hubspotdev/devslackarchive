[
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-30 12:21:50",
    "edited": {
      "time_stamp": "2019-05-30 12:22:31"
    },
    "text": "so how does the `&amp;hubdbQuery=` filter work? Is everything following it the hubdb query? Or, is there some way to separate that query from the rest of the search query? I'm not able to get it to work",
    "reply_count": 40,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2019-05-30 12:25:26"
      },
      {
        "time_stamp": "2019-05-30 12:28:58"
      },
      {
        "time_stamp": "2019-05-30 12:29:09"
      },
      {
        "time_stamp": "2019-05-30 12:29:55"
      },
      {
        "time_stamp": "2019-05-30 12:30:02"
      },
      {
        "time_stamp": "2019-05-30 12:31:26"
      },
      {
        "time_stamp": "2019-05-30 12:33:10"
      },
      {
        "time_stamp": "2019-05-30 12:33:20"
      },
      {
        "time_stamp": "2019-05-30 12:33:22"
      },
      {
        "time_stamp": "2019-05-30 12:34:25"
      },
      {
        "time_stamp": "2019-05-30 12:34:53"
      },
      {
        "time_stamp": "2019-05-30 12:35:04"
      },
      {
        "time_stamp": "2019-05-30 12:38:30"
      },
      {
        "time_stamp": "2019-05-30 12:44:05"
      },
      {
        "time_stamp": "2019-05-30 12:53:22"
      },
      {
        "time_stamp": "2019-05-30 12:53:39"
      },
      {
        "time_stamp": "2019-05-30 12:56:32"
      },
      {
        "time_stamp": "2019-05-30 12:58:13"
      },
      {
        "time_stamp": "2019-05-30 13:01:24"
      },
      {
        "time_stamp": "2019-05-30 13:02:01"
      },
      {
        "time_stamp": "2019-05-30 13:02:23"
      },
      {
        "time_stamp": "2019-05-30 13:02:25"
      },
      {
        "time_stamp": "2019-05-30 13:03:38"
      },
      {
        "time_stamp": "2019-05-30 13:05:27"
      },
      {
        "time_stamp": "2019-05-30 13:05:36"
      },
      {
        "time_stamp": "2019-05-30 13:06:45"
      },
      {
        "time_stamp": "2019-05-30 13:16:20"
      },
      {
        "time_stamp": "2019-05-30 13:16:50"
      },
      {
        "time_stamp": "2019-05-30 13:17:31"
      },
      {
        "time_stamp": "2019-05-30 13:18:11"
      },
      {
        "time_stamp": "2019-05-30 13:18:56"
      },
      {
        "time_stamp": "2019-05-30 13:19:05"
      },
      {
        "time_stamp": "2019-05-30 13:20:24"
      },
      {
        "time_stamp": "2019-05-30 13:21:24"
      },
      {
        "time_stamp": "2019-05-30 13:21:30"
      },
      {
        "time_stamp": "2019-05-30 13:33:57"
      },
      {
        "time_stamp": "2019-05-30 13:57:13"
      },
      {
        "time_stamp": "2019-05-30 13:58:20"
      },
      {
        "time_stamp": "2019-06-03 11:08:49"
      },
      {
        "time_stamp": "2019-06-03 11:12:26"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-30 12:25:26",
    "text": "here is what i thought would work, but isn't, can anyone confirm? `&amp;term=search_term&amp;limit=5&amp;autocomplete=true&amp;tableId=123456&amp;hubdbQuery=&amp;example_column__icontains=search_term`"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-30 12:28:58",
    "text": "<@U6GNQ7JBU>?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-30 12:29:09",
    "text": "looking for a :bam:"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-05-30 12:29:55",
    "text": "It should filter out all dynamic pages generated from rows that do not match the query"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-05-30 12:30:02",
    "text": "cc <@UD5NW4PJ5>"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-30 12:31:26",
    "text": "I think where I'm getting stumped is having the hubdb query within another query. does it need to be escaped or something?"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-30 12:33:10",
    "text": "apologies, matt if you are no longer involved in this area :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-05-30 12:33:20",
    "text": "Yes or else it won’t be able to tell the difference"
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2019-05-30 12:33:22",
    "text": "you just happen to be my bam artist"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-30 12:34:25",
    "text": "okay, makes sense. thanks!"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-05-30 12:34:53",
    "text": "Like `example_column__icontains%3Dsearch_term` may work"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-30 12:35:04",
    "edited": {
      "time_stamp": "2019-05-30 12:35:22"
    },
    "text": "a little mention of that might be beneficial in the docs here: <https://developers.HubSpot.com/docs/methods/content/search-for-content> :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-30 12:38:30",
    "text": "hmm, still nothing"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-30 12:43:36",
    "text": "anyone know using the javascript api, if I include `groupId` do I need to tell it the `type` is `blog_post` or will it just put 2 and 2 together?",
    "reply_count": 8,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-05-30 12:53:41"
      },
      {
        "time_stamp": "2019-05-30 12:59:12"
      },
      {
        "time_stamp": "2019-05-30 12:59:17"
      },
      {
        "time_stamp": "2019-05-30 12:59:32"
      },
      {
        "time_stamp": "2019-05-30 13:00:09"
      },
      {
        "time_stamp": "2019-05-30 13:41:09"
      },
      {
        "time_stamp": "2019-05-30 13:45:01"
      },
      {
        "time_stamp": "2019-05-30 13:50:03"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-30 12:44:05",
    "text": ":thinking_face:"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-30 12:53:22",
    "text": "here is the actual hubdb api and query with it working: <https://api.hubapi.com/hubdb/api/v2/tables/674529/rows?portalId=3841628&amp;searchable_terms__icontains=asdfasdf>"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-30 12:53:39",
    "text": "and here is the escaped search api with no results: <https://api.hubapi.com/contentsearch/v2/search?portalId=3841628&amp;term=asdf&amp;limit=3&amp;autocomplete=true&amp;tableId=674529&amp;hubdbQuery=%2526searchable_terms__icontains%253Dasdf>"
  },
  {
    "poster": {
      "poster_name": "Kacper Adach",
      "poster_handle": "kadach"
    },
    "time_stamp": "2019-05-30 12:53:41",
    "text": "it is not smart"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-05-30 12:56:32",
    "text": "The search without the hubdb filters doesn’t return any results <https://api.hubapi.com/contentsearch/v2/search?portalId=3841628&amp;term=asdf&amp;limit=3&amp;autocomplete=true>"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-30 12:58:13",
    "text": "does it automatically search every column in hubdb?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-30 12:59:12",
    "text": "darn lol, wonder what it would return then"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-30 12:59:17",
    "text": "guess I’m gonnna find out"
  },
  {
    "poster": {
      "poster_name": "Kacper Adach",
      "poster_handle": "kadach"
    },
    "time_stamp": "2019-05-30 12:59:32",
    "text": "it should still work I think"
  },
  {
    "poster": {
      "poster_name": "Kacper Adach",
      "poster_handle": "kadach"
    },
    "time_stamp": "2019-05-30 13:00:09",
    "text": "if the domain is used for your blog"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-05-30 13:01:24",
    "text": "It searches the content on the dynamic pages"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-05-30 13:02:01",
    "text": "ContentSearch treats dynamic pages the same as normal pages"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-05-30 13:02:23",
    "text": "`tableId` and `hubdbQuery` allow you to filter those results further"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-30 13:02:25",
    "text": "okay, that might be my problem then. It's not on the pages themselves, it's just within the table"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-30 13:03:38",
    "text": "i'd love to see the ability to add extra keywords for the results to be powered by. use case: mispellings or certain products or old SKUs that are replaced with new SKUs, etc.."
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-05-30 13:05:27",
    "text": "Search results? There is a special class wrapper you can use `.hs-search-noanalyze`"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-05-30 13:05:36",
    "text": "Still pending documentation"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-30 13:06:45",
    "text": "so I'd have to print the hubdb column data to the page, and use that class on it? would it still pick it up if I were to hide the content?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-05-30 13:16:20",
    "text": "What is the use case for this?"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-05-30 13:16:50",
    "text": "Are you just searching through HubDB data?"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-30 13:17:31",
    "text": "yes, was hoping i could return dynamic pages as results based on the data in a column"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-30 13:18:11",
    "text": "extra search keywords basically that aren't on the pages"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-05-30 13:18:56",
    "text": "Ahh I understand now"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-30 13:19:05",
    "text": "so if someone searched for a competitor's product name, it would return their equivelent. obviously we don't want to show the competitors product name on the page."
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-05-30 13:20:24",
    "text": "We would need to add a new `keyword` property <https://developers.HubSpot.com/docs/methods/content/search-for-content> and you would have to add it on the pages under `.hs-search-noanalyze` spans"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-05-30 13:21:24",
    "text": "That way you can put keywords on the page and only search by the keyword"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-05-30 13:21:30",
    "text": "cc <@UD5NW4PJ5>"
  },
  {
    "poster": {
      "poster_name": "Matt Coley",
      "poster_handle": "mcoley"
    },
    "time_stamp": "2019-05-30 13:33:57",
    "text": "I think if you just add `property=html_keyword` it will work"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-30 13:41:09",
    "text": "worked great"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-30 13:44:16",
    "text": "I’d like to propose a change to how the “description” is returned from the API:\nChange `&lt;span class=\"hs-search-highlight hs-highlight-html\"&gt;relevant word&lt;/span&gt;`\nto `&lt;mark class=\"hs-search-highlight hs-highlight-html\"&gt;relevant word&lt;/mark&gt;`\n\nmark is the semantically appropriate tag to be using, and screen readers can CHOOSE to emphasize it."
  },
  {
    "poster": {
      "poster_name": "Kacper Adach",
      "poster_handle": "kadach"
    },
    "time_stamp": "2019-05-30 13:45:01",
    "text": "its a tiny bit more efficient if you set the type to blog_post tho :wink:"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-05-30 13:50:03",
    "text": "yea I’ve gone and done that. handled the logic on my side. If the user sets a blog id, then it automatically sets content type to be blog post"
  },
  {
    "poster": {
      "poster_name": "Kacper Adach",
      "poster_handle": "kadach"
    },
    "time_stamp": "2019-05-30 13:57:13",
    "text": "<@U7V9DQ31P> right now you cannot hide `hs-search-noanalyze` elements and have them affect search results but I’m making the change so that you can."
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-05-30 13:58:20",
    "text": "awesome, thank you!"
  }
]