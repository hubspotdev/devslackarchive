[
  {
    "poster": {
      "poster_name": "Alessio Michelini",
      "poster_handle": "amichelini"
    },
    "time_stamp": "2022-11-29 03:11:21",
    "text": "Hi all, just a reminder that tomorrow is the deadline for the HAPIKEY, so I hope you all have replace it with the appropriate Private App"
  },
  {
    "poster": {
      "poster_name": "Davor Kirbiš",
      "poster_handle": "davor.kirbis"
    },
    "time_stamp": "2022-11-29 03:27:00",
    "text": "Lazy Loading Javascript files... what is your approach on it? Is the regular code splitting the best practice here? I am still reading and rereading the Google Lighthouse tips: <https://web.dev/reduce-javascript-payloads-with-code-splitting/> but I am a bit lost.\nUnder dev tools networks I have a few JS files that are being read on most of my blog sites, which are unnecessary on the start and could be loaded in the end (some forms at the bottom of the screen and some linkedin analytics). Has anyone done this before?",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2022-11-29 11:23:53"
      },
      {
        "time_stamp": "2022-11-29 14:59:11"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Evelynn Ulsh",
      "poster_handle": "evelynn"
    },
    "time_stamp": "2022-11-29 11:23:53",
    "text": "Code splitting absolutely still applies as best practice! Always best to avoid loading anything the user doesn’t need.\n\nOne particularly convenient way to split your JS is to use `{% require_js %}` or write your scripts in your module.js files. It provides a smoother development experience (keeping your related resources in one place) _and_ it automatically manages the inclusion/exclusion of relevant scripts."
  },
  {
    "poster": {
      "poster_name": "Davor Kirbiš",
      "poster_handle": "davor.kirbis"
    },
    "time_stamp": "2022-11-29 14:59:11",
    "text": "Haven't thought about using modules to split the code, that's really useful and cool! Thanks!"
  }
]