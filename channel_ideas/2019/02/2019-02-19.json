[
  {
    "poster": {
      "poster_name": "Shay Redmond",
      "poster_handle": "shay"
    },
    "time_stamp": "2019-02-19 04:09:10",
    "text": "Quick checkin on this, Jon. When you say the image module for email, are you referring to the image module for the \"classic\" email templates built in Design Manager, or the new image module used in drag and drop emails? (Should have confirmed at the time)"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-19 05:35:05",
    "text": "Design manager"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-19 08:08:47",
    "text": ":bulb: In the \"Users\" section, allow for creation of \"Short-Term\" users. Where the client will have the ability to add a user for a specified duration of 3 days, 1-week, 2-weeks. There have been times I've been added by clients so I can do a \"portal review\" and then that client never takes me off the portal lol",
    "reply_count": 1,
    "reply_users_count": 1,
    "replies": [
      {
        "time_stamp": "2019-02-19 09:31:02"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-02-19 08:38:10",
    "text": "Is there a plan at HubSpot to eliminate flow content from being put inside of the `span` tag? For example, blog content from `{{ content.post_body }}` (which contains flow content) is rendered in a span tag. Same with native hs nav.",
    "reply_count": 15,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-02-19 08:52:28"
      },
      {
        "time_stamp": "2019-02-19 08:53:30"
      },
      {
        "time_stamp": "2019-02-19 09:03:28"
      },
      {
        "time_stamp": "2019-02-19 09:04:35"
      },
      {
        "time_stamp": "2019-02-19 09:12:44"
      },
      {
        "time_stamp": "2019-02-19 09:13:56"
      },
      {
        "time_stamp": "2019-02-19 09:14:28"
      },
      {
        "time_stamp": "2019-02-19 09:18:45"
      },
      {
        "time_stamp": "2019-02-19 09:21:23"
      },
      {
        "time_stamp": "2019-02-19 13:15:45"
      },
      {
        "time_stamp": "2019-02-19 13:16:24"
      },
      {
        "time_stamp": "2019-02-19 13:16:52"
      },
      {
        "time_stamp": "2019-02-19 13:17:29"
      },
      {
        "time_stamp": "2019-02-19 13:19:04"
      },
      {
        "time_stamp": "2019-02-19 13:21:13"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-19 08:52:28",
    "text": "highly doubt it, that would kill part of the page editor"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-19 08:53:30",
    "text": "they make it so you can click on the content when editing the page to edit the content."
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-02-19 09:03:28",
    "text": "couldn’t they do that with `div` and the same data attributes though?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-19 09:04:35",
    "text": "well a span would be the least destructive. spans by default render as display:inline;\ndivs are display block;"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-02-19 09:12:44",
    "text": "yeah, I’ve just never seen a module be inline before. They all have block elements inside the span"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-19 09:13:56",
    "text": "correct but post_body is not a custom module, it’s meant to be rich text. It’s effectively the same as if you used the hubl Rich text tag or hubl text tag"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-19 09:14:28",
    "text": "those do not inject divs they inject spans. (rich text may in certain situations add a div)"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-02-19 09:18:45",
    "text": "paragraphs, h tags, etc are all displayed as block though. My reasoning for this request is: if other “drag/drop” editors can validate html, then hs should"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-19 09:21:23",
    "text": "I guess yes you’re right technically putting a div inside a span is invalid html. Fortunately no browsers care."
  },
  {
    "poster": {
      "poster_name": "Stephanie O'Gay Garcia",
      "poster_handle": "stephanie"
    },
    "time_stamp": "2019-02-19 09:31:02",
    "text": "+1 - I'm on so many random portals..."
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-02-19 09:44:35",
    "edited": {
      "time_stamp": "2019-02-19 09:54:01"
    },
    "text": ":bulb: Add an option to the site settings to enable lazy loading images (maybe next to the load jquery in footer?) that would enable the use of the `data-src` attribute on every module that can output image tags (rich text modules, image modules, etc.)"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-19 09:51:50",
    "text": "I feel like I’d rather control that myself though honestly. too easy for that JS to get screwed up in specific scenarios and whatnot",
    "reply_count": 9,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-02-19 09:53:02"
      },
      {
        "time_stamp": "2019-02-19 09:54:56"
      },
      {
        "time_stamp": "2019-02-19 10:00:01"
      },
      {
        "time_stamp": "2019-02-19 10:03:07"
      },
      {
        "time_stamp": "2019-02-19 10:03:41"
      },
      {
        "time_stamp": "2019-02-19 10:08:22"
      },
      {
        "time_stamp": "2019-02-19 10:09:11"
      },
      {
        "time_stamp": "2019-02-19 10:28:10"
      },
      {
        "time_stamp": "2019-02-19 10:28:37"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-02-19 09:53:02",
    "text": "the option wouldn't have to handle the js part. it could just enable the proper html markup of the image tags"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-02-19 09:54:56",
    "text": "it's impossible to lazy load images in rich text modules right now"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-19 10:00:01",
    "text": "valid, not without the marketers knowing to add the attributes, and unless you’re lucky, most marketers that’s not their cup of tea"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-02-19 10:03:07",
    "text": "yep, if there was a global hubl filter like `|replace('src=', 'srcset=')`"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-02-19 10:03:41",
    "text": "that would filter all modules that output html or just any modules that can output `img` markup"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-19 10:08:22",
    "text": "here’s a thought for you as a temporary work-around. add a new .html file to your project, add a macro name it `lazyloadImg(imgSrc)`\nAnd inside all of your custom modules import that macro from the file and use it to do exactly what you said based on a template level hubl boolean, if true, replace with srcset, just display src"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-19 10:09:11",
    "text": "Then at the page level you can turn it on or off. If you don’t want the client to be able to change it, just set it to true/false in the macro file itself"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-19 10:09:35",
    "text": "It would be awesome when exporting blogs from the dashboard if it included the topics that were associated with the blog.",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-02-19 10:10:25"
      },
      {
        "time_stamp": "2019-02-19 10:11:02"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-19 10:10:25",
    "text": "surprised that it doesn’t"
  },
  {
    "poster": {
      "poster_name": "AJ LaPorte",
      "poster_handle": "ajlaporte"
    },
    "time_stamp": "2019-02-19 10:11:02",
    "text": "agreed, im trying to go through our old blogs and redirect outdated ones to newer and all that stuff, its a huge pain right now"
  },
  {
    "poster": {
      "poster_name": "Stefen Phelps",
      "poster_handle": "stefen"
    },
    "time_stamp": "2019-02-19 10:28:10",
    "text": "that works if i was coding a new site. but for a site I'm hired to do performance optimization in and they have a  bunch of flex columns with rich text modules in, I can't do much with that."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-19 10:28:37",
    "text": "very true"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-02-19 13:15:45",
    "text": "Hey <@U7SL518D6>, do accessibility checkers and screen readers care? I’ve seen you post about that stuff before. In some of my experience with running it through software, the web accessibility checkers have given me warnings on some invalid html"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-02-19 13:16:24",
    "text": "Just curious, I am still green in that area"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-19 13:16:52",
    "text": "Great question. I don’t know for 100% certainty, but I would actually assume that they DON’T care."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-19 13:17:29",
    "edited": {
      "time_stamp": "2019-02-19 13:17:54"
    },
    "text": "the reason simply being that divs and spans can both contain interactive elements, semantic elements and headings, which are the main things screen readers care about"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-19 13:19:04",
    "text": "when in-doubt though it’s always best to test for yourself on a per scenario basis. but I still am pretty confident they dont care"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-02-19 13:21:13",
    "text": "yeah, that makes sense, most of the warnings were with heading tags, etc"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-19 15:08:37",
    "text": "Ability to link to line numbers in Custom Modules - would be nice for collaborating as well as pointing things out to HS staff when something isn’t working properly"
  },
  {
    "poster": {
      "poster_name": "Russell Benzing",
      "poster_handle": "rbenzing"
    },
    "time_stamp": "2019-02-19 15:40:44",
    "text": "It would be nice to include a Custom Module field selector for multiple Lists so we can compare contacts with their list management"
  },
  {
    "poster": {
      "poster_name": "Joshua Farley",
      "poster_handle": "joshua"
    },
    "time_stamp": "2019-02-19 16:44:44",
    "text": "FEATURE REQUEST - New Field in Design Manager:  Ability for user to add Class or ID directly.  (adding ID to jump down the page to different modules)",
    "reply_count": 12,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2019-02-19 17:21:49"
      },
      {
        "time_stamp": "2019-02-19 20:02:45"
      },
      {
        "time_stamp": "2019-02-19 20:05:11"
      },
      {
        "time_stamp": "2019-02-19 20:05:57"
      },
      {
        "time_stamp": "2019-02-19 20:06:15"
      },
      {
        "time_stamp": "2019-02-19 20:06:40"
      },
      {
        "time_stamp": "2019-02-19 20:08:00"
      },
      {
        "time_stamp": "2019-02-19 20:11:21"
      },
      {
        "time_stamp": "2019-02-19 20:12:00"
      },
      {
        "time_stamp": "2019-02-19 20:13:42"
      },
      {
        "time_stamp": "2019-02-19 20:27:20"
      },
      {
        "time_stamp": "2019-02-19 20:27:39"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-19 17:21:49",
    "text": "? you can already create this"
  },
  {
    "poster": {
      "poster_name": "Joshua Farley",
      "poster_handle": "joshua"
    },
    "time_stamp": "2019-02-19 20:02:45",
    "text": "What is the option for it?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-19 20:05:11",
    "text": "you just create a text field in your custom module that sets the ID of your module. If you’re worried about the marketing team using invalid characters in the id, you just add regex validation to the field."
  },
  {
    "poster": {
      "poster_name": "Joshua Farley",
      "poster_handle": "joshua"
    },
    "time_stamp": "2019-02-19 20:05:57",
    "text": "When I add a text field, it spits out everything wrapped in a div."
  },
  {
    "poster": {
      "poster_name": "Joshua Farley",
      "poster_handle": "joshua"
    },
    "time_stamp": "2019-02-19 20:06:15",
    "text": "Am I missing something with it?"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-19 20:06:40",
    "text": "use copy value not copy snippet, when you’re using the variable in an html attribute"
  },
  {
    "poster": {
      "poster_name": "Joshua Farley",
      "poster_handle": "joshua"
    },
    "time_stamp": "2019-02-19 20:08:00",
    "text": "Ah!  I see it now!  That makes all the difference!  Thanks Jon!"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-19 20:11:21",
    "text": "remember though, copy snippet still is the better thing to use for other content. the wrapping elements are for the HubSpot page editor.\n\nThe current version of the editor doesn’t use them for custom modules, but you’ll see what I mean when you use them with HubL tags like rich text blocks and the text tag."
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2019-02-19 20:12:00",
    "text": "HS employees have stated that while there’s no timeline for it, they do plan to use those wrapping elements again for enhancing the page editor experience."
  },
  {
    "poster": {
      "poster_name": "Joshua Farley",
      "poster_handle": "joshua"
    },
    "time_stamp": "2019-02-19 20:13:42",
    "text": "Okay, I will keep that in mind.  That’s definitely more convenient and gives greater control."
  },
  {
    "poster": {
      "poster_name": "Luke Summerfield",
      "poster_handle": "lukesummerfield"
    },
    "time_stamp": "2019-02-19 20:27:20",
    "text": "Can always follow/post/check out <#C960Q64G4|design-manager> channel for details"
  },
  {
    "poster": {
      "poster_name": "Luke Summerfield",
      "poster_handle": "lukesummerfield"
    },
    "time_stamp": "2019-02-19 20:27:39",
    "text": "The HubSpot product and engineering team that works on design manager hangs out in there and posts updates"
  }
]