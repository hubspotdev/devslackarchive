[
  {
    "poster": {
      "poster_name": "Jaydip Suvagiya",
      "poster_handle": "jaydip"
    },
    "time_stamp": "2020-05-04 04:44:33",
    "text": "Hey all, hope all are doing good during work from home\nRecently we did a online meet-up with frontend developers, itâ€™s our very beginning step for this meet-up so we planed to go very slowly and shared knowledge from zero level.\nSo if you have few minutes to checkout summery of this meetup about setup a project from scratch using CLI and Package manager then it would be awesome for me to get feedback from you guys\n<https://github.com/S-Jaydip/frontend-developers-meetup/tree/master/04-2020>\n\nPlease let me know how can i improve this in future and content of this meet-up can be worth full for beginners and experts both ??"
  },
  {
    "text": "Hello guys\nCan we add the HubSpot simple chat flow like banner section please check Link <https://leadoo.com/>\nThanks in advance",
    "time_stamp": "2020-05-04 08:23:55"
  },
  {
    "poster": {
      "poster_name": "Andreas Wessolly",
      "poster_handle": "webdesign"
    },
    "time_stamp": "2020-05-04 10:21:18",
    "text": "Hi all, if an editor chooses an exact dimension for an image rather than Auto Adjustment of width / height, does this image stay fix in mobile viewports or should it get resized to fit the viewport?",
    "reply_count": 2,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2020-05-04 10:57:50"
      },
      {
        "time_stamp": "2020-05-04 11:20:30"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "dennis edson",
      "poster_handle": "dennis261"
    },
    "time_stamp": "2020-05-04 10:57:50",
    "text": "set a `max-width: 100%`  and it should always stay within its container"
  },
  {
    "poster": {
      "poster_name": "Andreas Wessolly",
      "poster_handle": "webdesign"
    },
    "time_stamp": "2020-05-04 11:20:30",
    "text": "thx"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2020-05-04 12:00:20",
    "text": "Hey <@U012LKRF0RJ> Happy hour was fun, hope to see you there next time! Appreciate the feedback on the ruby gem, let us know how it can be approved.  You can create contacts and companies however you with the caveat that email address must be unique across contacts.  You can then use the search API to get contacts/companies by whatever property you  want. It might look something like :\n```\"filters\": [\n      {\n        \"propertyName\": \"myUniqueIdProp\",\n        \"operator\": \"EQ\",\n        \"value\": \"123\"\n      }\n    ]```"
  },
  {
    "poster": {
      "poster_name": "mmcdaris",
      "poster_handle": "morgan"
    },
    "time_stamp": "2020-05-04 12:11:02",
    "text": "Thanks for the extra info :+1:"
  },
  {
    "poster": {
      "poster_name": "Sunil Kumar Singh",
      "poster_handle": "kumar.singh1286"
    },
    "time_stamp": "2020-05-04 12:16:14",
    "text": "hello"
  },
  {
    "poster": {
      "poster_name": "Rob Schall",
      "poster_handle": "rschall"
    },
    "time_stamp": "2020-05-04 13:52:42",
    "text": "Hi guys. I'm looking at a client's DNS settings and see the following records:\n```bcg3eg.2154169m\t3.210.190.230\nbcg3eh.2154169m\t3.210.190.231```\nDoes anyone know what the purpose of records like that would be. I know they point at HubSpot. I don't know if they were added for some type of validation, a test url, or some other purpose. Need to know if its safe to remove them, etc."
  },
  {
    "poster": {
      "poster_name": "dev",
      "poster_handle": "linus"
    },
    "time_stamp": "2020-05-04 20:23:06",
    "text": "Does anyone know if HubSpot retries failed requests asynchronously? For example, if we attempt to create a Deal via the Deals API, but get back a failed response, would HubSpot still somehow create those resources without undoing any changes?",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2020-05-05 07:02:17"
      },
      {
        "time_stamp": "2020-05-05 13:27:29"
      },
      {
        "time_stamp": "2020-05-05 13:29:11"
      }
    ]
  }
]