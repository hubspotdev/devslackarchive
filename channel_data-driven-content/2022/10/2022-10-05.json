[
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-10-05 11:18:58",
    "text": "<@U01FRQXJBFB> Does this work for you? Do you need help with this?"
  },
  {
    "poster": {
      "poster_name": "Brennan Nowers",
      "poster_handle": "brennan034"
    },
    "time_stamp": "2022-10-05 11:43:33",
    "text": "Hey! Unfortunately, this would not work unless I'm mistaken.\n\nThere is some context to the issue that might help you point me in the right direction:\n\nI have 3 custom objects, Counselors, Locations, and Specialties. Counselors can have associations with both Locations and Specialties. I have implemented a listing page that lists out Counselors and can currently be filtered by just location or by just specialty.\n\nFor unfiltered counselors I query the full counselor_collection, and for filtered counselors I query either the specific specialty or location chosen by the user, then get the associated counselors for that specialty/location by using the query directives _skip_ and _include_. No problems there.\n\nThe problem is when combining those specialty and location filters. I want a union of a list of counselors associated with a single location _and_ a single specialty but I am unsure how to do that in graphql. My only other thought was to query the full counselor_collection and try filtering by association but I don't believe that is possible either.\n\nWith this context, does it sound like this combination filtering functionality is feasible with graphql?\n\nThanks for the help!"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2022-10-05 13:01:06",
    "text": "Thanks, that is helpful context. Right now, we do not support a way to filter to filter a collection by associations.\n\nThe best approach I can think of is, make both of your queries (from location and specialty), and then in your front-end code, check which items are in both lists. This is obviously not great for performance, but might make it possible. How does this sound?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-10-05 13:05:44",
    "text": "true true Will, another somewhat cleaner approach (cleaner being that you don't have to filter on the fronted) is you could setup a serverless function that runs both queries then filters them, and then returns just the expected results."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-10-05 13:06:09",
    "text": "And you just past filters through to the serverless function"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2022-10-05 13:07:34",
    "text": "Again not the cleanest approach but it solve the filtering on the FE problem..."
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2022-10-05 13:13:54",
    "text": "I think it also partially depends on how much data you have, and what sort of filtering experience you want to create. If there is not too much data, you could fetch it all up front, and filter on the client side with no page refreshes. If there is lots of data, you might want to move to server-side filtering to reduce how much data gets fetched, or use serverless functions as Carter proposed to re-fetch data."
  },
  {
    "poster": {
      "poster_name": "Caralyza",
      "poster_handle": "caralyza"
    },
    "time_stamp": "2022-10-05 19:12:33",
    "text": "Hi all, I'm looking to partner with a developer for a project. We have a client keen on building a store locator, powered with HubDB. PM me for more details. Thanks!"
  }
]