[
  {
    "poster": {
      "poster_name": "Kane Small",
      "poster_handle": "kane.small"
    },
    "time_stamp": "2019-05-21 03:07:12",
    "edited": {
      "time_stamp": "2019-05-21 03:17:24"
    },
    "text": "Hi all, having a few issues with the CORS policy for the following endpoint: `<https://developers.HubSpot.com/docs/methods/hubdb/v2/publish-draft-table>` - I'm attempting to _publish the draft table_ from a HubSpot-hosted page. The documentation suggests its possible (and it does work from Postman for example) but, if it doesn't, are there any workarounds? Thanks :slightly_smiling_face:",
    "reply_count": 17,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2019-05-21 07:49:43"
      },
      {
        "time_stamp": "2019-05-21 07:50:03"
      },
      {
        "time_stamp": "2019-05-21 07:50:26"
      },
      {
        "time_stamp": "2019-05-21 07:51:23"
      },
      {
        "time_stamp": "2019-05-21 07:51:36"
      },
      {
        "time_stamp": "2019-05-21 08:40:46"
      },
      {
        "time_stamp": "2019-05-21 08:41:28"
      },
      {
        "time_stamp": "2019-05-21 09:09:56"
      },
      {
        "time_stamp": "2019-05-21 09:10:12"
      },
      {
        "time_stamp": "2019-05-21 09:10:51"
      },
      {
        "time_stamp": "2019-05-21 09:11:38"
      },
      {
        "time_stamp": "2019-05-21 09:12:24"
      },
      {
        "time_stamp": "2019-05-21 09:12:50"
      },
      {
        "time_stamp": "2019-05-21 09:13:01"
      },
      {
        "time_stamp": "2019-05-21 09:13:15"
      },
      {
        "time_stamp": "2019-05-21 09:55:41"
      },
      {
        "time_stamp": "2019-05-21 09:55:55"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-05-21 07:49:43",
    "text": "the HubDB APIs only support CORS for GET endpoints, not for anything that can change the contents of the table or publish/unpublish"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-05-21 07:50:03",
    "text": "Can you say a bit more about why you want to have this from the front end, then maybe I can help with a work around"
  },
  {
    "poster": {
      "poster_name": "Kane Small",
      "poster_handle": "kane.small"
    },
    "time_stamp": "2019-05-21 07:50:26",
    "edited": {
      "time_stamp": "2019-05-21 07:52:07"
    },
    "text": "Hey again Zack, thanks for the reply - hope you're well :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Kane Small",
      "poster_handle": "kane.small"
    },
    "time_stamp": "2019-05-21 07:51:23",
    "edited": {
      "time_stamp": "2019-05-21 07:57:01"
    },
    "text": "Sure, I'm currently trying to get a custom front-end form working with HubDB - the content POSTS perfectly to the specified table but, as the content goes into a _draft_ table by default that `/publish` endpoint then needs calling afterward to push live. It'll be extremely frustrating to have the front-end interface for adding to the table but then have to manually hit the _Update_ button in the HubDB interface :sweat_smile:"
  },
  {
    "poster": {
      "poster_name": "Kane Small",
      "poster_handle": "kane.small"
    },
    "time_stamp": "2019-05-21 07:51:36",
    "edited": {
      "time_stamp": "2019-05-21 07:56:23"
    },
    "text": "is it possible to ignore the _draft_ stage completely? I assume not but, would be handy"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-05-21 08:40:46",
    "text": "Hey <@UHNBCT0Q1> sorry for the delay here i didn’t see your reply.  I’m actually surprised the POST request works from the front end, it’s not supposed to, otherwise any visitor could change the contents of your table"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-05-21 08:41:28",
    "text": "Given that it affects public content, an explicit publish stage is intentional not something we’re currently considering changing (thought I will definitely pass the ask along)"
  },
  {
    "poster": {
      "poster_name": "Kane Small",
      "poster_handle": "kane.small"
    },
    "time_stamp": "2019-05-21 09:09:56",
    "text": "Hi Zach, np"
  },
  {
    "poster": {
      "poster_name": "Kane Small",
      "poster_handle": "kane.small"
    },
    "time_stamp": "2019-05-21 09:10:12",
    "text": "What you're saying makes complete sense from a security-pov"
  },
  {
    "poster": {
      "poster_name": "Kane Small",
      "poster_handle": "kane.small"
    },
    "time_stamp": "2019-05-21 09:10:51",
    "text": "No matter how we try to workaround the issue, if the API endpoint needs a `hapikey` and we're passing it in the JS file, that will always be publicly visible and is a major security concern :sweat_smile:"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-05-21 09:11:38",
    "text": "Yes, we definitely do not want that :sweat:"
  },
  {
    "poster": {
      "poster_name": "Kane Small",
      "poster_handle": "kane.small"
    },
    "time_stamp": "2019-05-21 09:12:24",
    "text": "So in this particular case, there really isn't any way around it until HubSpot enable updating HubDB tables from the frontend"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-05-21 09:12:50",
    "text": "In this case, I think the best thing is to set up a small app using something like Google APP Engine or AWS elastic beanstalk to accept form submsissions and pass those along to the hubdb api servers side, or even allow for soem approval process depending on the use case"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-05-21 09:13:01",
    "text": "correct, there isn’t away around this"
  },
  {
    "poster": {
      "poster_name": "Kane Small",
      "poster_handle": "kane.small"
    },
    "time_stamp": "2019-05-21 09:13:15",
    "text": "yeah, that could work"
  },
  {
    "poster": {
      "poster_name": "Kane Small",
      "poster_handle": "kane.small"
    },
    "time_stamp": "2019-05-21 09:55:41",
    "text": "thanks anyway Zack"
  },
  {
    "poster": {
      "poster_name": "Zack Wolfson",
      "poster_handle": "zwolfson"
    },
    "time_stamp": "2019-05-21 09:55:55",
    "text": "No problem"
  }
]