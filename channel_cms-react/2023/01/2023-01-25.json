[
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 12:09:58",
    "text": "Are there any limitations around using React Context?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 12:10:11",
    "text": "I'm trying it for the first time and console.logging a value"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 12:10:17",
    "text": "it's undefined in the browser console"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 12:10:21",
    "edited": {
      "time_stamp": "2023-01-25 12:11:34"
    },
    "text": "but does show up in the terminal"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 12:43:00",
    "text": "yea, this does appear to be a limitation. I can't use Context from the top level of an island component"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 12:43:18",
    "text": "nesting does seem to work...trying now"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 13:04:31",
    "text": "any advice would be much appreciated...this is blocking me at the moment. I'm trying to refactor and realizing that some of my initial state passed in to the island is causing render issue down the line"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 13:04:47",
    "text": "I think I have to use context from within that island but not sure..."
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-25 13:15:18",
    "text": "Context help :thread:…",
    "reply_count": 34,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2023-01-25 13:17:28"
      },
      {
        "time_stamp": "2023-01-25 13:17:57"
      },
      {
        "time_stamp": "2023-01-25 13:19:26"
      },
      {
        "time_stamp": "2023-01-25 13:20:25"
      },
      {
        "time_stamp": "2023-01-25 13:20:40"
      },
      {
        "time_stamp": "2023-01-25 13:21:07"
      },
      {
        "time_stamp": "2023-01-25 13:21:34"
      },
      {
        "time_stamp": "2023-01-25 13:22:09"
      },
      {
        "time_stamp": "2023-01-25 13:22:30"
      },
      {
        "time_stamp": "2023-01-25 13:22:39"
      },
      {
        "time_stamp": "2023-01-25 13:23:00"
      },
      {
        "time_stamp": "2023-01-25 13:31:00"
      },
      {
        "time_stamp": "2023-01-25 13:31:34"
      },
      {
        "time_stamp": "2023-01-25 13:31:41"
      },
      {
        "time_stamp": "2023-01-25 13:31:44"
      },
      {
        "time_stamp": "2023-01-25 13:31:58"
      },
      {
        "time_stamp": "2023-01-25 13:33:01"
      },
      {
        "time_stamp": "2023-01-25 13:34:16"
      },
      {
        "time_stamp": "2023-01-25 13:34:31"
      },
      {
        "time_stamp": "2023-01-25 13:34:55"
      },
      {
        "time_stamp": "2023-01-25 13:35:19"
      },
      {
        "time_stamp": "2023-01-25 13:35:23"
      },
      {
        "time_stamp": "2023-01-25 13:37:13"
      },
      {
        "time_stamp": "2023-01-25 13:37:46"
      },
      {
        "time_stamp": "2023-01-25 13:38:08"
      },
      {
        "time_stamp": "2023-01-25 13:39:04"
      },
      {
        "time_stamp": "2023-01-25 13:39:12"
      },
      {
        "time_stamp": "2023-01-25 13:39:35"
      },
      {
        "time_stamp": "2023-01-25 13:39:40"
      },
      {
        "time_stamp": "2023-01-25 13:40:13"
      },
      {
        "time_stamp": "2023-01-25 13:40:19"
      },
      {
        "time_stamp": "2023-01-25 13:40:50"
      },
      {
        "time_stamp": "2023-01-25 14:15:10"
      },
      {
        "time_stamp": "2023-01-25 14:16:45"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-25 13:17:28",
    "text": "<@UDHT6N5SM> some questions:\n• Are you referring to context that is set on the server that is referred to in an island? Or merely a context created inside the island that is used in deeper parts of the same island?\n• Are you using the `useContext` hook or `someContext.Provider` API?"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-25 13:17:57",
    "edited": {
      "time_stamp": "2023-01-25 13:19:49"
    },
    "text": "Here is an example of something I have working on my machine right now…\n\n```// context.js\nimport { createContext } from 'react';\n\nexport const testContext = createContext({ initialDefaultContextValue: true });```\n```//TodoList.jsx\nimport { testContext } from '../context.js';\n\n...\n\nreturn (\n  &lt;testContext.Provider value={{ contextValue: 'around todo-list ' }}&gt;\n    &lt;div&gt;...&lt;/div&gt;\n  &lt;/testContext.Provider&gt;\n);```\n```import { useContext } from 'react';\nimport { testContext } from '../context.js';\n\nfunction Button(props) {\n  const contextValue = useContext(testContext);\n\n  return (\n    &lt;button&gt;\n      {props.children}\n      test context value: {JSON.stringify(contextValue)}\n    &lt;/button&gt;\n  );\n}\n\nexport default Button;```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 13:19:26",
    "text": "a context created inside the island that is used in deeper parts of the same island (in nested components)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 13:20:25",
    "text": "using  `SomeContext.Provider value=\"\"` in the island wrapping other components"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-25 13:20:40",
    "text": "So in ^ example I created a context in a shared file, I create the context “producer” wrapper in the todo list (top island component), and then refer to the value via `useContext` in the Button component deeper in"
  },
  {
    "text": "And the output looks like:",
    "time_stamp": "2023-01-25 13:21:07"
  },
  {
    "text": "",
    "time_stamp": "2023-01-25 13:21:34"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 13:22:09",
    "text": "let me try that example and see what happens"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 13:22:30",
    "text": "I was refactoring and ended up breaking everything...so I'm wondering if there's a concept I'm missing"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 13:22:39",
    "text": "I'll keep you updated, thanks for the help"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-25 13:23:00",
    "text": "Np, if you ever get that code more easily uploaded so I can look I’ll be glad to peek"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 13:31:00",
    "text": "cool, so your example works!"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 13:31:34",
    "text": "the difference is that I didn't have a separate context.js file"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 13:31:41",
    "text": "I was trying to export that function from the island"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 13:31:44",
    "text": "which I guess it not allowed?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 13:31:58",
    "text": "I'm going to try and tweak and see what happens"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-25 13:33:01",
    "edited": {
      "time_stamp": "2023-01-25 13:33:19"
    },
    "text": "Oh, hm… yeah. I think our internal magic that creates/wraps a new module when you do `import SomeIsland from '../some.js?island` may be breaking that named context export from that file"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-25 13:34:16",
    "edited": {
      "time_stamp": "2023-01-25 13:34:32"
    },
    "text": "(or something something cyclical dependencies… but I suspect it is the island named export hypothesis more)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 13:34:31",
    "text": "yea, that does seem to be the case but it's a DIFFERENT error which is also interesting. I might have been doing 2 things wrong..."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 13:34:55",
    "text": "the error if I try to export from the island is all about SSR stuff"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 13:35:19",
    "text": "but I should be able to export in the way you suggest just fine"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 13:35:23",
    "text": "thank you"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 13:37:13",
    "text": "might be worth adding as a \"rule\" somewhere. Most tutorials I've seen export directly from the same file that uses the .Provider"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-25 13:37:46",
    "edited": {
      "time_stamp": "2023-01-25 13:37:54"
    },
    "text": "Yup (or fixing it to just work… if that is doable on our side)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 13:38:08",
    "text": "100%, fixing would be waaaay better"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 13:39:04",
    "text": "I'm doing this \"joy of react\" course btw: <https://courses.joshwcomeau.com/>"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-25 13:39:12",
    "text": "How is it?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 13:39:35",
    "text": "really amazing, lots of examples, interactions, videos, etc."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 13:39:40",
    "text": "code along in embeds"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 13:40:13",
    "text": "I almost thought I knew what I was doing for a moment there..."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 13:40:19",
    "text": "but I need to finish the course I guess"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-25 13:40:50",
    "text": "You got this! :smile:"
  },
  {
    "subtype": "thread_broadcast",
    "time_stamp": "2023-01-25 14:15:10",
    "text": "Coming back to this, I’m pretty sure the little “magic” we add to `import … from './IslandComponent.jsx?island'` so that you get code splitting “for free” (with out having to do `React.lazy(() =&gt; import('path/to/IslandComponent.jsx'))` yourself) makes it so that  you can only export “default” from `IslandComponent.jsx` and nothing else.\n\nWhile technically you could work around this by importing from `IslandComponent.jsx` in one place and `IslandComponent.jsx?island` in another place, that will end up defeating the purpose, sending duplicate JavaScript to the browser, etc. So we’ll work on documentation and some errors/warnings in the dev server when we notice your island component exports other things than a default component."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 14:16:45",
    "text": "sounds good to me"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 18:30:48",
    "text": "will leaving in unused imports in components result in a build failing? (My build is failing but there are a lot of errors in a big blob)",
    "reply_count": 21,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2023-01-25 18:33:54"
      },
      {
        "time_stamp": "2023-01-25 18:34:28"
      },
      {
        "time_stamp": "2023-01-25 18:35:20"
      },
      {
        "time_stamp": "2023-01-25 18:38:06"
      },
      {
        "time_stamp": "2023-01-25 18:44:21"
      },
      {
        "time_stamp": "2023-01-25 18:44:54"
      },
      {
        "time_stamp": "2023-01-26 06:08:09"
      },
      {
        "time_stamp": "2023-01-26 06:08:40"
      },
      {
        "time_stamp": "2023-01-26 06:08:45"
      },
      {
        "time_stamp": "2023-01-26 06:08:53"
      },
      {
        "time_stamp": "2023-01-26 07:32:43"
      },
      {
        "time_stamp": "2023-01-26 07:32:53"
      },
      {
        "time_stamp": "2023-01-26 07:33:25"
      },
      {
        "time_stamp": "2023-01-26 07:40:43"
      },
      {
        "time_stamp": "2023-01-26 07:41:22"
      },
      {
        "time_stamp": "2023-01-26 07:42:03"
      },
      {
        "time_stamp": "2023-01-26 07:42:13"
      },
      {
        "time_stamp": "2023-01-26 07:43:20"
      },
      {
        "time_stamp": "2023-01-26 07:44:22"
      },
      {
        "time_stamp": "2023-01-26 07:44:53"
      },
      {
        "time_stamp": "2023-01-26 07:45:00"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-25 18:33:54",
    "text": "No"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 18:34:28",
    "text": "is `@heroicons/react/20/solid` not available on the server side? it should be right?"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 18:34:59",
    "text": "this is the main error:\n```[ERROR] Building JS Project with error message `/tmp/cms_d3lbW5/cms-js-build/customer-package/components/modules/App/fields.jsx defines some of the named exports for a module, but doesn't have all of them (needs fields, meta, and Component)```\n"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 18:35:06",
    "text": "I do have fields, meta, and component though"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 18:35:20",
    "text": "```✘ [ERROR] No matching export in \"resolveImage:@heroicons/react/20/solid\" for import \"ArrowPathIcon\"\n\n    customer-package/components/PageHeader.jsx:2:9:\n      2 │ import { ArrowPathIcon, BoltIcon } from '@heroicons/react/20/solid';```\n"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-25 18:38:06",
    "edited": {
      "time_stamp": "2023-01-25 18:38:19"
    },
    "text": "Ah. I think we noticed this when trying that package ourself. The details are complicated ESM, that package being authored awkwardly, vite, and rollup bla bla… but I think the short of it is that you’ll need to change the import slightly… <@UAYBXDG4U>  you have that handy? (sorry for the late ping)"
  },
  {
    "poster": {
      "poster_name": "Timothy Finley",
      "poster_handle": "tfinley"
    },
    "time_stamp": "2023-01-25 18:41:13",
    "text": "I think that ^ one is fine (if I remember correctly this is our system digging to find modules and it shouldn’t be complaining about fields.JSX if there is a index.js there already)"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 18:41:48",
    "text": "cool, I'll check back in tomorrow for that tweaked icon code from Byron"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 18:41:51",
    "text": "thanks"
  },
  {
    "poster": {
      "poster_name": "Byron Matto",
      "poster_handle": "bmatto"
    },
    "time_stamp": "2023-01-25 18:44:21",
    "text": "Sorry seeing this now - I’ll have that line bright and early!"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 18:44:54",
    "text": "<@UAYBXDG4U> no worries at all, thanks. It's late af"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2023-01-25 18:52:49",
    "text": "question for tomorrow, is there a way to see which packages are available on the server at this point? (I know in the future we'll have a better solution but curious)"
  }
]