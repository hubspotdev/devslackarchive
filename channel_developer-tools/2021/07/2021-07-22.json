[
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2021-07-22 06:41:51",
    "edited": {
      "time_stamp": "2021-07-22 06:42:05"
    },
    "text": "<@UJQNNKKHN> <@U028TQ0LKGT> do you think it would be difficult to incorporate into a HubSpot site? Could you use it for a HubSpot module for example?"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2021-07-22 07:02:13",
    "edited": {
      "time_stamp": "2021-07-22 07:12:13"
    },
    "text": "We use it for the design system that we use in our HubSpot build, which we’ve done mostly with React… the hard part was using HubSpot with React—incorporating Storybook was pretty easy after that."
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2021-07-22 07:03:13",
    "text": "We actually have a completely separate build for our design system, which exports a js library to NPM. Then we import that library of components into our HubSpot build. Doing it that way is nice if you want the design system to be available to several projects, but I think it would be even easier to simply run storybook on top of your HubSpot build."
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2021-07-22 07:08:55",
    "text": "If you’re not using React, Vue, etc, I believe there is now also a vanilla html flavor of Storybook, but not sure how you would set up the components for reuse in your project. Definitely worth exploring. Maybe that could actually be 1 good use for the local hubl server?"
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2021-07-22 07:13:31",
    "text": "Side note, we intentionally made the decision to not use any css in js in the design system, so it exports a global css file. That way we can use vanilla css in spots that we couldn’t use React."
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2021-07-22 07:30:01",
    "edited": {
      "time_stamp": "2021-07-22 07:39:07"
    },
    "text": "Storybook is probably best for testing lower level UI components like buttons (atoms/molecules). Out of the box, I think it would be difficult to test HubSpot modules… you would have to recreate the flow of content that gets piped into them with hubl from fields, meaning you’ll have to maintain that redundancy. One of the beautiful things about Storybook-React is that it gives you all this testing functionality without redundancy—i.e. when I create a React component with a set of props, it reuses those same props as Storybook “args”. Again maybe there’s a better solution I’m not aware of with the vanilla html version."
  },
  {
    "poster": {
      "poster_name": "Doug Osborne",
      "poster_handle": "doug.osborne"
    },
    "time_stamp": "2021-07-22 07:31:16",
    "text": "Hope that makes sense, I’m still working on my coffee."
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2021-07-22 08:11:55",
    "text": "Processing all that but I definitely appreciate the info"
  },
  {
    "poster": {
      "poster_name": "Andrey Kondratyuk",
      "poster_handle": "andrey"
    },
    "time_stamp": "2021-07-22 08:13:01",
    "edited": {
      "time_stamp": "2021-07-22 08:13:18"
    },
    "text": "I think for editable/drag+drop parts of our site the HubSpot approach is the best option possible. For other parts that don't need to be editable I can make HubSpot modules in to mini-react components"
  },
  {
    "poster": {
      "poster_name": "Jon McLaren",
      "poster_handle": "jon558"
    },
    "time_stamp": "2021-07-22 09:25:48",
    "text": "<https://HubSpotdev.slack.com/archives/CLJJXGTC0/p1626967127191700>"
  }
]