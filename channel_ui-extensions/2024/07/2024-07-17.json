[
  {
    "poster": {
      "poster_name": "Magnus Foldager",
      "poster_handle": "magnus"
    },
    "time_stamp": "2024-07-17 05:10:47",
    "text": "Hey <@U05KNCMAE7N>.\nThank you so much for this addition. It’s super useful and has allowed us to slim down our extensions a lot by saving text and turning it into icons instead.\n\nSome icons we’ve missed so far (I’ve used HeroIcons as reference):\n• <https://github.com/tailwindlabs/heroicons/blob/master/optimized/24/solid/cog-8-tooth.svg|“Settings” cog>\n• <https://github.com/tailwindlabs/heroicons/blob/master/optimized/24/solid/question-mark-circle.svg|Help/Support question mark>\n• <https://github.com/tailwindlabs/heroicons/blob/master/optimized/24/outline/beaker.svg|Beaker>\nI’ll add more if we run into more cases. I’ve asked my engineers and designers to let me know as well."
  },
  {
    "poster": {
      "poster_name": "John Carl Macasero",
      "poster_handle": "jcpmacasero"
    },
    "time_stamp": "2024-07-17 06:42:36",
    "text": "Any updates ? :disappointed:",
    "reply_count": 4,
    "reply_users_count": 3,
    "replies": [
      {
        "time_stamp": "2024-07-17 06:48:32"
      },
      {
        "time_stamp": "2024-07-17 07:02:13"
      },
      {
        "time_stamp": "2024-07-17 07:02:44"
      },
      {
        "time_stamp": "2024-08-01 13:48:14"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Seth Kaplan",
      "poster_handle": "skaplan"
    },
    "time_stamp": "2024-07-17 06:48:32",
    "text": "We're working on it my friend :pray:"
  },
  {
    "poster": {
      "poster_name": "Aanchal Sheth (HubSpot PM)",
      "poster_handle": "asheth"
    },
    "time_stamp": "2024-07-17 07:01:07",
    "text": "This is super helpful! Thank you so much for the feedback <@U02F2QPB4P8>, I will look into this."
  },
  {
    "poster": {
      "poster_name": "Aanchal Sheth (HubSpot PM)",
      "poster_handle": "asheth"
    },
    "time_stamp": "2024-07-17 07:02:13",
    "text": "<@U07AQDGAHEH> I will make sure to reach out to you once we have the copy to clipboard functionality:+1:"
  },
  {
    "poster": {
      "poster_name": "John Carl Macasero",
      "poster_handle": "jcpmacasero"
    },
    "time_stamp": "2024-07-17 07:02:44",
    "text": "thanks guys"
  },
  {
    "poster": {
      "poster_name": "Aanchal Sheth (HubSpot PM)",
      "poster_handle": "asheth"
    },
    "time_stamp": "2024-07-17 07:07:49",
    "text": "Also want to call out, (I'm sure you're doing this already): best practice is to set a `screenReaderText` , especially if the Icon is replacing text. This will help a lot with accessibility."
  },
  {
    "poster": {
      "poster_name": "Magnus Foldager",
      "poster_handle": "magnus"
    },
    "time_stamp": "2024-07-17 07:56:57",
    "text": "I don’t think we have anyone using Screen Readers in our HubSpot environment, but good to easily cover that before it becomes necessary. Thanks for the shout!"
  },
  {
    "poster": {
      "poster_name": "Chris Simoni",
      "poster_handle": "chris.s9606"
    },
    "time_stamp": "2024-07-17 09:23:21",
    "text": "Can we grab or expose the trace id without forcing the crash error message?",
    "reply_count": 3,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-07-17 09:26:22"
      },
      {
        "time_stamp": "2024-07-17 09:34:12"
      },
      {
        "time_stamp": "2024-07-17 11:25:05"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Danny Shekhtman",
      "poster_handle": "dshekhtman"
    },
    "time_stamp": "2024-07-17 09:26:22",
    "text": "Interesting idea. How would you like to use it?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-17 09:33:49",
    "text": "DATEINPUT"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-17 09:34:05",
    "text": "Does anyone want to cry with me about DateInput ?"
  },
  {
    "poster": {
      "poster_name": "Chris Simoni",
      "poster_handle": "chris.s9606"
    },
    "time_stamp": "2024-07-17 09:34:12",
    "text": "If I have an error that does not crash but prevents further interaction with the card, I would like to show the trace ID to the users so they can report it to me.\n\nI have an integration with an external system where our reps can create objects inside the external system using a HubSpot UI card so they do not need to leave HubSpot. This card also shows information from the other system for the object if it has already been created and allows further interaction with the created object.\n\nIf an interaction fails I would like to recover and not crash so the reps can still at minimum see the information being pulled from the external system, but also allow better ways to track these non fatal bugs."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-17 09:34:42",
    "text": "How can we have a “CRM EXTENSION” and it doesn’t read the way dates are stored in HubSpot ? Is there some sort of timeline that this will be rectified?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-17 09:34:59",
    "text": "ALSO - is this the wrong channel for this ?"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-17 09:37:10",
    "text": "```value\tObject\tThe value of the input. Must include the year, month, and day:{ year: number;``month: number;``date: number }\nyear: the four-digit year (e.g., 2023).\nmonth: starting at 0, the number of the month (e.g., 0 = January, 11 = December).\ndate: the number of the day (e.g., 1 = the first day of the month).```"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-17 09:38:25",
    "text": "also the documetnation for this reads incorrectly, that isn’t how you set up the date object\n```{ year: &lt;Number&gt;, month: &lt;Number&gt;, date: &lt;Number&gt; }```\nor something. Also “date” feels off."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-17 09:52:45",
    "text": "I could see using format as a way to use this —  I just see no reason to use a date object like that",
    "reply_count": 22,
    "reply_users_count": 4,
    "replies": [
      {
        "time_stamp": "2024-07-17 10:03:19"
      },
      {
        "time_stamp": "2024-07-17 10:30:31"
      },
      {
        "time_stamp": "2024-07-17 10:45:22"
      },
      {
        "time_stamp": "2024-07-17 10:48:42"
      },
      {
        "time_stamp": "2024-07-17 10:50:13"
      },
      {
        "time_stamp": "2024-07-17 10:52:51"
      },
      {
        "time_stamp": "2024-07-17 10:54:00"
      },
      {
        "time_stamp": "2024-07-17 10:54:51"
      },
      {
        "time_stamp": "2024-07-17 10:58:38"
      },
      {
        "time_stamp": "2024-07-17 12:25:54"
      },
      {
        "time_stamp": "2024-07-17 12:57:14"
      },
      {
        "time_stamp": "2024-07-17 12:58:03"
      },
      {
        "time_stamp": "2024-07-17 12:59:05"
      },
      {
        "time_stamp": "2024-07-17 12:59:11"
      },
      {
        "time_stamp": "2024-07-17 13:01:19"
      },
      {
        "time_stamp": "2024-07-17 13:01:47"
      },
      {
        "time_stamp": "2024-07-17 13:02:01"
      },
      {
        "time_stamp": "2024-07-17 13:06:14"
      },
      {
        "time_stamp": "2024-07-17 17:57:06"
      },
      {
        "time_stamp": "2024-07-17 17:57:14"
      },
      {
        "time_stamp": "2024-07-17 17:58:00"
      },
      {
        "time_stamp": "2024-07-17 20:52:31"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Aanchal Sheth (HubSpot PM)",
      "poster_handle": "asheth"
    },
    "time_stamp": "2024-07-17 10:03:19",
    "text": "Hi <@U25PYL3Q8>!\nYou've come to the right channel. Thank you for your feedback and I see that this is a pain point for you and other devs too. This is a problem we are aware of but don't have a timeline just yet.\n\nOur recommendation has been to write your own formatting function (maybe using native JS dates or a date library like moment/date-fns), till we come up with a better solution. Will that work for now? Let me know if you have other thoughts"
  },
  {
    "poster": {
      "poster_name": "Aanchal Sheth (HubSpot PM)",
      "poster_handle": "asheth"
    },
    "time_stamp": "2024-07-17 10:04:08",
    "text": "&gt; but good to easily cover that before it becomes necessary.\n:100::100:"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-07-17 10:30:31",
    "text": "This is one of the biggest pains when developing CRM Cards."
  },
  {
    "poster": {
      "poster_name": "Aanchal Sheth (HubSpot PM)",
      "poster_handle": "asheth"
    },
    "time_stamp": "2024-07-17 10:45:22",
    "text": "<@U01QVR44MEY> Can you tell me more please? I remember you'd suggested <https://HubSpotdev.slack.com/archives/C05R599UA12/p1702050975981969?thread_ts=1702050681.431329&amp;cid=C05R599UA12|this earlier>. Is this the workaround you're using and why is it causing pain? I'm trying to get more context around how frequently this is a problem. All details are helpful:pray:"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-07-17 10:48:42",
    "text": "<https://HubSpotdev.slack.com/archives/C05R599UA12/p1702050681431329>\n\nBasically EPOC Millisecond timestamps are the best way to work with date and datetime fields in HubSpot (at times it the only way), this component doesn't take milli as an input and it doesn't output as a milli"
  },
  {
    "text": "",
    "time_stamp": "2024-07-17 10:50:13"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-17 10:52:51",
    "text": "I gotta do this on the api call to hs to get a birthdate\n```const date = new Date(Number(birthdate))\n\n  return {\n    year: date.getUTCFullYear(),\n    month: date.getUTCMonth(),\n    date: date.getUTCDate()\n  }```\nAnd then I have to do this to update it back to the api\n```const { year, month, date } = stupidDateObject\nconst adjustedDate = new Date(Date.UTC(year, month, date))```"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-17 10:54:00",
    "text": "I also understand the workaround is writing my own formatting function — but how was this even conceived ? I know you likely don’t know the answer to that I just really don’t want to go back through git history"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-17 10:54:51",
    "text": "I’m just mentioning this here because I haven’t mentioned it here before <@U05KNCMAE7N> —"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-17 10:58:38",
    "text": "Can I advise one thing for the solution? Your current solution is to respond to someone when they complain. I think HubSpot can be more proactive and put in a note in the documentation on how to convert it and and example.\n\nThe example library uses this formatting and doesn’t bother with it. The documentation doesn’t cover it."
  },
  {
    "poster": {
      "poster_name": "Danny Shekhtman",
      "poster_handle": "dshekhtman"
    },
    "time_stamp": "2024-07-17 11:25:05",
    "edited": {
      "time_stamp": "2024-07-18 13:07:11"
    },
    "text": "Thanks for that! Sounds very reasonable. I've passed this along to the relevant folks internally and we'll discuss and get back to you."
  },
  {
    "poster": {
      "poster_name": "Aanchal Sheth (HubSpot PM)",
      "poster_handle": "asheth"
    },
    "time_stamp": "2024-07-17 12:25:54",
    "text": "That is very fair. Thank you both for your honesty and for taking out time to flesh out the details here. This is definitely something on our plate that we wish to fix. I appreciate the advice and will keep y'all in the loop with what we do next :slightly_smiling_face:"
  },
  {
    "poster": {
      "poster_name": "Chris Simoni",
      "poster_handle": "chris.s9606"
    },
    "time_stamp": "2024-07-17 12:57:14",
    "text": "Is JS `Date` technically a DateTime while the HubSpot date input only deals with dates? If anything should be done here, there should just be utility functions added to the HubSpot UI SDK for conversion between JS `Date` to HubSpot DateInput format."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-07-17 12:58:03",
    "edited": {
      "time_stamp": "2024-07-17 12:59:00"
    },
    "text": "why wouldn't HubSpot components just work with HubSpot's own standard format though.."
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-17 12:59:05",
    "text": "I have birthdate as a DATE property in HubSpot — it uses datetime format in the api"
  },
  {
    "poster": {
      "poster_name": "Chris Simoni",
      "poster_handle": "chris.s9606"
    },
    "time_stamp": "2024-07-17 12:59:11",
    "text": "AKA I have integrations that only deal with dates on the HubSpot side but convert to DateTime in our own backend. The way HubSpot date inputs work actually play nicely with that because all I need is `formattedDate` property or w/e from HubSpot input."
  },
  {
    "poster": {
      "poster_name": "Chris Simoni",
      "poster_handle": "chris.s9606"
    },
    "time_stamp": "2024-07-17 13:01:19",
    "text": "I think APIs returning serialized JS date objects makes sense. If you deserialize in a backend that knows how to deserialize dates you would get your workable DateTime out."
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-07-17 13:01:47",
    "text": "I agree with this"
  },
  {
    "poster": {
      "poster_name": "Chris Simoni",
      "poster_handle": "chris.s9606"
    },
    "time_stamp": "2024-07-17 13:02:01",
    "text": "DateInput doesnt need to be time aware and depending on use case the time portion may be more hinderance anyways."
  },
  {
    "poster": {
      "poster_name": "Chris Simoni",
      "poster_handle": "chris.s9606"
    },
    "time_stamp": "2024-07-17 13:06:14",
    "text": "For example, by removing the time portion completely they remove our need to worry about time zones or anything else that may come with a full date object."
  },
  {
    "text": "Hi all! Wondering if anyone has an opinion on a more efficient/creative approach to the project I've been working on. This is a custom card that displays line items that have been added to a deal, which allows the sales member to edit line properties inside a custom panel component. The panel then displays a `CrmPropertyList` component for the line they chose via the single line item button, or all lines  with the Edit All Lines button. I know a lot of this functionality can be handled with the built in line editor, but this card also runs quality checks and calculates deal tax automatically, whenever a line is modified. I've gotten feedback from the BETA group that there are too many clicks (I 100% agree). Does anyone know if HS has plans that would allow edits directly inside a a table component? Or make some edits to the `CrmPropertyList` so that it could be displayed in some sort of header/cell arrangement?",
    "time_stamp": "2024-07-17 13:54:43",
    "edited": {
      "time_stamp": "2024-07-17 13:57:35"
    },
    "reply_count": 8,
    "reply_users_count": 2,
    "replies": [
      {
        "time_stamp": "2024-07-17 14:08:30"
      },
      {
        "time_stamp": "2024-07-17 14:17:03"
      },
      {
        "time_stamp": "2024-07-17 14:21:18"
      },
      {
        "time_stamp": "2024-07-17 14:23:19"
      },
      {
        "time_stamp": "2024-07-17 14:24:42"
      },
      {
        "time_stamp": "2024-07-17 14:25:24"
      },
      {
        "time_stamp": "2024-07-17 14:26:14"
      },
      {
        "time_stamp": "2024-07-17 14:29:16"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-07-17 14:08:30",
    "text": "Is that a custom table? If so you can definitely drop in a Input components on each of the cells and edit directly from there. That's how most of my tables function"
  },
  {
    "poster": {
      "poster_name": "Annie Short",
      "poster_handle": "annie.short"
    },
    "time_stamp": "2024-07-17 14:17:03",
    "text": "Did not realize we could do that lol"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-07-17 14:21:18",
    "text": "yeah it's definitely a handy thing, you obviously just have to connect those inputs to a serverless function to update those line item properties though."
  },
  {
    "poster": {
      "poster_name": "Annie Short",
      "poster_handle": "annie.short"
    },
    "time_stamp": "2024-07-17 14:23:19",
    "text": "do you have it trigger the api after every input or do you do batch?"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-07-17 14:24:42",
    "text": "I personally use debounce so that you don't have to do it on every keystroke but after a particular timeframe of edits"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-07-17 14:25:24",
    "text": "but a save button also works great!"
  },
  {
    "poster": {
      "poster_name": "Annie Short",
      "poster_handle": "annie.short"
    },
    "time_stamp": "2024-07-17 14:26:14",
    "text": "gotcha! thanks so much, this will definitely save clicks!"
  },
  {
    "poster": {
      "poster_name": "Carter McKay - Level 17",
      "poster_handle": "carter"
    },
    "time_stamp": "2024-07-17 14:29:16",
    "text": "100%"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-17 17:57:06",
    "text": "Time Zones with Dates really are somethign with locale awhen we take dates from HS in web apps we build"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-17 17:57:14",
    "text": "we always have some sort of issue with this"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-17 17:58:00",
    "text": "TBH dates are likely my worst thing that I struggle with without moment or something similar (I dunno if it is called that)"
  },
  {
    "poster": {
      "poster_name": "Nicholas Decker - Level -22",
      "poster_handle": "nickdeckerdevs"
    },
    "time_stamp": "2024-07-17 20:52:31",
    "text": "`Date.UTC(year, month, date)`\nHA. Told you I was horrible with Dates. That is really want I meant"
  }
]