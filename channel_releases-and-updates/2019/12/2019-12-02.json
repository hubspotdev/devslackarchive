[
  {
    "text": "Hello devs!\n\nIn open beta, we now support more file types in the Design Manager file tree. Using the local development tooling, developers can upload `.txt`, `.md`, `.jpg`, `.jpeg`, `.png`, `.gif`, `.map`, `.ttf`, `.woff`, `.woff2` , `.json` and `.svg` files to the Design Manager, supporting collocation of all developer assets.\n\nDevelopers can reference these files using the `get_asset_url` HubL function (ex. `{{ get_asset_url('../images/team-image.png') }}`.\n\nGetting started with this functionality is as simple as including these file types in the project you are working on while using the local development tooling: <https://designers.HubSpot.com/docs/tools/local-development>. You will need to upgrade to the latest version of the CMS CLI `1.0.2` - run `npm install -g @HubSpot/cms-cli` to update!\n\nNote: These files are not accessible via the file pickers throughout the app, so any assets content creators should be able to select should still be uploaded to the File Manager.",
    "time_stamp": "2019-12-02 09:22:36",
    "edited": {
      "time_stamp": "2019-12-02 09:37:29"
    },
    "reply_count": 20,
    "reply_users_count": 6,
    "replies": [
      {
        "time_stamp": "2019-12-02 09:25:49"
      },
      {
        "time_stamp": "2019-12-02 09:35:02"
      },
      {
        "time_stamp": "2019-12-02 09:54:04"
      },
      {
        "time_stamp": "2019-12-02 10:09:36"
      },
      {
        "time_stamp": "2019-12-02 10:12:36"
      },
      {
        "time_stamp": "2019-12-02 10:12:54"
      },
      {
        "time_stamp": "2019-12-02 10:13:18"
      },
      {
        "time_stamp": "2019-12-02 10:13:44"
      },
      {
        "time_stamp": "2019-12-02 10:14:27"
      },
      {
        "time_stamp": "2019-12-02 10:14:30"
      },
      {
        "time_stamp": "2019-12-02 10:18:06"
      },
      {
        "time_stamp": "2019-12-02 10:18:21"
      },
      {
        "time_stamp": "2019-12-02 10:20:53"
      },
      {
        "time_stamp": "2019-12-02 10:22:25"
      },
      {
        "time_stamp": "2019-12-02 10:23:12"
      },
      {
        "time_stamp": "2019-12-02 10:38:51"
      },
      {
        "time_stamp": "2019-12-02 14:25:39"
      },
      {
        "time_stamp": "2019-12-02 14:26:05"
      },
      {
        "time_stamp": "2019-12-02 15:57:34"
      },
      {
        "time_stamp": "2019-12-04 15:46:53"
      }
    ]
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2019-12-02 09:25:49",
    "text": "At the moment, these additional file types can not be created/uploaded through the Design Manager user interface (only through the local development tooling) - we do plan to introduce this functionality."
  },
  {
    "poster": {
      "poster_name": "Dana (Holdt) Pesendorfer",
      "poster_handle": "dana.holdt"
    },
    "time_stamp": "2019-12-02 09:35:02",
    "edited": {
      "time_stamp": "2019-12-02 09:35:16"
    },
    "text": "CC <@UD53A9UUR> happy day!"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-12-02 09:54:04",
    "text": "<@UPQ06J7RS> here ya go bud!"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-12-02 10:09:36",
    "text": "that’s awesome, just curious, what is the use case for `.md` files?"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2019-12-02 10:12:36",
    "text": "<@U3T21PDBK> one use case is to support having a README.md, explaining/talking about a project or folder within a project."
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-12-02 10:12:54",
    "text": "yeah baby!"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-12-02 10:13:18",
    "text": "Built in instructions"
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2019-12-02 10:13:44",
    "edited": {
      "time_stamp": "2019-12-02 10:13:50"
    },
    "text": "Like <https://github.com/HubSpot/cms-theme-boilerplate/blob/master/src/modules/README.md> :smile_cat:"
  },
  {
    "poster": {
      "poster_name": "John Fuller - Blames Bugs",
      "poster_handle": "john.ascendinbound"
    },
    "time_stamp": "2019-12-02 10:14:27",
    "text": "sweet"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-12-02 10:14:30",
    "text": "curious how that will be viewed. or is it only for use in git?"
  },
  {
    "text": "At the moment, the raw md file will simply exist, in an un-editable state.",
    "time_stamp": "2019-12-02 10:18:06"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-12-02 10:18:21",
    "text": "aw….."
  },
  {
    "poster": {
      "poster_name": "William Spiro",
      "poster_handle": "wspiro"
    },
    "time_stamp": "2019-12-02 10:20:53",
    "text": "We have some ideas for how md files could be rendered, but would love to hear from you all how you wish it would work :smile_cat:"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-12-02 10:22:25",
    "text": "I would love to see project docs rendered in a readable way and the have a like a setting to edit them in the editor ala Github or Bitbucket"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-12-02 10:23:12",
    "text": "Not sure about anyone else"
  },
  {
    "poster": {
      "poster_name": "Ian McIlwain",
      "poster_handle": "ian-mcilwain"
    },
    "time_stamp": "2019-12-02 10:38:51",
    "text": "Excited about SVGs.  To this point, I’ve been putting them in HTML partials.  This is going to be much cleaner and mean less warnings"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-12-02 14:25:39",
    "text": "will we be able to refrerence svg sprites?"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-12-02 14:26:05",
    "text": "like this `URLTOSPRITE.svg#ACTUALIMAGE`"
  },
  {
    "poster": {
      "poster_name": "Chad Pierce",
      "poster_handle": "chadbluleadz"
    },
    "time_stamp": "2019-12-02 15:57:34",
    "text": "ill test it later. thanks"
  }
]